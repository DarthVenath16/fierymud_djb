/***************************************************************************
 *  File: races.h                                         Part of FieryMUD *
 *  Usage: header file for race structures and constants                   *
 *                                                                         *
 *  All rights reserved.  See license.doc for complete information.        *
 *                                                                         *
 *  FieryMUD Copyright (C) 1998, 1999, 2000 by the Fiery Consortium        *
 *  FieryMUD is based on CircleMUD Copyright (C) 1993, 94 by the Trustees  *
 *  of the Johns Hopkins University                                        *
 *  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
 ***************************************************************************/

#pragma once

#include "composition.hpp"
#include "lifeforce.hpp"
#include "structs.hpp"
#include "sysdep.hpp"

/* The race of an individual is stored as a byte in struct char_player_data. */

/* The races */
#define RACE_UNDEFINED -1
#define RACE_HUMAN 0
#define RACE_ELF 1
#define RACE_GNOME 2
#define RACE_DWARF 3
#define RACE_TROLL 4
#define RACE_DROW 5
#define RACE_DUERGAR 6
#define RACE_OGRE 7
#define RACE_ORC 8
#define RACE_HALF_ELF 9
#define RACE_BARBARIAN 10
#define RACE_HALFLING 11
#define RACE_PLANT 12
#define RACE_HUMANOID 13
#define RACE_ANIMAL 14
#define RACE_DRAGON_GENERAL 15
#define RACE_GIANT 16
#define RACE_OTHER 17
#define RACE_GOBLIN 18
#define RACE_DEMON 19
#define RACE_BROWNIE 20
#define RACE_DRAGON_FIRE 21
#define RACE_DRAGON_FROST 22
#define RACE_DRAGON_ACID 23
#define RACE_DRAGON_LIGHTNING 24
#define RACE_DRAGON_GAS 25
#define RACE_DRAGONBORN_FIRE 26
#define RACE_DRAGONBORN_FROST 27
#define RACE_DRAGONBORN_ACID 28
#define RACE_DRAGONBORN_LIGHTNING 29
#define RACE_DRAGONBORN_GAS 30
#define RACE_SVERFNEBLIN 31
#define RACE_FAERIE_SEELIE 32
#define RACE_FAERIE_UNSEELIE 33
#define RACE_NYMPH 34

/* Make sure to update this number if you add a race. */
#define NUM_RACES 35

#define DEFAULT_RACE RACE_OTHER

/* Race-aligns */
#define RACE_ALIGN_UNKNOWN -1
#define RACE_ALIGN_GOOD 0
#define RACE_ALIGN_EVIL 1

#define NUM_RACE_SKILLS 15

/* This defines the basic attributes of a race. */

struct RaceDef {
    const char *name;        /* The basic name, uncapitalized and uncolored. */
    const char *names;       /* Additional names for searching purposes. */
    const char *displayname; /* The name with colors and strategic capitalization. */
    const char *fullname;    /* The long name with colors and capitalization */
    const char *plainname;   /* The name with capitalization but no colors. */
    bool playable;           /* Available to mortals? */
    bool humanoid;           /* Is it humanoid? */
    int racealign;           /* Is it considered a good or evil race? */
    int def_size;            /* The default size for a member of this race. */
    int def_align;           /* Default alignment */
    int bonus_damroll;
    int bonus_hitroll;
    int def_lifeforce;   /* Default life force */
    int def_composition; /* Default composition */
    int mweight_lo;      /* Minimum weight (male) */
    int mweight_hi;      /* Maximum weight (male) */
    int mheight_lo;      /* Minimum height (male) */
    int mheight_hi;      /* Maximum height (male) */
    int fweight_lo;      /* Minimum weight (female) */
    int fweight_hi;      /* Maximum weight (female) */
    int fheight_lo;      /* Minimum height (female) */
    int fheight_hi;      /* Maximum height (female) */

    int attrib_scales[6];

    /* The following values primarily adjust stats on mob prototypes.  See db.c.
     */
    int exp_factor;
    int hit_factor;
    int hd_factor;
    int dice_factor;
    int copper_factor;
    int ac_factor;

    /* These may be NULL so that the default values of "enters" and "leaves"
     * will be used. */
    const char *enter_verb;
    const char *leave_verb;

    /*
     * The following data members should come last in the struct so
     * that they can be omitted when races are being defined.  Their
     * values are filled in init_races at runtime.
     */

    /* List of permanent effect flags */
    flagvector effect_flags[FLAGVECTOR_SIZE(NUM_EFF_FLAGS)];
    struct {
        int skill;             /* Skill number */
        int proficiency;       /* Default proficiency (can be ROLL_SKILL_PROF) */
    } skills[NUM_RACE_SKILLS]; /* List of racial skills */
};

static struct RaceDef races[NUM_RACES] = {
    /* HUMAN */
    {"human",
     "human",
     "&6Human&0",
     "&6Human&0",
     "Human",
     true,
     true,
     RACE_ALIGN_GOOD,
     SIZE_MEDIUM,
     0,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     120,
     180,
     60,
     76,
     95,
     150,
     60,
     70,
     {76, 76, 76, 76, 76, 76},
     100,
     100,
     100,
     100,
     75,
     100,
     nullptr,
     nullptr,
     {0, 0}},

    /* ELF */
    {"elf",
     "elf",
     "&8Elf&0",
     "&8Elf&0",
     "Elf",
     true,
     true,
     RACE_ALIGN_GOOD,
     SIZE_MEDIUM,
     1000,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     90,
     160,
     60,
     70,
     90,
     160,
     59,
     68,
     {64, 80, 88, 86, 64, 78},
     100,
     100,
     100,
     100,
     75,
     100,
     nullptr,
     nullptr,
     {0, 0}},
    /* GNOME */
    {"gnome",
     "gnome",
     "&1&d&bGnome&0",
     "&1&d&bGnome&0",
     "Gnome",
     true,
     true,
     RACE_ALIGN_GOOD,
     SIZE_SMALL,
     1000,
     2,
     4,
     LIFE_LIFE,
     COMP_FLESH,
     40,
     90,
     26,
     38,
     40,
     90,
     26,
     38,
     {64, 76, 88, 84, 68, 80},
     100,
     100,
     100,
     100,
     75,
     100,
     nullptr,
     nullptr,
     {0, 0}},
    /* DWARF */
    {"dwarf",
     "dwarf mountain",
     "&3Dwarf&0",
     "&3Mountain Dwarf&0",
     "Dwarf",
     true,
     true,
     RACE_ALIGN_GOOD,
     SIZE_MEDIUM,
     1000,
     4,
     5,
     LIFE_LIFE,
     COMP_FLESH,
     170,
     200,
     38,
     50,
     150,
     190,
     38,
     50,
     {84, 76, 64, 86, 84, 68},
     100,
     100,
     100,
     100,
     75,
     100,
     nullptr,
     nullptr,
     {0, 0}},
    /* TROLL */
    {"troll",
     "swamp troll",
     "&2&dTroll&0",
     "&2&dSwamp Troll&0",
     "Troll",
     true,
     true,
     RACE_ALIGN_EVIL,
     SIZE_LARGE,
     -1000,
     4,
     4,
     LIFE_LIFE,
     COMP_FLESH,
     130,
     290,
     72,
     90,
     130,
     290,
     72,
     90,
     {80, 72, 56, 56, 100, 64},
     100,
     130,
     110,
     110,
     75,
     100,
     "prowls in",
     "prowls",
     {0, 0}},
    /* DROW */
    {"drow",
     "drow",
     "&5Drow&0",
     "&5Drow&0",
     "Drow",
     true,
     true,
     RACE_ALIGN_EVIL,
     SIZE_MEDIUM,
     -1000,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     90,
     160,
     60,
     70,
     90,
     160,
     60,
     70,
     {64, 80, 88, 80, 64, 72},
     100,
     100,
     100,
     100,
     75,
     100,
     nullptr,
     nullptr,
     {0, 0}},
    /* DUERGAR */
    {"duergar",
     "duergar",
     "&1Duergar&0",
     "&1Duergar&0",
     "Duergar",
     true,
     true,
     RACE_ALIGN_EVIL,
     SIZE_MEDIUM,
     -1000,
     4,
     5,
     LIFE_LIFE,
     COMP_FLESH,
     170,
     200,
     38,
     50,
     150,
     190,
     38,
     50,
     {84, 76, 68, 72, 84, 64},
     100,
     100,
     100,
     100,
     75,
     100,
     "skulks in",
     "skulks",
     {0, 0}},
    /* OGRE */
    {"ogre",
     "ogre",
     "&4Ogre&0",
     "&4Ogre&0",
     "Ogre",
     true,
     true,
     RACE_ALIGN_EVIL,
     SIZE_LARGE,
     -1000,
     5,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     390,
     530,
     93,
     119,
     390,
     530,
     93,
     119,
     {100, 64, 52, 60, 80, 60},
     100,
     110,
     100,
     120,
     75,
     85,
     "lumbers in",
     "lumbers",
     {0, 0}},
    /* ORC */
    {"orc",
     "orc",
     "&9&bOrc&0",
     "&9&bOrc&0",
     "Orc",
     true,
     true,
     RACE_ALIGN_EVIL,
     SIZE_MEDIUM,
     -1000,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     90,
     150,
     58,
     68,
     90,
     150,
     58,
     68,
     {80, 72, 72, 72, 76, 68},
     100,
     100,
     100,
     100,
     75,
     100,
     nullptr,
     nullptr,
     {0, 0}},
    /* HALF-ELF */
    {"half-elf",
     "half-elf half elf",
     "&6&bHalf-&0&6&dElf&0",
     "&6&bHalf-&0&6&dElf&0",
     "Half-Elf",
     true,
     true,
     RACE_ALIGN_GOOD,
     SIZE_MEDIUM,
     1000,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     100,
     170,
     60,
     76,
     94,
     155,
     60,
     70,
     {68, 76, 76, 76, 68, 84},
     100,
     100,
     100,
     100,
     75,
     100,
     nullptr,
     nullptr,
     {0, 0}},
    /* BARBARIAN */
    {"barbarian",
     "barbarian",
     "&4Barbarian&0",
     "&4Barbarian&0",
     "Barbarian",
     true,
     true,
     RACE_ALIGN_GOOD,
     SIZE_LARGE,
     0,
     5,
     4,
     LIFE_LIFE,
     COMP_FLESH,
     170,
     260,
     69,
     88,
     130,
     210,
     69,
     80,
     {88, 68, 60, 60, 88, 64},
     100,
     100,
     100,
     100,
     75,
     100,
     nullptr,
     nullptr,
     {0, 0}},
    /* HALFLING */
    {"halfling",
     "halfling",
     "&3&dHalfling&0",
     "&3&dHalfling&0",
     "Halfling",
     true,
     true,
     RACE_ALIGN_GOOD,
     SIZE_SMALL,
     1000,
     3,
     6,
     LIFE_LIFE,
     COMP_FLESH,
     90,
     160,
     35,
     42,
     90,
     160,
     35,
     42,
     {68, 96, 80, 80, 64, 76},
     100,
     100,
     100,
     100,
     75,
     100,
     nullptr,
     nullptr,
     {0, 0}},
    /* PLANT */
    {"plant",
     "plant",
     "&2Plant&0",
     "&2Plant&0",
     "Plant",
     false,
     false,
     RACE_ALIGN_GOOD,
     SIZE_MEDIUM,
     0,
     3,
     3,
     LIFE_LIFE,
     COMP_PLANT,
     80,
     180,
     40,
     96,
     80,
     180,
     40,
     96,
     {72, 52, 32, 72, 100, 72},
     100,
     100,
     100,
     100,
     0,
     120,
     nullptr,
     nullptr,
     {0, 0}},
    /* HUMANOID */
    {"humanoid",
     "humanoid",
     "&7Humanoid&0",
     "&7Humanoid&0",
     "Humanoid",
     false,
     true,
     RACE_ALIGN_GOOD,
     SIZE_MEDIUM,
     0,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     120,
     180,
     60,
     76,
     95,
     150,
     60,
     70,
     {72, 72, 72, 72, 72, 72},
     100,
     100,
     100,
     100,
     100,
     60,
     nullptr,
     nullptr,
     {0, 0}},
    /* ANIMAL */
    {"animal",
     "animal",
     "&2Animal&0",
     "&2Animal&0",
     "Animal",
     false,
     false,
     RACE_ALIGN_GOOD,
     SIZE_MEDIUM,
     0,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     120,
     180,
     60,
     76,
     95,
     150,
     60,
     70,
     {72, 72, 72, 72, 72, 72},
     100,
     100,
     100,
     100,
     0,
     65,
     nullptr,
     nullptr,
     {0, 0}},
    /*
    /* DRAGON
    {"dragon",
     "dragon",
     "&1&bDragon&0",
     "&1&bDragon&0",
     "Dragon",
     false,
     false,
     RACE_ALIGN_GOOD,
     SIZE_GARGANTUAN,
     0,
     10,
     4,
     LIFE_LIFE,
     COMP_FLESH,
     16000,
     64000,
     768,
     1536,
     16000,
     64000,
     768,
     1536,
     {100, 72, 100, 72, 72, 100},
     130,
     130,
     140,
     140,
     500,
     140,
     "stomps in",
     "stomps",
     {0, 0}},
     */
    /* DRAGON - GENERAL */
    {"dragon_general",
     "dragon general",
     "&5&bDragon&0",
     "&5&bDragon&0",
     "General Dragon",
     false,
     false,
     RACE_ALIGN_GOOD,
     SIZE_GARGANTUAN,
     0,
     10,
     4,
     LIFE_LIFE,
     COMP_FLESH,
     16000,
     64000,
     768,
     1536,
     16000,
     64000,
     768,
     1536,
     {100, 72, 100, 72, 72, 100},
     130,
     130,
     140,
     140,
     500,
     140,
     "stomps in",
     "stomps",
     {0, 0}},
    /* GIANT */
    {"giant",
     "giant",
     "&2&bGiant&0",
     "&2&bGiant&0",
     "Giant",
     false,
     true,
     RACE_ALIGN_GOOD,
     SIZE_HUGE,
     0,
     7,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     1000,
     4000,
     196,
     384,
     1000,
     4000,
     196,
     384,
     {100, 72, 44, 64, 80, 72},
     110,
     120,
     120,
     100,
     125,
     120,
     "lumbers in",
     "lumbers",
     {0, 0}},
    /* OTHER */
    {"other",
     "other",
     "&4&bOther&0",
     "&4&bOther&0",
     "Other",
     false,
     false,
     RACE_ALIGN_GOOD,
     SIZE_MEDIUM,
     0,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     120,
     180,
     60,
     76,
     95,
     150,
     60,
     70,
     {72, 72, 72, 72, 72, 72},
     80,
     110,
     120,
     80,
     75,
     105,
     nullptr,
     nullptr,
     {0, 0}},
    /* GOBLIN */
    {"goblin",
     "goblin",
     "&4&bGoblin&0",
     "&4&bGoblin&0",
     "Goblin",
     false,
     true,
     RACE_ALIGN_EVIL,
     SIZE_SMALL,
     -500,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     60,
     90,
     30,
     38,
     55,
     80,
     30,
     35,
     {76, 72, 64, 72, 84, 64},
     60,
     60,
     60,
     60,
     75,
     90,
     nullptr,
     nullptr,
     {0, 0}},
    /* DEMON */
    {"demon",
     "demon",
     "&1&bDemon&0",
     "&1&bDemon&0",
     "Demon",
     false,
     true,
     RACE_ALIGN_EVIL,
     SIZE_LARGE,
     -1000,
     6,
     4,
     LIFE_DEMONIC,
     COMP_FLESH,
     130,
     290,
     72,
     90,
     130,
     290,
     72,
     90,
     {80, 100, 68, 68, 58, 58},
     120,
     120,
     120,
     120,
     150,
     120,
     "stalks in",
     "stalks",
     {0, 0}},
    /* BROWNIE */
    {"brownie",
     "brownie",
     "&3Brownie&0",
     "&3Brownie&0",
     "Brownie",
     false,
     true,
     RACE_ALIGN_GOOD,
     SIZE_SMALL,
     500,
     1,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     20,
     30,
     20,
     30,
     20,
     30,
     20,
     30,
     {60, 80, 60, 78, 70, 72},
     100,
     100,
     100,
     100,
     75,
     100,
     nullptr,
     nullptr,
     {0, 0}},
    /* DRAGON - FIRE */
    {"dragon_fire",
     "dragon fire",
     "&1&bDragon&0",
     "&1&bDragon&0",
     "Fire Dragon",
     false,
     false,
     RACE_ALIGN_GOOD,
     SIZE_GARGANTUAN,
     0,
     10,
     4,
     LIFE_LIFE,
     COMP_FLESH,
     16000,
     64000,
     768,
     1536,
     16000,
     64000,
     768,
     1536,
     {100, 72, 100, 72, 72, 100},
     130,
     130,
     140,
     140,
     500,
     140,
     "stomps in",
     "stomps",
     {0, 0}},
    /* DRAGON - ICE */
    {"dragon_frost",
     "dragon frost",
     "&7&bDragon&0",
     "&7&bDragon&0",
     "Frost Dragon",
     false,
     false,
     RACE_ALIGN_GOOD,
     SIZE_GARGANTUAN,
     0,
     10,
     4,
     LIFE_LIFE,
     COMP_FLESH,
     16000,
     64000,
     768,
     1536,
     16000,
     64000,
     768,
     1536,
     {100, 72, 100, 72, 72, 100},
     130,
     130,
     140,
     140,
     500,
     140,
     "stomps in",
     "stomps",
     {0, 0}},
    /* DRAGON - ACID */
    {"dragon_acid",
     "dragon acid",
     "&9&bDragon&0",
     "&9&bDragon&0",
     "Acid Dragon",
     false,
     false,
     RACE_ALIGN_GOOD,
     SIZE_GARGANTUAN,
     0,
     10,
     4,
     LIFE_LIFE,
     COMP_FLESH,
     16000,
     64000,
     768,
     1536,
     16000,
     64000,
     768,
     1536,
     {100, 72, 100, 72, 72, 100},
     130,
     130,
     140,
     140,
     500,
     140,
     "stomps in",
     "stomps",
     {0, 0}},
    /* DRAGON - LIGHTNING */
    {"dragon_lightning",
     "dragon lightning",
     "&4&bDragon&0",
     "&4&bDragon&0",
     "Lightning Dragon",
     false,
     false,
     RACE_ALIGN_GOOD,
     SIZE_GARGANTUAN,
     0,
     10,
     4,
     LIFE_LIFE,
     COMP_FLESH,
     16000,
     64000,
     768,
     1536,
     16000,
     64000,
     768,
     1536,
     {100, 72, 100, 72, 72, 100},
     130,
     130,
     140,
     140,
     500,
     140,
     "stomps in",
     "stomps",
     {0, 0}},
    /* DRAGON - GAS */
    {"dragon_gas",
     "dragon gas",
     "&2&bDragon&0",
     "&2&bDragon&0",
     "Gas Dragon",
     false,
     false,
     RACE_ALIGN_GOOD,
     SIZE_GARGANTUAN,
     0,
     10,
     4,
     LIFE_LIFE,
     COMP_FLESH,
     16000,
     64000,
     768,
     1536,
     16000,
     64000,
     768,
     1536,
     {100, 72, 100, 72, 72, 100},
     130,
     130,
     140,
     140,
     500,
     140,
     "stomps in",
     "stomps",
     {0, 0}},
    /* DRAGONBORN - FIRE */
    {"dragonborn_fire",
     "dragonborn fire",
     "&1Dr&ba&3g&1on&0&1b&1&bo&3r&1&bn&0",
     "&1Fire Dragonborn&0",
     "Fire Dragonborn",
     true,
     true,
     RACE_ALIGN_GOOD,
     SIZE_MEDIUM,
     0,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     180,
     370,
     70,
     80,
     180,
     370,
     70,
     80,
     {78, 64, 76, 72, 78, 76},
     100,
     100,
     100,
     100,
     75,
     110,
     nullptr,
     nullptr,
     {0, 0}},
    /* DRAGONBORN - FROST */
    {"dragonborn_frost",
     "dragonborn frost",
     "&7&bDr&b&4ag&7&bonb&b&4or&7&bn&0",
     "&7&bFrost Dragonborn&0",
     "Frost Dragonborn",
     true,
     true,
     RACE_ALIGN_GOOD,
     SIZE_MEDIUM,
     0,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     180,
     370,
     70,
     80,
     180,
     370,
     70,
     80,
     {78, 64, 76, 72, 78, 76},
     100,
     100,
     100,
     100,
     75,
     110,
     nullptr,
     nullptr,
     {0, 0}},
    /* DRAGONBORN - ACID */
    {"dragonborn_acid",
     "dragonborn acid",
     "&9&bDr&2a&0&2g&bo&9nb&2o&0&2r&b&9n&0",
     "&9&bAcid Dragonborn&0",
     "Acid Dragonborn",
     true,
     true,
     RACE_ALIGN_GOOD,
     SIZE_MEDIUM,
     0,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     180,
     370,
     70,
     80,
     180,
     370,
     70,
     80,
     {78, 64, 76, 72, 78, 76},
     100,
     100,
     100,
     100,
     75,
     110,
     nullptr,
     nullptr,
     {0, 0}},
    /* DRAGONBORN - LIGHTNING */
    {"dragonborn_lightning",
     "dragonborn lightning",
     "&b&4Dr&6a&4go&6n&4b&6or&4n&0",
     "&b&4Lightning Dragonborn&0",
     "Lightning Dragonborn",
     true,
     true,
     RACE_ALIGN_GOOD,
     SIZE_MEDIUM,
     0,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     180,
     370,
     70,
     80,
     180,
     370,
     70,
     80,
     {78, 64, 76, 72, 78, 76},
     100,
     100,
     100,
     100,
     75,
     110,
     nullptr,
     nullptr,
     {0, 0}},
    /* DRAGONBORN - GAS */
    {"dragonborn_gas",
     "dragonborn gas",
     "&2&bDra&3g&2onb&3or&2n&0",
     "&2&bGas Dragonborn&0",
     "Gas Dragonborn",
     true,
     true,
     RACE_ALIGN_GOOD,
     SIZE_MEDIUM,
     0,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     180,
     370,
     70,
     80,
     180,
     370,
     70,
     80,
     {78, 64, 76, 72, 78, 76},
     100,
     100,
     100,
     100,
     75,
     110,
     nullptr,
     nullptr,
     {0, 0}},
    /* SVERFNEBLIN */
    {"sverfneblin",
     "sverfneblin",
     "&9&d&bSverfneblin&0",
     "&9&d&bSverfneblin&0",
     "Sverfneblin",
     true,
     true,
     RACE_ALIGN_EVIL,
     SIZE_SMALL,
     -1000,
     2,
     4,
     LIFE_LIFE,
     COMP_FLESH,
     40,
     90,
     26,
     38,
     40,
     90,
     26,
     38,
     {64, 76, 88, 84, 68, 76},
     100,
     100,
     100,
     100,
     75,
     100,
     nullptr,
     nullptr,
     {0, 0}},
    /* FAERIE - SEELIE */
    {"faerie_seelie",
     "faerie seelie",
     "&b&7F&3aeri&7e&0",
     "&b&7S&3eeli&7e F&3aeri&7e&0",
     "Seelie Faerie",
     true,
     true,
     RACE_ALIGN_GOOD,
     SIZE_TINY,
     1000,
     0,
     6,
     LIFE_LIFE,
     COMP_FLESH,
     5,
     10,
     6,
     10,
     5,
     10,
     6,
     10,
     {30, 95, 90, 90, 30, 95},
     100,
     80,
     100,
     100,
     75,
     100,
     "flutters in",
     "flutters",
     {0, 0}},
    /* FAERIE - UNSEELIE */
    {"faerie_unseelie",
     "faerie unseelie",
     "&b&9F&0&5aeri&9&be&0",
     "&b&9U&0&5ns&b&9ee&0&5li&b&9e F&0&5aeri&9&be&0",
     "Unseelie Faerie",
     true,
     true,
     RACE_ALIGN_EVIL,
     SIZE_TINY,
     -1000,
     0,
     6,
     LIFE_LIFE,
     COMP_FLESH,
     5,
     10,
     6,
     10,
     5,
     10,
     6,
     10,
     {30, 95, 90, 90, 30, 95},
     100,
     80,
     100,
     100,
     75,
     100,
     "flutters in",
     "flutters",
     {0, 0}},
    /* NYMPH */
    {"nymph",
     "nymph",
     "&3&bN&0&2ym&3&bph&0",
     "&3&bN&0&2ym&3&bph&0",
     "Nymph",
     true,
     true,
     RACE_ALIGN_GOOD,
     SIZE_MEDIUM,
     1000,
     3,
     3,
     LIFE_LIFE,
     COMP_FLESH,
     90,
     160,
     59,
     68,
     90,
     160,
     59,
     68,
     {65, 72, 80, 80, 65, 100},
     100,
     100,
     100,
     100,
     75,
     100,
     nullptr,
     nullptr,
     {0, 0}}};
const char *race_align_abbrevs[] = {"&0&3&bGOOD&0", "&0&1&bEVIL&0"};

#define GET_RACE(ch) ((ch)->player.race)
#define GET_RACE_ALIGN(ch) ((ch)->player.race_align)

#define VALID_RACENUM(num) (num < NUM_RACES)
#define VALID_RACE(ch) (VALID_RACENUM(GET_RACE(ch)))
#define RACE_ABBR(ch) (VALID_RACE(ch) ? races[(int)GET_RACE(ch)].displayname : "--")
#define RACE_FULL(ch) (VALID_RACE(ch) ? races[(int)GET_RACE(ch)].fullname : "--")
#define RACE_PLAINNAME(ch) (VALID_RACE(ch) ? races[(int)GET_RACE(ch)].plainname : "unknown")

#define RACE_ALIGN_ABBR(ch) (GET_RACE_ALIGN(ch) <= RACE_ALIGN_EVIL ? race_align_abbrevs[(int)GET_RACE_ALIGN(ch)] : 0)
#define IS_HUMANOID(ch) (VALID_RACE(ch) ? races[(int)GET_RACE(ch)].humanoid : false)

#define ALIGN_OF_RACE(race) (VALID_RACENUM(race) ? races[race].racealign : RACE_ALIGN_GOOD)
#define SIZE_OF_RACE(race) (VALID_RACENUM(race) ? races[race].def_size : SIZE_MEDIUM)

#define RACE_EXPFACTOR(race) (VALID_RACENUM(race) ? races[race].exp_factor : 100)
#define RACE_HITFACTOR(race) (VALID_RACENUM(race) ? races[race].hit_factor : 100)
#define RACE_HDFACTOR(race) (VALID_RACENUM(race) ? races[race].hd_factor : 100)
#define RACE_DICEFACTOR(race) (VALID_RACENUM(race) ? races[race].dice_factor : 100)
#define RACE_COPPERFACTOR(race) (VALID_RACENUM(race) ? races[race].copper_factor : 100)
#define RACE_ACFACTOR(race) (VALID_RACENUM(race) ? races[race].ac_factor : 100)

void init_races(void);
int parse_race(CharData *ch, CharData *vict, char *arg);
int race_by_menu(char arg);
void send_race_menu(DescriptorData *d);
int interpret_race_selection(char arg);
void init_proto_race(CharData *ch);
void init_char_race(CharData *ch);
void update_char_race(CharData *ch);
int racial_skill_proficiency(int skill, int race, int level);
void convert_race(CharData *ch, int newrace);
void apply_racial_bonus_hit_and_dam(CharData *ch);
int natural_move(CharData *ch);
void scale_attribs(CharData *ch);
