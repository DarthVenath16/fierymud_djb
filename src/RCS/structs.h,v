head	1.206;
access;
symbols;
locks; strict;
comment	@ * @;


1.206
date	2011.08.18.00.13.14;	author myc;	state Exp;
branches;
next	1.205;

1.205
date	2010.06.09.22.32.01;	author mud;	state Exp;
branches;
next	1.204;

1.204
date	2010.06.05.18.35.47;	author mud;	state Exp;
branches;
next	1.203;

1.203
date	2009.08.02.20.20.38;	author myc;	state Exp;
branches;
next	1.202;

1.202
date	2009.07.17.00.48.17;	author myc;	state Exp;
branches;
next	1.201;

1.201
date	2009.06.09.05.49.19;	author myc;	state Exp;
branches;
next	1.200;

1.200
date	2009.03.21.19.11.37;	author myc;	state Exp;
branches;
next	1.199;

1.199
date	2009.03.20.23.02.59;	author myc;	state Exp;
branches;
next	1.198;

1.198
date	2009.03.20.20.19.51;	author myc;	state Exp;
branches;
next	1.197;

1.197
date	2009.03.09.20.36.00;	author myc;	state Exp;
branches;
next	1.196;

1.196
date	2009.03.09.05.41.31;	author jps;	state Exp;
branches;
next	1.195;

1.195
date	2009.03.09.05.09.22;	author jps;	state Exp;
branches;
next	1.194;

1.194
date	2009.03.09.04.33.20;	author jps;	state Exp;
branches;
next	1.193;

1.193
date	2009.03.09.03.45.17;	author jps;	state Exp;
branches;
next	1.192;

1.192
date	2009.03.08.03.54.21;	author jps;	state Exp;
branches;
next	1.191;

1.191
date	2009.03.08.02.17.46;	author jps;	state Exp;
branches;
next	1.190;

1.190
date	2009.03.07.22.27.10;	author jps;	state Exp;
branches;
next	1.189;

1.189
date	2009.02.11.17.03.39;	author myc;	state Exp;
branches;
next	1.188;

1.188
date	2009.01.19.09.25.23;	author myc;	state Exp;
branches;
next	1.187;

1.187
date	2008.09.24.05.49.22;	author jps;	state Exp;
branches;
next	1.186;

1.186
date	2008.09.22.02.09.17;	author jps;	state Exp;
branches;
next	1.185;

1.185
date	2008.09.21.20.40.40;	author jps;	state Exp;
branches;
next	1.184;

1.184
date	2008.09.21.04.54.23;	author myc;	state Exp;
branches;
next	1.183;

1.183
date	2008.09.07.20.06.47;	author jps;	state Exp;
branches;
next	1.182;

1.182
date	2008.09.07.01.30.07;	author jps;	state Exp;
branches;
next	1.181;

1.181
date	2008.09.01.22.15.59;	author jps;	state Exp;
branches;
next	1.180;

1.180
date	2008.09.01.18.29.38;	author jps;	state Exp;
branches;
next	1.179;

1.179
date	2008.08.31.21.44.03;	author jps;	state Exp;
branches;
next	1.178;

1.178
date	2008.08.31.20.55.40;	author jps;	state Exp;
branches;
next	1.177;

1.177
date	2008.08.30.20.21.39;	author jps;	state Exp;
branches;
next	1.176;

1.176
date	2008.08.30.01.31.51;	author myc;	state Exp;
branches;
next	1.175;

1.175
date	2008.08.29.19.25.08;	author myc;	state Exp;
branches;
next	1.174;

1.174
date	2008.08.29.19.18.05;	author myc;	state Exp;
branches;
next	1.173;

1.173
date	2008.08.29.04.16.26;	author myc;	state Exp;
branches;
next	1.172;

1.172
date	2008.08.25.00.20.33;	author myc;	state Exp;
branches;
next	1.171;

1.171
date	2008.08.16.08.22.41;	author jps;	state Exp;
branches;
next	1.170;

1.170
date	2008.08.15.03.59.08;	author jps;	state Exp;
branches;
next	1.169;

1.169
date	2008.08.14.23.10.35;	author myc;	state Exp;
branches;
next	1.168;

1.168
date	2008.08.14.15.40.29;	author jps;	state Exp;
branches;
next	1.167;

1.167
date	2008.08.14.09.45.22;	author jps;	state Exp;
branches;
next	1.166;

1.166
date	2008.08.13.05.52.51;	author jps;	state Exp;
branches;
next	1.165;

1.165
date	2008.07.27.05.23.45;	author jps;	state Exp;
branches;
next	1.164;

1.164
date	2008.07.22.07.25.26;	author myc;	state Exp;
branches;
next	1.163;

1.163
date	2008.07.15.17.55.06;	author myc;	state Exp;
branches;
next	1.162;

1.162
date	2008.06.21.17.27.18;	author jps;	state Exp;
branches;
next	1.161;

1.161
date	2008.06.09.23.00.13;	author myc;	state Exp;
branches;
next	1.160;

1.160
date	2008.06.07.19.06.46;	author myc;	state Exp;
branches;
next	1.159;

1.159
date	2008.06.05.02.07.43;	author myc;	state Exp;
branches;
next	1.158;

1.158
date	2008.05.19.20.19.50;	author jps;	state Exp;
branches;
next	1.157;

1.157
date	2008.05.19.06.53.31;	author jps;	state Exp;
branches;
next	1.156;

1.156
date	2008.05.19.05.46.04;	author jps;	state Exp;
branches;
next	1.155;

1.155
date	2008.05.18.17.58.21;	author jps;	state Exp;
branches;
next	1.154;

1.154
date	2008.05.18.02.00.47;	author jps;	state Exp;
branches;
next	1.153;

1.153
date	2008.05.17.22.03.01;	author jps;	state Exp;
branches;
next	1.152;

1.152
date	2008.05.17.04.32.25;	author jps;	state Exp;
branches;
next	1.151;

1.151
date	2008.05.11.05.42.24;	author jps;	state Exp;
branches;
next	1.150;

1.150
date	2008.04.20.03.54.17;	author jps;	state Exp;
branches;
next	1.149;

1.149
date	2008.04.14.05.11.40;	author jps;	state Exp;
branches;
next	1.148;

1.148
date	2008.04.14.02.17.59;	author jps;	state Exp;
branches;
next	1.147;

1.147
date	2008.04.13.18.29.28;	author jps;	state Exp;
branches;
next	1.146;

1.146
date	2008.04.13.00.57.07;	author jps;	state Exp;
branches;
next	1.145;

1.145
date	2008.04.07.04.31.10;	author jps;	state Exp;
branches;
next	1.144;

1.144
date	2008.04.07.03.02.54;	author jps;	state Exp;
branches;
next	1.143;

1.143
date	2008.04.05.18.07.09;	author myc;	state Exp;
branches;
next	1.142;

1.142
date	2008.04.05.16.49.45;	author myc;	state Exp;
branches;
next	1.141;

1.141
date	2008.04.04.06.12.52;	author myc;	state Exp;
branches;
next	1.140;

1.140
date	2008.04.03.17.34.09;	author jps;	state Exp;
branches;
next	1.139;

1.139
date	2008.04.02.05.36.19;	author myc;	state Exp;
branches;
next	1.138;

1.138
date	2008.04.02.04.55.59;	author myc;	state Exp;
branches;
next	1.137;

1.137
date	2008.04.02.03.24.44;	author myc;	state Exp;
branches;
next	1.136;

1.136
date	2008.03.28.17.54.53;	author myc;	state Exp;
branches;
next	1.135;

1.135
date	2008.03.27.17.28.13;	author jps;	state Exp;
branches;
next	1.134;

1.134
date	2008.03.26.23.10.44;	author jps;	state Exp;
branches;
next	1.133;

1.133
date	2008.03.26.18.11.02;	author jps;	state Exp;
branches;
next	1.132;

1.132
date	2008.03.23.00.23.22;	author jps;	state Exp;
branches;
next	1.131;

1.131
date	2008.03.22.19.09.46;	author jps;	state Exp;
branches;
next	1.130;

1.130
date	2008.03.22.03.22.38;	author myc;	state Exp;
branches;
next	1.129;

1.129
date	2008.03.21.15.01.17;	author myc;	state Exp;
branches;
next	1.128;

1.128
date	2008.03.16.00.19.33;	author jps;	state Exp;
branches;
next	1.127;

1.127
date	2008.03.11.19.50.55;	author myc;	state Exp;
branches;
next	1.126;

1.126
date	2008.03.11.02.55.30;	author jps;	state Exp;
branches;
next	1.125;

1.125
date	2008.03.10.20.46.55;	author myc;	state Exp;
branches;
next	1.124;

1.124
date	2008.03.10.19.55.37;	author jps;	state Exp;
branches;
next	1.123;

1.123
date	2008.03.10.18.01.17;	author myc;	state Exp;
branches;
next	1.122;

1.122
date	2008.03.09.18.11.31;	author jps;	state Exp;
branches;
next	1.121;

1.121
date	2008.03.09.06.38.37;	author jps;	state Exp;
branches;
next	1.120;

1.120
date	2008.03.09.00.05.40;	author jps;	state Exp;
branches;
next	1.119;

1.119
date	2008.03.08.23.54.04;	author jps;	state Exp;
branches;
next	1.118;

1.118
date	2008.03.08.22.29.06;	author myc;	state Exp;
branches;
next	1.117;

1.117
date	2008.03.07.21.21.57;	author myc;	state Exp;
branches;
next	1.116;

1.116
date	2008.03.06.05.11.51;	author myc;	state Exp;
branches;
next	1.115;

1.115
date	2008.03.06.04.35.12;	author myc;	state Exp;
branches;
next	1.114;

1.114
date	2008.03.05.05.21.56;	author myc;	state Exp;
branches;
next	1.113;

1.113
date	2008.03.05.03.03.54;	author myc;	state Exp;
branches;
next	1.112;

1.112
date	2008.02.24.17.31.13;	author myc;	state Exp;
branches;
next	1.111;

1.111
date	2008.02.16.20.31.32;	author myc;	state Exp;
branches;
next	1.110;

1.110
date	2008.02.09.21.07.50;	author myc;	state Exp;
branches;
next	1.109;

1.109
date	2008.02.09.18.29.11;	author myc;	state Exp;
branches;
next	1.108;

1.108
date	2008.02.09.06.19.44;	author jps;	state Exp;
branches;
next	1.107;

1.107
date	2008.02.09.03.06.17;	author myc;	state Exp;
branches;
next	1.106;

1.106
date	2008.02.02.19.38.20;	author myc;	state Exp;
branches;
next	1.105;

1.105
date	2008.01.30.19.20.57;	author myc;	state Exp;
branches;
next	1.104;

1.104
date	2008.01.27.21.14.59;	author myc;	state Exp;
branches;
next	1.103;

1.103
date	2008.01.27.13.43.50;	author jps;	state Exp;
branches;
next	1.102;

1.102
date	2008.01.27.09.45.41;	author jps;	state Exp;
branches;
next	1.101;

1.101
date	2008.01.25.21.12.26;	author myc;	state Exp;
branches;
next	1.100;

1.100
date	2008.01.20.23.18.52;	author myc;	state Exp;
branches;
next	1.99;

1.99
date	2008.01.20.22.58.39;	author myc;	state Exp;
branches;
next	1.98;

1.98
date	2008.01.12.19.08.14;	author myc;	state Exp;
branches;
next	1.97;

1.97
date	2008.01.10.05.39.43;	author myc;	state Exp;
branches;
next	1.96;

1.96
date	2008.01.09.08.31.32;	author jps;	state Exp;
branches;
next	1.95;

1.95
date	2008.01.09.04.15.42;	author jps;	state Exp;
branches;
next	1.94;

1.94
date	2008.01.09.02.29.01;	author jps;	state Exp;
branches;
next	1.93;

1.93
date	2008.01.09.01.50.06;	author jps;	state Exp;
branches;
next	1.92;

1.92
date	2008.01.07.10.35.43;	author jps;	state Exp;
branches;
next	1.91;

1.91
date	2008.01.06.23.50.47;	author jps;	state Exp;
branches;
next	1.90;

1.90
date	2008.01.06.17.34.29;	author jps;	state Exp;
branches;
next	1.89;

1.89
date	2008.01.06.05.33.27;	author jps;	state Exp;
branches;
next	1.88;

1.88
date	2008.01.05.21.55.50;	author jps;	state Exp;
branches;
next	1.87;

1.87
date	2008.01.05.20.32.31;	author jps;	state Exp;
branches;
next	1.86;

1.86
date	2008.01.04.01.53.26;	author jps;	state Exp;
branches;
next	1.85;

1.85
date	2008.01.02.02.11.03;	author jps;	state Exp;
branches;
next	1.84;

1.84
date	2007.12.29.00.05.10;	author jps;	state Exp;
branches;
next	1.83;

1.83
date	2007.12.25.05.41.49;	author jps;	state Exp;
branches;
next	1.82;

1.82
date	2007.12.19.20.56.42;	author myc;	state Exp;
branches;
next	1.81;

1.81
date	2007.11.25.00.04.59;	author jps;	state Exp;
branches;
next	1.80;

1.80
date	2007.11.18.16.51.55;	author myc;	state Exp;
branches;
next	1.79;

1.79
date	2007.10.23.20.19.25;	author myc;	state Exp;
branches;
next	1.78;

1.78
date	2007.10.13.20.13.09;	author myc;	state Exp;
branches;
next	1.77;

1.77
date	2007.10.11.20.14.48;	author myc;	state Exp;
branches;
next	1.76;

1.76
date	2007.10.04.16.20.24;	author myc;	state Exp;
branches;
next	1.75;

1.75
date	2007.10.02.02.52.27;	author myc;	state Exp;
branches;
next	1.74;

1.74
date	2007.09.21.08.44.45;	author jps;	state Exp;
branches;
next	1.73;

1.73
date	2007.09.20.21.20.43;	author myc;	state Exp;
branches;
next	1.72;

1.72
date	2007.09.15.15.36.48;	author myc;	state Exp;
branches;
next	1.71;

1.71
date	2007.09.15.05.37.15;	author myc;	state Exp;
branches;
next	1.70;

1.70
date	2007.09.15.05.03.46;	author myc;	state Exp;
branches;
next	1.69;

1.69
date	2007.09.11.16.34.24;	author myc;	state Exp;
branches;
next	1.68;

1.68
date	2007.09.04.06.49.19;	author myc;	state Exp;
branches;
next	1.67;

1.67
date	2007.08.23.00.31.48;	author jps;	state Exp;
branches;
next	1.66;

1.66
date	2007.08.22.17.58.05;	author jps;	state Exp;
branches;
next	1.65;

1.65
date	2007.08.14.22.43.07;	author myc;	state Exp;
branches;
next	1.64;

1.64
date	2007.08.14.10.41.31;	author jps;	state Exp;
branches;
next	1.63;

1.63
date	2007.08.04.14.40.35;	author myc;	state Exp;
branches;
next	1.62;

1.62
date	2007.08.03.22.00.11;	author myc;	state Exp;
branches;
next	1.61;

1.61
date	2007.08.03.03.51.44;	author myc;	state Exp;
branches;
next	1.60;

1.60
date	2007.07.19.17.51.36;	author jps;	state Exp;
branches;
next	1.59;

1.59
date	2007.07.18.21.05.00;	author jps;	state Exp;
branches;
next	1.58;

1.58
date	2007.07.14.02.16.22;	author jps;	state Exp;
branches;
next	1.57;

1.57
date	2007.05.28.22.36.26;	author jps;	state Exp;
branches;
next	1.56;

1.56
date	2007.05.11.20.13.28;	author myc;	state Exp;
branches;
next	1.55;

1.55
date	2007.04.19.07.03.14;	author myc;	state Exp;
branches;
next	1.54;

1.54
date	2007.04.15.08.30.49;	author jps;	state Exp;
branches;
next	1.53;

1.53
date	2007.03.27.04.27.05;	author myc;	state Exp;
branches;
next	1.52;

1.52
date	2007.02.08.01.30.00;	author myc;	state Exp;
branches;
next	1.51;

1.51
date	2007.02.04.18.12.31;	author myc;	state Exp;
branches;
next	1.50;

1.50
date	2006.12.08.05.06.58;	author myc;	state Exp;
branches;
next	1.49;

1.49
date	2006.11.18.21.01.09;	author jps;	state Exp;
branches;
next	1.48;

1.48
date	2006.11.18.04.26.32;	author jps;	state Exp;
branches;
next	1.47;

1.47
date	2006.11.17.22.52.59;	author jps;	state Exp;
branches;
next	1.46;

1.46
date	2006.11.08.09.16.04;	author jps;	state Exp;
branches;
next	1.45;

1.45
date	2006.04.11.09.08.46;	author rls;	state Exp;
branches;
next	1.44;

1.44
date	2004.11.01.06.02.01;	author jjl;	state Exp;
branches;
next	1.43;

1.43
date	2003.06.25.05.06.59;	author jjl;	state Exp;
branches;
next	1.42;

1.42
date	2003.06.25.04.53.09;	author jjl;	state Exp;
branches;
next	1.41;

1.41
date	2003.06.23.01.47.09;	author jjl;	state Exp;
branches;
next	1.40;

1.40
date	2003.04.16.02.00.22;	author jjl;	state Exp;
branches;
next	1.39;

1.39
date	2002.10.19.18.29.52;	author jjl;	state Exp;
branches;
next	1.38;

1.38
date	2002.09.13.02.32.10;	author jjl;	state Exp;
branches;
next	1.37;

1.37
date	2002.08.29.17.37.50;	author rsd;	state Exp;
branches;
next	1.36;

1.36
date	2002.05.23.00.33.51;	author rls;	state Exp;
branches;
next	1.35;

1.35
date	2001.04.08.17.13.10;	author dce;	state Exp;
branches;
next	1.34;

1.34
date	2001.04.01.22.04.28;	author mtp;	state Exp;
branches;
next	1.33;

1.33
date	2001.03.24.05.12.01;	author dce;	state Exp;
branches;
next	1.32;

1.32
date	2001.02.03.00.59.30;	author mtp;	state Exp;
branches;
next	1.31;

1.31
date	2000.11.28.01.14.40;	author mtp;	state Exp;
branches;
next	1.30;

1.30
date	2000.11.25.02.33.15;	author rsd;	state Exp;
branches;
next	1.29;

1.29
date	2000.11.22.01.09.13;	author mtp;	state Exp;
branches;
next	1.28;

1.28
date	2000.11.07.01.32.57;	author mtp;	state Exp;
branches;
next	1.27;

1.27
date	2000.11.03.05.43.18;	author jimmy;	state Exp;
branches;
next	1.26;

1.26
date	2000.10.27.00.34.45;	author mtp;	state Exp;
branches;
next	1.25;

1.25
date	2000.04.21.00.58.02;	author rsd;	state Exp;
branches;
next	1.24;

1.24
date	2000.01.31.00.01.41;	author rsd;	state Exp;
branches;
next	1.23;

1.23
date	99.12.10.05.11.40;	author cso;	state Exp;
branches;
next	1.22;

1.22
date	99.11.29.00.08.51;	author cso;	state Exp;
branches;
next	1.21;

1.21
date	99.09.05.07.00.39;	author jimmy;	state Exp;
branches;
next	1.20;

1.20
date	99.07.20.19.45.51;	author jimmy;	state Exp;
branches;
next	1.19;

1.19
date	99.07.15.03.27.34;	author jimmy;	state Exp;
branches;
next	1.18;

1.18
date	99.07.06.19.57.05;	author jimmy;	state Exp;
branches;
next	1.17;

1.17
date	99.06.30.18.11.09;	author jimmy;	state Exp;
branches;
next	1.16;

1.16
date	99.05.04.17.19.33;	author dce;	state Exp;
branches;
next	1.15;

1.15
date	99.04.16.03.55.09;	author dce;	state Exp;
branches;
next	1.14;

1.14
date	99.04.07.01.20.18;	author dce;	state Exp;
branches;
next	1.13;

1.13
date	99.03.26.19.44.35;	author jen;	state Exp;
branches;
next	1.12;

1.12
date	99.03.14.00.53.03;	author mud;	state Exp;
branches;
next	1.11;

1.11
date	99.03.06.23.51.54;	author dce;	state Exp;
branches;
next	1.10;

1.10
date	99.03.05.20.02.36;	author dce;	state Exp;
branches;
next	1.9;

1.9
date	99.03.03.20.11.02;	author jimmy;	state Exp;
branches;
next	1.8;

1.8
date	99.03.01.05.31.34;	author jimmy;	state Exp;
branches;
next	1.7;

1.7
date	99.02.12.15.33.17;	author jimmy;	state Exp;
branches;
next	1.6;

1.6
date	99.02.11.22.17.40;	author jimmy;	state Exp;
branches;
next	1.5;

1.5
date	99.02.10.22.21.42;	author jimmy;	state Exp;
branches;
next	1.4;

1.4
date	99.02.10.05.57.14;	author jimmy;	state Exp;
branches;
next	1.3;

1.3
date	99.02.06.00.40.36;	author jimmy;	state Exp;
branches;
next	1.2;

1.2
date	99.02.05.07.47.42;	author jimmy;	state Exp;
branches;
next	1.1;

1.1
date	99.01.29.01.23.32;	author mud;	state Exp;
branches;
next	;


desc
@/*
************************************************************************
*   File: structs.h                                     Part of CircleMUD *
*  Usage: header file for central structures and contstants               *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */


/* preamble *************************************************************/

#define NOWHERE    -1    /* nil reference for room-database	*/
#define NOTHING	   -1    /* nil reference for objects		*/
#define NOBODY	   -1    /* nil reference for mobiles		*/

#define SPECIAL(name) \
   int (name)(struct char_data *ch, void *me, int cmd, char *argument)
/* misc editor defines **************************************************/

/* format modes for format_text */
#define FORMAT_INDENT		(1 << 0)

/* room-related defines *************************************************/


/* The cardinal directions: used as index to room_data.dir_option[] */
#define NORTH          0
#define EAST           1
#define SOUTH          2
#define WEST           3
#define UP             4
#define DOWN           5
#define FUP            6
#define FDOWN          7




/* Room flags: used in room_data.room_flags */
/* WARNING: In the world files, NEVER set the bits marked "R" ("Reserved") */
#define ROOM_DARK		(1 << 0)   /* Dark			*/
#define ROOM_DEATH		(1 << 1)   /* Death trap		*/
#define ROOM_NOMOB		(1 << 2)   /* MOBs not allowed		*/
#define ROOM_INDOORS		(1 << 3)   /* Indoors			*/
#define ROOM_PEACEFUL		(1 << 4)   /* Violence not allowed	*/
#define ROOM_SOUNDPROOF		(1 << 5)   /* Shouts, gossip blocked	*/
#define ROOM_NOTRACK		(1 << 6)   /* Track won't go through	*/
#define ROOM_NOMAGIC		(1 << 7)   /* Magic not allowed		*/
#define ROOM_TUNNEL		(1 << 8)   /* room for only 1 pers	*/
#define ROOM_PRIVATE		(1 << 9)   /* Can't teleport in		*/
#define ROOM_GODROOM		(1 << 10)  /* LVL_GOD+ only allowed	*/
#define ROOM_HOUSE		(1 << 11)  /* (R) Room is a house	*/
#define ROOM_HOUSE_CRASH	(1 << 12)  /* (R) House needs saving	*/
#define ROOM_ATRIUM		(1 << 13)  /* (R) The door to a house	*/
#define ROOM_OLC		(1 << 14)  /* (R) Modifyable/!compress	*/
#define ROOM_BFS_MARK		(1 << 15)  /* (R) breath-first srch mrk	*/
#define ROOM_NOWELL         (1 << 16) /* NO MOONWELL OR EATHERPORTAL ETC*/
#define ROOM_NORECALL       (1 << 17) /* LETS BE AN ASS ...BANYAL*/
#define ROOM_UNDERDARK      (1 << 18) /*EVILS! THOSE BASTERDS*/
#define ROOM_NOSUMMON       (1 << 19)
#define ROOM_NOSHIFT        (1 << 20) /* no plane shift*/
#define ROOM_GUILDHALL      (1 << 21)
#define ROOM_NOSCAN         (1 << 22) /* Unable to scan to/from rooms */
#define ROOM_ALT_EXIT       (1 << 23) /* The exits to this room have been altered */
#define ROOM_MAP	    (1 << 24) /* Room on the surface map */

/* Room affections */
#define RAFF_FOG        (1 << 0)
#define RAFF_DARKNESS   (1 << 1)
#define RAFF_CONTINUAL_LIGHT (1 << 2)
#define RAFF_FOREST	(1 << 3)
#define RAFF_CIRCLE_FIRE (1 << 4)

/* Exit info: used in room_data.dir_option.exit_info */
#define EX_ISDOOR		(1 << 0)   /* Exit is a door		*/
#define EX_CLOSED		(1 << 1)   /* The door is closed	*/
#define EX_LOCKED		(1 << 2)   /* The door is locked	*/
#define EX_PICKPROOF		(1 << 3)   /* Lock can't be picked	*/
#define EX_HIDDEN (1 << 4)  /* exit is hidden */


/* Sector types: used in room_data.sector_type */
#define SECT_INSIDE          0		   /* Indoors			*/
#define SECT_CITY            1		   /* In a city			*/
#define SECT_FIELD           2		   /* In a field		*/
#define SECT_FOREST          3		   /* In a forest		*/
#define SECT_HILLS           4		   /* In the hills		*/
#define SECT_MOUNTAIN        5		   /* On a mountain		*/
#define SECT_WATER_SWIM      6		   /* Swimmable water		*/
#define SECT_WATER_NOSWIM    7		   /* Water - need a boat	*/
#define SECT_UNDERWATER	     8		   /* Underwater		*/
#define SECT_FLYING	     9		   /* Wheee!			*/
#define SECT_ROAD        10
#define SECT_GRASSLANDS  11
#define SECT_OCEAN       12
#define SECT_RUINS       13
#define SECT_SWAMP       14
#define SECT_BEACH       15
#define SECT_UNDERDARK   16
#define SECT_ASTRALPLANE       17
#define SECT_AIRPLANE    18
#define SECT_FIREPLANE   19
#define SECT_EARTHPLANE  20
#define SECT_EATHREALPLANE 21
#define SECT_AVERNUS       22



/* char and mob-related defines *****************************************/


/* PC classes */
#define CLASS_UNDEFINED	  -1
#define CLASS_MAGIC_USER  0
#define CLASS_CLERIC      1
#define CLASS_THIEF       2
#define CLASS_WARRIOR     3
#define CLASS_PALADIN     4
#define CLASS_ANTI_PALADIN 5
#define CLASS_RANGER      6
#define CLASS_DRUID       7
#define CLASS_SHAMAN      8
#define CLASS_ASSASSIN    9
#define CLASS_MERCENARY   10
#define CLASS_NECROMANCER 11
#define CLASS_CONJURER    12
#define CLASS_MONK	  13
#define CLASS_BERSERKER   14
#define CLASS_PRIEST	  15
#define CLASS_DIABOLIST   16
#define CLASS_MYSTIC	  17
#define CLASS_ROGUE       18
#define CLASS_BARD	  19
#define CLASS_PYROMANCER  20
#define CLASS_CRYOMANCER  21
#define CLASS_ILLUSIONIST 22
#define CLASS_HUNTER	  23

#define NUM_CLASSES	  24  /* This must be the number of classes!! */
#define WARRIOR_SUBCLASSES	6
#define CLERIC_SUBCLASSES	4
#define ROGUE_SUBCLASSES	4
#define MAGE_SUBCLASSES		5


#define SPECIES_OTHER       17
#define SPECIES_HUMAN        0
#define SPECIES_ELF          1
#define SPECIES_GNOME        2
#define SPECIES_DWARF        3
#define SPECIES_TROLL        4
#define SPECIES_DROW_ELF     5
#define SPECIES_DUERGAR      6
#define SPECIES_OGRE         7
#define SPECIES_ORC          8
#define SPECIES_HALF_ELF     9
#define SPECIES_BARBARIAN    10
#define SPECIES_HALFLING     11
#define SPECIES_UNDEAD      12
#define SPECIES_HUMANOID    13
#define SPECIES_ANIMAL      14
#define SPECIES_DRAGON      15
#define SPECIES_GIANT       16
#define SPECIES_GOBLIN		18
#define SPECIES_DEMON		19
#define SPECIES_NUMBER 20

#define MCLASS_SORCERER    0
#define MCLASS_CLERIC      1
#define MCLASS_THIEF       2
#define MCLASS_WARRIOR     3
#define MCLASS_PALADIN     4
#define MCLASS_ANTI_PALADIN 5
#define MCLASS_RANGER      6
#define MCLASS_DRUID       7
#define MCLASS_SHAMAN      8
#define MCLASS_ASSASSIN    9
#define MCLASS_MERCENARY   10
#define MCLASS_NECROMANCER 11
#define MCLASS_CONJURER    12
#define MCLASS_VOID		   13


#define MCLASS_NUMBER 14


#define RACE_UNDEFINED   -1
#define RACE_HUMAN        0
#define RACE_ELF          1
#define RACE_GNOME        2
#define RACE_DWARF        3
#define RACE_TROLL        4
#define RACE_DROW_ELF     5
#define RACE_DUERGAR      6
#define RACE_OGRE         7
#define RACE_ORC          8
#define RACE_HALF_ELF     9
#define RACE_BARBARIAN    10
#define RACE_HALFLING     11

/*Defines race align*/
#define RACE_ALIGN_GOOD		0
#define RACE_ALIGN_EVIL     1

#define NUM_RACES         12
/* Sex */
#define SEX_NEUTRAL   0
#define SEX_MALE      1
#define SEX_FEMALE    2

/* DEFINE SIZES.....BANYAL*/
#define SIZE_UNDEFINED  -1
#define SIZE_TINY        0
#define SIZE_SMALL       1
#define SIZE_MEDIUM      2
#define SIZE_LARGE       3
#define SIZE_HUGE        4
#define SIZE_GIANT       5
#define SIZE_GARGANTUAN  6
#define NUM_SIZES        7


/*postures*/
#define POS1_PRONE       0
#define POS1_KNEELING    1
#define POS1_SITTING     2
#define POS1_RESTING     3
#define POS1_STANDING    4

/* Positions */
#define POS_DEAD       0	/* dead			*/
#define POS_MORTALLYW  1	/* mortally wounded	*/
#define POS_INCAP      2	/* incapacitated	*/
#define POS_STUNNED    3	/* stunned		*/
#define POS_SLEEPING   4	/* sleeping		*/
#define POS_RESTING    5	/* resting		*/
#define POS_SITTING    6	/* sitting		*/
#define POS_FIGHTING   7	/* fighting		*/
#define POS_STANDING   8	/* standing		*/
#define POS_FLYING     9        /* flying		*/

#define HIT_INCAP      -3	/* The hit level for incapacitation   */
#define HIT_MORTALLYW  -6	/* The hit level for mortally wound   */
#define HIT_DEAD       -11      /* The point you never want to get to */



/* Player flags: used by char_data.char_specials.act */
#define PLR_KILLER	(1 << 0)   /* Player is a player-killer		*/
#define PLR_THIEF	(1 << 1)   /* Player is a player-thief		*/
#define PLR_FROZEN	(1 << 2)   /* Player is frozen			*/
#define PLR_DONTSET     (1 << 3)   /* Don't EVER set (ISNPC bit)	*/
#define PLR_WRITING	(1 << 4)   /* Player writing (board/mail/olc)	*/
#define PLR_MAILING	(1 << 5)   /* Player is writing mail		*/
#define PLR_CRASH	(1 << 6)   /* Player needs to be crash-saved	*/
#define PLR_SITEOK	(1 << 7)   /* Player has been site-cleared	*/
#define PLR_NOSHOUT	(1 << 8)   /* Player not allowed to shout/goss	*/
#define PLR_NOTITLE	(1 << 9)   /* Player not allowed to set title	*/
#define PLR_DELETED	(1 << 10)  /* Player deleted - space reusable	*/
#define PLR_LOADROOM	(1 << 11)  /* Player uses nonstandard loadroom	*/
#define PLR_NOWIZLIST	(1 << 12)  /* Player shouldn't be on wizlist	*/
#define PLR_NODELETE	(1 << 13)  /* Player shouldn't be deleted	*/
#define PLR_INVSTART	(1 << 14)  /* Player should enter game wizinvis	*/
#define PLR_CRYO	(1 << 15)  /* Player is cryo-saved (purge prog)	*/
#define PLR_MEDITATE (1 << 16)
#define PLR_CASTING  (1 << 17)
#define PLR_BOUND    (1 << 18)
#define PLR_SCRIBE   (1 << 19)     /* player is scribing into book */
#define PLR_TEACHING (1 << 20)     /* player is teaching a skill/spell */



/* Mobile flags: used by char_data.char_specials.act */
#define MOB_SPEC         (1 << 0)  /* Mob has a callable spec-proc	*/
#define MOB_SENTINEL     (1 << 1)  /* Mob should not move		*/
#define MOB_SCAVENGER    (1 << 2)  /* Mob picks up stuff on the ground	*/
#define MOB_ISNPC        (1 << 3)  /* (R) Automatically set on all Mobs	*/
#define MOB_AWARE	 (1 << 4)  /* Mob can't be backstabbed		*/
#define MOB_AGGRESSIVE   (1 << 5)  /* Mob hits players in the room	*/
#define MOB_STAY_ZONE    (1 << 6)  /* Mob shouldn't wander out of zone	*/
#define MOB_WIMPY        (1 << 7)  /* Mob flees if severely injured	*/
#define MOB_AGGR_EVIL	 (1 << 8)  /* auto attack evil PC's		*/
#define MOB_AGGR_GOOD	 (1 << 9)  /* auto attack good PC's		*/
#define MOB_AGGR_NEUTRAL (1 << 10) /* auto attack neutral PC's		*/
#define MOB_MEMORY	 (1 << 11) /* remember attackers if attacked	*/
#define MOB_HELPER	 (1 << 12) /* attack PCs fighting other NPCs	*/
#define MOB_NOCHARM	 (1 << 13) /* Mob can't be charmed		*/
#define MOB_NOSUMMON	 (1 << 14) /* Mob can't be summoned		*/
#define MOB_NOSLEEP	 (1 << 15) /* Mob can't be slept		*/
#define MOB_NOBASH	 (1 << 16) /* Mob can't be bashed (e.g. trees)	*/
#define MOB_NOBLIND	 (1 << 17) /* Mob can't be blinded		*/
#define MOB_MOUNTABLE	 (1 << 18)
#define MOB_ARRESTOR    (1 << 19)
#define MOB_FAST_TRACK  (1 << 20)
#define MOB_SLOW_TRACK  (1 << 21)
#define MOB_CASTING     (1 << 22) /*mob casting*/
#define MOB_PET         (1 << 23)
#define MOB_NOGEAR     (1 << 24) /*no gear on corpse*/
#define MOB_AGGR_EVIL_ALIGN  (1 << 25)
#define MOB_AGGR_GOOD_ALIGN   (1 << 26)
#define MOB_NOSILENCE	      (1 << 27)
#define MOB_NOVICIOUS	 (1 << 28)
#define MOB_TEACHER    (1 << 29)

/* Preference flags: used by char_data.player_specials.pref */
#define PRF_BRIEF       (1 << 0)  /* Room descs won't normally be shown	*/
#define PRF_COMPACT     (1 << 1)  /* No extra CRLF pair before prompts	*/
#define PRF_DEAF	(1 << 2)  /* Can't hear shouts			*/
#define PRF_NOTELL	(1 << 3)  /* Can't receive tells		*/
#define PRF_DISPHP	(1 << 4)  /* Display hit points in prompt	*/
#define PRF_DISPMANA	(1 << 5)  /* Display mana points in prompt	*/
#define PRF_DISPMOVE	(1 << 6)  /* Display move points in prompt	*/
#define PRF_AUTOEXIT	(1 << 7)  /* Display exits in a room		*/
#define PRF_NOHASSLE	(1 << 8)  /* Aggr mobs won't attack		*/
#define PRF_QUEST	(1 << 9)  /* On quest				*/
#define PRF_SUMMONABLE	(1 << 10) /* Can be summoned			*/
#define PRF_NOREPEAT	(1 << 11) /* No repetition of comm commands	*/
#define PRF_HOLYLIGHT	(1 << 12) /* Can see in dark			*/
#define PRF_COLOR_1	(1 << 13) /* Color (low bit)			*/
#define PRF_COLOR_2	(1 << 14) /* Color (high bit)			*/
#define PRF_NOWIZ	(1 << 15) /* Can't hear wizline			*/
#define PRF_LOG1	(1 << 16) /* On-line System Log (low bit)	*/
#define PRF_LOG2	(1 << 17) /* On-line System Log (high bit)	*/
#define PRF_NOAUCT	(1 << 18) /* Can't hear auction channel		*/
#define PRF_NOGOSS	(1 << 19) /* Can't hear gossip channel		*/
#define PRF_NOGRATZ	(1 << 20) /* Can't hear grats channel		*/
#define PRF_ROOMFLAGS	(1 << 21) /* Can see room flags (ROOM_x)	*/
#define PRF_NOPETI      (1 << 22) /*cant hear petitions*/
#define PRF_NONAME      (1 << 23) /* lets god hide name on title */
#define PRF_NOTDONE    (1 << 24) /* Can hear clan talk */
#define PRF_ANON		(1 << 25) /*Anon flag*/
#define PRF_SHOWVNUMS	(1 << 26) /* Show Virtual Numbers */
#define PRF_NICEAREA   (1 << 27)
#define PRF_VICIOUS    (1 << 28)
#define PRF_PASSIVE    (1 << 29)  /* char will not engage upon being cast on */
#define PRF_AFK

#define ACT_DELAY_BASH            0
#define ACT_DELAY_BERSERK         1
#define ACT_DELAY_INSTANTKILL     2
#define ACT_DELAY_DISARM          3	/* pulse violence */
#define ACT_DELAY_FUMBLING_PRIM   4	/* pulse violence */
#define ACT_DELAY_DROPPED_PRIM    5	/* pulse violence */
#define ACT_DELAY_FUMBLING_SECOND 6	/* pulse violence */
#define ACT_DELAY_DROPPED_SECOND  7	/* pulse violence */
#define ACT_DELAY_HEADBUTT        8	/* pulse violence */
#define ACT_DELAY_9_UNDEFINED     9
#define ACT_DELAY_ARCHER         10
#define ACT_DELAY_SUMMON_MOUNT    11
#define ACT_DELAY_LAY_HANDS      12
#define ACT_DELAY_FIRST_AID         13

#define MAX_ACTION_DELAYS      14 /* number of commands with special delays */

/* Affect bits: used in char_data.char_specials.saved.affected_by */
/* WARNING: In the world files, NEVER set the bits marked "R" ("Reserved") */
#define AFF_BLIND             (1 << 0)	   /* (R) Char is blind		*/
#define AFF_INVISIBLE         (1 << 1)	   /* Char is invisible		*/
#define AFF_DETECT_ALIGN      (1 << 2)	   /* Char is sensitive to align*/
#define AFF_DETECT_INVIS      (1 << 3)	   /* Char can see invis chars  */
#define AFF_DETECT_MAGIC      (1 << 4)	   /* Char is sensitive to magic*/
#define AFF_SENSE_LIFE        (1 << 5)	   /* Char can sense hidden life*/
#define AFF_WATERWALK	      (1 << 6)	   /* Char can walk on water	*/
#define AFF_SANCTUARY         (1 << 7)	   /* Char protected by sanct.	*/
#define AFF_GROUP             (1 << 8)	   /* (R) Char is grouped	*/
#define AFF_CURSE             (1 << 9)	   /* Char is cursed		*/
#define AFF_INFRAVISION       (1 << 10)	   /* Char can see in dark	*/
#define AFF_POISON            (1 << 11)	   /* (R) Char is poisoned	*/
#define AFF_PROTECT_EVIL      (1 << 12)	   /* Char protected from evil  */
#define AFF_PROTECT_GOOD      (1 << 13)	   /* Char protected from good  */
#define AFF_SLEEP             (1 << 14)	   /* (R) Char magically asleep	*/
#define AFF_NOTRACK	      (1 << 15)	   /* Char can't be tracked	*/
#define AFF_TAMED	      (1 << 16)	   /* Room for future expansion	*/
#define AFF_DROPPED_SECOND    (1 << 17)	   /* Room for futureexpansion	*/
#define AFF_SNEAK             (1 << 18)	   /* Char can move quietly	*/
#define AFF_HIDE              (1 << 19)	   /* Char is hidden		*/
#define AFF_FLYING	      (1 << 20)	   /* Room for future expansion	*/
#define AFF_CHARM             (1 << 21)	   /* Char is charmed		*/
#define AFF_STONE_SKIN        (1 << 22)
#define AFF_FARSEE			  (1 << 23)
#define AFF_HASTE             (1 << 24)
#define AFF_BLUR              (1 << 25)
#define AFF_VIT               (1 << 26)
#define AFF_COMP_LANG         (1 << 27)
#define AFF_MAJOR_PARA        (1 << 28)
#define AFF_FUMBLING_PRIM     (1 << 29)
#define AFF_FUMBLING_SECOND   (1 << 30)
#define AFF_DROPPED_PRIM      (1 << 31)

/* AFF2_XXX -> affected_by2 O yeah baby Banyal*/
#define AFF2_LIGHT            (1 << 0)
#define AFF2_MGROUP           (1 << 1)
#define AFF2_MINOR_PARALYSIS  (1 << 2)
#define AFF2_KNOCKED_OUT      (1 << 3)
#define AFF2_LEVITATE         (1 << 4)
#define AFF2_WATERBREATH      (1 << 5)
#define AFF2_SOULSHIELD       (1 << 6)
#define AFF2_SILENCE          (1 << 7)
#define AFF2_PROT_FIRE        (1 << 8)
#define AFF2_PROT_COLD        (1 << 9)
#define AFF2_PROT_AIR         (1 << 10)
#define AFF2_PROT_EARTH       (1 << 11)
#define AFF2_FIRESHIELD       (1 << 12)
#define AFF2_COLDSHIELD       (1 << 13)
#define AFF2_MINOR_GLOBE      (1 << 14)
#define AFF2_MAJOR_GLOBE      (1 << 15)
#define AFF2_HARNESS          (1 << 16)
#define AFF2_ON_FIRE	      (1 << 17)
#define AFF2_FEAR	      (1 << 18)
#define AFF2_TONGUES	      (1 << 19)
#define AFF2_DISEASE	      (1 << 20)
#define AFF2_INSANITY	      (1 << 21)
#define AFF2_ULTRAVISION      (1 << 22)
#define AFF2_NEGATE_HEAT      (1 << 23)
#define AFF2_NEGATE_COLD      (1 << 24)
#define AFF2_WATERFORM        (1 << 25)

/* AFF3_XXX -> affected_by3 O yeah baby Banyal*/
#define AFF3_AWARE           (1 << 0)
#define AFF3_REDUCE          (1 << 1)
#define AFF3_ENLARGE         (1 << 2)
#define AFF3_VAMP_TOUCH      (1 << 3)
#define AFF3_RAY_OF_ENFEB    (1 << 4)


/* Modes of connectedness: used by descriptor_data.state */
#define CON_PLAYING	 0		/* Playing - Nominal state	*/
#define CON_CLOSE	 1		/* Disconnecting		*/
#define CON_GET_NAME	 2		/* By what name ..?		*/
#define CON_NAME_CNFRM	 3		/* Did I get that right, x?	*/
#define CON_PASSWORD	 4		/* Password:			*/
#define CON_NEWPASSWD	 5		/* Give me a password for x	*/
#define CON_CNFPASSWD	 6		/* Please retype password:	*/
#define CON_QSEX	 7		/* Sex?				*/
#define CON_QCLASS	 8		/* Class?			*/
#define CON_RMOTD	 9		/* PRESS RETURN after MOTD	*/
#define CON_MENU	 10		/* Your choice: (main menu)	*/
#define CON_EXDESC	 11		/* Enter a new description:	*/
#define CON_CHPWD_GETOLD 12		/* Changing passwd: get old	*/
#define CON_CHPWD_GETNEW 13		/* Changing passwd: get new	*/
#define CON_CHPWD_VRFY   14		/* Verify new password		*/
#define CON_DELCNF1	 15		/* Delete confirmation 1	*/
#define CON_DELCNF2	 16		/* Delete confirmation 2	*/
#define CON_QRACE    17     /* Race?  */
#define CON_QANSI    18     /*ask for term type*/
#define CON_OEDIT	 19		/*. OLC mode - object edit     .*/
#define CON_REDIT	 20		/*. OLC mode - room edit       .*/
#define CON_ZEDIT	 21		/*. OLC mode - zone info edit  .*/
#define CON_MEDIT	 22		/*. OLC mode - mobile edit     .*/
#define CON_SEDIT	 23		/*. OLC mode - shop edit       .*/
#define CON_QROLLSTATS 24
#define CON_QHOMETOWN 25
#define CON_QBONUS1 26
#define CON_QBONUS2 27
#define CON_QBONUS3 28
#define CON_QCANCHAR 29
#define CON_TEXTED   30
#define CON_HEDIT	 31		/*. OLC mode - help edit       .*/
#define CON_TRIGEDIT	 32		/*. OLC mode - trigger edit    .*/
#define CON_CLASSHELP	33		/* Char Gen Class Help		*/
#define CON_SDEDIT      34
#define CON_QDIETY      35
#define CON_QQUESTION1	36
#define CON_QQUESTION2	37
#define CON_QQUESTION3	38
#define CON_QQUESTION4	39
#define CON_QQUESTION5	40
#define CON_QQUESTION6	41
/* Character equipment positions: used as index for char_data.equipment[] */
/* NOTE: Don't confuse these constants with the ITEM_ bitvectors
   which control the valid places you can wear a piece of equipment */
#define WEAR_LIGHT      0
#define WEAR_FINGER_R   1
#define WEAR_FINGER_L   2
#define WEAR_NECK_1     3
#define WEAR_NECK_2     4
#define WEAR_BODY       5
#define WEAR_HEAD       6
#define WEAR_LEGS       7
#define WEAR_FEET       8
#define WEAR_HANDS      9
#define WEAR_ARMS      10
#define WEAR_SHIELD    11
#define WEAR_ABOUT     12
#define WEAR_WAIST     13
#define WEAR_WRIST_R   14
#define WEAR_WRIST_L   15
#define WEAR_WIELD     16
#define WEAR_WIELD2    17
#define WEAR_HOLD      18
#define WEAR_HOLD2	   19
#define WEAR_2HWIELD   20
#define WEAR_EYES      21
#define WEAR_FACE      22
#define WEAR_LEAR      23
#define WEAR_REAR      24
#define WEAR_BADGE     25
#define WEAR_OBELT     26
#define NUM_WEARS      27	/* This must be the # of eq positions!! */


/* object-related defines ********************************************/

/* vnums for portal objects */
#define HEAVENSGATE_OBJ		72
#define MOONWELL_OBJ		33
#define HELLGATE_OBJ		74

/* Item types: used by obj_data.obj_flags.type_flag */
#define ITEM_LIGHT      1		/* Item is a light source	*/
#define ITEM_SCROLL     2		/* Item is a scroll		*/
#define ITEM_WAND       3		/* Item is a wand		*/
#define ITEM_STAFF      4		/* Item is a staff		*/
#define ITEM_WEAPON     5		/* Item is a weapon		*/
#define ITEM_FIREWEAPON 6		/* Unimplemented		*/
#define ITEM_MISSILE    7		/* Unimplemented		*/
#define ITEM_TREASURE   8		/* Item is a treasure, not gold	*/
#define ITEM_ARMOR      9		/* Item is armor		*/
#define ITEM_POTION    10 		/* Item is a potion		*/
#define ITEM_WORN      11		/* Unimplemented		*/
#define ITEM_OTHER     12		/* Misc object			*/
#define ITEM_TRASH     13		/* Trash - shopkeeps won't buy	*/
#define ITEM_TRAP      14		/* Unimplemented		*/
#define ITEM_CONTAINER 15		/* Item is a container		*/
#define ITEM_NOTE      16		/* Item is note 		*/
#define ITEM_DRINKCON  17		/* Item is a drink container	*/
#define ITEM_KEY       18		/* Item is a key		*/
#define ITEM_FOOD      19		/* Item is food			*/
#define ITEM_MONEY     20		/* Item is money (gold)		*/
#define ITEM_PEN       21		/* Item is a pen		*/
#define ITEM_BOAT      22		/* Item is a boat		*/
#define ITEM_FOUNTAIN  23		/* Item is a fountain		*/
#define ITEM_PORTAL    24
#define ITEM_ROPE      25
#define ITEM_SPELLBOOK   26
#define ITEM_WALL      27

/* Take/Wear flags: used by obj_data.obj_flags.wear_flags */
#define ITEM_WEAR_TAKE		(1 << 0)  /* Item can be takes		*/
#define ITEM_WEAR_FINGER	(1 << 1)  /* Can be worn on finger	*/
#define ITEM_WEAR_NECK		(1 << 2)  /* Can be worn around neck 	*/
#define ITEM_WEAR_BODY		(1 << 3)  /* Can be worn on body 	*/
#define ITEM_WEAR_HEAD		(1 << 4)  /* Can be worn on head 	*/
#define ITEM_WEAR_LEGS		(1 << 5)  /* Can be worn on legs	*/
#define ITEM_WEAR_FEET		(1 << 6)  /* Can be worn on feet	*/
#define ITEM_WEAR_HANDS		(1 << 7)  /* Can be worn on hands	*/
#define ITEM_WEAR_ARMS		(1 << 8)  /* Can be worn on arms	*/
#define ITEM_WEAR_SHIELD	(1 << 9)  /* Can be used as a shield	*/
#define ITEM_WEAR_ABOUT		(1 << 10) /* Can be worn about body 	*/
#define ITEM_WEAR_WAIST 	(1 << 11) /* Can be worn around waist 	*/
#define ITEM_WEAR_WRIST		(1 << 12) /* Can be worn on wrist 	*/
#define ITEM_WEAR_WIELD		(1 << 13) /* Can be wielded		*/
#define ITEM_WEAR_HOLD		(1 << 14) /* Can be held		*/
#define ITEM_WEAR_2HWIELD   (1 << 15) /* Can be wielded two handed */
#define ITEM_WEAR_EYES      (1 << 16)
#define ITEM_WEAR_FACE      (1 << 17)
#define ITEM_WEAR_EAR      (1 << 18)
#define ITEM_WEAR_BADGE     (1 << 19)
#define ITEM_WEAR_OBELT     (1 << 20)



/* Extra object flags: used by obj_data.obj_flags.extra_flags */
#define ITEM_GLOW          (1 << 0)	/* Item is glowing		*/
#define ITEM_HUM           (1 << 1)	/* Item is humming		*/
#define ITEM_NORENT        (1 << 2)	/* Item cannot be rented	*/
#define ITEM_NODONATE      (1 << 3)	/* Item cannot be donated	*/
#define ITEM_NOINVIS	   (1 << 4)	/* Item cannot be made invis	*/
#define ITEM_INVISIBLE     (1 << 5)	/* Item is invisible		*/
#define ITEM_MAGIC         (1 << 6)	/* Item is magical		*/
#define ITEM_NODROP        (1 << 7)	/* Item is cursed: can't drop	*/
#define ITEM_BLESS         (1 << 8)	/* Item is blessed		*/
#define ITEM_ANTI_GOOD     (1 << 9)	/* Not usable by good people	*/
#define ITEM_ANTI_EVIL     (1 << 10)	/* Not usable by evil people	*/
#define ITEM_ANTI_NEUTRAL  (1 << 11)	/* Not usable by neutral people	*/
#define ITEM_ANTI_MAGIC_USER (1 << 12)	/* Not usable by mages		*/
#define ITEM_ANTI_CLERIC   (1 << 13)	/* Not usable by clerics	*/
#define ITEM_ANTI_THIEF	   (1 << 14)	/* Not usable by thieves	*/
#define ITEM_ANTI_WARRIOR  (1 << 15)	/* Not usable by warriors	*/
#define ITEM_NOSELL	   (1 << 16)	/* Shopkeepers won't touch it	*/
#define ITEM_ANTI_PALADIN  (1 << 17)
#define ITEM_ANTI_ANTI_PALADIN  (1 << 18)
#define ITEM_ANTI_RANGER   (1 << 19)
#define ITEM_ANTI_DRUID    (1 << 20)
#define ITEM_ANTI_SHAMAN   (1 << 21)
#define ITEM_ANTI_ASSASSIN  (1 << 22)
#define ITEM_ANTI_MERCENARY  (1 << 23)
#define ITEM_ANTI_NECROMANCER  (1 << 24)
#define ITEM_ANTI_CONJURER (1 << 25)
#define ITEM_NOBURN	   (1 << 26)
#define ITEM_HIDDEN        (1 << 27)
#define ITEM_TRANSIENT     (1 << 28)
#define ITEM_FLOAT	   (1 << 29)
#define ITEM_CONT_LIGHT     (1 << 30)
#define ITEM_WAS_DISARMED   (1 << 31)

/* These are the defines used by spell_flags for objs-BURU 25/5/98.*/
#define ITEM_BLIND			(1 << 0) /* Blinds PC wearing obj */
#define ITEM_DET_INVIS			(1 << 1) /* Self explanatory */
#define ITEM_DET_ALIGN			(1 << 2)
#define ITEM_DET_MAGIC		(1 << 3)
#define ITEM_BLUR			(1 << 4)
#define ITEM_HASTE			(1 << 5)
#define ITEM_INVIS			(1 << 6)
#define ITEM_PROT_EVIL			(1 << 7)
#define ITEM_PROT_GOOD		(1 << 8)
#define ITEM_SANCTUARY		(1 << 9)
#define ITEM_SLEEP			(1 << 10)
#define ITEM_STONESKIN			(1 << 11)
#define ITEM_SENSE_LIFE		(1 << 12)
#define ITEM_INFRA			(1 << 13)
#define ITEM_FLY			(1 << 14)
#define ITEM_FARSEE			(1 << 15)
#define ITEM_COMP_LANG		(1 << 16)
#define ITEM_PARALIZE			(1 << 17)
#define ITEM_POISON			(1 << 18)
#define ITEM_SNEAK			(1 << 19)
#define ITEM_HIDE			(1 << 20)
#define ITEM_WATERWALK		(1 << 21)
#define ITEM_NOTRACK			(1 << 22)




/* Modifier constants used with obj affects ('A' fields) */
#define APPLY_NONE              0	/* No effect			*/
#define APPLY_STR               1	/* Apply to strength		*/
#define APPLY_DEX               2	/* Apply to dexterity		*/
#define APPLY_INT               3	/* Apply to constitution	*/
#define APPLY_WIS               4	/* Apply to wisdom		*/
#define APPLY_CON               5	/* Apply to constitution	*/
#define APPLY_CHA		6	/* Apply to charisma		*/
#define APPLY_CLASS             7	/* Reserved			*/
#define APPLY_LEVEL             8	/* Reserved			*/
#define APPLY_AGE               9	/* Apply to age			*/
#define APPLY_CHAR_WEIGHT      10	/* Apply to weight		*/
#define APPLY_CHAR_HEIGHT      11	/* Apply to height		*/
#define APPLY_MANA             12	/* Apply to max mana		*/
#define APPLY_HIT              13	/* Apply to max hit points	*/
#define APPLY_MOVE             14	/* Apply to max move points	*/
#define APPLY_GOLD             15	/* Reserved			*/
#define APPLY_EXP              16	/* Reserved			*/
#define APPLY_AC               17	/* Apply to Armor Class		*/
#define APPLY_HITROLL          18	/* Apply to hitroll		*/
#define APPLY_DAMROLL          19	/* Apply to damage roll		*/
#define APPLY_SAVING_PARA      20	/* Apply to save throw: paralz	*/
#define APPLY_SAVING_ROD       21	/* Apply to save throw: rods	*/
#define APPLY_SAVING_PETRI     22	/* Apply to save throw: petrif	*/
#define APPLY_SAVING_BREATH    23	/* Apply to save throw: breath	*/
#define APPLY_SAVING_SPELL     24	/* Apply to save throw: spells	*/
#define APPLY_SIZE             25   /*WELL SHIT LETS SET SIZE...BANYAL*/
#define APPLY_HIT_REGEN        26
#define APPLY_MANA_REGEN       27


/* Container flags - value[1] */
#define CONT_CLOSEABLE      (1 << 0)	/* Container can be closed	*/
#define CONT_PICKPROOF      (1 << 1)	/* Container is pickproof	*/
#define CONT_CLOSED         (1 << 2)	/* Container is closed		*/
#define CONT_LOCKED         (1 << 3)	/* Container is locked		*/


/* Some different kind of liquids for use in values of drink containers */
#define LIQ_WATER      0
#define LIQ_BEER       1
#define LIQ_WINE       2
#define LIQ_ALE        3
#define LIQ_DARKALE    4
#define LIQ_WHISKY     5
#define LIQ_LEMONADE   6
#define LIQ_FIREBRT    7
#define LIQ_LOCALSPC   8
#define LIQ_SLIME      9
#define LIQ_MILK       10
#define LIQ_TEA        11
#define LIQ_COFFE      12
#define LIQ_BLOOD      13
#define LIQ_SALTWATER  14
#define LIQ_CLEARWATER 15


/* other miscellaneous defines *******************************************/


/* Player conditions */
#define DRUNK        0
#define FULL         1
#define THIRST       2

/*player innatetimes */
#define INV    0
#define STR    1
#define DRK    2
#define LVT    3


/* Sun state for weather_data */
#define SUN_DARK	0
#define SUN_RISE	1
#define SUN_LIGHT	2
#define SUN_SET		3


/* Sky conditions for weather_data */
#define SKY_CLOUDLESS	0
#define SKY_CLOUDY	1
#define SKY_RAINING	2
#define SKY_LIGHTNING	3


/* Rent codes */
#define RENT_UNDEF      0
#define RENT_CRASH      1
#define RENT_RENTED     2
#define RENT_CRYO       3
#define RENT_FORCED     4
#define RENT_TIMEDOUT   5


/* other #defined constants **********************************************/

/*
 * **DO**NOT** blindly change the number of levels in your MUD merely by
 * changing these numbers and without changing the rest of the code to match.
 * Other changes throughout the code are required.  See coding.doc for
 * details.
 */
/* Changed by David Endre 1/16/99 to allow for 99 mortal levels */
#define LVL_IMPL       105 /* Overlord */
#define LVL_OVERLORD   105 /* Overlord */
#define LVL_HEAD_C     104 /* Implementer */
#define LVL_HEAD_B     103 /* Greater God */
#define LVL_GRGOD      102 /* Lesser God */
#define LVL_GOD	       101 /* Demi-God */
#define LVL_IMMORT     100 /* Avatar */
#define LVL_MAX_MORT    99
/*Ok I just re-defined these levels so I didnt have to replace the old ones*/
#define LVL_BUILDER    101 /* Demi-God */

#define LVL_FREEZE	LVL_GRGOD

/* PC spell circles */
 /* change as needed */
#define CIRCLE_1	1
#define CIRCLE_2	6
#define CIRCLE_3	11
#define CIRCLE_4	16
#define CIRCLE_5	21
#define CIRCLE_6	26
#define CIRCLE_7	31
#define CIRCLE_8	36
#define CIRCLE_9   41
#define CIRCLE_10	46
#define CIRCLE_11   51
#define CIRCLE_12   56
#define CIRCLE_13   61
#define CIRCLE_14   66

 #define NUM_SPELL_CIRCLES 14

 /* MAX_CHAR SPELLS is the maximum number of spells a max_level char can */
 /* have   Use this value with spell_save fcn's  DO NOT MODIFY independent */
 /* of the circle/level assignment table in spell_mem.c */
 #define MAX_CHAR_SPELLS   135

 /*trophy defines*/
#define MAX_TROPHY 60 /*Max amount you can increase trphy to that wont
ruin pfile*/
#define USE_TROPHY 20 /*the amount of trophy game using*/


#define NUM_OF_DIRS	8	/* number of directions in a room (nsewud) */

#define OPT_USEC	100000	/* 10 passes per second */
#define PASSES_PER_SEC	(1000000 / OPT_USEC)
#define RL_SEC		* PASSES_PER_SEC

#define PULSE_ZONE      (10 RL_SEC)
#define PULSE_MOBILE    (10 RL_SEC)
#define PULSE_VIOLENCE  (2 RL_SEC)

#define SMALL_BUFSIZE		1024
#define LARGE_BUFSIZE		(48 * 1024)
#define GARBAGE_SPACE		32

#define MOB_DROPPED_WEAP_DELAY  2 /* rounds til mob can recover a dropped weapon */
#define MOB_FUMBLING_DELAY      2 /* rounds for mob to recover from fumble */
#define MOB_HEADBUTT_DELAY      3 /* rounds between mob headbutts */
#define PC_BASH_DELAY          10 /* rounds between bashes */
#define PC_BERSERK_DELAY        5 /* rounds between berserks */
#define PC_DROPPED_WEAP_DELAY   2 /* rounds til pc can recover a dropped weapon */
#define PC_FUMBLING_DELAY       2 /* rounds for pc to recover from fumble */
#define PC_HEADBUTT_DELAY       3 /* rounds between pc headbutts */
#define PC_INSTANTKILL_DELAY   10 /* rounds between instantkills */
#define MAX_STRING_LENGTH	9992
#define MAX_INPUT_LENGTH	256	/* Max length per *line* of input */
#define MAX_RAW_INPUT_LENGTH	512	/* Max size of *raw* input */
#define MAX_MESSAGES		100
#define MAX_NAME_LENGTH		20  /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_PWD_LENGTH		10  /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_TITLE_LENGTH	80  /* Used in char_file_u *DO*NOT*CHANGE* */
#define HOST_LENGTH		30  /* Used in char_file_u *DO*NOT*CHANGE* */
#define EXDSCR_LENGTH		240 /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_TONGUE		3   /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_SKILLS		650 /* Used in char_file_u *DO*NOT*CHANGE*
*/
#define MAX_AFFECT		32  /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_OBJ_AFFECT		6  /* Used in obj_file_elem *DO*NOT*CHANGE* */


/**********************************************************************
* Structures                                                          *
**********************************************************************/


typedef signed char		sbyte;
typedef unsigned char		ubyte;
typedef signed short int	sh_int;
typedef unsigned short int	ush_int;
typedef char			bool;
typedef struct witness_data    wtns_rec;

#ifndef CIRCLE_WINDOWS
typedef char			byte;
#endif

typedef int	room_num;
typedef int	obj_num;

/* Used for portal decay messages. constants.c */
struct portal_decay_type {
    int portal_vnum;
    char *message;
};

/* Used for time-based spells */
struct spell_area_event_obj {
    int spell;
    int room;
    struct char_data *ch;
};
/*track info*/
struct track_info {
	sh_int speed;
	sh_int range;
	sh_int sense;
};


/* Used to undo wandering woods spell */
struct room_undo_event_obj {
    int exit;
    int room;
    int connect_room;
};

/* Used for delayed spell damage effects */
struct spell_delayed_event_obj {
    int spell;
    struct char_data *ch;
    struct char_data *victim;
};

struct track_delayed_event_obj {
	struct track_info track;
	struct char_data *victim;
	struct char_data *ch;
	int track_room;
};



/* get out of jail free card... */
struct jail_event_obj
{
    struct char_data *ch;
    int room;
};

/* hemispheres for weather and time NE< NW< SE< SW */
typedef struct _hemisphere
{
  int season;
  int sunlight;
} HEMISPHERE, *LPHEMISPHERE;

#define NUM_HEMISPHERES  4

#define HEMISPHERE_NORTHWEST  0
#define HEMISPHERE_NORTHEAST  1
#define HEMISPHERE_SOUTHWEST  2
#define HEMISPHERE_SOUTHEAST  3

/* Extra description: used in objects, mobiles, and rooms */
struct extra_descr_data {
   char	*keyword;                 /* Keyword in look/examine          */
   char	*description;             /* What to see                      */
   struct extra_descr_data *next; /* Next in list                     */
};

struct char_coins_data {
	int plat; /*carried*/
	int gold; /*carried*/
	int silver; /*carried*/
	int copper; /*carriedt*/
	long bank_plat; /*coins in bank*/
	long bank_gold; /*coins in bank*/
	long bank_silver; /*silver in bank*/
	long bank_copper; /*copper in bank*/
};
typedef struct char_coins_data char_coins;



/* object-related structures ******************************************/


/* object flags; used in obj_data */
struct obj_flag_data {
   int	value[4];	/* Values of the item (see list)    */
   byte type_flag;	/* Type of item			    */
   int	wear_flags;	/* Where you can wear it	    */
   int	extra_flags;	/* If it hums, glows, etc.	    */
   int	weight;		/* Weigt what else                  */
   int	cost;		/* Value when sold (gp.)            */
   int	cost_per_day;	/* Cost to keep pr. real day        */
   int	timer;		/* Timer for object                 */
   int spell_flags;        /* Object Spell affections - buru 25/5/98 */
   int spell_flags2;
   int spell_flags3;
   long	bitvector;	/* To set chars bits                */
};

struct casting
{
        int spell;
        int casting_time;
        struct char_data *tch;  /* set up the targets */
        struct obj_data *obj;
        char *misc;
	int target_status;
};

struct spell_dam {
    char *note;
    sh_int spell;
    sh_int intern_dam;
    sh_int npc_static;
    sh_int npc_no_dice;
    sh_int npc_no_face;
    sh_int pc_static;
    sh_int pc_no_dice;
    sh_int pc_no_face;
    sh_int npc_reduce_factor;
    sh_int use_bonus;
    sh_int max_bonus;
    sh_int lvl_mult;
};

/* Used in obj_file_elem *DO*NOT*CHANGE* */
struct obj_affected_type {
   byte location;      /* Which ability to change (APPLY_XXX) */
   sh_int modifier;     /* How much it changes by              */
};


/* ================== Memory Structure for Objects ================== */
struct obj_data {
   obj_num item_number;		/* Where in data-base			*/
   room_num in_room;		/* In what room -1 when conta/carr	*/
int mob_from;/*where the mob is from*/
   struct obj_flag_data obj_flags;/* Object information               */
   struct obj_affected_type affected[MAX_OBJ_AFFECT];  /* affects */

   char	*name;                    /* Title of object :get etc.        */
   char	*description;		  /* When in room                     */
   char	*short_description;       /* when worn/carry/in cont.         */
   char	*action_description;      /* What to write when used          */
   struct extra_descr_data *ex_description; /* extra descriptions     */
   struct char_data *carried_by;  /* Carried by :NULL in room/conta   */
   struct char_data *worn_by;	  /* Worn by?			      */
   sh_int worn_on;		  /* Worn where?		      */

   struct obj_data *in_obj;       /* In what object NULL when none    */
   struct obj_data *contains;     /* Contains objects                 */

   long id;                       /* used by DG triggers              */
   struct trig_proto_list *proto_script; /* list of default triggers  */
   struct script_data *script;    /* script info for the object       */

   struct char_data *last_to_hold;		/* If MOB forcibly looses item      */

   struct obj_data *next_content; /* For 'contains' lists             */
   struct obj_data *next;         /* For the object list              */
    sh_int spell_component;
	int object_limitation;
	int spare1;
	long spare2;
	sh_int spare3;

};
/* ======================================================================= */


/* ====================== File Element for Objects ======================= */
/*                BEWARE: Changing it will ruin rent files		   */
struct obj_file_elem {
   obj_num item_number;
   sh_int locate;  /* that's the (1+)wear-location (when equipped) or
 		      (20+)index in obj file (if it's in a container)  */
   int	value[4];
   int	extra_flags;
   int	weight;
   int	timer;
   int 	spell_flags; /* Object Spell affections - buru 25/5/98 */
   int  spell_flags2;
   int  spell_flags3;
   long	bitvector;
   char PSE_Desc[128];   /* ouch, sorry for the kludge here guys:( */
   struct obj_affected_type affected[MAX_OBJ_AFFECT];
};




struct current_info {
   int room_vnum;
   int direction;
   int percent;
};


/* header block for rent files.  BEWARE: Changing it will ruin rent files  */
struct rent_info {
   int	time;
   int	rentcode;
   int	net_cost_per_diem;
   int	nitems;
   struct char_coins_data coins;
   int	spare6;
   int	spare7;
   int  spare8;
   long spare9;
   long spare10;
   sh_int spare11;

};

/* ======================================================================= */


/* room-related structures ************************************************/


struct room_direction_data {
   char	*general_description;       /* When look DIR.			*/

   char	*keyword;		/* for open/close			*/

   int exit_info;		/* Exit info				*/
   obj_num key;			/* Key's number (-1 for no key)		*/
   room_num to_room;		/* Where direction leads (NOWHERE)	*/
};

struct raff_node {
	room_num room;        /* location in the world[] array of the room */
	int      timer;       /* how many ticks this affection lasts */
	long     affection;   /* which affection does this room have */
	int      spell;       /* the spell number */

	struct raff_node *next; /* link to the next node */
};


/* ================== Memory Structure for room ======================= */
struct room_data {
   room_num number;		/* Rooms number	(vnum)		      */
   int zone;                 /* Room zone (for resetting)          */
   int	sector_type;            /* sector type (move/hide)            */
   char	*name;                  /* Rooms name 'You are ...'           */
   char	*description;           /* Shown when entered                 */
   struct extra_descr_data *ex_description; /* for examine/look       */
   struct room_direction_data *dir_option[NUM_OF_DIRS]; /* Directions */
   int room_flags;		/* DEATH,DARK ... etc                 */

   byte light;                  /* Number of lightsources in room     */
   SPECIAL(*func);

   struct trig_proto_list *proto_script; /* list of default triggers  */
   struct script_data *script;  /* script info for the object         */

   struct obj_data *contents;   /* List of items in room              */
   struct char_data *people;    /* List of NPC / PC in room          */
   long  room_affections;    /* bitvector for spells/skills */
};
/* ====================================================================== */


/* char-related structures ************************************************/


/* memory structure for characters */
struct memory_rec_struct {
   long	id;
   struct memory_rec_struct *next;
};

typedef struct memory_rec_struct memory_rec;

/* MOBProgram foo */
  struct mob_prog_act_list {
    struct mob_prog_act_list *next;
    char *buf;
    struct char_data *ch;
    struct obj_data *obj;
    void *vo;
  };
  typedef struct mob_prog_act_list MPROG_ACT_LIST;

  struct mob_prog_data {
    struct mob_prog_data *next;
    int type;
    char *arglist;
    char *comlist;
  };
   typedef struct mob_prog_data MPROG_DATA;

  extern bool MOBTrigger;

  #define ERROR_PROG        -1
  #define IN_FILE_PROG       0
  #define ACT_PROG           1
  #define SPEECH_PROG        2
  #define RAND_PROG          4
  #define FIGHT_PROG         8
  #define DEATH_PROG        16
  #define HITPRCNT_PROG     32
  #define ENTRY_PROG        64
  #define GREET_PROG       128
  #define ALL_GREET_PROG   256
  #define GIVE_PROG        512
  #define BRIBE_PROG      1024

  /* end of MOBProg foo */




/* This structure is purely intended to be an easy way to transfer */
/* and return information about time (real or mudwise).            */
struct time_info_data {
   int hours, day, month;
   sh_int year;
};


/* These data contain information about a players time data */
struct time_data {
   time_t birth;    /* This represents the characters age                */
   time_t logon;    /* Time of the last logon (used to calculate played) */
   int	played;     /* This is the total accumulated time played in secs */
};

/* This structure is for memorized spells */
struct mem_list{
   int spell;
   int mem_time;
   int can_cast;
   struct mem_list *next;
};



/* general player-related info, usually PC's and NPC's */
struct char_player_data {
   char	passwd[MAX_PWD_LENGTH+1]; /* character's password      */
   char	*name;	       /* PC / NPC s name (kill ...  )         */
   char	*short_descr;  /* for NPC 'actions'                    */
   char	*long_descr;   /* for 'look'			       */
   char	*description;  /* Extra descriptions                   */
   char	*title;        /* PC / NPC's title  */
   char *prompt;       /* Player prompt*/
   byte sex;           /* PC / NPC's sex                       */
   byte class;         /* PC / NPC's class		       */
   byte race;          /* PC / NPC's race              */
   byte race_align;		/*PC / NPC's race_align*/
   byte level;         /* PC / NPC's level                     */
   int	hometown;      /* PC s Hometown (zone)                 */
   struct time_data time;  /* PC's AGE in days                 */
   ubyte weight;       /* PC / NPC's weight                    */
   ubyte height;       /* PC / NPC's height                    */
   byte size;
};


/* Char's abilities.  Used in char_file_u *DO*NOT*CHANGE* */
struct char_ability_data {
   sbyte str;
   sbyte str_add;      /* 000 - 100 if strength 18             */
   sbyte intel;
   sbyte wis;
   sbyte dex;
   sbyte con;
   sbyte cha;
};


/* Char's points.  Used in char_file_u *DO*NOT*CHANGE* */
struct char_point_data {
   sh_int mana;
   sh_int max_mana;     /* Max move for PC/NPC			   */
   sh_int hit;
   sh_int max_hit;      /* Max hit for PC/NPC                      */
   sh_int move;
   sh_int max_move;     /* Max move for PC/NPC                     */
   sh_int armor;        /* Internal -100..100, external -10..10 AC */
   struct char_coins_data coins;
   long	exp;            /* The experience of the player            */
           /* The experience of the player            */

   sbyte hitroll;       /* Any bonus or penalty to the hit roll    */
   sbyte damroll;       /* Any bonus or penalty to the damage roll */
};

struct trophy_data {
    int   virtual;
    float value;
};

/*
 * char_special_data_saved: specials which both a PC and an NPC have in
 * common, but which must be saved to the playerfile for PC's.
 *
 * WARNING:  Do not change this structure.  Doing so will ruin the
 * playerfile.  If you want to add to the playerfile, use the spares
 * in player_special_data.
 */
struct char_special_data_saved {
   int	alignment;		/* +-1000 for alignments                */
   long	idnum;			/* player's idnum; -1 for mobiles	*/
   long	act;			/* act flag for NPC's; player flag for PC's */

   long	affected_by;		/* Bitvector for spells/skills affected by */
   long affected_by2;
   long affected_by3;
   sh_int apply_saving_throw[5]; /* Saving throw (Bonuses)		*/
};


/* Special playing constants shared by PCs and NPCs which aren't in pfile */
struct char_special_data {
   struct char_data *fighting;	/* Opponent				*/
   struct char_data *hunting;	/* Char hunted by this char		*/
   struct char_data *riding;
   struct char_data *ridden_by;
struct char_data *consented;
   byte position;		/* Standing, fighting, sleeping, etc.	*/
   byte position1;

   /* this was ubyte before, which only gives up to 255 pulse delay */
   unsigned long action_delays[MAX_ACTION_DELAYS];

  wtns_rec *witnessed;           /* linked list of witness records */
  sh_int jail_time;
  struct char_data *arrest_by;
  struct char_data *arrest_link;
  struct char_data *witnessing;
  struct char_data *witness_vict;
  int witness_cmd;

   int	carry_weight;		/* Carried weight			*/
   byte carry_items;		/* Number of items carried		*/
   int	timer;			/* Timer for update			*/
   sbyte hitgain;
   sbyte managain;

   struct char_special_data_saved saved; /* constants saved in plrfile	*/
};


/*
 *  If you want to add new values to the playerfile, do it here.  DO NOT
 * ADD, DELETE OR MOVE ANY OF THE VARIABLES - doing so will change the
 * size of the structure and ruin the playerfile.  However, you can change
 * the names of the spares to something more meaningful, and then use them
 * in your new code.  They will automatically be transferred from the
 * playerfile into memory when players log in.
 */
struct player_special_data_saved {
   sh_int skills[MAX_SKILLS+1];	/* array of skills plus skill 0		*/
   byte PADDING0;		/* used to be spells_to_learn		*/
   bool talks[MAX_TONGUE];	/* PC s Tongues 0 for NPC		*/
   int	wimp_level;		/* Below this # of hit points, flee!	*/
   byte freeze_level;		/* Level of god who froze char, if any	*/
   sh_int invis_level;		/* level of invisibility		*/
   room_num load_room;		/* Which room to place char in		*/
   long	pref;			/* preference flags for PC's.		*/
   ubyte bad_pws;		/* number of bad password attemps	*/
   sbyte conditions[3];       /* Drunk, full, thirsty			*/
   sbyte innatetime[4];     /*Innate timers banyal*/
   sh_int speaking;
    struct trophy_data trophy[MAX_TROPHY];
    int top;
    float frag;
   /* PC spell memory save */
   /* spellnum and can_cast flag*/
   int memmed_spells[MAX_CHAR_SPELLS][2];

   /* number of spells in memory*/
   int spells_in_mem;

   /* spares below for future expansion.  You can change the names from
      'sparen' to something meaningful, but don't change the order.  */

   ubyte spheres[6];
   ubyte spare;
   ubyte spare1;
   ubyte clan;
   ubyte clan_rank;
   ubyte spare2;
   ubyte spare3;
   ubyte spare4;
   ubyte spare5;
   int spells_to_learn;		/* How many can you learn yet this level*/
   int olc_zone;
   int olc2_zone;
   int aggressive;
   int olc3_zone;
   int spare11;                /* Rank within clan */
   int olc4_zone;
   int olc5_zone;
   int diety;
   int spare15;
   int spare23;
   int lastlevel;
   int nathps;
   long	spare17;
   long	spare18;
   long spare44;
   long	spare19;
   long	spare20;
   long spare25;
   long	spare21;
   sh_int spare31;
   sh_int spare32;
};

/*
 * Specials needed only by PCs, not NPCs.  Space for this structure is
 * not allocated in memory for NPCs, but it is for PCs and the portion
 * of it labelled 'saved' is saved in the playerfile.  This structure can
 * be changed freely; beware, though, that changing the contents of
 * player_special_data_saved will corrupt the playerfile.
 */
struct player_special_data {
   struct player_special_data_saved saved;

   char	*poofin;		/* Description on arrival of a god.     */
   char	*poofout;		/* Description upon a god's exit.       */
   struct alias *aliases;	/* Character's aliases			*/
   long last_tell;		/* idnum of last tell from		*/
   void *last_olc_targ;		/* olc control				*/
   int last_olc_mode;		/* olc control				*/
   byte roll[6];
   struct char_data *ignored;
};


/* Specials used by NPCs, not PCs */
struct mob_special_data {
int ex_plat;
int ex_gold;
  sbyte ex_face;
   int ex_no_dice;
   int zone;
   sbyte ex_damroll;
   sbyte ex_hitroll;
   int ex_main_hp;
   byte skills[MAX_SKILLS+1];
   long ex_exp;
   byte class;
   sh_int ex_hit;
   sh_int ex_max_hit;
   byte last_direction;     /* The last direction the monster went     */
   int	attack_type;        /* The Attack Type Bitvector for NPC's     */
   byte default_pos;        /* Default position for NPC                */
   memory_rec *memory;	    /* List of attackers to remember	       */
   sbyte damnodice;          /* The number of damage dice's	       */
   sbyte damsizedice;        /* The size of the damage dice's           */
   sbyte ex_damnodice;
   sbyte ex_damsizedice;
   int wait_state;	    /* Wait state for bashed mobs*/
   int mem_state[12];
   int mem_memed[12];
   sh_int ex_armor;
};

/* An affect structure.  Used in char_file_u *DO*NOT*CHANGE* */
struct affected_type {
   sh_int type;          /* The type of spell that caused this      */
   sh_int duration;      /* For how long its effects will last      */
   sh_int modifier;       /* This is added to apropriate ability     */
   byte location;        /* Tells which ability to change(APPLY_XXX)*/
   long	bitvector;       /* Tells which bits to set (AFF_XXX)       */
   long bitvector2;
   long bitvector3;

   struct affected_type *next;
};


/* Structure used for chars following other chars */
struct follow_type {
   struct char_data *follower;
   struct follow_type *next;
};


/* ================== Structure for player/non-player ===================== */
struct char_data {
   int pfilepos;			 /* playerfile pos		  */
   long nr;                            /* Mob's rnum			  */
   room_num in_room;                     /* Location (real room number)	  */
   room_num was_in_room;		 /* location for linkdead people  */

struct mem_list *spell_list;          /* spells in mem queue           */
  int num_spells;			 /* number of spells in mem list  */
  int num_memmed;			 /* hw many are currently memmed*/
  int mem_status;			 /* is the PC memming now?*/
  int clan_snoop;			 /* clan chat snoop */
/* number of spells memmed from each circle */
  int spells_memmed_circle[NUM_SPELL_CIRCLES + 1];


   struct char_player_data player;       /* Normal data                   */
   struct char_ability_data view_abils;  /*Sets viewing data*/
   struct char_ability_data vaff_abils;		/*Changes viewing data*/
   struct char_ability_data real_abils;	 /* Abilities without modifiers   */
   struct char_ability_data aff_abils;	 /* Abils with spells/stones/etc  */
   struct char_point_data points;        /* Points                        */
   struct char_special_data char_specials;	/* PC/NPC specials	  */
   struct player_special_data *player_specials; /* PC specials		  */
   struct mob_special_data mob_specials;	/* NPC specials		  */

   struct affected_type *affected;       /* affected by what spells       */
   struct obj_data *equipment[NUM_WEARS];/* Equipment array               */

   struct obj_data *carrying;            /* Head of list                  */
   struct descriptor_data *desc;         /* NULL for mobiles              */

   long id;                            /* used by DG triggers             */
   struct trig_proto_list *proto_script; /* list of default triggers      */
   struct script_data *script;         /* script info for the object      */


   struct char_data *next_in_room;     /* For room->people - list         */
   struct char_data *next;             /* For either monster or ppl-list  */
   struct char_data *next_fighting;    /* For fighting list               */
   struct char_data *next_memming;     /* for currently meming PC's       */
   struct char_data *guarded_by;       /* Character guarding this char    */
   struct char_data *guarding;	       /* Char this char is guarding      */

   struct follow_type *followers;        /* List of chars followers       */
   struct char_data *master;             /* Who is char following?        */
      struct group_type *groupees;			/*list of chars
grouped*/

   struct char_data *groupmaster;		/*group master*/

   struct mgroup_type *mgroupees;		/*major groups list*/

 struct char_data *mgroupmaster;		/*groups master*/

   struct event *points_event[3]; 	 /* events for regening H/M/V     */
   struct event *jail_event;              /* get out of jail free... */
   struct event *camp_event;
   struct event *track_delayed_event;

   MPROG_ACT_LIST *mpact;
   int mpactnum;
   struct casting casting;   /* note this is NOT a pointer */
   int page_length;
};

/* in order to make certain pieces of code eaiser to port, and more readable
 * i type deff'ed to this...

 typedef struct char_data P_char;
*/
/*It was also crashing mud, the fix is teted and proven it somehow ws corrutping ch
Banyal*/

/* ====================================================================== */


/* ==================== File Structure for Player ======================= */
/*             BEWARE: Changing it will ruin the playerfile		  */
struct char_file_u {
   /* char_player_data */
   char	name[MAX_NAME_LENGTH+1];
   char	description[EXDSCR_LENGTH];
   char	title[MAX_TITLE_LENGTH+1];
   char prompt[MAX_INPUT_LENGTH+1];
   byte sex;
   byte class;
   byte race;
   byte race_align;
   byte level;
   int hometown;
   time_t birth;   /* Time of birth of character     */
   int	played;    /* Number of secs played in total */
   ubyte weight;
   ubyte height;
   byte size;

   char	pwd[MAX_PWD_LENGTH+1];    /* character's password */

   struct char_special_data_saved char_specials_saved;
   struct player_special_data_saved player_specials_saved;
   struct char_ability_data abilities;
   struct char_point_data points;
   struct affected_type affected[MAX_AFFECT];

   time_t last_logon;		/* Time (in secs) of last logon */
   char host[HOST_LENGTH+1];	/* host of last logon */
};
/* ====================================================================== */


/* descriptor-related structures ******************************************/


struct txt_block {
   char	*text;
   int aliased;
   struct txt_block *next;
};


struct txt_q {
   struct txt_block *head;
   struct txt_block *tail;
};


struct descriptor_data {
   socket_t	descriptor;		/* file descriptor for socket		*/
   char	host[HOST_LENGTH+1];	/* hostname				*/
   byte	bad_pws;		/* number of bad pw attemps this login	*/
   byte idle_tics;		/* tics idle at password prompt		*/
   int	connected;		/* mode of 'connectedness'		*/
   int	wait;			/* wait for how many loops		*/
   int	desc_num;		/* unique num assigned to desc		*/
   time_t login_time;		/* when the person connected		*/
   char *showstr_head;		/* for keeping track of an internal str	*/
   char **showstr_vector;	/* for paging through texts		*/
   int  showstr_count;		/* number of pages to page through	*/
   int  showstr_page;		/* which page are we currently showing?	*/
   char	**str;			/* for the modify-str system		*/
   char *backstr;		/* added for handling abort buffers     */
   size_t	max_str;		/*		-			*/
   long	mail_to;		/* name for mail system			*/
   int mail_vnum;
   int	prompt_mode;		/* control of prompt-printing		*/
   char	inbuf[MAX_RAW_INPUT_LENGTH];  /* buffer for raw input		*/
   char	last_input[MAX_INPUT_LENGTH]; /* the last input			*/
   char small_outbuf[SMALL_BUFSIZE];  /* standard output buffer		*/
   char *output;		/* ptr to the current output buffer	*/
   int  bufptr;			/* ptr to end of current output		*/
   int	bufspace;		/* space left in the output buffer	*/
   struct txt_block *large_outbuf; /* ptr to large buffer, if we need it */
   struct txt_q input;		/* q of unprocessed input		*/
   struct char_data *character;	/* linked to char			*/
   struct char_data *original;	/* original char if switched		*/
   struct descriptor_data *snooping; /* Who is this char snooping	*/
   struct descriptor_data *snoop_by; /* And who is snooping this char	*/
   struct descriptor_data *next; /* link to next descriptor		*/
   struct olc_data *olc;
   char *storage;
};


/* other miscellaneous structures ***************************************/


struct msg_type {
   char	*attacker_msg;  /* message to attacker */
   char	*victim_msg;    /* message to victim   */
   char	*room_msg;      /* message to room     */
};


struct message_type {
   struct msg_type die_msg;	/* messages when death			*/
   struct msg_type miss_msg;	/* messages when miss			*/
   struct msg_type hit_msg;	/* messages when hit			*/
   struct msg_type god_msg;	/* messages when hit on god		*/
   struct message_type *next;	/* to next messages of this kind.	*/
};


struct message_list {
   int	a_type;			/* Attack type				*/
   int	number_of_attacks;	/* How many attack messages to chose from. */
   struct message_type *msg;	/* List of messages.			*/
};


struct group_type {
	struct char_data *groupee;
	struct group_type *next;
};

struct mgroup_type {
	struct char_data *mgroupee;
	struct mgroup_type *next;
};


struct dex_skill_type {
   sh_int p_pocket;
   sh_int p_locks;
   sh_int traps;
   sh_int sneak;
   sh_int hide;
};


struct dex_app_type {
   sh_int reaction;
   sh_int miss_att;
   sh_int defensive;
};


struct str_app_type {
   sh_int tohit;    /* To Hit (THAC0) Bonus/Penalty        */
   sh_int todam;    /* Damage Bonus/Penalty                */
   sh_int carry_w;  /* Maximum weight that can be carrried */
   sh_int wield_w;  /* Maximum weight that can be wielded  */
};


struct wis_app_type {
   byte bonus;       /* how many practices player gains per lev */
};


struct int_app_type {
   byte learn;       /* how many % a player learns a spell/skill */
};


struct con_app_type {
   sh_int hitp;
   sh_int shock;
};


struct weather_data {
   int	pressure;	/* How is the pressure ( Mb ) */
   int	change;	/* How fast and what way does it change. */
   int	sky;	/* How is the sky. */
   int	sunlight;	/* And how much sun. */
};


/*struct title_type {
   char	*title_m;
   char	*title_f;
   int	exp;
};*/


/* element in monster and object index-tables   */
struct index_data {
   int	virtual;    /* virtual number of this mob/obj           */
   int	number;     /* number of existing units of this mob/obj	*/
   int  progtypes;  /* program types for MOBProg              */
   MPROG_DATA *mobprogs; /* programs for MOBProg              */
   SPECIAL(*func);
   	int object_limit;	/*vairies during game NOT saved to file*/
   char *farg;         /* string argument for special function     */
   struct trig_data *proto;     /* for triggers... the trigger     */
};

/* linked list for mob/object prototype trigger lists */
struct trig_proto_list {
  int vnum;                             /* vnum of the trigger   */
  struct trig_proto_list *next;         /* next trigger          */
};

struct camp_event {
     struct char_data *ch;
     int was_in;
   };
struct witness_data {
  time_t time;                  /* When did it happen? */
  char *attacker;               /* who did it? */
  char *victim;                 /* who did they do it to? */
  ubyte crime;                  /* what did they do? */
  int room;                     /* Where did they do it?  (VIRTUAL!) */
  wtns_rec *next;               /* next record (or NULL if none) */
};


struct player_frags_data {
    int playerid;
    char	name[MAX_NAME_LENGTH+20];
    float frag;
};
@


1.206
log
@Fix compiler warnings.
@
text
@/***************************************************************************
 * $Id: structs.h,v 1.205 2010/06/09 22:32:01 mud Exp myc $
 ***************************************************************************/
/***************************************************************************
 *   File: structs.h                                      Part of FieryMUD *
 *  Usage: header file for central structures and contstants               *
 *                                                                         *
 *  All rights reserved.  See license.doc for complete information.        *
 *                                                                         *
 *  FieryMUD Copyright (C) 1998, 1999, 2000 by the Fiery Consortium        *
 *  FieryMUD is based on CircleMUD Copyright (C) 1993, 94 by the Trustees  *
 *  of the Johns Hopkins University                                        *
 *  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
 ***************************************************************************/

#ifndef __FIERY_STRUCTS_H
#define __FIERY_STRUCTS_H

#include "spell_mem.h"
#include "specprocs.h"  /* For SPECIAL() */
#include "money.h"      /* For NUM_COIN_TYPES */
#include "prefs.h"      /* For NUM_PRF_FLAGS */

/* char and mob-related defines *****************************************/

/* Sex */
#define SEX_NEUTRAL   0
#define SEX_MALE      1
#define SEX_FEMALE    2
#define NUM_SEXES     3


/* Positions */
#define POS_PRONE       0
#define POS_SITTING     1
#define POS_KNEELING    2
#define POS_STANDING    3
#define POS_FLYING      4
#define NUM_POSITIONS   5

/* Stances */
#define STANCE_DEAD       0        /* dead                 */
#define STANCE_MORT       1        /* mortally wounded     */
#define STANCE_INCAP      2        /* incapacitated        */
#define STANCE_STUNNED    3        /* stunned              */
#define STANCE_SLEEPING   4        /* sleeping             */
#define STANCE_RESTING    5        /* resting              */
#define STANCE_ALERT      6        /* alert                */
#define STANCE_FIGHTING   7        /* fighting             */
#define NUM_STANCES       8

#define HIT_INCAP      -3        /* The hit level for incapacitation   */
#define HIT_MORTALLYW  -6        /* The hit level for mortally wound   */
#define HIT_DEAD       -11       /* The point you never want to get to */

#define DAMAGE_WILL_KILL(ch, dmg) (GET_HIT(ch) - dmg <= HIT_DEAD)


/* Player flags: used by char_data.char_specials.act */
#define PLR_KILLER      0   /* a player-killer                           */
#define PLR_THIEF       1   /* a player-thief                            */
#define PLR_FROZEN      2   /* is frozen                                 */
#define PLR_DONTSET     3   /* Don't EVER set (ISNPC bit)                */
#define PLR_WRITING     4   /* writing (board/mail/olc)                  */
#define PLR_MAILING     5   /* is writing mail                           */
#define PLR_AUTOSAVE    6   /* needs to be autosaved                     */
#define PLR_SITEOK      7   /* has been site-cleared                     */
#define PLR_NOSHOUT     8   /* not allowed to shout/goss                 */
#define PLR_NOTITLE     9   /* not allowed to set title       (not used) */
#define PLR_DELETED    10   /* deleted - space reusable       (not used) */
#define PLR_LOADROOM   11   /* uses nonstandard loadroom      (not used) */
#define PLR_NOWIZLIST  12   /* shouldn't be on wizlist        (not used) */
#define PLR_NODELETE   13   /* shouldn't be deleted           (may be used outside the server) */
#define PLR_INVSTART   14   /* should enter game wizinvis     (not used) */
#define PLR_CRYO       15   /* is cryo-saved (purge prog)     (not used) */
#define PLR_MEDITATE   16   /* meditating - improves spell memorization  */
#define PLR_CASTING    17   /* currently casting a spell      (not used) */
#define PLR_BOUND      18   /* tied up                        (not used) */
#define PLR_SCRIBE     19   /* scribing                       (not used) */
#define PLR_TEACHING   20   /* teaching a skill/spell         (not used) */
#define PLR_NAPPROVE   21   /* name not approved yet                     */
#define PLR_NEWNAME    22   /* needs to choose a new name                */
#define PLR_REMOVING   23   /* player is being removed and doesn't need emergency save */
#define PLR_SAVING     24   /* player is being saved to file and effect changes are not relevant */
#define PLR_GOTSTARS   25   /* player has achieved ** already            */
#define NUM_PLR_FLAGS  26

/* Privilege flags: used by char_data.player_specials.privileges */
#define PRV_CLAN_ADMIN  0   /* clan administrator */
#define PRV_TITLE       1   /* can change own title */
#define PRV_ANON_TOGGLE 2   /* can toggle anon */
#define PRV_AUTO_GAIN   3   /* don't need to level gain */
#define NUM_PRV_FLAGS   4

/* Mobile flags: used by char_data.char_specials.act */
#define MOB_SPEC              0  /* Mob has a callable spec-proc       */
#define MOB_SENTINEL          1  /* Mob should not move                */
#define MOB_SCAVENGER         2  /* Mob picks up stuff on the ground   */
#define MOB_ISNPC             3  /* (R) Automatically set on all Mobs  */
#define MOB_AWARE             4  /* Mob can't be backstabbed           */
#define MOB_AGGRESSIVE        5  /* Mob hits players in the room       */
#define MOB_STAY_ZONE         6  /* Mob shouldn't wander out of zone   */
#define MOB_WIMPY             7  /* Mob flees if severely injured      */
#define MOB_AGGR_EVIL         8  /* auto attack evil PC's              */
#define MOB_AGGR_GOOD         9  /* auto attack good PC's              */
#define MOB_AGGR_NEUTRAL     10  /* auto attack neutral PC's           */
#define MOB_MEMORY           11  /* remember attackers if attacked     */
#define MOB_HELPER           12  /* attack PCs fighting other NPCs     */
#define MOB_NOCHARM          13  /* Mob can't be charmed               */
#define MOB_NOSUMMON         14  /* Mob can't be summoned              */
#define MOB_NOSLEEP          15  /* Mob can't be slept                 */
#define MOB_NOBASH           16  /* Mob can't be bashed (e.g. trees)   */
#define MOB_NOBLIND          17  /* Mob can't be blinded               */
#define MOB_MOUNTABLE        18
#define MOB_NO_EQ_RESTRICT   19
#define MOB_FAST_TRACK       20
#define MOB_SLOW_TRACK       21
#define MOB_CASTING          22  /* mob casting            (not used)  */
#define MOB_SUMMONED_MOUNT   23  /* resets CD_SUMMON_MOUNT when extracted */
#define MOB_AQUATIC          24  /* Mob can't enter non-water rooms    */
#define MOB_AGGR_EVIL_RACE   25
#define MOB_AGGR_GOOD_RACE   26
#define MOB_NOSILENCE        27
#define MOB_NOVICIOUS        28
#define MOB_TEACHER          29
#define MOB_ANIMATED         30  /* mob is animated - die if no anim effect */
#define MOB_PEACEFUL         31  /* mob can't be attacked.             */
#define MOB_NOPOISON         32  /* Mob cannot be poisoned.            */
#define MOB_ILLUSORY         33  /* is an illusion: does no harm, leaves no corpse */
#define MOB_PLAYER_PHANTASM  34  /* illusion of player; mobs are aggro to */
#define MOB_NO_CLASS_AI      35  /* Mob does not execute class AI      */
#define MOB_NOSCRIPT         36  /* Mob does not execute triggers or specprocs */
#define MOB_PEACEKEEPER      37  /* Attacks mobs with over 1350 align diff. Assists other PEACEKEEPERs */
#define MOB_PROTECTOR        38  /* Assists players under attack, but not against PEACEKEEPER/PROTECTOR mobs */
#define NUM_MOB_FLAGS        39  /* Update this when you add a flag! */

/* Some mount stuff */
#define MAX_MOUNT_LEVEL    27   /* The maximum level of mountable mobs */

/* mount_level_fudge is how far above the ideal mountable level you could possibly
 * hope to mount.  For example if your skill allowed you to mount level 10 mobs
 * easily, and mount_level_fudge was 4, you could mount level 14 mobs with great
 * difficulty, but nothing higher. */
#define MOUNT_LEVEL_FUDGE  (double)(MAX_MOUNT_LEVEL / 6)

#define MOUNT_MINMOVE 20
#define MOUNT_MAXMOVE 250

/* Modes of connectedness: used by descriptor_data.state */
#define CON_PLAYING         0                /* Playing - Nominal state         */
#define CON_CLOSE           1                /* Disconnecting                   */
#define CON_GET_NAME        2                /* By what name ..?                */
#define CON_NAME_CNFRM      3                /* Did I get that right, x?        */
#define CON_PASSWORD        4                /* Password:                       */
#define CON_NEWPASSWD       5                /* Give me a password for x        */
#define CON_CNFPASSWD       6                /* Please retype password:         */
#define CON_QSEX            7                /* Sex?                            */
#define CON_QCLASS          8                /* Class?                          */
#define CON_RMOTD           9                /* PRESS RETURN after MOTD         */
#define CON_MENU           10                /* Your choice: (main menu)        */
#define CON_EXDESC         11                /* Enter a new description:        */
#define CON_CHPWD_GETOLD   12                /* Changing passwd: get old        */
#define CON_CHPWD_GETNEW   13                /* Changing passwd: get new        */
#define CON_CHPWD_VRFY     14                /* Verify new password             */
#define CON_DELCNF1        15                /* Delete confirmation 1           */
#define CON_DELCNF2        16                /* Delete confirmation 2           */
#define CON_QRACE          17                /* Complete Race Seletion Menu     */
#define CON_QANSI          18                /* Prompt for term type            */
#define CON_OEDIT          19                /*. OLC mode - object edit        .*/
#define CON_REDIT          20                /*. OLC mode - room edit          .*/
#define CON_ZEDIT          21                /*. OLC mode - zone info edit     .*/
#define CON_MEDIT          22                /*. OLC mode - mobile edit        .*/
#define CON_SEDIT          23                /*. OLC mode - shop edit          .*/
#define CON_QROLLSTATS     24
#define CON_QHOMETOWN      25
#define CON_QBONUS1        26
#define CON_QBONUS2        27
#define CON_QBONUS3        28
#define CON_QCANCHAR       29
#define CON_HEDIT          30                /*. OLC mode - help edit          .*/
#define CON_TRIGEDIT       31                /*. OLC mode - trigger edit       .*/
#define CON_CLASSHELP      32                /* Char Gen Class Help             */
#define CON_SDEDIT         33
#define CON_NAME_CHECK     34
#define CON_NAME_WAIT_APPROVAL 35            /* await imm aprroval of name      */
#define CON_NEW_NAME       36                /* name declined, get a new one    */
#define CON_QGOODRACE      37                /* Menu Choice for Good races.     */
#define CON_ISPELL_BOOT    38                /* Obligatory disconnect bad names */
#define CON_GEDIT          39                /* OLC mode - grant group edit */
#define CON_IEDIT          40                /*. OLC mode - iobject edit        .*/
#define NUM_CON_MODES      41


/* Character equipment positions: used as index for char_data.equipment[] */
/* NOTE: Don't confuse these constants with the ITEM_ bitvectors
   which control the valid places you can wear a piece of equipment */
#define WEAR_LIGHT      0
#define WEAR_FINGER_R   1
#define WEAR_FINGER_L   2
#define WEAR_NECK_1     3
#define WEAR_NECK_2     4
#define WEAR_BODY       5
#define WEAR_HEAD       6
#define WEAR_LEGS       7
#define WEAR_FEET       8
#define WEAR_HANDS      9
#define WEAR_ARMS      10
#define WEAR_SHIELD    11
#define WEAR_ABOUT     12
#define WEAR_WAIST     13
#define WEAR_WRIST_R   14
#define WEAR_WRIST_L   15
#define WEAR_WIELD     16
#define WEAR_WIELD2    17
#define WEAR_HOLD      18
#define WEAR_HOLD2     19
#define WEAR_2HWIELD   20
#define WEAR_EYES      21
#define WEAR_FACE      22
#define WEAR_LEAR      23
#define WEAR_REAR      24
#define WEAR_BADGE     25
#define WEAR_OBELT     26
#define NUM_WEARS      27        /* This must be the # of eq positions!! */


/* other miscellaneous defines *******************************************/


/* Player conditions */
#define DRUNK        0
#define FULL         1
#define THIRST       2

/* Levels of rage */
#define RAGE_NONE         0
#define RAGE_ANNOYED    250
#define RAGE_ANGRY      500
#define RAGE_IRATE      750
#define RAGE_CRAZED    1000


/*
 * Weather data used by utils.h
 */
/* Sun state */
#define SUN_DARK        0
#define SUN_RISE        1
#define SUN_LIGHT       2
#define SUN_SET         3

#define HEMISPHERE_NORTHWEST        0
#define HEMISPHERE_NORTHEAST        1
#define HEMISPHERE_SOUTHWEST        2
#define HEMISPHERE_SOUTHEAST        3
#define NUM_HEMISPHERES             4


/* other #defined constants **********************************************/

/*
 * **DO**NOT** blindly change the number of levels in your MUD merely by
 * changing these numbers and without changing the rest of the code to match.
 * Other changes throughout the code are required.  See coding.doc for
 * details.
 */
#define LVL_IMPL       105 /* Overlord */
#define LVL_OVERLORD   105 /* Overlord */
#define LVL_HEAD_C     104 /* Implementer */
#define LVL_HEAD_B     103 /* Greater God */
#define LVL_GRGOD      102 /* Lesser God */
#define LVL_GOD        101 /* Demi-God */
#define LVL_IMMORT     100 /* Avatar */
#define LVL_MAX_MORT    99 /* Mortal */

#ifdef PRODUCTION
  #define LVL_ADMIN       104
  #define LVL_BUILDER     104
  #define LVL_GAMEMASTER  103
  #define LVL_ATTENDANT   102
  #define LVL_RESTORE     103
  #define LVL_PURGE       103
#else
  #define LVL_ADMIN       103
  #define LVL_BUILDER     101
  #define LVL_GAMEMASTER  102
  #define LVL_ATTENDANT   101
  #define LVL_RESTORE       1
  #define LVL_PURGE       101
#endif

#define LVL_FREEZE        LVL_GRGOD

/* Level required for rebooting, shutdown, autoboot */

#ifdef PRODUCTION
   /* Full use of "autoboot" and "shutdown" commands.
    * You can cancel/enable/set time of automatic reboot,
    * or (obviously) use shutdown to stop or restart the mud immediately */
   #define LVL_REBOOT_MASTER LVL_HEAD_B
   /* You can stop a reboot for a while with "autoboot postpone" */
   #define LVL_REBOOT_POSTPONE  LVL_GOD
   /* You can get the time of the next automatic reboot with "autoboot" or "world" */
   #define LVL_REBOOT_VIEW      LVL_GOD
#else
   #define LVL_REBOOT_MASTER    LVL_HEAD_B
   #define LVL_REBOOT_POSTPONE  LVL_IMMORT
   #define LVL_REBOOT_VIEW      1
#endif

#define LVL_GOSSIP        1

   /* Reasons why restrict > 0 */
#define RESTRICT_NONE      0  /* No restriction, or don't know */
#define RESTRICT_ARGUMENT  1  /* Mud started with -r option */
#define RESTRICT_MANUAL    2  /* Set by a god with the wizlock command */
#define RESTRICT_AUTOBOOT  3  /* Set automatically due to imminent automatic reboot */

/* damage() return codes */
#define VICTIM_DEAD        (1 << 30)

#define MAX_SKILL_TIMERS 100

/*
 * OPT_USEC determines how many commands will be processed by the MUD per
 * second and how frequently it does socket I/O.  A low setting will cause
 * actions to be executed more frequently but will increase overhead due to
 * more cycling to check.  A high setting (e.g. 1 Hz) may upset players
 * as actions (such as large speedwalking chains) take longer to execute.
 *
 * RL_SEC is used with other macros and constants to define how often
 * heartbeats an action in the main game loop gets executed.  Helps to
 * translate pulse counts to real seconds for human comprehension.
 */
#define OPT_USEC        100000        /* 10 passes per second */
#define PASSES_PER_SEC  (1000000 / OPT_USEC)
#define RL_SEC          * PASSES_PER_SEC
#define MUD_HR          * SECS_PER_MUD_HOUR * PASSES_PER_SEC

#define PULSE_ZONE      (10 RL_SEC)
#define PULSE_MOBILE    (10 RL_SEC)
#define PULSE_VIOLENCE  (4 RL_SEC) /* changed to 4 seconds from 2 7/14/99 */
#define PULSE_AUTOSAVE  (60 RL_SEC)

#define SMALL_BUFSIZE   1024
#define LARGE_BUFSIZE   (48 * 1024)
#define GARBAGE_SPACE   32

#define MAX_STRING_LENGTH     20000
#define MAX_STRING_LENGTH_BIG 24000
#define MAX_DESC_LENGTH       8096       /* object action desc length */
#define MAX_INPUT_LENGTH      256        /* Max length per *line* of input */
#define MAX_RAW_INPUT_LENGTH  512        /* Max size of *raw* input */
#define MAX_MESSAGES          150
#define MAX_NAME_LENGTH        20
#define MAX_PWD_LENGTH         10
#define MAX_TITLE_LENGTH       80
#define HOST_LENGTH            30

#define PLAYER_DESC_LENGTH   1200
#define PLAYER_DESC_LINES      15
#define IMMORT_DESC_LENGTH  10000
#define IMMORT_DESC_LINES      50

#define MAX_TONGUE              3
#define TOP_SKILL             650
#define MAX_EFFECT             32
#define PAGE_SCRIBE_TIME        1  /* this is the time per page to scribe */
#define MAX_DAMAGE           1000  /* Maximum per hit allowed by damage() */
#define EVENT_FLAG_FIELDS       4  /* Number of fields for event flags */
#define MIN_ABILITY_VALUE      25  /* Min for stuff like str/cha */
#define MAX_ABILITY_VALUE     100  /* Max for stuff like str/cha */

/* ***** Cooldowns ***** */
#define CD_BACKSTAB             0
#define CD_BASH                 1
#define CD_INSTANT_KILL         2
#define CD_DISARM               3        /* pulse violence */
#define CD_FUMBLING_PRIMARY     4        /* pulse violence */
#define CD_DROPPED_PRIMARY      5        /* pulse violence */
#define CD_FUMBLING_SECONDARY   6        /* pulse violence */
#define CD_DROPPED_SECONDARY    7        /* pulse violence */
#define CD_SUMMON_MOUNT         8
#define CD_LAY_HANDS            9
#define CD_FIRST_AID           10
#define CD_EYE_GOUGE           11
#define CD_THROATCUT           12
#define CD_SHAPECHANGE         13
#define CD_CHANT               14
#define CD_INNATE_INVISIBLE    15
#define CD_INNATE_STRENGTH     16
#define CD_INNATE_DARKNESS     17
#define CD_INNATE_LEVITATE     18
#define NUM_COOLDOWNS          19

/**********************************************************************
* Structures                                                          *
**********************************************************************/


typedef signed char            sbyte;
typedef unsigned char          ubyte;
typedef signed short int       sh_int;
typedef unsigned short int     ush_int;
typedef struct witness_data    wtns_rec;

#ifndef CIRCLE_WINDOWS
typedef char                   byte;
#endif

typedef int                    room_num;
typedef int                    obj_num;
typedef int                    zone_vnum;

#define NOWHERE    -1    /* nil reference for room-database        */
#define NOTHING    -1    /* nil reference for objects              */
#define NOBODY     -1    /* nil reference for mobiles              */

/* exits.h depends on obj_num */
#include "exits.h"

/** Bitvector type for 32 bit unsigned long bitvectors. 'unsigned long long'
 * will give you at least 64 bits if you have GCC. You'll have to search
 * throughout the code for "bitvector_t" and change them yourself if you'd
 * like this extra flexibility. */
typedef unsigned long int      flagvector;
#define FLAGBLOCK_SIZE         (8 * sizeof(flagvector)) /* 8 bits = 1 byte */
#define FLAGVECTOR_SIZE(flags)	(((flags) - 1) / FLAGBLOCK_SIZE + 1)

typedef unsigned long          pulse_t;

#include "objects.h"

/* hemispheres for weather and time NE< NW< SE< SW */
struct hemisphere_data
{
  char *name;
  int season;
  int sunlight;
};

/* Extra description: used in objects, mobiles, and rooms */
struct extra_descr_data {
   char        *keyword;                 /* Keyword in look/examine          */
   char        *description;             /* What to see                      */
   struct extra_descr_data *next; /* Next in list                     */
};

struct casting
{
        int spell;
        int casting_time;
        struct char_data *tch;  /* set up the targets */
        struct obj_data *obj;
        char *misc;
        int target_status;
};

struct spell_dam {
    char *note;
    sh_int spell;
    sh_int intern_dam;
    sh_int npc_static;
    sh_int npc_no_dice;
    sh_int npc_no_face;
    sh_int pc_static;
    sh_int pc_no_dice;
    sh_int pc_no_face;
    sh_int npc_reduce_factor;
    sh_int use_bonus;
    sh_int max_bonus;
    sh_int lvl_mult;
};
/* ======================================================================= */


/* char-related structures ************************************************/


/* memory structure for characters */
struct memory_rec_struct {
   long        id;
   struct memory_rec_struct *next;
};

typedef struct memory_rec_struct memory_rec;

/* This structure is purely intended to be an easy way to transfer */
/* and return information about time (real or mudwise).            */
struct time_info_data {
   int hours, day, month;
   sh_int year;
};


/* These data contain information about a players time data */
struct time_data {
   time_t birth;    /* This represents the characters age                */
   time_t logon;    /* Time of the last logon (used to calculate played) */
   int        played;     /* This is the total accumulated time played in secs */
};

/* general player-related info, usually PC's and NPC's */
struct char_player_data {
  char passwd[MAX_PWD_LENGTH+1]; /* character's password      */
  char *namelist;     /* PC / NPC s name (kill ...  )         */
  char *short_descr;  /* for NPC 'actions'                    */
  char *long_descr;   /* for NPC 'look'                       */
  char *description;  /* Extra descriptions                   */
  char *title;        /* PC / NPC's title                     */
  char *prompt;       /* Player prompt                        */
  ush_int sex;        /* PC / NPC's sex                       */
  ush_int class;      /* PC / NPC's class                     */
  ush_int race;       /* PC / NPC's race                      */
  ush_int race_align; /* PC / NPC's race_align                */
  ush_int level;      /* PC / NPC's level                     */
  int lifeforce;      /* What empowers it - see LIFE_* in chars.h */
  int base_composition;
  int composition;    /* What its body is made of - see COMP_* in chars.h */
  room_num homeroom;  /* PC s Homeroom                        */

  struct time_data time;  /* PC's AGE in days                 */

  /* size/height/weight */
  int weight;
  int height;
  int affected_size;
  int mod_size;
  int natural_size;
  int base_weight;
  int base_height;
  int base_size;
};


/* Char's abilities. */
struct char_ability_data {
   int str;
   int intel;
   int wis;
   int dex;
   int con;
   int cha;
};


/* Char's points. */
struct char_point_data {
   int mana;
   int max_mana;               /* Max move for PC/NPC                     */
   int hit;
   int max_hit;                /* Max hit for PC/NPC                      */
   int move;
   int max_move;               /* Max move for PC/NPC                     */
   int armor;                  /* Internal -100..100, external -10..10 AC */
   int coins[NUM_COIN_TYPES];
   int bank[NUM_COIN_TYPES];
   long exp;                   /* The experience of the player            */

   int base_hitroll;           /* Any bonus or penalty to the hit roll    */
   int hitroll;                /* Value used for calculations and viewing */
   int base_damroll;           /* Any bonus or penalty to the damage roll */
   int damroll;                /* Value used for calculations and viewing */
};

struct alias_data {
  char *alias;
  char *replacement;
  int type;
  struct alias_data *next;
};

/* Special playing constants shared by PCs and NPCs */
struct char_special_data {
   struct char_data *hunting;        /* Char hunted by this char                */
   struct char_data *riding;
   struct char_data *ridden_by;
   struct char_data *consented;
   int position;                     /* Prone, Sitting, Standing, etc.        */
   int stance;                       /* Sleeping, Alert, Fighting, etc.       */

   int cooldowns[NUM_COOLDOWNS][2];  /* Skill/action cooldowns (current/max)  */

   float carry_weight;               /* Carried weight                        */
   int carry_items;                  /* Number of items carried               */
   int timer;                        /* Inactivity timer for players          */
   int hitgain;                      /* Bonus hit regen, from APPLY_HIT_REGEN */
   int managain;                     /* Bonus mana regen, from APPLY_MANA_REGEN */
   int rage;                         /* For berserking                        */

   int   alignment;                  /* +/- 1000 for alignment                */
   long  idnum;                      /* player's idnum; -1 for mobiles        */
   /* act flag for NPC; player flag for PC  */
   flagvector  act[FLAGVECTOR_SIZE(NUM_MOB_FLAGS > NUM_PLR_FLAGS ? NUM_MOB_FLAGS : NUM_PLR_FLAGS)];

   long  perception;
   long  hiddenness;

   /* Bitvectors for spells/skills effects  */
   flagvector effects[FLAGVECTOR_SIZE(NUM_EFF_FLAGS)];
   sh_int apply_saving_throw[5];     /* Saving throw (Bonuses)                */

   sh_int skills[TOP_SKILL+1];       /* array of skills plus skill 0          */

   /* These keep track of how much a player has been speaking (gossipping,
    * telling, whatever else is deemed appropriate) and is used to decide
    * whether to automatically quiet the player. */
   double speech_rate;
   pulse_t last_speech_time;         /* Taken from global_pulse               */

   int quit_reason;                  /* How or why you left the game          */
};


struct olc_zone_list {
  zone_vnum zone;
  struct olc_zone_list *next;
};

/*
 * Specials needed only by PCs, not NPCs.  Space for this structure is
 * not allocated in memory for NPCs, but it is for PCs.  This structure
 * can be changed freely.
 */
struct player_special_data {
  long last_tell;                /* idnum of last tell from                */
  void *last_olc_targ;           /* olc control                            */
  int last_olc_mode;             /* olc control                            */
  byte roll[6];                  /* for rolling stats in player creation   */
  struct char_data *ignored;

  bool talks[MAX_TONGUE];        /* PC s Tongues 0 for NPC                 */
  int wimp_level;                /* Below this # of hit points, flee!      */
  int aggressive;                /* Above this # of hit points, autoattack */
  byte freeze_level;             /* Level of god who froze char, if any    */
  byte autoinvis_level;          /* Level of invisibility to take when entering game */
  byte invis_level;              /* level of invisibility                  */
  room_num load_room;            /* Which room to place char in            */
  room_num save_room;            /* Where the player was when saved        */
  /* preference flags for PC's.             */
  flagvector pref[FLAGVECTOR_SIZE(NUM_PRF_FLAGS)];
  /* privilege flags for PC's */
  flagvector privileges[FLAGVECTOR_SIZE(NUM_PRV_FLAGS)];
  ubyte bad_pws;                 /* number of bad password attempts        */
  sbyte conditions[3];           /* Drunk, full, thirsty                   */
  struct trophy_node *trophy;
  struct alias_data *aliases;

  flagvector *grant_cache;       /* cache of granted commands              */
  flagvector *revoke_cache;      /* cache of revoked commands              */
  struct grant_type *grants;     /* Commands granted to this player        */
  struct grant_type *revokes;    /* Commands revoked from this player      */
  /* Groups of commands granted to this player */
  struct grant_type *grant_groups;
  /* Groups of commands revoked from this player */
  struct grant_type *revoke_groups;

  ubyte page_length;
  struct clan_membership *clan;
  struct clan_snoop *clan_snoop;
  struct olc_zone_list *olc_zones;
  int lastlevel;
  int base_hit;
  int log_view;                  /* Level of syslog displayed              */
  char *poofin;
  char *poofout;
  char **perm_titles;
  char *long_descr;
  char *wiz_title;
  char *host;
};


/* Specials used by NPCs, not PCs */
struct mob_special_data {
  long nr;                 /* Mob's rnum                              */
  int ex_platinum;
  int ex_gold;
  sbyte ex_face;
  int ex_no_dice;
  int zone;
  sbyte ex_damroll;
  sbyte ex_hitroll;
  sbyte ex_hpnumdice;
  sbyte ex_hpsizedice;
  int ex_main_hp;
  long ex_exp;
  byte class;
  sh_int ex_hit;
  sh_int ex_max_hit;
  byte last_direction;     /* The last direction the monster went     */
  int        attack_type;  /* The Attack Type Bitvector for NPC's     */
  byte default_pos;        /* Default position for NPC                */
  memory_rec *memory;      /* List of attackers to remember           */
  sbyte damnodice;         /* The number of damage dice's             */
  sbyte damsizedice;       /* The size of the damage dice's           */
  sbyte ex_damnodice;
  sbyte ex_damsizedice;
  int wait_state;          /* Wait state for bashed mobs              */
  int spell_bank[NUM_SPELL_CIRCLES + 1]; /* circle 0 is unused */
  int spell_mem_time;
  sh_int ex_armor;
  long mob2_flags;
};

/* An effect structure. */
struct effect {
   int type;           /* The type of spell that caused this       */
   int duration;       /* For how long its effects will last       */
   int modifier;       /* This is added to apropriate ability      */
   byte location;      /* Tells which ability to change(APPLY_XXX) */
   /* Tells which flags to set (EFF_XXX) */
   flagvector flags[FLAGVECTOR_SIZE(NUM_EFF_FLAGS)];

   struct effect *next;
};


/* Structure used for chars following other chars */
struct follow_type {
  struct char_data *follower;
  bool can_see_master;
  struct follow_type *next;
};

struct know_spell {
  struct char_data *sch;
  struct know_spell *next;
};

/* ================== Structure for player/non-player ===================== */
struct char_data {
    /* Character stuff */
  long id;                                     /* Global unique ID used by DG triggers */
  room_num in_room;                            /* Location (real room number) */
  room_num was_in_room;                        /* location for linkdead people */
  struct char_ability_data natural_abils;      /* natural rolls */
  struct char_ability_data actual_abils;       /* natural_abils + effects */
  struct char_ability_data affected_abils;     /* viewed_abils * racial percentage */
  struct char_point_data points;               /* Points */
  struct effect *effects;                      /* effected by what spells */
  struct obj_data *equipment[NUM_WEARS];       /* Equipment array */
  struct obj_data *carrying;                   /* Head of list */
  struct know_spell *see_spell;                /* list of chars that guessed caster's spell */
    /* Other characters */
  struct char_data *forward;                   /* for shapechange/switch */
  struct char_data *next_in_room;              /* For room->people - list */
  struct char_data *next;                      /* For either monster or ppl-list */
  struct char_data *guarded_by;                /* Character guarding this char */
  struct char_data *guarding;                  /* Char this char is guarding */
  struct char_data *cornered_by;               /* Char preventing this char from fleeing */
  struct char_data *cornering;                 /* Char this char is preventing from fleeing*/
  struct follow_type *followers;               /* List of chars followers */
  struct char_data *master;                    /* Who is char following? */
  struct group_type *groupees;                 /* list of chars grouped */
  struct char_data *group_master;              /* group master */
  struct char_data *next_caster;               /* A list of casters I'm in */
  struct char_data *casters;                   /* Chars who are casting spells at me */
    /* Battling */
  struct char_data *next_fighting;             /* Part of list of all fighting characters in mud */
  struct char_data *target;                    /* Who I'm fighting */
  struct char_data *attackers;                 /* List of characters who are fighting me */
  struct char_data *next_attacker;             /* List of fighting characters I'm in */
    /* Player stuff */
  int pfilepos;                                /* playerfile pos */
  struct quest_list *quests;
    /* Spell mem/scribe stuff */
  struct spell_memory spell_memory;
  struct scribing *scribe_list;                /* spells queued for scribing */
    /* Mobile stuff */
  struct trig_proto_list *proto_script;        /* list of default triggers */
  struct script_data *script;                  /* script info for the object */
    /* Substructs of varying application */
  struct char_player_data player;              /* Normal data */
  struct char_special_data char_specials;      /* PC/NPC specials */
  struct player_special_data *player_specials; /* PC specials */
  struct mob_special_data mob_specials;        /* NPC specials  */
  struct descriptor_data *desc;                /* NULL for mobiles */
    /* Events */
  struct casting casting;                      /* note this is NOT a pointer */
  struct event *events;                        /* List of events related to this character */
  int event_flags[EVENT_FLAG_FIELDS];          /* Bitfield of events active on this character */
};

/* ====================================================================== */



/* descriptor-related structures ******************************************/


struct txt_block {
   char        *text;
   int aliased;
   struct txt_block *next;
};


struct txt_q {
   struct txt_block *head;
   struct txt_block *tail;
};


struct paging_line {
   char *line;
   struct paging_line *next;
};


struct descriptor_data {
   socket_t        descriptor;         /* file descriptor for socket            */
   char        host[HOST_LENGTH+1];    /* hostname                              */
   byte        bad_pws;                /* number of bad pw attemps this login   */
   byte idle_tics;                     /* tics idle at password prompt          */
   int        connected;               /* mode of 'connectedness'               */
   int        wait;                    /* wait for how many loops               */
   int        desc_num;                /* unique num assigned to desc           */
   time_t login_time;                  /* when the person connected             */
   int mail_vnum;
   int        prompt_mode;             /* control of prompt-printing            */
   char        inbuf[MAX_RAW_INPUT_LENGTH];  /* buffer for raw input            */
   char        last_input[MAX_INPUT_LENGTH]; /* the last input                  */
   char small_outbuf[SMALL_BUFSIZE];   /* standard output buffer                */
   char *output;                       /* ptr to the current output buffer      */
   int  bufptr;                        /* ptr to end of current output          */
   int        bufspace;                /* space left in the output buffer       */
   struct txt_block *large_outbuf;     /* ptr to large buffer, if we need it    */
   struct txt_q input;                 /* q of unprocessed input                */
   struct char_data *character;        /* linked to char                        */
   struct char_data *original;         /* original char if switched             */
   struct descriptor_data *snooping;   /* Who is this char snooping             */
   struct descriptor_data *snoop_by;   /* And who is snooping this char         */
   struct descriptor_data *next;       /* link to next descriptor               */
   struct olc_data *olc;
   char *storage;

   /* Editing a buffer */
   char    **str;                      /* for the modify-str system             */
   char    *backstr;                   /* added for handling abort buffers      */
   size_t  max_str;                    /*                -                      */
   long    mail_to;                    /* name for mail system                  */
   int     max_buffer_lines;           /* limitation on the number of lines     */

   struct editor_data *editor;

   /* The pager */
   struct paging_line *paging_lines;   /* The text that is to be paged through  */
   struct paging_line *paging_tail;    /* End of the list of lines              */
   char *paging_fragment;              /* Intermediate leftover string          */
   int paging_numlines;                /* Number of lines in the list           */
   int paging_numpages;                /* Number of pages to be paged through   */
   int paging_curpage;                 /* The page which is currently showing   */
   int paging_bufsize;                 /* Amount of memory currently used       */
   int paging_skipped;                 /* Number of lines discarded due to overflow */
};

/* other miscellaneous structures ***************************************/


struct msg_type {
   char        *attacker_msg;  /* message to attacker */
   char        *victim_msg;    /* message to victim   */
   char        *room_msg;      /* message to room     */
};


struct message_type {
   struct msg_type die_msg;        /* messages when death             */
   struct msg_type miss_msg;       /* messages when miss              */
   struct msg_type hit_msg;        /* messages when hit               */
   struct msg_type god_msg;        /* messages when hit on god        */
   struct msg_type heal_msg;       /* message when healing            */
   struct message_type *next;      /* to next messages of this kind.  */
};


struct message_list {
   int        a_type;               /* Attack type                                */
   int        number_of_attacks;    /* How many attack messages to chose from. */
   struct message_type *msg;        /* List of messages.                        */
};


struct group_type {
        struct char_data *groupee;
        struct group_type *next;
};

struct dex_skill_type {
   sh_int p_pocket;
   sh_int p_locks;
   sh_int traps;
   sh_int sneak;
   sh_int hide;
};

struct dex_app_type {
   sh_int reaction;
   sh_int miss_att;
   sh_int defensive;
};


struct str_app_type {
   sh_int tohit;    /* To Hit (THAC0) Bonus/Penalty        */
   sh_int todam;    /* Damage Bonus/Penalty                */
   sh_int carry_w;  /* Maximum weight that can be carrried */
   sh_int wield_w;  /* Maximum weight that can be wielded  */
};


struct wis_app_type {
   byte bonus;       /* how many practices player gains per lev */
};


struct int_app_type {
   byte learn;       /* how many % a player learns a spell/skill */
};


struct con_app_type {
   sh_int hitp;
   sh_int shock;
};


struct weather_data {
   int        pressure;        /* How is the pressure ( Mb ) */
   int        change;        /* How fast and what way does it change. */
   int        sky;        /* How is the sky. */
   int        sunlight;        /* And how much sun. */
};

/* element in monster and object index-tables   */
struct index_data {
   int        virtual;    /* virtual number of this mob/obj           */
   int        number;     /* number of existing units of this mob/obj        */
   SPECIAL(*func);
   char *farg;         /* string argument for special function     */
   struct trig_data *proto;     /* for triggers... the trigger     */
};

/* linked list for mob/object prototype trigger lists */
struct trig_proto_list {
  int vnum;                             /* vnum of the trigger   */
  struct trig_proto_list *next;         /* next trigger          */
};

struct camp_event {
     struct char_data *ch;
     int was_in;
   };


#ifdef MEMORY_DEBUG
#include "zmalloc.h"
#endif

#endif

/***************************************************************************
 * $Log: structs.h,v $
 * Revision 1.205  2010/06/09 22:32:01  mud
 * Moving toggle command and prf flags into prefs.[ch]
 *
 * Revision 1.204  2010/06/05 18:35:47  mud
 * Make pyre auto-target caster if sacrificial preference is
 * toggled on.
 *
 * Revision 1.203  2009/08/02 20:20:38  myc
 * Had to up the MAX_MESSAGE limit for new spells.
 *
 * Revision 1.202  2009/07/17 00:48:17  myc
 * Added anon toggle and auto gain privileges.
 *
 * Revision 1.201  2009/06/09 05:49:19  myc
 * Renaming NOCTELL to NOCLANCOMM so it covers other clan communication.
 * Adding privilege flags.  Removing clan desc editing connection
 * state.  Modifying character clan references to match new
 * interface.
 *
 * Revision 1.200  2009/03/21 19:11:37  myc
 * Save the duration each cooldown started at.
 *
 * Revision 1.199  2009/03/20 23:02:59  myc
 * Remove text editor connection state.
 *
 * Revision 1.198  2009/03/20 20:19:51  myc
 * Add MAX_DESC_LENGTH since MAX_MSG_LENGTH from boards.h is
 * no longer available.
 *
 * Revision 1.197  2009/03/09 20:36:00  myc
 * Renamed all *PLAT macros to *PLATINUM.
 *
 * Revision 1.196  2009/03/09 05:41:31  jps
 * Moved money stuff into money.h, money.c
 *
 * Revision 1.195  2009/03/09 05:09:22  jps
 * Moved effect flags and strings into effects.h and effects.c.
 *
 * Revision 1.194  2009/03/09 04:33:20  jps
 * Moved direction information from structs.h, constants.h, and constants.c
 * into directions.h and directions.c.
 *
 * Revision 1.193  2009/03/09 03:45:17  jps
 * Extract some spell-mem related stuff from structs.h and put it in spell_mem.h
 *
 * Revision 1.192  2009/03/08 03:54:21  jps
 * Update the comments of some structs and format code
 *
 * Revision 1.191  2009/03/08 02:17:46  jps
 * Delete jail event struct.
 *
 * Revision 1.190  2009/03/07 22:27:10  jps
 * Add effect flag remote_aggr, which keeps your aggressive action from
 * removing things like invis. Useful for those spells that keep on hurting.
 *
 * Revision 1.189  2009/02/11 17:03:39  myc
 * Reduce IMMORT_DESC_LENGTH from 40k to 10k characters.
 *
 * Revision 1.188  2009/01/19 09:25:23  myc
 * Replacing MOB_PET flag with MOB_SUMMONED_MOUNT flag, which
 * tracks a mount summoned using the skill, so proper cooldowns
 * can be set.
 *
 * Revision 1.187  2008/09/24 05:49:22  jps
 * Made autoboot control level 103
 *
 * Revision 1.186  2008/09/22 02:09:17  jps
 * Changed weight into a floating-point value. Precision is preserved to
 * the 1/100 place.
 *
 * Revision 1.185  2008/09/21 20:40:40  jps
 * Keep a list of attackers with each character, so that at the proper times -
 * such as char_from_room - they can be stopped from battling.
 *
 * Revision 1.184  2008/09/21 04:54:23  myc
 * Added grant caches to the player structure to make can_use_command
 * take less execution time.
 *
 * Revision 1.183  2008/09/07 20:06:47  jps
 * Added flag PLR_GOTSTARS which means you have achieved ** at least once.
 *
 * Revision 1.182  2008/09/07 01:30:07  jps
 * Add a flag for player saving, so that effect changes in the midst of it
 * can be ignored.
 *
 * Revision 1.181  2008/09/01 22:15:59  jps
 * Saving and reporting players' game-leaving reasons and locations.
 *
 * Revision 1.180  2008/09/01 18:29:38  jps
 * consolidating cooldown code in skills.c/h
 *
 * Revision 1.179  2008/08/31 21:44:03  jps
 * Renamed StackObjs and StackMobs prefs to ExpandObjs and ExpandMobs.
 *
 * Revision 1.178  2008/08/31 20:55:40  jps
 * Added PROTECTOR and PEACEKEEPER mob flags.
 *
 * Revision 1.177  2008/08/30 20:21:39  jps
 * Added flag MOB_NO_EQ_RESTRICT, which allows a mobile to wear equipment
 * without regard to align, class, or level restrictions.
 *
 * Revision 1.176  2008/08/30 01:31:51  myc
 * Changed the way stats are calculated in effect_total; ability
 * stats are saved in a raw form now, and only capped when accessed.
 * Damroll and hitroll are recalculated everytime effect_total
 * is called, using cached base values.
 *
 * Revision 1.175  2008/08/29 19:25:08  myc
 * Removed some unused members from the character structure, and made
 * some sbytes into ints.
 *
 * Revision 1.174  2008/08/29 19:18:05  myc
 * Fixed abilities so that no information is lost; the caps occur
 * only when the viewed stats are accessed.
 *
 * Revision 1.173  2008/08/29 04:16:26  myc
 * Added toggles for stacking objects and mobiles in lists.
 *
 * Revision 1.172  2008/08/25 00:20:33  myc
 * Changed the way mobs memorize spells.
 *
 * Revision 1.171  2008/08/16 08:22:41  jps
 * Added the 'desc' command and took player description-editing out of the pre-game menu.
 *
 * Revision 1.170  2008/08/15 03:59:08  jps
 * Added pprintf for paging, and changed page_string to take a character.
 *
 * Revision 1.169  2008/08/14 23:10:35  myc
 * Added immortal log severity view preference to player structure.
 *
 * Revision 1.168  2008/08/14 15:40:29  jps
 * Added pager buffer size limits.
 *
 * Revision 1.167  2008/08/14 09:45:22  jps
 * Replaced the pager.
 *
 * Revision 1.166  2008/08/13 05:52:51  jps
 * Moved laryngitis variables so that NPCs can be affected too.
 *
 * Revision 1.165  2008/07/27 05:23:45  jps
 * Added a flag to put on players when extracting so they don't get saved twice.
 *
 * Revision 1.164  2008/07/22 07:25:26  myc
 * Added basic iedit (unique item editor) functionality.
 *
 * Revision 1.163  2008/07/15 17:55:06  myc
 * Added grants and grant groups to player structure, as well
 * as a connection mode for gedit.
 *
 * Revision 1.162  2008/06/21 17:27:18  jps
 * Changed several player struct elements to unsigned ints, since the
 * compiler doesn't like us using chars very much.
 *
 * Revision 1.161  2008/06/09 23:00:13  myc
 * Removed some redundant and outdated defines.
 *
 * Revision 1.160  2008/06/07 19:06:46  myc
 * Moved object-related constants and routines to objects.h.
 *
 * Revision 1.159  2008/06/05 02:07:43  myc
 * Changed object flags to use flagvectors.  Rewrote rent saving
 * and loading code to use ascii files, so got rid of a few
 * structs (which are still available in legacy_structs.h).
 *
 * Revision 1.158  2008/05/19 20:19:50  jps
 * Using stdbool.h.
 *
 * Revision 1.157  2008/05/19 06:53:31  jps
 * Got rid of fup and fdown directions.
 *
 * Revision 1.156  2008/05/19 05:46:04  jps
 * Add effect for being mesmerized.
 *
 * Revision 1.155  2008/05/18 17:58:21  jps
 * Adding effect of familiarity.
 *
 * Revision 1.154  2008/05/18 02:00:47  jps
 * Moved a lot of constants into rooms.h.
 *
 * Revision 1.153  2008/05/17 22:03:01  jps
 * Moving room-related code into rooms.h and rooms.c.
 *
 * Revision 1.152  2008/05/17 04:32:25  jps
 * Moved exits into exits.h/exits.c and changed the name to "exit".
 *
 * Revision 1.151  2008/05/11 05:42:24  jps
 * Changed position and stance to ints.
 *
 * Revision 1.150  2008/04/20 03:54:17  jps
 * Add bfs distance variable to rooms.
 *
 * Revision 1.149  2008/04/14 05:11:40  jps
 * Renamed EFF_FLYING to EFF_FLY, since it only indicates an ability
 * to fly - not that the characer is actually flying.
 *
 * Revision 1.148  2008/04/14 02:17:59  jps
 * Adding def for Glory effect.
 *
 * Revision 1.147  2008/04/13 18:29:28  jps
 * Add effect for confusion.
 *
 * Revision 1.146  2008/04/13 00:57:07  jps
 * Add an auto-treasure loot pref.
 *
 * Revision 1.145  2008/04/07 04:31:10  jps
 * Update comments on position and stance.
 *
 * Revision 1.144  2008/04/07 03:02:54  jps
 * Changed the POS/STANCE system so that POS reflects the position
 * of your body, while STANCE describes your condition or activity.
 *
 * Revision 1.143  2008/04/05 18:07:09  myc
 * Re-implementing stealth for hide points.
 *
 * Revision 1.142  2008/04/05 16:49:45  myc
 * Fix FLAGVECTOR_SIZE macro so it doesn't always return 1 more than it needs to.
 *
 * Revision 1.141  2008/04/04 06:12:52  myc
 * Removed justice and dieites/worship code.
 *
 * Revision 1.140  2008/04/03 17:34:09  jps
 * Retired the player flag INVSTART.  Added a byte value autoinvis_level to
 * struct player_special_data.
 *
 * Revision 1.139  2008/04/02 05:36:19  myc
 * Added the autoloot and autosplit toggles.
 *
 * Revision 1.138  2008/04/02 04:55:59  myc
 * Got rid of the coins struct.
 *
 * Revision 1.137  2008/04/02 03:24:44  myc
 * Rewrote group code and removed major group code.
 *
 * Revision 1.136  2008/03/28 17:54:53  myc
 * Now using flagvectors for effect, mob, player, preference, room, and
 * room effect flags.  AFF, AFF2, and AFF3 flags are now just EFF flags.
 *
 * Revision 1.135  2008/03/27 17:28:13  jps
 * ITEM_BLESS is unused now, and AFF3_BLESS and AFF3_HEX are here.
 *
 * Revision 1.134  2008/03/26 23:10:44  jps
 * Retire the WATERFORM and VAPORFORM effects.
 *
 * Revision 1.133  2008/03/26 18:11:02  jps
 * Added a BLESS effect so that characters may be blessed.
 *
 * Revision 1.132  2008/03/23 00:23:22  jps
 * Add an apply type for composition. Add a base_composition value
 * to characters so you can use the apply.
 *
 * Revision 1.131  2008/03/22 19:09:46  jps
 * Added lifeforce and composition to characters.
 *
 * Revision 1.130  2008/03/22 03:22:38  myc
 * All invocations of the string editor now go through string_write()
 * instead of messing with the descriptor variables itself.  Also added
 * a toggle, LineNums, to decide whether to do /l or /n when entering
 * the string editor.
 *
 * Revision 1.129  2008/03/21 15:01:17  myc
 * Removed languages.
 *
 * Revision 1.128  2008/03/16 00:19:33  jps
 * Moving trophy structs to trophy.h. struct char_data now has a
 * single pointer to a trophy node.
 *
 * Revision 1.127  2008/03/11 19:50:55  myc
 * Changed the way allowed olc zones are saved on an immortal from
 * a fixed number of slots to a variable-length linked list.  Also
 * got rid of practice points.
 *
 * Revision 1.126  2008/03/11 02:55:30  jps
 * Use affected_size, mod_size, and natural_size to keep track of size.
 *
 * Revision 1.125  2008/03/10 20:46:55  myc
 * Renamed POS1 to 'stance'.  Moving innate timers to cooldown system.
 * Reformatted structures some more.  Renamed hometown to homeroom.
 *
 * Revision 1.124  2008/03/10 19:55:37  jps
 * Made a struct for sizes with name, height, and weight.  Save base height
 * weight and size so they stay the same over size changes.
 *
 * Revision 1.123  2008/03/10 18:01:17  myc
 * Re-ordered postures to be from most-prone to most-upright, somewhat
 * like positions.
 *
 * Revision 1.122  2008/03/09 18:11:31  jps
 * Added two aff3 flags - one for misdirection, which means that the
 * char is capable of misdirected movement. The other is for current
 * misdirecting, meaning that the move in progress is masked by illusion.
 *
 * Revision 1.121  2008/03/09 06:38:37  jps
 * Replaced name with namelist in struct char_data.player. GET_NAME macro
 * now points to short_descr. The uses of these strings is the same for
 * NPCs and players.
 *
 * Revision 1.120  2008/03/09 00:05:40  jps
 * Moved some NUM_foo_FLAGS defs from olc.h to structs.h.
 *
 * Revision 1.119  2008/03/08 23:54:04  jps
 * Added MOB2_NOSCRIPT flag, which prevents specprocs and triggers.
 *
 * Revision 1.118  2008/03/08 22:29:06  myc
 * Moving shapechange and chant to the cooldown system.
 *
 * Revision 1.117  2008/03/07 21:21:57  myc
 * Replaced action delays and skill delays with a single list of
 * 'cooldowns', which are decremented by a recurring event and
 * also save to the player file.
 *
 * Revision 1.116  2008/03/06 05:11:51  myc
 * Combined the 'saved' and 'unsaved' portions of the char_specials and
 * player_specials structures by moving all fields of each saved structure
 * to its parent structure.  Also combined the skills array from the
 * player and mob structures since they are identical.
 *
 * Revision 1.115  2008/03/06 04:35:12  myc
 * Cleaned up formatting throughout the file.  Moved the IS_VICIOUS macro
 * from here to utils.h.  Added PULSE_AUTOSAVE to regulate how often
 * autosaves occur.
 *
 * Revision 1.114  2008/03/05 05:21:56  myc
 * Took out char_file_u struct and a bunch of random messages about it.
 * Made bank coins into ints instead of longs.  Took out frags too.
 *
 * Revision 1.113  2008/03/05 03:03:54  myc
 * Added NUM_SEXES and several trophy constants.  Removed a few constants
 * no longer necessary for pfiles.  Added a typedef for bitvectors.
 * Updated trophy, alias, spell memory, and strings for player files.
 *
 * Revision 1.112  2008/02/24 17:31:13  myc
 * Added OLCComm and NoClanTell toggles (prf bits).
 *
 * Revision 1.111  2008/02/16 20:31:32  myc
 * Include zmalloc.h in all files when memory debugging.
 *
 * Revision 1.110  2008/02/09 21:07:50  myc
 * Casting uses event flags instead of plr/mob flags now.
 *
 * Revision 1.109  2008/02/09 18:29:11  myc
 * Camping and tracking now use event flags instead of having
 * their own event fields on the char_data struct.
 *
 * Revision 1.108  2008/02/09 06:19:44  jps
 * Add "nohints" toggle for whether you receive command suggestions
 * after entering a typo.
 *
 * Revision 1.107  2008/02/09 03:06:17  myc
 * Adding a nice friendly 'do not mess with this' message to the perma
 * title define.
 *
 * Revision 1.106  2008/02/02 19:38:20  myc
 * Claimed some spare char space in player_special_data_saved
 * for player permanent titles.
 *
 * Revision 1.105  2008/01/30 19:20:57  myc
 * Removing the ch->regenerating field and replacing it with an event
 * flags member.
 *
 * Revision 1.104  2008/01/27 21:14:59  myc
 * Adding affection flags for berserk and berserk-related chants.
 * Adding rage to the player structure.
 *
 * Revision 1.103  2008/01/27 13:43:50  jps
 * Moved race and species-related data to races.h/races.c and merged species into races.
 *
 * Revision 1.102  2008/01/27 09:45:41  jps
 * Got rid of the MCLASS_ defines and we now have a single set of classes
 * for both players and mobiles.
 *
 * Revision 1.101  2008/01/25 21:12:26  myc
 * Added 'rage' for berserking.
 *
 * Revision 1.100  2008/01/20 23:18:52  myc
 * Fixed mob AI to only leave out class actions.
 *
 * Revision 1.99  2008/01/20 22:58:39  myc
 * Added some new drinks.
 *
 * Revision 1.98  2008/01/12 19:08:14  myc
 * Rerowte a lot of mob AI functionality.
 *
 * Revision 1.97  2008/01/10 05:39:43  myc
 * Had to add a LVL_PURGE to let the purge command be 101 on test and 103
 * on production.
 *
 * damage() now returns the amount of damage it caused.  Negative values
 * indicate healing, and a return value of VICTIM_DEAD indicates that the
 * victim is dead.
 *
 * Added a heal_msg to the message_type struct.
 *
 * Revision 1.96  2008/01/09 08:31:32  jps
 * Change height and weight variables for characters to ints.
 * Note that the player file stores only bytes.  The code in
 * races.c has limited player values for these measurements
 * accordingly.
 *
 * Revision 1.95  2008/01/09 04:15:42  jps
 * Remove next_memming and next_scribing from struct char_data.
 *
 * Revision 1.94  2008/01/09 02:29:01  jps
 * Remove unused fields from struct char_data. Move mobile nr to mob_specials.
 *
 * Revision 1.93  2008/01/09 01:50:06  jps
 * Classify the elements of struct char_data. Remove the specifically stored
 * points events. Add int regenerating so we know which regeneration events
 * are on a character.
 *
 * Revision 1.92  2008/01/07 10:35:43  jps
 * Add a flag for a player phantasm.  It allows mobs to be aggressive to
 * it without removing the NPC flag.
 *
 * Revision 1.91  2008/01/06 23:50:47  jps
 * Added spells project and simulacrum, and MOB2_ILLUSORY flag.
 *
 * Revision 1.90  2008/01/06 17:34:29  jps
 * Get rid of obsolete struct class_thac0.
 *
 * Revision 1.89  2008/01/06 05:33:27  jps
 * use "sorcerer" and "rogue" instead of "magic user" and "thief"
 *
 * Revision 1.88  2008/01/05 21:55:50  jps
 * Added circular-dependency prevention defs.
 *
 * Revision 1.87  2008/01/05 20:32:31  jps
 * I hate tabs
 *
 * Revision 1.86  2008/01/04 01:53:26  jps
 * Added races.h file and created global array "races" for much
 * race-related information.
 *
 * Revision 1.85  2008/01/02 02:11:03  jps
 * Moved class definition info to class.h.
 *
 * Revision 1.84  2007/12/29 00:05:10  jps
 * Changed name of BASE_SCRIBE_TIME to reflect the fact that it's
 * the time to scribe a page in a spellbook.
 *
 * Revision 1.83  2007/12/25 05:41:49  jps
 * Updated event code so the each event type is positively identified.
 * Events may be tied to objects or characters so that when that object
 * or character is extracted, its events can be canceled.
 *
 * Revision 1.82  2007/12/19 20:56:42  myc
 * Renaming the CLOAKED toggle to ROOMVIS.  Added a new connection
 * status for the clan description editor.  Added a NUM_COIN_TYPES
 * define.  Changed clan_rank from unsigned to signed in the
 * player structure.  Added a clan_id field to descriptor_data for
 * use by the clan description editor.
 *
 * Revision 1.81  2007/11/25 00:04:59  jps
 * Spell targets will keep close track of whoever's casting a spell
 * at them.  This allows spells to be safely aborted if the target
 * is removed from the game before the spell is completed.
 *
 * Revision 1.80  2007/11/18 16:51:55  myc
 * Renamed LVL_QUESTMASTER as LVL_GAMEMASTER.
 *
 * Revision 1.79  2007/10/23 20:19:25  myc
 * Created 'administration levels' to clean up the master command list.
 *
 * Revision 1.78  2007/10/13 20:13:09  myc
 * ITEM_NOLOCATE now prevents items from being found using the
 * locate object spell.
 *
 * Revision 1.77  2007/10/11 20:14:48  myc
 * Changed skill defines to support chants and songs as skills, but
 * slightly distinguished from spells and skills.  TOP_SKILL is the
 * old MAX_SKILLS.  Chants and songs now each have a block of 50
 * defines above the new MAX_SKILLS (550).  This is important
 * because MAX_SKILLS (now TOP_SKILL) is used in the pfile.
 *
 * Revision 1.76  2007/10/04 16:20:24  myc
 * Got rid of struct portal_decay_type.
 *
 * Revision 1.75  2007/10/02 02:52:27  myc
 * Removed AFF_HIDE, and put AFF_SNEAK back in.  Added character forwarding
 * for switching/shapechanging.
 *
 * Revision 1.74  2007/09/21 08:44:45  jps
 * Added object type "touchstone" and command "touch" so you can set
 * your home room by touching specific objects.
 *
 * Revision 1.73  2007/09/20 21:20:43  myc
 * Hide points and perception are in.  AFF_HIDE, AFF_SNEAK, and ITEM_HIDDEN
 * are now unused.  Hiddenness replaces bitvector in obj_file_elem.
 *
 * Revision 1.72  2007/09/15 15:36:48  myc
 * Added camouflage aff3 bit for use by natures embrace.  Removed defunct
 * ITEM_ bitvector flags.  They were duplicating AFF flags.
 *
 * Revision 1.71  2007/09/15 05:37:15  myc
 * Adding new liquids.
 *
 * Revision 1.70  2007/09/15 05:03:46  myc
 * AFF_DROPPED_PRIM and AFF_DROPPED_SECOND were incorrectly marked as AFF1
 * flags, but should be AFF2 flags.  Added MOB2 flags, which are saved as
 * an espec in the mob files.  Implemented MOB2_NOPOISON flag.
 *
 * Revision 1.69  2007/09/11 16:34:24  myc
 * Replaced MOB_NOGEAR with MOB_AQUATIC, which allows you to limit aquatic
 * mobs to water rooms.
 *
 * Revision 1.68  2007/09/04 06:49:19  myc
 * Getting rid of defunct weather_data constants.  Changing hemisphere data
 * structs.
 *
 * Revision 1.67  2007/08/23 00:31:48  jps
 * Add !AIR and !EARTH flags, for elemental immunities.
 *
 * Revision 1.66  2007/08/22 17:58:05  jps
 * Add definitions for what levels are required for various rebooting
 * actions.  Also to identify the reason for the game being restricted
 * (wizlocked).
 *
 * Revision 1.65  2007/08/14 22:43:07  myc
 * Adding conceal, corner, shadow, and stealth skills.
 *
 * Revision 1.64  2007/08/14 10:41:31  jps
 * Add variables to struct player_special_data to prevent spamming.
 *
 * Revision 1.63  2007/08/04 14:40:35  myc
 * Added MOB_PEACEFUL flag to prevent players from attacking certain mobs.
 *
 * Revision 1.62  2007/08/03 22:00:11  myc
 * Added PK observatories that work adjacent to arena rooms.
 *
 * Revision 1.61  2007/08/03 03:51:44  myc
 * check_pk is now attack_ok, and covers many more cases than before,
 * including peaced rooms, shapeshifted pk, and arena rooms.  Almost all
 * offensive attacks now use attack_ok to determine whether an attack is
 * allowed.
 *
 * Revision 1.60  2007/07/19 17:51:36  jps
 * Move NUM_LIQ_TYPES from olc.h to structs.h, so the LIQ defines will
 * all be in one place.
 *
 * Revision 1.59  2007/07/18 21:05:00  jps
 * Added an IS_VICIOUS macro that works for mobs and players.
 *
 * Revision 1.58  2007/07/14 02:16:22  jps
 * Added some new constants related to mounts.
 *
 * Revision 1.57  2007/05/28 22:36:26  jps
 * Reduce the <base-class>_subclass arrays to the subclasses that are live.
 *
 * Revision 1.56  2007/05/11 20:13:28  myc
 * Vaporform is a new circle 13 spell for cryomancers.  It significantly
 * increases the caster's chance of dodging a hit.  It is a quest spell.
 *
 * Revision 1.55  2007/04/19 07:03:14  myc
 * Renamed RAY_OF_ENFEB as RAY_OF_ENFEEB.
 *
 * Revision 1.54  2007/04/15 08:30:49  jps
 * Make scribing much, much faster. Also fix various idiosyncrasies related
 * to scribing and make it more user-friendly.
 *
 * Revision 1.53  2007/03/27 04:27:05  myc
 * Added new size, colossal.  Renamed innate constants to be more descriptive.
 *
 * Revision 1.52  2007/02/08 01:30:00  myc
 * Level 1s can gossip again.
 *
 * Revision 1.51  2007/02/04 18:12:31  myc
 * Page length now saves as a part of player specials.
 *
 * Revision 1.50  2006/12/08 05:06:58  myc
 * Coin indicies for coin arrays moved here from act.item.c.
 *
 * Revision 1.49  2006/11/18 21:01:09  jps
 * Reworked disarm skill and disarmed-weapon retrieval.
 *
 * Revision 1.48  2006/11/18 04:26:32  jps
 * Renamed continual light spell to illumination, and it only works on
 * LIGHT items (still rooms too).
 *
 * Revision 1.47  2006/11/17 22:52:59  jps
 * Change AGGR_GOOD/EVIL_ALIGN to AGGR_GOOD/EVIL_RACE
 *
 * Revision 1.46  2006/11/08 09:16:04  jps
 * Fixed some loose-lose typos.
 *
 * Revision 1.45  2006/04/11 09:08:46  rls
 * mods for medit.
 *
 * Revision 1.44  2004/11/01 06:02:01  jjl
 * Updating the buffer size for triggers
 *
 * Revision 1.43  2003/06/25 05:06:59  jjl
 * More updates.  I seem to be off of my game.
 *
 * Revision 1.41  2003/06/23 01:47:09  jjl
 * Added a NOFOLLOW flag, and the "note" command, and show notes <player>
 *
 * Revision 1.40  2003/04/16 02:00:22  jjl
 * Added skill timers for Zzur.  They don't save to file, so they were a
 * quickie.
 *
 * Revision 1.39  2002/10/19 18:29:52  jjl
 * New and improved red green and blue scrolls of recall. Yummy!
 *
 * Revision 1.38  2002/09/13 02:32:10  jjl
 * Updated header comments
 *
 * Revision 1.37  2002/08/29 17:37:50  rsd
 * Added a define for a new con state CON_ISPELL_BOOT to work
 * with new player name checking routines.
 *
 * Revision 1.36  2002/05/23 00:33:51  rls
 * Struct for new thac0 function.
 *
 * Revision 1.35  2001/04/08 17:13:10  dce
 * Added an alwayslit flag that makes a room lit no matter
 * of the sector or room type...
 *
 * Revision 1.34  2001/04/01 22:04:28  mtp
 * remove MAX_BASE_CLASS as CLASS_ROGUE is beyond its bounds
 *
 * Revision 1.33  2001/03/24 05:12:01  dce
 * Objects will now accept a level through olc and upon
 * booting the objects. The level code for the players will
 * follow.
 *
 * Revision 1.32  2001/02/03 00:59:30  mtp
 * added MAX_BASE_CLASS just for less hardcoding in the subclass area
 *
 * Revision 1.31  2000/11/28 01:14:40  mtp
 * removed mobprog references
 *
 * Revision 1.30  2000/11/25 02:33:15  rsd
 * Altered comment header and added back rlog messages
 * from prior to the addition of the $log$ string.
 *
 * Revision 1.29  2000/11/22 01:09:13  mtp
 * added motere mob classes (all the ones that are available for players)
 *
 * Revision 1.28  2000/11/07 01:32:57  mtp
 * changes d WARRIOR_SUBCLASSES to 5 and ROGUE_SUBCLASSES to 5
 *
 * Revision 1.27  2000/11/03 05:43:18  jimmy
 * removed the quest.h and put it where it should be
 *
 * Revision 1.26  2000/10/27 00:34:45  mtp
 * included quest.h and added member to char_data structure for quests
 *
 * Revision 1.25  2000/04/21 00:58:02  rsd
 * added a bool can_see_master to struct follow_type to work with
 * follow code into the dark etc...
 *
 * Revision 1.24  2000/01/31 00:01:41  rsd
 * added defines for good_race login, also fixed some tabs
 * for the defines.
 *
 * Revision 1.23  1999/12/10 05:11:40  cso
 * I moved one line down one line to make sense of it, line 205.
 *
 * Revision 1.22  1999/11/29 00:08:51  cso
 * added defines for MOB_ANIMATED and AFF3_ANIMATED
 *
 * Revision 1.21  1999/09/05 07:00:39  jimmy
 * Added RCS Log and Id strings to each source file
 *
 * Revision 1.20  1999/07/20 19:45:51  jimmy
 * This is the spanky New Spell recognition code.
 * This code allows mobs/players that have the KNOW_SPELL skill
 * to make a skill check to guess the spell.  A good roll will show both
 * the spell and the target.  A bad roll will show the spell garbled and
 * then an INT check for the target.  If a really bad roll is made, the spell
 * will be replaced by an incorrect one.  the heart of this system is
 * start_chant(), end_chant, and bad_guess().
 * --gurlaek 7/20/1999
 *
 * Revision 1.19  1999/07/15 03:27:34  jimmy
 * Mob casters can not hit while casting.
 * Updated spell cast times to be more realistic
 * changed combat to 4 seconds per round.
 * Removed do_order semantics that told the order to onlookers.
 *
 * Revision 1.18  1999/07/06 19:57:05  jimmy
 * This is a Mass check-in of the new skill/spell/language assignment system.
 * This New system combines the assignment of skill/spell/language for
 * both mobs and PCs.  LOts of code was touched and many errors were fixed.
 * MCLASS_VOID was moved from 13 to -1 to match CLASS_UNDEFINED for PC's.
 * MObs now get random skill/spell/language levels baseed on their race/class/level
 * that exactly align with PC's.  PC's no longer have to rent to use skills gained
 * by leveling or when first creating a char.  Languages no longer reset to defaults
 * when a PC levels.  Discovered that languages have been defined right in the middle
 * of the spell area.  This needs to be fixed.  A conversion util neeDs to be run on
 * the mob files to compensate for the 13 to -1 class change.
 * --gurlaek 7/6/1999
 *
 * Revision 1.17  1999/06/30 18:11:09  jimmy
 * act.offensive.c    config.c      handler.c    spells.c
 * This is a major conversion from the 18 point attribute system to the
 * 100 point attribute system.  A few of the major changes are:
 * All attributes are now on a scale from 0-100
 * Everyone views attribs the same but, the attribs for one race
 *   may be differeent for that of another even if they are the
 *   same number.
 * Mobs attribs now get rolled and scaled using the same algorithim as PC's
 * Mobs now have individual random attributes based on race/class.
 * The STR_ADD attrib has been completely removed.
 * All bonus tables for attribs in constants.c have been replaced by
 *   algorithims that closely duplicate the tables except on a 100 scale.
 * Some minor changes:
 * Race selection at char creation can now be toggled by using
 *   <world races off>
 * Lots of cleanup done to affected areas of code.
 * Setting attributes for mobs in the .mob file no longer functions
 *   but is still in the code for later use.
 * We now have a spare attribut structure in the pfile because the new
 *   system only used three instead of four.
 * --gurlaek 6/30/1999
 *
 * Revision 1.16  1999/05/04 17:19:33  dce
 * Name accept system...version one...original code by Fingh, fixed up to work
 * by Zantir.
 *
 * Revision 1.15  1999/04/16 03:55:09  dce
 * Removed some things temporarly until they can be fixed.
 *
 * Revision 1.14  1999/04/07 01:20:18  dce
 * Allows extra descriptions on no exits.
 *
 * Revision 1.13  1999/03/26 19:44:35  jen
 * Added a mortal gossip channel with 103+ godly control
 *
 * Revision 1.12  1999/03/14 00:53:03  mud
 * In class.c added a new line before the fiery mud class explanation
 * in config.c added the variable for name explanations and added the
 * text for the variable
 * in interpreter.c added the con_state stuff, whatever that was and
 * added the CON_NAME_CHECK affirmation section to the creation menu
 * loop or nanny.
 * In structs.h added the CON_NAME_CHECK define..
 * I also drove Jimmy absolutely insane with the deail in information
 * I put into our change control system.
 *
 * Revision 1.11  1999/03/06 23:51:54  dce
 * Add's chant songs, and can only chant once every four hours
 *
 * Revision 1.10  1999/03/05 20:02:36  dce
 * Chant added to, and songs craeted
 *
 * Revision 1.9  1999/03/03 20:11:02  jimmy
 * Many enhancements to scribe and spellbooks.  Lots of checks added.  Scribe is now a skill.
 * Spellbooks now have to be held to scribe as well as a quill in the other hand.
 *
 * -fingon
 *
 * Revision 1.8  1999/03/01 05:31:34  jimmy
 * Rewrote spellbooks.  Moved the spells from fingh's PSE to a standard linked
 * list.  Added Spellbook pages.  Rewrote Scribe to be a time based event based
 * on the spell mem code.  Very basic at this point.  All spells are 5 pages long,
 * and take 20 seconds to scribe each page.  This will be more dynamic when the
 * SCRIBE skill is introduced.  --Fingon.
 *
 * Revision 1.7  1999/02/12 15:33:17  jimmy
 * Brand new spell table, thanks to Zzur
 * Glad I didnt' have to do it...
 * fingon
 *
 * Revision 1.6  1999/02/11 22:17:40  jimmy
 * Moved spell circles to every 8 levels.  Filled in the
 * spells array to extend from level 70 to 105.
 * fingon
 *
 * Revision 1.5  1999/02/10 22:21:42  jimmy
 * Added do_wiztitle that allows gods to edit their
 * godly title ie Overlord.  Also added this title
 * to the playerfile
 * fingon
 *
 * Revision 1.4  1999/02/10 05:57:14  jimmy
 * Added long description to player file.  Added AFK toggle.
 * removed NOAUCTION toggle.
 * fingon
 *
 * Revision 1.3  1999/02/06 00:40:36  jimmy
 * Major change to incorporate aliases into the pfile
 * moved alias structure from interpreter.h to structs.h
 * heavily modified alias code in interpreter.c
 * Jimmy Kincaid AKA fingon
 *
 * Revision 1.2  1999/02/05 07:47:42  jimmy
 * Added Poofs to the playerfile as well as 4 extra strings for
 * future use.  fingon
 *
 * Revision 1.1  1999/01/29 01:23:32  mud
 * Initial revision
 *
 ***************************************************************************/
@


1.205
log
@Moving toggle command and prf flags into prefs.[ch]
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.204 2010/06/05 18:35:47 mud Exp mud $
d430 2
d609 1
a609 1
   long last_speech_time;            /* Taken from global_pulse               */
d965 3
@


1.204
log
@Make pyre auto-target caster if sacrificial preference is
toggled on.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.203 2009/08/02 20:20:38 myc Exp $
d22 1
a148 39
/* Preference flags: used by char_data.player_specials.pref */
#define PRF_BRIEF        0  /* Room descs won't normally be shown */
#define PRF_COMPACT      1  /* No extra CRLF pair before prompts  */
#define PRF_DEAF         2  /* Can't hear shouts                  */
#define PRF_NOTELL       3  /* Can't receive tells                */
#define PRF_OLCCOMM      4  /* Can hear communication in OLC      */
#define PRF_LINENUMS     5  /* Autodisplay linenums in stringedit */
#define PRF_AUTOLOOT     6  /* Auto loot corpses when you kill    */
#define PRF_AUTOEXIT     7  /* Display exits in a room            */
#define PRF_NOHASSLE     8  /* Aggr mobs won't attack             */
#define PRF_QUEST        9  /* On quest                           */
#define PRF_SUMMONABLE  10  /* Can be summoned                    */
#define PRF_NOREPEAT    11  /* No repetition of comm commands     */
#define PRF_HOLYLIGHT   12  /* Can see in dark                    */
#define PRF_COLOR_1     13  /* Color (low bit)                    */
#define PRF_COLOR_2     14  /* Color (high bit)                   */
#define PRF_NOWIZ       15  /* Can't hear wizline                 */
#define PRF_LOG1        16  /* On-line System Log (low bit)       */
#define PRF_LOG2        17  /* On-line System Log (high bit)      */
#define PRF_AFK         18  /* away from keyboard                 */
#define PRF_NOGOSS      19  /* Can't hear gossip channel          */
#define PRF_NOHINTS     20  /* No hints when mistyping commands   */
#define PRF_ROOMFLAGS   21  /* Can see room flags (ROOM_x)        */
#define PRF_NOPETI      22  /* Can't hear petitions               */
#define PRF_AUTOSPLIT   23  /* Auto split coins from corpses      */
#define PRF_NOCLANCOMM  24  /* Can't hear clan communication      */
#define PRF_ANON        25  /* Anon flag                          */
#define PRF_SHOWVNUMS   26  /* Show Virtual Numbers               */
#define PRF_NICEAREA    27
#define PRF_VICIOUS     28
#define PRF_PASSIVE     29  /* char will not engage upon being cast on */
#define PRF_ROOMVIS     30
#define PRF_NOFOLLOW    31  /* Cannot follow / well to this player*/
#define PRF_AUTOTREAS   32  /* Automatically loots treasure from corpses */
#define PRF_EXPAND_OBJS 33
#define PRF_EXPAND_MOBS 34
#define PRF_SACRIFICIAL 35  /* Sacrificial spells autotarget self */
#define NUM_PRF_FLAGS   36

d963 4
@


1.203
log
@Had to up the MAX_MESSAGE limit for new spells.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.202 2009/07/17 00:48:17 myc Exp myc $
d184 2
a185 1
#define NUM_PRF_FLAGS   35
d1001 3
@


1.202
log
@Added anon toggle and auto gain privileges.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.201 2009/06/09 05:49:19 myc Exp myc $
d391 1
a391 1
#define MAX_MESSAGES          100
d1000 3
@


1.201
log
@Renaming NOCTELL to NOCLANCOMM so it covers other clan communication.
Adding privilege flags.  Removing clan desc editing connection
state.  Modifying character clan references to match new
interface.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.200 2009/03/21 19:11:37 myc Exp myc $
d89 4
a92 1
#define NUM_PRV_FLAGS   1
d1000 6
@


1.200
log
@Save the duration each cooldown started at.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.199 2009/03/20 23:02:59 myc Exp myc $
d87 4
d170 1
a170 1
#define PRF_NOCTELL     24  /* Can't hear clan tell               */
d223 3
a225 4
#define CON_CLAN_DESC_EDIT 39
#define CON_GEDIT          40                /* OLC mode - grant group edit */
#define CON_IEDIT          41                /*. OLC mode - iobject edit        .*/
#define NUM_CON_MODES      42
d674 2
d691 2
a692 2
  ubyte clan;
  byte clan_rank;
a797 1
  int clan_snoop;                              /* clan chat snoop */
a868 1
   int clan_id;
d997 3
@


1.199
log
@Remove text editor connection state.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.198 2009/03/20 20:19:51 myc Exp myc $
d611 1
a611 1
   int cooldowns[NUM_COOLDOWNS];     /* Skill/action cooldowns                */
d994 3
@


1.198
log
@Add MAX_DESC_LENGTH since MAX_MSG_LENGTH from boards.h is
no longer available.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.197 2009/03/09 20:36:00 myc Exp myc $
d210 13
a222 14
#define CON_TEXTED         30
#define CON_HEDIT          31                /*. OLC mode - help edit          .*/
#define CON_TRIGEDIT       32                /*. OLC mode - trigger edit       .*/
#define CON_CLASSHELP      33                /* Char Gen Class Help             */
#define CON_SDEDIT         34
#define CON_NAME_CHECK     35
#define CON_NAME_WAIT_APPROVAL 36            /* await imm aprroval of name      */
#define CON_NEW_NAME       37                /* name declined, get a new one    */
#define CON_QGOODRACE      38                /* Menu Choice for Good races.     */
#define CON_ISPELL_BOOT    39                /* Obligatory disconnect bad names */
#define CON_CLAN_DESC_EDIT 40
#define CON_GEDIT          41                /* OLC mode - grant group edit */
#define CON_IEDIT          42                /*. OLC mode - iobject edit        .*/
#define NUM_CON_MODES      43
d994 4
@


1.197
log
@Renamed all *PLAT macros to *PLATINUM.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.196 2009/03/09 05:41:31 jps Exp myc $
d383 1
d995 3
@


1.196
log
@Moved money stuff into money.h, money.c
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.195 2009/03/09 05:09:22 jps Exp jps $
d704 1
a704 1
  int ex_plat;
d994 3
@


1.195
log
@Moved effect flags and strings into effects.h and effects.c.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.194 2009/03/09 04:33:20 jps Exp jps $
d21 1
a266 7
/* Coin indices for coin arrays */
#define PLAT            0
#define GOLD            1
#define SILVER          2
#define COPPER          3
#define NUM_COIN_TYPES  4

d994 3
@


1.194
log
@Moved direction information from structs.h, constants.h, and constants.c
into directions.h and directions.c.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.193 2009/03/09 03:45:17 jps Exp jps $
a177 84
/* Effect bits: used in char_data.char_specials.effects */
/* WARNING: In the world files, NEVER set the bits marked "R" ("Reserved") */
#define EFF_BLIND             0   /* (R) Char is blind            */
#define EFF_INVISIBLE         1   /* Char is invisible            */
#define EFF_DETECT_ALIGN      2   /* Char is sensitive to align   */
#define EFF_DETECT_INVIS      3   /* Char can see invis chars     */
#define EFF_DETECT_MAGIC      4   /* Char is sensitive to magic   */
#define EFF_SENSE_LIFE        5   /* Char can sense hidden life   */
#define EFF_WATERWALK         6   /* Char can walk on water       */
#define EFF_SANCTUARY         7   /* Char protected by sanct.     */
#define EFF_CONFUSION         8   /* Char is confused             */
#define EFF_CURSE             9   /* Char is cursed               */
#define EFF_INFRAVISION      10   /* Char can see in dark         */
#define EFF_POISON           11   /* (R) Char is poisoned         */
#define EFF_PROTECT_EVIL     12   /* Char protected from evil     */
#define EFF_PROTECT_GOOD     13   /* Char protected from good     */
#define EFF_SLEEP            14   /* (R) Char magically asleep    */
#define EFF_NOTRACK          15   /* Char can't be tracked        */
#define EFF_TAMED            16   /* Tamed!                       */
#define EFF_BERSERK          17   /* Char is berserking           */
#define EFF_SNEAK            18   /* Char is sneaking             */
#define EFF_STEALTH          19   /* Char is using stealth        */
#define EFF_FLY              20   /* Char has the ability to fly  */
#define EFF_CHARM            21   /* Char is charmed              */
#define EFF_STONE_SKIN       22
#define EFF_FARSEE           23
#define EFF_HASTE            24
#define EFF_BLUR             25
#define EFF_VITALITY         26
#define EFF_GLORY            27
#define EFF_MAJOR_PARALYSIS  28
#define EFF_FAMILIARITY      29   /* Char is considered friend    */
#define EFF_MESMERIZED       30   /* Super fasciated by something */
/* Room for future expansion 31 */
#define EFF_LIGHT            32
/* Room for future expansion 33 */
#define EFF_MINOR_PARALYSIS  34
/* Room for future expansion 35 */
#define EFF_LEVITATE         36
#define EFF_WATERBREATH      37
#define EFF_SOULSHIELD       38
#define EFF_SILENCE          39
#define EFF_PROT_FIRE        40
#define EFF_PROT_COLD        41
#define EFF_PROT_AIR         42
#define EFF_PROT_EARTH       43
#define EFF_FIRESHIELD       44
#define EFF_COLDSHIELD       45
#define EFF_MINOR_GLOBE      46
#define EFF_MAJOR_GLOBE      47
#define EFF_HARNESS          48
#define EFF_ON_FIRE          49
#define EFF_FEAR             50
#define EFF_TONGUES          51
#define EFF_DISEASE          52
#define EFF_INSANITY         53
#define EFF_ULTRAVISION      54
#define EFF_NEGATE_HEAT      55
#define EFF_NEGATE_COLD      56
#define EFF_NEGATE_AIR       57
#define EFF_NEGATE_EARTH     58
#define EFF_REMOTE_AGGR      59   /* Your aggro action won't remove invis/bless etc. */
/* Room for future expansion 60 */
/* Room for future expansion 61 */
/* Room for future expansion 62 */
/* Room for future expansion 63 */
#define EFF_AWARE            64
#define EFF_REDUCE           65
#define EFF_ENLARGE          66
#define EFF_VAMP_TOUCH       67
#define EFF_RAY_OF_ENFEEB    68
#define EFF_ANIMATED         69
/* Room for future expansion 70 */
#define EFF_SHADOWING        71
#define EFF_CAMOUFLAGED      72
#define EFF_SPIRIT_WOLF      73
#define EFF_SPIRIT_BEAR      74
#define EFF_WRATH            75
#define EFF_MISDIRECTION     76   /* Capable of performing misdirection */
#define EFF_MISDIRECTING     77   /* Currently actually moving but misdirecting */
#define EFF_BLESS            78   /* When blessed, your barehand attacks hurt ether chars */
#define EFF_HEX              79   /* The evil side of blessing, to hurt ether chars */
#define NUM_EFF_FLAGS        80   /* Keep me updated */

d1000 4
@


1.193
log
@Extract some spell-mem related stuff from structs.h and put it in spell_mem.h
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.192 2009/03/08 03:54:21 jps Exp jps $
d20 1
a20 19

#define SPECIAL(name) \
   int (name)(struct char_data *ch, void *me, int cmd, char *argument)
/* misc editor defines **************************************************/

/* format modes for format_text */
#define FORMAT_INDENT                (1 << 0)

/* room-related defines *************************************************/


/* The cardinal directions: used as index to room_data.dir_option[] */
#define NORTH          0
#define EAST           1
#define SOUTH          2
#define WEST           3
#define UP             4
#define DOWN           5
#define NUM_OF_DIRS    6        /* number of directions in a room (nsewud) */
d1084 3
@


1.192
log
@Update the comments of some structs and format code
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.191 2009/03/08 02:17:46 jps Exp jps $
d19 1
a19 1
/* preamble *************************************************************/
a461 17
/* PC spell circles */
#define CIRCLE_1   1
#define CIRCLE_2   9
#define CIRCLE_3   17
#define CIRCLE_4   25
#define CIRCLE_5   33
#define CIRCLE_6   41
#define CIRCLE_7   49
#define CIRCLE_8   57
#define CIRCLE_9   65
#define CIRCLE_10  73
#define CIRCLE_11  81
#define CIRCLE_12  89
#define CIRCLE_13  97
#define CIRCLE_14  105
#define NUM_SPELL_CIRCLES 14

a639 26
/* This structure is for memorized spells */
struct mem_list {
   int spell;
   int mem_time;
   bool can_cast;
   struct mem_list *next;
};

struct spell_memory {
  struct mem_list *list_head;             /* spells in mem queue */
  struct mem_list *list_tail;
  int num_spells;                               /* number of spells in mem list */
  int num_memmed;                               /* hw many are currently memmed */
  int num_circle[NUM_SPELL_CIRCLES + 1];        /* number of spells memmed from each circle */
  int mem_status;                               /* is the PC memming now? */
};

/* This is the scructure for spells being scribed */
struct scribing {
  int spell;
  int scribe_time;
  int pages;
  int pages_left;
  struct scribing *next;
};

d1102 3
@


1.191
log
@Delete jail event struct.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.190 2009/03/07 22:27:10 jps Exp jps $
d759 2
a760 2
   int position;                    /* Prone, Sitting, Standing, etc.        */
   int stance;                      /* Sleeping, Alert, Fighting, etc.       */
d764 6
a769 6
   float   carry_weight;               /* Carried weight                        */
   int   carry_items;                /* Number of items carried               */
   int   timer;                      /* Timer for update                      */
   int   hitgain;
   int   managain;
   int   rage;                       /* For berserking                        */
d1145 3
@


1.190
log
@Add effect flag remote_aggr, which keeps your aggressive action from
removing things like invis. Useful for those spells that keep on hurting.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.189 2009/02/11 17:03:39 myc Exp jps $
a958 1
  struct event *jail_event;                    /* get out of jail free... */
d1145 4
@


1.189
log
@Reduce IMMORT_DESC_LENGTH from 40k to 10k characters.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.188 2009/01/19 09:25:23 myc Exp myc $
d257 1
a257 1
/* Room for future expansion 59 */
d1146 3
@


1.188
log
@Replacing MOB_PET flag with MOB_SUMMONED_MOUNT flag, which
tracks a mount summoned using the skill, so proper cooldowns
can be set.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.187 2008/09/24 05:49:22 jps Exp myc $
d518 1
a518 1
#define IMMORT_DESC_LENGTH  40000
d1026 2
d1146 5
@


1.187
log
@Made autoboot control level 103
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.186 2008/09/22 02:09:17 jps Exp jps $
d128 1
a128 1
#define MOB_PET              23
d1144 3
@


1.186
log
@Changed weight into a floating-point value. Precision is preserved to
the 1/100 place.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.185 2008/09/21 20:40:40 jps Exp jps $
d440 1
a440 1
   #define LVL_REBOOT_MASTER LVL_HEAD_C
d1144 4
@


1.185
log
@Keep a list of attackers with each character, so that at the proper times -
such as char_from_room - they can be stopped from battling.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.184 2008/09/21 04:54:23 myc Exp jps $
d764 1
a764 1
   int   carry_weight;               /* Carried weight                        */
d1144 4
@


1.184
log
@Added grant caches to the player structure to make can_use_command
take less execution time.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.183 2008/09/07 20:06:47 jps Exp myc $
a754 1
   struct char_data *fighting;        /* Opponent                                */
a926 1
  struct char_data *next_fighting;             /* For fighting list */
d937 5
d1144 4
@


1.183
log
@Added flag PLR_GOTSTARS which means you have achieved ** at least once.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.182 2008/09/07 01:30:07 jps Exp jps $
d828 2
d831 1
a831 1
  struct grant_type *ungrants;   /* Commands revoked from this player      */
d834 2
a835 2
  /* Groups of commands ungranted from this player */
  struct grant_type *ungrant_groups;
d1141 3
@


1.182
log
@Add a flag for player saving, so that effect changes in the midst of it
can be ignored.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.181 2008/09/01 22:15:59 jps Exp jps $
d101 2
a102 1
#define NUM_PLR_FLAGS  25
d1139 4
@


1.181
log
@Saving and reporting players' game-leaving reasons and locations.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.180 2008/09/01 18:29:38 jps Exp jps $
d100 2
a101 1
#define NUM_PLR_FLAGS  24
d1138 3
@


1.180
log
@consolidating cooldown code in skills.c/h
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.179 2008/08/31 21:44:03 jps Exp jps $
d784 7
a790 5
  /* These keep track of how much a player has been speaking (gossipping,
   * telling, whatever else is deemed appropriate) and is used to decide
   * whether to automatically quiet the player. */
  double speech_rate;
  long last_speech_time;         /* Taken from global_pulse                */
d818 1
d1137 3
@


1.179
log
@Renamed StackObjs and StackMobs prefs to ExpandObjs and ExpandMobs.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.178 2008/08/31 20:55:40 jps Exp jps $
a193 21
#define CD_BACKSTAB             0
#define CD_BASH                 1
#define CD_INSTANT_KILL         2
#define CD_DISARM               3        /* pulse violence */
#define CD_FUMBLING_PRIMARY     4        /* pulse violence */
#define CD_DROPPED_PRIMARY      5        /* pulse violence */
#define CD_FUMBLING_SECONDARY   6        /* pulse violence */
#define CD_DROPPED_SECONDARY    7        /* pulse violence */
#define CD_SUMMON_MOUNT         8
#define CD_LAY_HANDS            9
#define CD_FIRST_AID           10
#define CD_EYE_GOUGE           11
#define CD_THROATCUT           12
#define CD_SHAPECHANGE         13
#define CD_CHANT               14
#define CD_INNATE_INVISIBLE    15
#define CD_INNATE_STRENGTH     16
#define CD_INNATE_DARKNESS     17
#define CD_INNATE_LEVITATE     18
#define MAX_COOLDOWNS          19

a498 1
#define PULSE_COOLDOWN  (1 RL_SEC)
d528 22
d761 1
a761 1
   int cooldowns[MAX_COOLDOWNS];     /* Skill/action cooldowns                */
d1134 3
@


1.178
log
@Added PROTECTOR and PEACEKEEPER mob flags.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.177 2008/08/30 20:21:39 jps Exp jps $
d190 2
a191 2
#define PRF_STACK_OBJS  33
#define PRF_STACK_MOBS  34
d1134 3
@


1.177
log
@Added flag MOB_NO_EQ_RESTRICT, which allows a mobile to wear equipment
without regard to align, class, or level restrictions.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.176 2008/08/30 01:31:51 myc Exp jps $
d140 3
a142 1
#define NUM_MOB_FLAGS        37  /* Update this when you add a flag! */
d1134 4
@


1.176
log
@Changed the way stats are calculated in effect_total; ability
stats are saved in a raw form now, and only capped when accessed.
Damroll and hitroll are recalculated everytime effect_total
is called, using cached base values.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.175 2008/08/29 19:25:08 myc Exp myc $
d122 1
a122 1
/* room for future expansion 19 */
d1132 6
@


1.175
log
@Removed some unused members from the character structure, and made
some sbytes into ints.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.174 2008/08/29 19:18:05 myc Exp myc $
d736 4
a739 2
   int hitroll;                /* Any bonus or penalty to the hit roll    */
   int damroll;                /* Any bonus or penalty to the damage roll */
d764 2
a765 2
   sbyte hitgain;
   sbyte managain;
d1132 4
@


1.174
log
@Fixed abilities so that no information is lost; the caps occur
only when the viewed stats are accessed.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.173 2008/08/29 04:16:26 myc Exp myc $
d736 2
a737 2
   sbyte hitroll;              /* Any bonus or penalty to the hit roll    */
   sbyte damroll;              /* Any bonus or penalty to the damage roll */
a758 8
   wtns_rec *witnessed;              /* linked list of witness records        */
   sh_int jail_time;
   struct char_data *arrest_by;
   struct char_data *arrest_link;
   struct char_data *witnessing;
   struct char_data *witness_vict;
   int witness_cmd;

d760 1
a760 1
   byte  carry_items;                /* Number of items carried               */
d1130 4
@


1.173
log
@Added toggles for stacking objects and mobiles in lists.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.172 2008/08/25 00:20:33 myc Exp myc $
d545 2
d714 6
a719 6
   sbyte str;
   sbyte intel;
   sbyte wis;
   sbyte dex;
   sbyte con;
   sbyte cha;
d914 2
a915 2
  struct char_ability_data viewed_abils;       /* natural_abils + effects VIEWING ONLY */
  struct char_ability_data affected_abils;     /* (viewed_abils)*(racial percentage) */
d1138 3
@


1.172
log
@Changed the way mobs memorize spells.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.171 2008/08/16 08:22:41 jps Exp myc $
d188 3
a190 1
#define NUM_PRF_FLAGS   33
d1136 3
@


1.171
log
@Added the 'desc' command and took player description-editing out of the pre-game menu.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.170 2008/08/15 03:59:08 jps Exp jps $
d872 2
a873 2
  int mem_state[12];
  int mem_memed[12];
d1134 3
@


1.170
log
@Added pprintf for paging, and changed page_string to take a character.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.169 2008/08/14 23:10:35 myc Exp jps $
d531 6
a536 1
#define EXDSCR_LENGTH         240 /* Used in corpse_save.h *BE*CAREFUL* */
a989 4
   char        **str;                  /* for the modify-str system             */
   char *backstr;                      /* added for handling abort buffers      */
   size_t        max_str;              /*                -                      */
   long        mail_to;                /* name for mail system                  */
d1009 7
d1134 3
@


1.169
log
@Added immortal log severity view preference to player structure.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.168 2008/08/14 15:40:29 jps Exp myc $
d1011 1
d1126 3
@


1.168
log
@Added pager buffer size limits.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.167 2008/08/14 09:45:22 jps Exp jps $
d831 1
d1125 3
@


1.167
log
@Replaced the pager.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.166 2008/08/13 05:52:51 jps Exp jps $
d1013 2
d1124 3
@


1.166
log
@Moved laryngitis variables so that NPCs can be affected too.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.165 2008/07/27 05:23:45 jps Exp jps $
d969 6
d976 12
a987 16
   socket_t        descriptor;                /* file descriptor for socket                */
   char        host[HOST_LENGTH+1];        /* hostname                                */
   byte        bad_pws;                /* number of bad pw attemps this login        */
   byte idle_tics;                /* tics idle at password prompt                */
   int        connected;                /* mode of 'connectedness'                */
   int        wait;                        /* wait for how many loops                */
   int        desc_num;                /* unique num assigned to desc                */
   time_t login_time;                /* when the person connected                */
   char *showstr_head;                /* for keeping track of an internal str        */
   char **showstr_vector;        /* for paging through texts                */
   int  showstr_count;                /* number of pages to page through        */
   int  showstr_page;                /* which page are we currently showing?        */
   char        **str;                        /* for the modify-str system                */
   char *backstr;                /* added for handling abort buffers     */
   size_t        max_str;                /*                -                        */
   long        mail_to;                /* name for mail system                        */
d989 9
a997 9
   int        prompt_mode;                /* control of prompt-printing                */
   char        inbuf[MAX_RAW_INPUT_LENGTH];  /* buffer for raw input                */
   char        last_input[MAX_INPUT_LENGTH]; /* the last input                        */
   char small_outbuf[SMALL_BUFSIZE];  /* standard output buffer                */
   char *output;                /* ptr to the current output buffer        */
   int  bufptr;                        /* ptr to end of current output                */
   int        bufspace;                /* space left in the output buffer        */
   struct txt_block *large_outbuf; /* ptr to large buffer, if we need it */
   struct txt_q input;                /* q of unprocessed input                */
d999 4
a1002 4
   struct char_data *original;        /* original char if switched                */
   struct descriptor_data *snooping; /* Who is this char snooping        */
   struct descriptor_data *snoop_by; /* And who is snooping this char        */
   struct descriptor_data *next; /* link to next descriptor                */
d1006 7
a1014 1

d1122 3
@


1.165
log
@Added a flag to put on players when extracting so they don't get saved twice.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.164 2008/07/22 07:25:26 myc Exp jps $
d778 6
a803 6
  /* These keep track of how much a player has been speaking (gossipping,
   * telling, whatever else is deemed appropriate) and is used to decide
   * whether to automatically quiet the player. */
  double speech_rate;
  long last_speech_time;         /* Taken from global_pulse                */

d1114 3
@


1.164
log
@Added basic iedit (unique item editor) functionality.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.163 2008/07/15 17:55:06 myc Exp myc $
d82 1
a82 1
#define PLR_CRASH       6   /* needs to be crash-saved                   */
d99 2
a100 1
#define NUM_PLR_FLAGS  23
d1114 3
@


1.163
log
@Added grants and grant groups to player structure, as well
as a connection mode for gedit.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.162 2008/06/21 17:27:18 jps Exp myc $
d337 2
a338 1
#define NUM_CON_MODES      42
d1113 4
@


1.162
log
@Changed several player struct elements to unsigned ints, since the
compiler doesn't like us using chars very much.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.161 2008/06/09 23:00:13 myc Exp jps $
d336 2
a337 1
#define NUM_CON_MODES      41
d816 7
d1112 4
@


1.161
log
@Removed some redundant and outdated defines.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.160 2008/06/07 19:06:46 myc Exp myc $
d676 5
a680 5
  byte sex;           /* PC / NPC's sex                       */
  byte class;         /* PC / NPC's class                     */
  byte race;          /* PC / NPC's race                      */
  byte race_align;    /* PC / NPC's race_align                */
  byte level;         /* PC / NPC's level                     */
d1104 3
@


1.160
log
@Moved object-related constants and routines to objects.h.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.159 2008/06/05 02:07:43 myc Exp myc $
a39 9
/* Exit info: used in room_data.dir_option.exit_info */
#define EX_ISDOOR                (1 << 0)  /* Exit is a door             */
#define EX_CLOSED                (1 << 1)  /* The door is closed         */
#define EX_LOCKED                (1 << 2)  /* The door is locked         */
#define EX_PICKPROOF             (1 << 3)  /* Lock can't be picked       */
#define EX_HIDDEN                (1 << 4)  /* exit is hidden             */
#define EX_DESCRIPT              (1 << 5)  /* Just an extra description  */


a614 9
struct current_info {
   int room_vnum;
   int direction;
   int percent;
};


/* ======================================================================= */

a1093 8
struct witness_data {
  time_t time;                  /* When did it happen? */
  char *attacker;               /* who did it? */
  char *victim;                 /* who did they do it to? */
  ubyte crime;                  /* what did they do? */
  int room;                     /* Where did they do it?  (VIRTUAL!) */
  wtns_rec *next;               /* next record (or NULL if none) */
};
d1104 3
@


1.159
log
@Changed object flags to use flagvectors.  Rewrote rent saving
and loading code to use ascii files, so got rid of a few
structs (which are still available in legacy_structs.h).
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.158 2008/05/19 20:19:50 jps Exp myc $
a380 184
/* object-related defines ********************************************/

/* vnums for portal objects */
#define HEAVENSGATE_OBJ                72
#define MOONWELL_OBJ                33
#define HELLGATE_OBJ                74

/* Item types: used by obj_data.obj_flags.type_flag */
#define ITEM_LIGHT       1                /* Item is a light source          */
#define ITEM_SCROLL      2                /* Item is a scroll                */
#define ITEM_WAND        3                /* Item is a wand                  */
#define ITEM_STAFF       4                /* Item is a staff                 */
#define ITEM_WEAPON      5                /* Item is a weapon                */
#define ITEM_FIREWEAPON  6                /* Unimplemented                   */
#define ITEM_MISSILE     7                /* Unimplemented                   */
#define ITEM_TREASURE    8                /* Item is a treasure, not gold    */
#define ITEM_ARMOR       9                /* Item is armor                   */
#define ITEM_POTION     10                /* Item is a potion                */
#define ITEM_WORN       11                /* Unimplemented                   */
#define ITEM_OTHER      12                /* Misc object                     */
#define ITEM_TRASH      13                /* Trash - shopkeeps won't buy     */
#define ITEM_TRAP       14                /* Unimplemented                   */
#define ITEM_CONTAINER  15                /* Item is a container             */
#define ITEM_NOTE       16                /* Item is note                    */
#define ITEM_DRINKCON   17                /* Item is a drink container       */
#define ITEM_KEY        18                /* Item is a key                   */
#define ITEM_FOOD       19                /* Item is food                    */
#define ITEM_MONEY      20                /* Item is money (gold)            */
#define ITEM_PEN        21                /* Item is a pen                   */
#define ITEM_BOAT       22                /* Item is a boat                  */
#define ITEM_FOUNTAIN   23                /* Item is a fountain              */
#define ITEM_PORTAL     24
#define ITEM_ROPE       25
#define ITEM_SPELLBOOK  26
#define ITEM_WALL       27
#define ITEM_TOUCHSTONE 28                /* Item sets homeroom when touched */
#define NUM_ITEM_TYPES  29

/* Take/Wear flags: used by obj_data.obj_flags.wear_flags */
#define ITEM_WEAR_TAKE      (1 << 0)  /* Item can be takes         */
#define ITEM_WEAR_FINGER    (1 << 1)  /* Can be worn on finger     */
#define ITEM_WEAR_NECK      (1 << 2)  /* Can be worn around neck   */
#define ITEM_WEAR_BODY      (1 << 3)  /* Can be worn on body       */
#define ITEM_WEAR_HEAD      (1 << 4)  /* Can be worn on head       */
#define ITEM_WEAR_LEGS      (1 << 5)  /* Can be worn on legs       */
#define ITEM_WEAR_FEET      (1 << 6)  /* Can be worn on feet       */
#define ITEM_WEAR_HANDS     (1 << 7)  /* Can be worn on hands      */
#define ITEM_WEAR_ARMS      (1 << 8)  /* Can be worn on arms       */
#define ITEM_WEAR_SHIELD    (1 << 9)  /* Can be used as a shield   */
#define ITEM_WEAR_ABOUT     (1 << 10) /* Can be worn about body    */
#define ITEM_WEAR_WAIST     (1 << 11) /* Can be worn around waist  */
#define ITEM_WEAR_WRIST     (1 << 12) /* Can be worn on wrist      */
#define ITEM_WEAR_WIELD     (1 << 13) /* Can be wielded            */
#define ITEM_WEAR_HOLD      (1 << 14) /* Can be held               */
#define ITEM_WEAR_2HWIELD   (1 << 15) /* Can be wielded two handed */
#define ITEM_WEAR_EYES      (1 << 16)
#define ITEM_WEAR_FACE      (1 << 17)
#define ITEM_WEAR_EAR       (1 << 18)
#define ITEM_WEAR_BADGE     (1 << 19)
#define ITEM_WEAR_OBELT     (1 << 20)
#define NUM_ITEM_WEAR_FLAGS 21

/* Extra object flags: used by obj_data.obj_flags.extra_flags */
#define ITEM_GLOW              0     /* Item is glowing               */
#define ITEM_HUM               1     /* Item is humming               */
#define ITEM_NORENT            2     /* Item cannot be rented         */
#define ITEM_NODONATE          3     /* Item cannot be donated        */
#define ITEM_NOINVIS           4     /* Item cannot be made invis     */
#define ITEM_INVISIBLE         5     /* Item is invisible             */
#define ITEM_MAGIC             6     /* Item is magical               */
#define ITEM_NODROP            7     /* Item can't be dropped         */
#define ITEM_UNUSED_8          8     /* - UNUSED - */
#define ITEM_ANTI_GOOD         9     /* Not usable by good people     */
#define ITEM_ANTI_EVIL         10    /* Not usable by evil people     */
#define ITEM_ANTI_NEUTRAL      11    /* Not usable by neutral people  */
#define ITEM_ANTI_SORCERER     12    /* Not usable by sorcerers       */
#define ITEM_ANTI_CLERIC       13    /* Not usable by clerics         */
#define ITEM_ANTI_ROGUE        14    /* Not usable by rogues          */
#define ITEM_ANTI_WARRIOR      15    /* Not usable by warriors        */
#define ITEM_NOSELL            16    /* Shopkeepers won't touch it    */
#define ITEM_ANTI_PALADIN      17
#define ITEM_ANTI_ANTI_PALADIN 18
#define ITEM_ANTI_RANGER       19
#define ITEM_ANTI_DRUID        20
#define ITEM_ANTI_SHAMAN       21
#define ITEM_ANTI_ASSASSIN     22
#define ITEM_ANTI_MERCENARY    23
#define ITEM_ANTI_NECROMANCER  24
#define ITEM_ANTI_CONJURER     25
#define ITEM_NOBURN            26
#define ITEM_NOLOCATE          27
#define ITEM_TRANSIENT         28
#define ITEM_FLOAT             29
#define ITEM_CONT_LIGHT        30    /* NOT USED - available          */
#define ITEM_WAS_DISARMED      31
#define NUM_ITEM_FLAGS         32


/* Modifier constants used with obj effects ('A' fields) */
#define APPLY_NONE              0        /* No effect                       */
#define APPLY_STR               1        /* Apply to strength               */
#define APPLY_DEX               2        /* Apply to dexterity              */
#define APPLY_INT               3        /* Apply to constitution           */
#define APPLY_WIS               4        /* Apply to wisdom                 */
#define APPLY_CON               5        /* Apply to constitution           */
#define APPLY_CHA               6        /* Apply to charisma               */
#define APPLY_CLASS             7        /* Reserved                        */
#define APPLY_LEVEL             8        /* Reserved                        */
#define APPLY_AGE               9        /* Apply to age                    */
#define APPLY_CHAR_WEIGHT      10        /* Apply to weight                 */
#define APPLY_CHAR_HEIGHT      11        /* Apply to height                 */
#define APPLY_MANA             12        /* Apply to max mana               */
#define APPLY_HIT              13        /* Apply to max hit points         */
#define APPLY_MOVE             14        /* Apply to max move points        */
#define APPLY_GOLD             15        /* Reserved                        */
#define APPLY_EXP              16        /* Reserved                        */
#define APPLY_AC               17        /* Apply to Armor Class            */
#define APPLY_HITROLL          18        /* Apply to hitroll                */
#define APPLY_DAMROLL          19        /* Apply to damage roll            */
#define APPLY_SAVING_PARA      20        /* Apply to save throw: paralz     */
#define APPLY_SAVING_ROD       21        /* Apply to save throw: rods       */
#define APPLY_SAVING_PETRI     22        /* Apply to save throw: petrif     */
#define APPLY_SAVING_BREATH    23        /* Apply to save throw: breath     */
#define APPLY_SAVING_SPELL     24        /* Apply to save throw: spells     */
#define APPLY_SIZE             25        /* Apply to size                   */
#define APPLY_HIT_REGEN        26
#define APPLY_MANA_REGEN       27
#define APPLY_PERCEPTION       28
#define APPLY_HIDDENNESS       29
#define APPLY_COMPOSITION      30
#define NUM_APPLY_TYPES        31


/* Container flags - value[1] */
#define CONT_CLOSEABLE      (1 << 0)        /* Container can be closed      */
#define CONT_PICKPROOF      (1 << 1)        /* Container is pickproof       */
#define CONT_CLOSED         (1 << 2)        /* Container is closed          */
#define CONT_LOCKED         (1 << 3)        /* Container is locked          */


/* Some different kind of liquids for use in values of drink containers */
#define LIQ_WATER       0
#define LIQ_BEER        1
#define LIQ_WINE        2
#define LIQ_ALE         3
#define LIQ_DARKALE     4
#define LIQ_WHISKY      5
#define LIQ_LEMONADE    6
#define LIQ_FIREBRT     7
#define LIQ_LOCALSPC    8
#define LIQ_SLIME       9
#define LIQ_MILK       10
#define LIQ_TEA        11
#define LIQ_COFFEE     12
#define LIQ_BLOOD      13
#define LIQ_SALTWATER  14
#define LIQ_RUM        15
#define LIQ_NECTAR     16
#define LIQ_SAKE       17
#define LIQ_CIDER      18
#define LIQ_TOMATOSOUP 19
#define LIQ_POTATOSOUP 20
#define LIQ_CHAI       21
#define LIQ_APPLEJUICE 22
#define LIQ_ORNGJUICE  23
#define LIQ_PNAPLJUICE 24
#define LIQ_GRAPEJUICE 25
#define LIQ_POMJUICE   26
#define LIQ_MELONAE    27
#define LIQ_COCOA      28
#define LIQ_ESPRESSO   29
#define LIQ_CAPPUCCINO 30
#define LIQ_MANGOLASSI 31
#define LIQ_ROSEWATER  32
#define LIQ_GREENTEA   33
#define LIQ_CHAMOMILE  34
#define LIQ_GIN        35
#define LIQ_BRANDY     36
#define NUM_LIQ_TYPES  37


#define NUM_VALUES     4


a540 4
#define MAX_OBJ_APPLIES         6
#define MAX_SPELLBOOK_PAGES   100  /* Used in obj_file_elem *DO*NOT*CHANGE* */
#define SPELLBOOK_ENTRY_LENGTH  9  /* Used in obj_file_elem *DO*NOT*CHANGE* */
#define SPELLBOOK_SIZE (SPELLBOOK_ENTRY_LENGTH * MAX_SPELLBOOK_PAGES) + 1
d579 2
a595 25
/* object-related structures ******************************************/

/* object values; used in obj_flag_data */
struct obj_value_data {
   int number;
   char *string;
};

/* object flags; used in obj_data */
struct obj_flag_data {
   /* Values of the item (see list)    */
   struct obj_value_data value[NUM_VALUES];
   byte type_flag;      /* Type of item                     */
   int  wear_flags;     /* Where you can wear it            */
   /* If it hums, glows, etc.          */
   flagvector  extra_flags[FLAGVECTOR_SIZE(NUM_ITEM_FLAGS)];
   int  weight;         /* Weight what else                 */
   int  cost;           /* Value when sold (gp.)            */
   int  level;          /* Level of the object              */
   int  timer;          /* Timer for object                 */
   /* Object Spell effects             */
   flagvector  effect_flags[FLAGVECTOR_SIZE(NUM_EFF_FLAGS)];
   long hiddenness;     /* How difficult it is to see obj   */
};

a620 45

struct spell_book_list {
  int spell;
  int spell_length;
  struct spell_book_list *next;
};

struct obj_apply_type {
   byte location;      /* Which ability to change (APPLY_XXX) */
   sh_int modifier;     /* How much it changes by              */
};


/* ================== Memory Structure for Objects ================== */
struct obj_data {
   obj_num item_number;                /* Where in data-base                        */
   room_num in_room;                   /* In what room -1 when conta/carr        */
   int mob_from;                       /* where the mob is from*/
   struct obj_flag_data obj_flags;     /* Object information               */
   struct obj_apply_type applies[MAX_OBJ_APPLIES];  /* applies */
   char        *name;                    /* Title of object :get etc.        */
   char        *description;                  /* When in room                     */
   char        *short_description;       /* when worn/carry/in cont.         */
   char        *action_description;      /* What to write when used          */
   struct extra_descr_data *ex_description; /* extra descriptions     */
   struct char_data *carried_by;  /* Carried by :NULL in room/conta   */
   struct char_data *worn_by;          /* Worn by?                              */
   sh_int worn_on;                  /* Worn where?                      */
   struct obj_data *in_obj;       /* In what object NULL when none    */
   struct obj_data *contains;     /* Contains objects                 */
   long id;                       /* used by DG triggers              */
   struct trig_proto_list *proto_script; /* list of default triggers  */
   struct script_data *script;    /* script info for the object       */
   struct char_data *last_to_hold;                /* If MOB forcibly loses item      */
   struct obj_data *next_content; /* For 'contains' lists             */
   struct obj_data *next;         /* For the object list              */

   struct spell_book_list *spell_book;  /* list of all spells in book if obj is spellbook */
   int    spell_book_length;      /* number of pages in spellbook     */

   struct char_data *casters;     /* Characters who are casting spells at this */
   struct event *events;          /* List of events related to this object */
   int event_flags[EVENT_FLAG_FIELDS];
                                  /* Bitfield of events active on this object */
};
d1130 5
@


1.158
log
@Using stdbool.h.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.157 2008/05/19 06:53:31 jps Exp jps $
d444 32
a475 32
#define ITEM_GLOW              (1 << 0)     /* Item is glowing               */
#define ITEM_HUM               (1 << 1)     /* Item is humming               */
#define ITEM_NORENT            (1 << 2)     /* Item cannot be rented         */
#define ITEM_NODONATE          (1 << 3)     /* Item cannot be donated        */
#define ITEM_NOINVIS           (1 << 4)     /* Item cannot be made invis     */
#define ITEM_INVISIBLE         (1 << 5)     /* Item is invisible             */
#define ITEM_MAGIC             (1 << 6)     /* Item is magical               */
#define ITEM_NODROP            (1 << 7)     /* Item can't be dropped         */
#define ITEM_UNUSED_8          (1 << 8)     /* - UNUSED - */
#define ITEM_ANTI_GOOD         (1 << 9)     /* Not usable by good people     */
#define ITEM_ANTI_EVIL         (1 << 10)    /* Not usable by evil people     */
#define ITEM_ANTI_NEUTRAL      (1 << 11)    /* Not usable by neutral people  */
#define ITEM_ANTI_SORCERER     (1 << 12)    /* Not usable by sorcerers       */
#define ITEM_ANTI_CLERIC       (1 << 13)    /* Not usable by clerics         */
#define ITEM_ANTI_ROGUE        (1 << 14)    /* Not usable by rogues          */
#define ITEM_ANTI_WARRIOR      (1 << 15)    /* Not usable by warriors        */
#define ITEM_NOSELL            (1 << 16)    /* Shopkeepers won't touch it    */
#define ITEM_ANTI_PALADIN      (1 << 17)
#define ITEM_ANTI_ANTI_PALADIN (1 << 18)
#define ITEM_ANTI_RANGER       (1 << 19)
#define ITEM_ANTI_DRUID        (1 << 20)
#define ITEM_ANTI_SHAMAN       (1 << 21)
#define ITEM_ANTI_ASSASSIN     (1 << 22)
#define ITEM_ANTI_MERCENARY    (1 << 23)
#define ITEM_ANTI_NECROMANCER  (1 << 24)
#define ITEM_ANTI_CONJURER     (1 << 25)
#define ITEM_NOBURN            (1 << 26)
#define ITEM_NOLOCATE          (1 << 27)
#define ITEM_TRANSIENT         (1 << 28)
#define ITEM_FLOAT             (1 << 29)
#define ITEM_CONT_LIGHT        (1 << 30)    /* NOT USED - available          */
#define ITEM_WAS_DISARMED      (1 << 31)
d562 2
a603 10

/* Rent codes */
#define RENT_UNDEF      0
#define RENT_CRASH      1
#define RENT_RENTED     2
#define RENT_CRYO       3
#define RENT_FORCED     4
#define RENT_TIMEDOUT   5


d725 1
a725 1
#define MAX_OBJ_EFFECT          6  /* Used in obj_file_elem *DO*NOT*CHANGE* */
d784 5
d792 2
a793 1
   int  value[4];       /* Values of the item (see list)    */
d796 2
a797 1
   int  extra_flags;    /* If it hums, glows, etc.          */
d800 1
a800 2
   int  cost_per_day;   /* Cost to keep pr. real day        */
   int  level_obj;      /* Level of the object              */
d839 1
a839 2
/* Used in obj_file_elem *DO*NOT*CHANGE* */
struct obj_effect_type {
d848 4
a851 4
   room_num in_room;                /* In what room -1 when conta/carr        */
   int mob_from;                /* where the mob is from*/
   struct obj_flag_data obj_flags;   /* Object information               */
   struct obj_effect_type effects[MAX_OBJ_EFFECT];  /* effects */
d868 1
d871 1
a871 4
   sh_int spell_component;
   int spare1;
   long spare2;
   sh_int spare3;
a879 22
/* ====================== File Element for Objects ======================= */
/*                BEWARE: Changing it will ruin rent files                   */
struct obj_file_elem {
   obj_num item_number;
   sh_int locate;  /* that's the (1+)wear-location (when equipped) or
                       (20+)index in obj file (if it's in a container)  */
   int        value[4];
   int        extra_flags;
   int        weight;
   int        timer;
   int        effect_flags; /* Object Spell effections - buru 25/5/98 */
   int        effect_flags2;
   int        effect_flags3;
   long        hiddenness;
   char spells_in_book[SPELLBOOK_SIZE]; /* spell list and how many pages each spell takes up */
   int  spell_book_length;   /* number of pages in spellbook */
   struct obj_effect_type effects[MAX_OBJ_EFFECT];
};




a886 17
/* header block for rent files.  BEWARE: Changing it will ruin rent files  */
struct rent_info {
   int        time;
   int        rentcode;
   int        net_cost_per_diem;
   int        nitems;
   int        coins[NUM_COIN_TYPES];
   int        bank[NUM_COIN_TYPES];
   int        spare6;
   int        spare7;
   int  spare8;
   long spare9;
   long spare10;
   sh_int spare11;

};

d1386 3
@


1.157
log
@Got rid of fup and fdown directions.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.156 2008/05/19 05:46:04 jps Exp jps $
a749 1
typedef char                   bool;
d1430 3
@


1.156
log
@Add effect for being mesmerized.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.155 2008/05/18 17:58:21 jps Exp jps $
d38 1
a38 3
#define FUP            6
#define FDOWN          7
#define NUM_OF_DIRS    8        /* number of directions in a room (nsewud) */
d1431 3
@


1.155
log
@Adding effect of familiarity.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.154 2008/05/18 02:00:47 jps Exp jps $
d239 1
a239 1
#define EFF_TAMED            16   /* Room for future expansion    */
d253 1
a253 1
/* Room for future expansion 30 */
d1433 3
@


1.154
log
@Moved a lot of constants into rooms.h.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.153 2008/05/17 22:03:01 jps Exp jps $
d252 1
a252 1
/* Room for future expansion 29 */
d1433 3
@


1.153
log
@Moving room-related code into rooms.h and rooms.c.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.152 2008/05/17 04:32:25 jps Exp jps $
a41 42


/* Room flags: used in room_data.room_flags */
/* WARNING: In the world files, NEVER set the bits marked "R" ("Reserved") */
#define ROOM_DARK               0   /* Dark                           */
#define ROOM_DEATH              1   /* Death trap                     */
#define ROOM_NOMOB              2   /* MOBs not allowed               */
#define ROOM_INDOORS            3   /* Indoors                        */
#define ROOM_PEACEFUL           4   /* Violence not allowed           */
#define ROOM_SOUNDPROOF         5   /* Shouts, gossip blocked         */
#define ROOM_NOTRACK            6   /* Track won't go through         */
#define ROOM_NOMAGIC            7   /* Magic not allowed              */
#define ROOM_TUNNEL             8   /* room for only 2 pers           */
#define ROOM_PRIVATE            9   /* Can't teleport in              */
#define ROOM_GODROOM           10   /* LVL_GOD+ only allowed          */
#define ROOM_HOUSE             11   /* (R) Room is a house            */
#define ROOM_HOUSE_CRASH       12   /* (R) House needs saving         */
#define ROOM_ATRIUM            13   /* (R) The door to a house        */
#define ROOM_OLC               14   /* (R) Modifyable/!compress       */
#define ROOM_BFS_MARK          15   /* (R) breadth-first srch mrk     */
#define ROOM_NOWELL            16   /* No spell portals like moonwell */
#define ROOM_NORECALL          17   /* No recalling                   */
#define ROOM_UNDERDARK         18   /*                   (not used)   */
#define ROOM_NOSUMMON          19   /* Can't summon to or from. Can't banish here. */
#define ROOM_NOSHIFT           20   /* no plane shift    (not used)   */
#define ROOM_GUILDHALL         21   /*                   (not used)   */
#define ROOM_NOSCAN            22   /* Unable to scan to/from rooms   */
#define ROOM_ALT_EXIT          23   /* Room's exits are altered       */
#define ROOM_MAP               24   /* Room on surface map (unused)   */
#define ROOM_ALWAYSLIT         25   /* Makes the room lit             */
#define ROOM_ARENA             26   /* (safe) PK allowed in room      */
#define ROOM_OBSERVATORY       27   /* see into adjacent ARENA rooms  */
#define NUM_ROOM_FLAGS         28   /* Keep me updated */

/* Room affections */
#define ROOM_EFF_FOG            0   /* Tough to see anything */
#define ROOM_EFF_DARKNESS       1   /* Magically made dark */
#define ROOM_EFF_ILLUMINATION   2   /* Magically made lit */
#define ROOM_EFF_FOREST         3   /* Um, magically made foresty */
#define ROOM_EFF_CIRCLE_FIRE    4   /* This spell hurts people */
#define NUM_ROOM_EFF_FLAGS      5

a49 27
/* Sector types: used in room_data.sector_type */
#define SECT_INSIDE          0                   /* Indoors                   */
#define SECT_CITY            1                   /* In a city                 */
#define SECT_FIELD           2                   /* In a field                */
#define SECT_FOREST          3                   /* In a forest               */
#define SECT_HILLS           4                   /* In the hills              */
#define SECT_MOUNTAIN        5                   /* On a mountain             */
#define SECT_WATER_SWIM      6                   /* Swimmable water           */
#define SECT_WATER_NOSWIM    7                   /* Water - need a boat       */
#define SECT_UNDERWATER      8                   /* Underwater                */
#define SECT_FLYING          9                   /* Wheee!                    */
#define SECT_ROAD           10
#define SECT_GRASSLANDS     11
#define SECT_OCEAN          12
#define SECT_RUINS          13
#define SECT_SWAMP          14
#define SECT_BEACH          15
#define SECT_UNDERDARK      16
#define SECT_ASTRALPLANE    17
#define SECT_AIRPLANE       18
#define SECT_FIREPLANE      19
#define SECT_EARTHPLANE     20
#define SECT_EATHREALPLANE  21
#define SECT_AVERNUS        22
#define NUM_ROOM_SECTORS    23 /* Keep me updated */


d1433 3
@


1.152
log
@Moved exits into exits.h/exits.c and changed the name to "exit".
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.151 2008/05/11 05:42:24 jps Exp jps $
a20 4
#define NOWHERE    -1    /* nil reference for room-database        */
#define NOTHING    -1    /* nil reference for objects              */
#define NOBODY     -1    /* nil reference for mobiles              */

d832 4
a1004 40

/* room-related structures ************************************************/


struct room_effect_node {
  room_num room;        /* location in the world[] array of the room */
  int      timer;       /* how many ticks this effect lasts          */
  int      effect;      /* which effect does this room have          */
  int      spell;       /* the spell number                          */
  struct room_effect_node *next; /* link to the next node            */
};


/* ================== Memory Structure for room ======================= */
struct room_data {
   room_num number;                /* Rooms number        (vnum)                      */
   int zone;                 /* Room zone (for resetting)          */
   int        sector_type;            /* sector type (move/hide)            */
   char        *name;                  /* Rooms name 'You are ...'           */
   char        *description;           /* Shown when entered                 */
   struct extra_descr_data *ex_description; /* for examine/look       */
   struct exit *exits[NUM_OF_DIRS];
   /* DEATH,DARK ... etc                 */
   flagvector room_flags[FLAGVECTOR_SIZE(NUM_ROOM_FLAGS)];                
   /* bitvector for spells/skills */
   flagvector room_effects[FLAGVECTOR_SIZE(NUM_ROOM_EFF_FLAGS)];          

   byte light;                  /* Number of lightsources in room     */
   SPECIAL(*func);

   struct trig_proto_list *proto_script; /* list of default triggers  */
   struct script_data *script;  /* script info for the object         */

   struct obj_data *contents;   /* List of items in room              */
   struct char_data *people;    /* List of NPC / PC in room          */
   int bfs_distance;
};
/* ====================================================================== */


d1502 3
@


1.151
log
@Changed position and stance to ints.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.150 2008/04/20 03:54:17 jps Exp jps $
d836 3
a1008 10
struct room_direction_data {
   char        *general_description;       /* When look DIR.                        */

   char        *keyword;                /* for open/close                        */

   int exit_info;                /* Exit info                                */
   obj_num key;                        /* Key's number (-1 for no key)                */
   room_num to_room;                /* Where direction leads (NOWHERE)        */
};

d1026 1
a1026 1
   struct room_direction_data *dir_option[NUM_OF_DIRS]; /* Directions */
d1542 3
@


1.150
log
@Add bfs distance variable to rooms.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.149 2008/04/14 05:11:40 jps Exp jps $
d156 1
d1179 2
a1180 2
   byte position;                    /* Prone, Sitting, Standing, etc.        */
   byte stance;                      /* Sleeping, Alert, Fighting, etc.       */
d1549 3
@


1.149
log
@Renamed EFF_FLYING to EFF_FLY, since it only indicates an ability
to fly - not that the characer is actually flying.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.148 2008/04/14 02:17:59 jps Exp jps $
d1046 1
d1548 4
@


1.148
log
@Adding def for Glory effect.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.147 2008/04/13 18:29:28 jps Exp jps $
d315 1
a315 1
#define EFF_FLYING           20   /* Room for future expansion    */
d1547 3
@


1.147
log
@Add effect for confusion.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.146 2008/04/13 00:57:07 jps Exp jps $
d322 1
a322 1
/* Room for future expansion 27 */
d1547 3
@


1.146
log
@Add an auto-treasure loot pref.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.145 2008/04/07 04:31:10 jps Exp jps $
d303 1
a303 1
/* Room for future expansion  8 */
d1547 3
@


1.145
log
@Update comments on position and stance.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.144 2008/04/07 03:02:54 jps Exp jps $
d269 2
a270 1
#define NUM_PRF_FLAGS   32
d1547 3
@


1.144
log
@Changed the POS/STANCE system so that POS reflects the position
of your body, while STANCE describes your condition or activity.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.143 2008/04/05 18:07:09 myc Exp jps $
d1176 2
a1177 2
   byte position;                    /* Standing, fighting, sleeping, etc.    */
   byte stance;                      /* Kneeling, sitting, standing, etc.     */
d1546 4
@


1.143
log
@Re-implementing stealth for hide points.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.142 2008/04/05 16:49:45 myc Exp myc $
d133 8
d142 9
a150 19
#define STANCE_PRONE       0
#define STANCE_RESTING     1
#define STANCE_SITTING     2
#define STANCE_KNEELING    3
#define STANCE_STANDING    4
#define NUM_STANCES        5

/* Positions */
#define POS_DEAD       0        /* dead                 */
#define POS_MORTALLYW  1        /* mortally wounded     */
#define POS_INCAP      2        /* incapacitated        */
#define POS_STUNNED    3        /* stunned              */
#define POS_SLEEPING   4        /* sleeping             */
#define POS_RESTING    5        /* resting              */
#define POS_SITTING    6        /* sitting              */
#define POS_FIGHTING   7        /* fighting             */
#define POS_STANDING   8        /* standing             */
#define POS_FLYING     9        /* flying               */
#define NUM_POSITIONS 10
d1546 3
@


1.142
log
@Fix FLAGVECTOR_SIZE macro so it doesn't always return 1 more than it needs to.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.141 2008/04/04 06:12:52 myc Exp myc $
d315 1
a315 1
/* Room for future expansion 19 */
d1548 3
@


1.141
log
@Removed justice and dieites/worship code.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.140 2008/04/03 17:34:09 jps Exp myc $
d842 1
a842 1
#define FLAGVECTOR_SIZE(flags)	((flags) / FLAGBLOCK_SIZE + 1)
d1548 3
@


1.140
log
@Retired the player flag INVSTART.  Added a byte value autoinvis_level to
struct player_special_data.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.139 2008/04/02 05:36:19 myc Exp jps $
d206 1
a206 1
#define MOB_ARRESTOR         19
d414 7
a420 8
#define CON_QDIETY         35
#define CON_NAME_CHECK     36
#define CON_NAME_WAIT_APPROVAL 37            /* await imm aprroval of name      */
#define CON_NEW_NAME       38                /* name declined, get a new one    */
#define CON_QGOODRACE      39                /* Menu Choice for Good races.     */
#define CON_ISPELL_BOOT    40                /* Obligatory disconnect bad names */
#define CON_CLAN_DESC_EDIT 41
#define NUM_CON_MODES      42
a1254 1
  int diety;
d1548 4
@


1.139
log
@Added the autoloot and autosplit toggles.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.138 2008/04/02 04:55:59 myc Exp myc $
d175 1
a175 1
#define PLR_INVSTART   14   /* should enter game wizinvis                */
d1242 1
d1550 3
@


1.138
log
@Got rid of the coins struct.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.137 2008/04/02 03:24:44 myc Exp myc $
d245 1
a245 1
#define PRF_UNUSED2      6  /* Display move points in prompt      */
d262 1
a262 1
#define PRF_NONAME      23  /* lets god hide name on title        */
d1549 3
@


1.137
log
@Rewrote group code and removed major group code.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.136 2008/03/28 17:54:53 myc Exp myc $
a859 8
struct coins_data {
   int plat;
   int gold;
   int silver;
   int copper;
};


d990 2
a991 2
   struct coins_data coins;
   struct coins_data bank;
d1157 2
a1158 2
   struct coins_data coins;
   struct coins_data bank;
d1549 3
@


1.136
log
@Now using flagvectors for effect, mob, player, preference, room, and
room effect flags.  AFF, AFF2, and AFF3 flags are now just EFF flags.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.135 2008/03/27 17:28:13 jps Exp myc $
d304 1
a304 1
#define EFF_GROUP             8   /* (R) Char is grouped          */
d329 1
a329 1
#define EFF_MAJOR_GROUP      33
d1358 1
a1358 3
  struct char_data *groupmaster;               /* group master */
  struct mgroup_type *mgroupees;               /* major groups list */
  struct char_data *mgroupmaster;              /* groups master */
a1473 5
struct mgroup_type {
        struct char_data *mgroupee;
        struct mgroup_type *next;
};

d1557 4
@


1.135
log
@ITEM_BLESS is unused now, and AFF3_BLESS and AFF3_HEX are here.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.134 2008/03/26 23:10:44 jps Exp jps $
d50 29
a78 29
#define ROOM_DARK               (1 << 0)   /* Dark                           */
#define ROOM_DEATH              (1 << 1)   /* Death trap                     */
#define ROOM_NOMOB              (1 << 2)   /* MOBs not allowed               */
#define ROOM_INDOORS            (1 << 3)   /* Indoors                        */
#define ROOM_PEACEFUL           (1 << 4)   /* Violence not allowed           */
#define ROOM_SOUNDPROOF         (1 << 5)   /* Shouts, gossip blocked         */
#define ROOM_NOTRACK            (1 << 6)   /* Track won't go through         */
#define ROOM_NOMAGIC            (1 << 7)   /* Magic not allowed              */
#define ROOM_TUNNEL             (1 << 8)   /* room for only 2 pers           */
#define ROOM_PRIVATE            (1 << 9)   /* Can't teleport in              */
#define ROOM_GODROOM            (1 << 10)  /* LVL_GOD+ only allowed          */
#define ROOM_HOUSE              (1 << 11)  /* (R) Room is a house            */
#define ROOM_HOUSE_CRASH        (1 << 12)  /* (R) House needs saving         */
#define ROOM_ATRIUM             (1 << 13)  /* (R) The door to a house        */
#define ROOM_OLC                (1 << 14)  /* (R) Modifyable/!compress       */
#define ROOM_BFS_MARK           (1 << 15)  /* (R) breadth-first srch mrk     */
#define ROOM_NOWELL             (1 << 16)  /* No spell portals like moonwell */
#define ROOM_NORECALL           (1 << 17)  /* No recalling                   */
#define ROOM_UNDERDARK          (1 << 18)  /*                   (not used)   */
#define ROOM_NOSUMMON           (1 << 19)  /* Can't summon to or from. Can't banish here. */
#define ROOM_NOSHIFT            (1 << 20)  /* no plane shift    (not used)   */
#define ROOM_GUILDHALL          (1 << 21)  /*                   (not used)   */
#define ROOM_NOSCAN             (1 << 22)  /* Unable to scan to/from rooms   */
#define ROOM_ALT_EXIT           (1 << 23)  /* Room's exits are altered       */
#define ROOM_MAP                (1 << 24)  /* Room on surface map (unused)   */
#define ROOM_ALWAYSLIT          (1 << 25)  /* Makes the room lit             */
#define ROOM_ARENA              (1 << 26)  /* (safe) PK allowed in room      */
#define ROOM_OBSERVATORY        (1 << 27)  /* see into adjacent ARENA rooms  */
#define NUM_ROOM_FLAGS          28 /* Keep me updated */
d81 6
a86 5
#define RAFF_FOG                (1 << 0)   /* Tough to see anything */
#define RAFF_DARKNESS           (1 << 1)   /* Magically made dark */
#define RAFF_ILLUMINATION       (1 << 2)   /* Magically made lit */
#define RAFF_FOREST             (1 << 3)   /* Um, magically made foresty */
#define RAFF_CIRCLE_FIRE        (1 << 4)   /* This spell hurts people */
d139 1
d152 1
d161 24
a184 23
#define PLR_KILLER     (1 << 0)   /* a player-killer                           */
#define PLR_THIEF      (1 << 1)   /* a player-thief                            */
#define PLR_FROZEN     (1 << 2)   /* is frozen                                 */
#define PLR_DONTSET    (1 << 3)   /* Don't EVER set (ISNPC bit)                */
#define PLR_WRITING    (1 << 4)   /* writing (board/mail/olc)                  */
#define PLR_MAILING    (1 << 5)   /* is writing mail                           */
#define PLR_CRASH      (1 << 6)   /* needs to be crash-saved                   */
#define PLR_SITEOK     (1 << 7)   /* has been site-cleared                     */
#define PLR_NOSHOUT    (1 << 8)   /* not allowed to shout/goss                 */
#define PLR_NOTITLE    (1 << 9)   /* not allowed to set title       (not used) */
#define PLR_DELETED    (1 << 10)  /* deleted - space reusable       (not used) */
#define PLR_LOADROOM   (1 << 11)  /* uses nonstandard loadroom      (not used) */
#define PLR_NOWIZLIST  (1 << 12)  /* shouldn't be on wizlist        (not used) */
#define PLR_NODELETE   (1 << 13)  /* shouldn't be deleted           (may be used outside the server) */
#define PLR_INVSTART   (1 << 14)  /* should enter game wizinvis                */
#define PLR_CRYO       (1 << 15)  /* is cryo-saved (purge prog)     (not used) */
#define PLR_MEDITATE   (1 << 16)  /* meditating - improves spell memorization  */
#define PLR_CASTING    (1 << 17)  /* currently casting a spell      (not used) */
#define PLR_BOUND      (1 << 18)  /* tied up                        (not used) */
#define PLR_SCRIBE     (1 << 19)  /* scribing                       (not used) */
#define PLR_TEACHING   (1 << 20)  /* teaching a skill/spell         (not used) */
#define PLR_NAPPROVE   (1 << 21)  /* name not approved yet                     */
#define PLR_NEWNAME    (1 << 22)  /* needs to choose a new name                */
d187 38
a224 40
#define MOB_SPEC            (1 << 0)  /* Mob has a callable spec-proc       */
#define MOB_SENTINEL        (1 << 1)  /* Mob should not move                */
#define MOB_SCAVENGER       (1 << 2)  /* Mob picks up stuff on the ground   */
#define MOB_ISNPC           (1 << 3)  /* (R) Automatically set on all Mobs  */
#define MOB_AWARE           (1 << 4)  /* Mob can't be backstabbed           */
#define MOB_AGGRESSIVE      (1 << 5)  /* Mob hits players in the room       */
#define MOB_STAY_ZONE       (1 << 6)  /* Mob shouldn't wander out of zone   */
#define MOB_WIMPY           (1 << 7)  /* Mob flees if severely injured      */
#define MOB_AGGR_EVIL       (1 << 8)  /* auto attack evil PC's              */
#define MOB_AGGR_GOOD       (1 << 9)  /* auto attack good PC's              */
#define MOB_AGGR_NEUTRAL    (1 << 10) /* auto attack neutral PC's           */
#define MOB_MEMORY          (1 << 11) /* remember attackers if attacked     */
#define MOB_HELPER          (1 << 12) /* attack PCs fighting other NPCs     */
#define MOB_NOCHARM         (1 << 13) /* Mob can't be charmed               */
#define MOB_NOSUMMON        (1 << 14) /* Mob can't be summoned              */
#define MOB_NOSLEEP         (1 << 15) /* Mob can't be slept                 */
#define MOB_NOBASH          (1 << 16) /* Mob can't be bashed (e.g. trees)   */
#define MOB_NOBLIND         (1 << 17) /* Mob can't be blinded               */
#define MOB_MOUNTABLE       (1 << 18)
#define MOB_ARRESTOR        (1 << 19)
#define MOB_FAST_TRACK      (1 << 20)
#define MOB_SLOW_TRACK      (1 << 21)
#define MOB_CASTING         (1 << 22) /* mob casting            (not used)  */
#define MOB_PET             (1 << 23)
#define MOB_AQUATIC         (1 << 24) /* Mob can't enter non-water rooms    */
#define MOB_AGGR_EVIL_RACE  (1 << 25)
#define MOB_AGGR_GOOD_RACE  (1 << 26)
#define MOB_NOSILENCE       (1 << 27)
#define MOB_NOVICIOUS       (1 << 28)
#define MOB_TEACHER         (1 << 29)
#define MOB_ANIMATED        (1 << 30) /* mob is animated - die if no anim effect */
#define MOB_PEACEFUL        (1 << 31) /* mob can't be attacked.             */
#define NUM_MOB_FLAGS       32  /* This one is maxed out. */

#define MOB2_NOPOISON       (1 << 0)  /* Mob cannot be poisoned.            */
#define MOB2_ILLUSORY       (1 << 1)  /* is an illusion: does no harm, leaves no corpse */
#define MOB2_PLAYER_PHANTASM (1 << 2) /* illusion of player; mobs are aggro to */
#define MOB2_NO_CLASS_AI    (1 << 3)  /* Mob does not execute class AI      */
#define MOB2_NOSCRIPT       (1 << 4)  /* Mob does not execute triggers or specprocs */
#define NUM_MOB2_FLAGS      5  /* Update this when you add a flag! */
d239 33
a271 34
#define PRF_BRIEF        (1 << 0)  /* Room descs won't normally be shown */
#define PRF_COMPACT      (1 << 1)  /* No extra CRLF pair before prompts  */
#define PRF_DEAF         (1 << 2)  /* Can't hear shouts                  */
#define PRF_NOTELL       (1 << 3)  /* Can't receive tells                */
#define PRF_OLCCOMM      (1 << 4)  /* Can hear communication in OLC      */
#define PRF_LINENUMS     (1 << 5)  /* Autodisplay linenums in stringedit */
#define PRF_UNUSED2      (1 << 6)  /* Display move points in prompt      */
#define PRF_AUTOEXIT     (1 << 7)  /* Display exits in a room            */
#define PRF_NOHASSLE     (1 << 8)  /* Aggr mobs won't attack             */
#define PRF_QUEST        (1 << 9)  /* On quest                           */
#define PRF_SUMMONABLE   (1 << 10) /* Can be summoned                    */
#define PRF_NOREPEAT     (1 << 11) /* No repetition of comm commands     */
#define PRF_HOLYLIGHT    (1 << 12) /* Can see in dark                    */
#define PRF_COLOR_1      (1 << 13) /* Color (low bit)                    */
#define PRF_COLOR_2      (1 << 14) /* Color (high bit)                   */
#define PRF_NOWIZ        (1 << 15) /* Can't hear wizline                 */
#define PRF_LOG1         (1 << 16) /* On-line System Log (low bit)       */
#define PRF_LOG2         (1 << 17) /* On-line System Log (high bit)      */
#define PRF_AFK          (1 << 18) /* away from keyboard                 */
#define PRF_NOGOSS       (1 << 19) /* Can't hear gossip channel          */
#define PRF_NOHINTS      (1 << 20) /* No hints when mistyping commands   */
#define PRF_ROOMFLAGS    (1 << 21) /* Can see room flags (ROOM_x)        */
#define PRF_NOPETI       (1 << 22) /* Can't hear petitions               */
#define PRF_NONAME       (1 << 23) /* lets god hide name on title        */
#define PRF_NOCTELL      (1 << 24) /* Can't hear clan tell               */
#define PRF_ANON         (1 << 25) /* Anon flag                          */
#define PRF_SHOWVNUMS    (1 << 26) /* Show Virtual Numbers               */
#define PRF_NICEAREA     (1 << 27)
#define PRF_VICIOUS      (1 << 28)
#define PRF_PASSIVE      (1 << 29) /* char will not engage upon being cast on */
#define PRF_ROOMVIS      (1 << 30)
#define PRF_NOFOLLOW     (1 << 31) /* Cannot follow / well to this player*/

/* max defines here is at 31!!!! And we're there. */
d294 1
a294 1
/* Affect bits: used in char_data.char_specials.affected_by */
d296 81
a376 80
#define AFF_BLIND             (1 << 0)    /* (R) Char is blind            */
#define AFF_INVISIBLE         (1 << 1)    /* Char is invisible            */
#define AFF_DETECT_ALIGN      (1 << 2)    /* Char is sensitive to align   */
#define AFF_DETECT_INVIS      (1 << 3)    /* Char can see invis chars     */
#define AFF_DETECT_MAGIC      (1 << 4)    /* Char is sensitive to magic   */
#define AFF_SENSE_LIFE        (1 << 5)    /* Char can sense hidden life   */
#define AFF_WATERWALK         (1 << 6)    /* Char can walk on water       */
#define AFF_SANCTUARY         (1 << 7)    /* Char protected by sanct.     */
#define AFF_GROUP             (1 << 8)    /* (R) Char is grouped          */
#define AFF_CURSE             (1 << 9)    /* Char is cursed               */
#define AFF_INFRAVISION       (1 << 10)   /* Char can see in dark         */
#define AFF_POISON            (1 << 11)   /* (R) Char is poisoned         */
#define AFF_PROTECT_EVIL      (1 << 12)   /* Char protected from evil     */
#define AFF_PROTECT_GOOD      (1 << 13)   /* Char protected from good     */
#define AFF_SLEEP             (1 << 14)   /* (R) Char magically asleep    */
#define AFF_NOTRACK           (1 << 15)   /* Char can't be tracked        */
#define AFF_TAMED             (1 << 16)   /* Room for future expansion    */
#define AFF_BERSERK           (1 << 17)   /* Char is berserking           */
#define AFF_SNEAK             (1 << 18)   /* Char is sneaking             */
   /* Room for future expansion        (19)  */
#define AFF_FLYING            (1 << 20)   /* Room for future expansion    */
#define AFF_CHARM             (1 << 21)   /* Char is charmed              */
#define AFF_STONE_SKIN        (1 << 22)
#define AFF_FARSEE            (1 << 23)
#define AFF_HASTE             (1 << 24)
#define AFF_BLUR              (1 << 25)
#define AFF_VIT               (1 << 26)
#define AFF_COMP_LANG         (1 << 27)
#define AFF_MAJOR_PARA        (1 << 28)
#define NUM_AFF_FLAGS         29 /* Keep me updated */

/* AFF2_XXX -> affected_by2 O yeah baby Banyal*/
#define AFF2_LIGHT            (1 << 0)
#define AFF2_MGROUP           (1 << 1)
#define AFF2_MINOR_PARALYSIS  (1 << 2)
#define AFF2_KNOCKED_OUT      (1 << 3)
#define AFF2_LEVITATE         (1 << 4)
#define AFF2_WATERBREATH      (1 << 5)
#define AFF2_SOULSHIELD       (1 << 6)
#define AFF2_SILENCE          (1 << 7)
#define AFF2_PROT_FIRE        (1 << 8)
#define AFF2_PROT_COLD        (1 << 9)
#define AFF2_PROT_AIR         (1 << 10)
#define AFF2_PROT_EARTH       (1 << 11)
#define AFF2_FIRESHIELD       (1 << 12)
#define AFF2_COLDSHIELD       (1 << 13)
#define AFF2_MINOR_GLOBE      (1 << 14)
#define AFF2_MAJOR_GLOBE      (1 << 15)
#define AFF2_HARNESS          (1 << 16)
#define AFF2_ON_FIRE          (1 << 17)
#define AFF2_FEAR             (1 << 18)
#define AFF2_TONGUES          (1 << 19)
#define AFF2_DISEASE          (1 << 20)
#define AFF2_INSANITY         (1 << 21)
#define AFF2_ULTRAVISION      (1 << 22)
#define AFF2_NEGATE_HEAT      (1 << 23)
#define AFF2_NEGATE_COLD      (1 << 24)
#define AFF2_NEGATE_AIR       (1 << 25)
#define AFF2_NEGATE_EARTH     (1 << 26)
#define AFF2_UNUSED_27        (1 << 27)  /* Hi, I'm unused! */
#define NUM_AFF2_FLAGS        28 /* Keep me updated */

/* AFF3_XXX -> affected_by3 O yeah baby Banyal*/
#define AFF3_AWARE           (1 << 0)
#define AFF3_REDUCE          (1 << 1)
#define AFF3_ENLARGE         (1 << 2)
#define AFF3_VAMP_TOUCH      (1 << 3)
#define AFF3_RAY_OF_ENFEEB   (1 << 4)
#define AFF3_ANIMATED        (1 << 5)
#define AFF3_UNUSED_6        (1 << 6)   /* Hi, I'm unused! */
#define AFF3_SHADOWING       (1 << 7)
#define AFF3_CAMOUFLAGED     (1 << 8)
#define AFF3_SPIRIT_WOLF     (1 << 9)
#define AFF3_SPIRIT_BEAR     (1 << 10)
#define AFF3_WRATH           (1 << 11)
#define AFF3_MISDIRECTION    (1 << 12)   /* Capable of performing misdirection */
#define AFF3_MISDIRECTING    (1 << 13)   /* Currently actually moving but misdirecting */
#define AFF3_BLESS           (1 << 14)   /* When blessed, your barehand attacks hurt ether chars */
#define AFF3_HEX             (1 << 15)   /* The evil side of blessing, to hurt ether chars */
#define NUM_AFF3_FLAGS       15 /* Keep me updated */
d421 1
a421 1

d493 1
d517 1
d552 1
d555 1
a555 2

/* Modifier constants used with obj affects ('A' fields) */
d587 1
d808 2
a809 2
#define MAX_AFFECT             32
#define MAX_OBJ_AFFECT          6  /* Used in obj_file_elem *DO*NOT*CHANGE* */
d841 3
a843 1
typedef unsigned long int      bitvector_t;
d873 12
a884 13
   int        value[4];        /* Values of the item (see list)    */
   byte type_flag;        /* Type of item                            */
   int        wear_flags;        /* Where you can wear it            */
   int        extra_flags;        /* If it hums, glows, etc.            */
   int        weight;                /* Weigt what else                  */
   int        cost;                /* Value when sold (gp.)            */
   int        cost_per_day;        /* Cost to keep pr. real day        */
   int  level_obj;      /* Level of the object -> Zantir 3/23/01 */
   int        timer;                /* Timer for object                 */
   int spell_flags;        /* Object Spell affections - buru 25/5/98 */
   int spell_flags2;
   int spell_flags3;
   long        hiddenness;        /* How difficult it is to see obj   */
d920 1
a920 1
struct obj_affected_type {
d932 1
a932 1
   struct obj_affected_type affected[MAX_OBJ_AFFECT];  /* affects */
a951 1
   int object_limitation;
d973 3
a975 3
   int         spell_flags; /* Object Spell affections - buru 25/5/98 */
   int  spell_flags2;
   int  spell_flags3;
d979 1
a979 1
   struct obj_affected_type affected[MAX_OBJ_AFFECT];
d1025 6
a1030 7
struct raff_node {
        room_num room;        /* location in the world[] array of the room */
        int      timer;       /* how many ticks this affection lasts */
        long     affection;   /* which affection does this room have */
        int      spell;       /* the spell number */

        struct raff_node *next; /* link to the next node */
d1043 4
a1046 1
   int room_flags;                /* DEATH,DARK ... etc                 */
a1055 1
   long  room_affections;    /* bitvector for spells/skills */
d1209 2
a1210 1
   long  act;                        /* act flag for NPC; player flag for PC  */
d1215 2
a1216 3
   long  affected_by;                /* Bitvectors for spells/skills effects  */
   long  affected_by2;
   long  affected_by3;
d1252 2
a1253 1
  long pref;                     /* preference flags for PC's.             */
d1307 8
a1314 9
/* An affect structure. */
struct affected_type {
   sh_int type;           /* The type of spell that caused this      */
   sh_int duration;       /* For how long its effects will last      */
   sh_int modifier;       /* This is added to apropriate ability     */
   byte location;         /* Tells which ability to change(APPLY_XXX)*/
   long bitvector;        /* Tells which bits to set (AFF_XXX)       */
   long bitvector2;
   long bitvector3;
d1316 1
a1316 1
   struct affected_type *next;
d1339 1
a1339 1
  struct char_ability_data viewed_abils;       /* natural_abils + affectations VIEWING ONLY */
d1342 1
a1342 1
  struct affected_type *affected;              /* affected by what spells */
a1531 1
           int object_limit;        /*vairies during game NOT saved to file*/
d1564 3
@


1.134
log
@Retire the WATERFORM and VAPORFORM effects.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.133 2008/03/26 18:11:02 jps Exp jps $
d373 1
d524 1
a524 1
#define ITEM_BLESS             (1 << 8)     /* Item is blessed               */
d1559 3
@


1.133
log
@Added a BLESS effect so that characters may be blessed.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.132 2008/03/23 00:23:22 jps Exp jps $
d354 1
a354 1
#define AFF2_WATERFORM        (1 << 27)
d364 1
a364 1
#define AFF3_VAPORFORM       (1 << 6)
d1558 3
@


1.132
log
@Add an apply type for composition. Add a base_composition value
to characters so you can use the apply.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.131 2008/03/22 19:09:46 jps Exp jps $
d372 2
a373 1
#define NUM_AFF3_FLAGS       14 /* Keep me updated */
d1558 4
@


1.131
log
@Added lifeforce and composition to characters.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.130 2008/03/22 03:22:38 myc Exp jps $
d580 1
d1119 1
d1557 3
@


1.130
log
@All invocations of the string editor now go through string_write()
instead of messing with the descriptor variables itself.  Also added
a toggle, LineNums, to decide whether to do /l or /n when entering
the string editor.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.129 2008/03/21 15:01:17 myc Exp myc $
d1117 2
d1123 1
d1555 6
@


1.129
log
@Removed languages.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.128 2008/03/16 00:19:33 jps Exp myc $
d242 1
a242 1
#define PRF_UNUSED1      (1 << 5)  /* Display mana points in prompt      */
d1552 3
@


1.128
log
@Moving trophy structs to trophy.h. struct char_data now has a
single pointer to a trophy node.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.127 2008/03/11 19:50:55 myc Exp jps $
a1241 1
  sh_int speaking;
d1552 4
@


1.127
log
@Changed the way allowed olc zones are saved on an immortal from
a fixed number of slots to a variable-length linked list.  Also
got rid of practice points.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.126 2008/03/11 02:55:30 jps Exp myc $
d28 1
a28 1
 
d73 1
a73 1
#define ROOM_ALT_EXIT           (1 << 23)  /* Room's exits are altered       */ 
d169 1
a169 1
#define PLR_LOADROOM   (1 << 11)  /* uses nonstandard loadroom      (not used) */ 
d268 1
a268 1
#define PRF_NOFOLLOW     (1 << 31) /* Cannot follow / well to this player*/ 
d328 1
a328 1
#define AFF2_MGROUP           (1 << 1) 
d399 2
a400 2
#define CON_QROLLSTATS     24 
#define CON_QHOMETOWN      25 
d415 1
a415 1
#define CON_ISPELL_BOOT    40                /* Obligatory disconnect bad names */ 
d576 2
a577 2
#define APPLY_HIT_REGEN        26                
#define APPLY_MANA_REGEN       27   
a742 7
/* Trophy kill types */
#define TROPHY_NONE	0
#define TROPHY_MOBILE	1
#define TROPHY_PLAYER	2

#define TROPHY_COUNT	21

d759 1
a759 1
 
d802 1
a802 1
#define MAX_SPELLBOOK_PAGES   100  /* Used in obj_file_elem *DO*NOT*CHANGE* */ 
d872 1
a872 1
   int spell_flags;        /* Object Spell affections - buru 25/5/98 */ 
a1159 12
struct trophy_data {
  int kill_type;
  int id;
  float amount;
  struct trophy_data *next;
};

struct trophy_queue {
  struct trophy_data *oldest;
  struct trophy_data *newest;
};

a1166 1

d1243 1
a1243 1
  struct trophy_queue trophy;
a1258 2


d1266 1
a1266 1
  int ex_gold; 
d1276 1
a1276 1
  byte class; 
d1278 1
a1278 1
  sh_int ex_max_hit; 
d1311 1
a1311 1
  bool can_see_master;          
d1520 1
a1520 1
           int object_limit;        /*vairies during game NOT saved to file*/        
d1553 5
d2011 1
a2011 1
 * 
d2035 1
a2035 1
 * 
d2078 1
a2078 1
 * 
@


1.126
log
@Use affected_size, mod_size, and natural_size to keep track of size.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.125 2008/03/10 20:46:55 myc Exp jps $
d834 1
d1230 5
d1269 1
a1269 6
  int spells_to_learn;           /* How many can you learn yet this level  */
  int olc_zone;
  int olc2_zone;
  int olc3_zone;
  int olc4_zone;
  int olc5_zone;
d1575 3
@


1.125
log
@Renamed POS1 to 'stance'.  Moving innate timers to cooldown system.
Reformatted structures some more.  Renamed hometown to homeroom.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.124 2008/03/10 19:55:37 jps Exp myc $
d1129 3
a1131 1
  int size;
d1574 4
@


1.124
log
@Made a struct for sizes with name, height, and weight.  Save base height
weight and size so they stay the same over size changes.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.123 2008/03/10 18:01:17 myc Exp jps $
d132 6
a137 6
/* Postures */
#define POS1_PRONE       0
#define POS1_RESTING     1
#define POS1_SITTING     2
#define POS1_KNEELING    3
#define POS1_STANDING    4
d287 5
a291 1
#define MAX_COOLDOWNS          15
a638 6
/*player innatetimes */
#define INNATE_INVISIBLE   0
#define INNATE_STRENGTH    1
#define INNATE_DARKNESS    2
#define INNATE_LEVITATE    3

d783 1
d1111 7
a1117 7
  char        passwd[MAX_PWD_LENGTH+1]; /* character's password      */
  char        *namelist;     /* PC / NPC s name (kill ...  )         */
  char        *short_descr;  /* for NPC 'actions'                    */
  char        *long_descr;   /* for NPC 'look'                */
  char        *description;  /* Extra descriptions                   */
  char        *title;        /* PC / NPC's title  */
  char *prompt;       /* Player prompt*/
d1119 3
a1121 3
  byte class;         /* PC / NPC's class                       */
  byte race;          /* PC / NPC's race              */
  byte race_align;                /*PC / NPC's race_align*/
d1123 2
a1124 1
  int        hometown;      /* PC s Hometown (zone)                 */
d1158 1
a1158 1
   long        exp;            /* The experience of the player            */
d1191 2
a1192 2
   byte position;                /* Standing, fighting, sleeping, etc.        */
   byte position1;
d1194 1
a1194 1
   int cooldowns[MAX_COOLDOWNS];
d1196 1
a1196 1
   wtns_rec *witnessed;           /* linked list of witness records */
d1243 1
a1243 1
  long last_speech_time; /* Taken from global_pulse */
d1246 2
a1247 2
  int        wimp_level;         /* Below this # of hit points, flee!      */
  int aggressive;
d1249 1
a1249 1
  sh_int invis_level;            /* level of invisibility                  */
d1251 2
a1252 2
  long        pref;              /* preference flags for PC's.             */
  ubyte bad_pws;                 /* number of bad password attemps         */
a1253 1
  sbyte innatetime[4];           /* Innate timers banyal                   */
a1269 1
  int rage;
d1572 4
@


1.123
log
@Re-ordered postures to be from most-prone to most-upright, somewhat
like positions.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.122 2008/03/09 18:11:31 jps Exp myc $
a130 12
/* Size */
#define SIZE_UNDEFINED  -1
#define SIZE_TINY        0
#define SIZE_SMALL       1
#define SIZE_MEDIUM      2
#define SIZE_LARGE       3
#define SIZE_HUGE        4
#define SIZE_GIANT       5
#define SIZE_GARGANTUAN  6
#define SIZE_COLOSSAL    7
#define NUM_SIZES        8

d1129 4
a1132 1
  byte size;
d1574 4
@


1.122
log
@Added two aff3 flags - one for misdirection, which means that the
char is capable of misdirected movement. The other is for current
misdirecting, meaning that the move in progress is masked by illusion.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.121 2008/03/09 06:38:37 jps Exp jps $
d144 1
a144 1
/*postures*/
d146 1
a146 1
#define POS1_KNEELING    1
d148 1
a148 1
#define POS1_RESTING     3
d1583 5
@


1.121
log
@Replaced name with namelist in struct char_data.player. GET_NAME macro
now points to short_descr. The uses of these strings is the same for
NPCs and players.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.120 2008/03/09 00:05:40 jps Exp jps $
d378 3
a380 1
#define NUM_AFF3_FLAGS       12 /* Keep me updated */
d1583 5
@


1.120
log
@Moved some NUM_foo_FLAGS defs from olc.h to structs.h.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.119 2008/03/08 23:54:04 jps Exp jps $
d1123 1
a1123 1
  char        *name;               /* PC / NPC s name (kill ...  )         */
d1581 3
@


1.119
log
@Added MOB2_NOSCRIPT flag, which prevents specprocs and triggers.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.118 2008/03/08 22:29:06 myc Exp jps $
d78 1
d119 1
d227 1
d234 1
d332 1
d363 1
d378 1
d1581 3
@


1.118
log
@Moving shapechange and chant to the cooldown system.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.117 2008/03/07 21:21:57 myc Exp myc $
d230 1
d1574 3
@


1.117
log
@Replaced action delays and skill delays with a single list of
'cooldowns', which are decremented by a recurring event and
also save to the player file.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.116 2008/03/06 05:11:51 myc Exp myc $
d292 3
a294 1
#define MAX_COOLDOWNS          13
a1267 1
  int chant;                     /* Chant counter                          */
d1573 5
@


1.116
log
@Combined the 'saved' and 'unsaved' portions of the char_specials and
player_specials structures by moving all fields of each saved structure
to its parent structure.  Also combined the skills array from the
player and mob structures since they are identical.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.115 2008/03/06 04:35:12 myc Exp myc $
d279 14
a292 15
#define ACT_DELAY_BASH            0
#define ACT_DELAY_BERSERK         1
#define ACT_DELAY_INSTANTKILL     2
#define ACT_DELAY_DISARM          3        /* pulse violence */
#define ACT_DELAY_FUMBLING_PRIM   4        /* pulse violence */
#define ACT_DELAY_DROPPED_PRIM    5        /* pulse violence */
#define ACT_DELAY_FUMBLING_SECOND 6        /* pulse violence */
#define ACT_DELAY_DROPPED_SECOND  7        /* pulse violence */
#define ACT_DELAY_HEADBUTT        8        /* pulse violence */
#define ACT_DELAY_9_UNDEFINED     9
#define ACT_DELAY_ARCHER         10
#define ACT_DELAY_SUMMON_MOUNT   11
#define ACT_DELAY_LAY_HANDS      12
#define ACT_DELAY_FIRST_AID      13
#define MAX_ACTION_DELAYS        14 /* number of commands with special delays */
a324 2
#define AFF_FUMBLING_PRIM     (1 << 29)
#define AFF_FUMBLING_SECOND   (1 << 30)
a354 2
#define AFF2_DROPPED_PRIM     (1 << 28)
#define AFF2_DROPPED_SECOND   (1 << 29)
d790 1
a795 9
#define MOB_DROPPED_WEAP_DELAY  2 /* rounds til mob can recover a dropped weapon */
#define MOB_FUMBLING_DELAY      2 /* rounds for mob to recover from fumble */
#define MOB_HEADBUTT_DELAY      3 /* rounds between mob headbutts */
#define PC_BASH_DELAY          10 /* rounds between bashes */
#define PC_BERSERK_DELAY        5 /* rounds between berserks */
#define PC_DROPPED_WEAP_DELAY   2 /* rounds til pc can recover a dropped weapon */
#define PC_FUMBLING_DELAY       2 /* rounds for pc to recover from fumble */
#define PC_HEADBUTT_DELAY       3 /* rounds between pc headbutts */
#define PC_INSTANTKILL_DELAY   10 /* rounds between instantkills */
d1191 1
a1191 2
   /* this was ubyte before, which only gives up to 255 pulse delay */
   unsigned long action_delays[MAX_ACTION_DELAYS];
a1235 2
  int last_skill_use[MAX_SKILL_TIMERS]; 

d1572 6
@


1.115
log
@Cleaned up formatting throughout the file.  Moved the IS_VICIOUS macro
from here to utils.h.  Added PULSE_AUTOSAVE to regulate how often
autosaves occur.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.114 2008/03/05 05:21:56 myc Exp myc $
d295 1
a295 1
/* Affect bits: used in char_data.char_specials.saved.affected_by */
d1157 1
a1157 1
/* Char's points.  Used in char_file_u *DO*NOT*CHANGE* */
d1160 1
a1160 1
   int max_mana;     /* Max move for PC/NPC                           */
d1162 1
a1162 1
   int max_hit;      /* Max hit for PC/NPC                      */
d1164 2
a1165 2
   int max_move;     /* Max move for PC/NPC                     */
   int armor;        /* Internal -100..100, external -10..10 AC */
d1170 2
a1171 2
   sbyte hitroll;       /* Any bonus or penalty to the hit roll    */
   sbyte damroll;       /* Any bonus or penalty to the damage roll */
d1194 1
a1194 21
/* 
 * char_special_data_saved: specials which both a PC and an NPC have in
 * common, but which must be saved to the playerfile for PC's.
 *
 * WARNING:  Do not change this structure.  Doing so will ruin the
 * playerfile.  If you want to add to the playerfile, use the spares
 * in player_special_data.
 */
struct char_special_data_saved {
   int  alignment;               /* +-1000 for alignments                */
   long idnum;                   /* player's idnum; -1 for mobiles        */
   long act;                     /* act flag for NPC's; player flag for PC's */

   long affected_by;             /* Bitvector for spells/skills affected by */
   long affected_by2;
   long affected_by3;
   sh_int apply_saving_throw[5]; /* Saving throw (Bonuses)                */
};


/* Special playing constants shared by PCs and NPCs which aren't in pfile */
d1207 11
a1217 11
  wtns_rec *witnessed;           /* linked list of witness records */
  sh_int jail_time;
  struct char_data *arrest_by;
  struct char_data *arrest_link;
  struct char_data *witnessing;
  struct char_data *witness_vict;
  int witness_cmd;

   int        carry_weight;                /* Carried weight                        */
   byte carry_items;                /* Number of items carried                */
   int        timer;                        /* Timer for update                        */
d1220 1
a1220 1
   int        rage;                        /* For berserking */
d1222 3
a1224 1
   struct char_special_data_saved saved; /* constants saved in plrfile        */
d1226 9
a1234 2
   long perception;
   long hiddenness;
d1239 3
a1241 6
 *  If you want to add new values to the playerfile, do it here.  DO NOT
 * ADD, DELETE OR MOVE ANY OF THE VARIABLES - doing so will change the
 * size of the structure and ruin the playerfile.  However, you can change
 * the names of the spares to something more meaningful, and then use them
 * in your new code.  They will automatically be transferred from the
 * playerfile into memory when players log in.
d1243 25
a1267 11
struct player_special_data_saved {
  sh_int skills[TOP_SKILL+1];        /* array of skills plus skill 0                 */
  bool talks[MAX_TONGUE];        /* PC s Tongues 0 for NPC                */
  int        wimp_level;                /* Below this # of hit points, flee!        */
  byte freeze_level;                /* Level of god who froze char, if any        */
  sh_int invis_level;                /* level of invisibility                */
  room_num load_room;                /* Which room to place char in                */
  long        pref;                        /* preference flags for PC's.                */
  ubyte bad_pws;                /* number of bad password attemps        */
  sbyte conditions[3];       /* Drunk, full, thirsty                        */
  sbyte innatetime[4];     /*Innate timers banyal*/
d1275 1
a1275 1
  int spells_to_learn;                /* How many can you learn yet this level*/
d1278 2
a1279 4
  int aggressive;
  int olc3_zone;        
  int rage;
  int olc4_zone;        
d1282 1
a1282 1
  int chant;                        /* Chant counter */
d1285 1
a1291 1
};
a1292 16
/*
 * Specials needed only by PCs, not NPCs.  Space for this structure is
 * not allocated in memory for NPCs, but it is for PCs and the portion
 * of it labelled 'saved' is saved in the playerfile.  This structure can
 * be changed freely; beware, though, that changing the contents of
 * player_special_data_saved will corrupt the playerfile.
 */
struct player_special_data {
  struct player_special_data_saved saved;
  long last_tell;                /* idnum of last tell from                */
  void *last_olc_targ;                /* olc control                                */
  int last_olc_mode;                /* olc control                                */
  byte roll[6];                  /* for rolling stats in player creation */
  struct char_data *ignored;

  int last_skill_use[MAX_SKILL_TIMERS]; 
a1293 5
  /* These keep track of how much a player has been speaking (gossipping,
   * telling, whatever else is deemed appropriate) and is used to decide
   * whether to automatically quiet the player. */
  double speech_rate;
  long last_speech_time; /* Taken from global_pulse */
d1299 1
a1299 1
  long nr;                       /* Mob's rnum */
a1309 1
  sh_int skills[TOP_SKILL+1];
d1315 1
a1315 1
  int        attack_type;        /* The Attack Type Bitvector for NPC's     */
d1317 3
a1319 3
  memory_rec *memory;            /* List of attackers to remember               */
  sbyte damnodice;          /* The number of damage dice's               */
  sbyte damsizedice;        /* The size of the damage dice's           */
d1322 1
a1322 1
  int wait_state;            /* Wait state for bashed mobs*/
d1329 1
a1329 1
/* An affect structure.  Used in char_file_u *DO*NOT*CHANGE* */
d1331 2
a1332 2
   sh_int type;          /* The type of spell that caused this      */
   sh_int duration;      /* For how long its effects will last      */
d1334 2
a1335 2
   byte location;        /* Tells which ability to change(APPLY_XXX)*/
   long        bitvector;       /* Tells which bits to set (AFF_XXX)       */
d1588 5
@


1.114
log
@Took out char_file_u struct and a bunch of random messages about it.
Made bank coins into ints instead of longs.  Took out frags too.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.113 2008/03/05 03:03:54 myc Exp myc $
d22 2
a23 2
#define NOTHING           -1    /* nil reference for objects                */
#define NOBODY           -1    /* nil reference for mobiles                */
d44 2
d50 16
a65 16
#define ROOM_DARK               (1 << 0)   /* Dark                         */
#define ROOM_DEATH              (1 << 1)   /* Death trap                   */
#define ROOM_NOMOB              (1 << 2)   /* MOBs not allowed             */
#define ROOM_INDOORS            (1 << 3)   /* Indoors                      */
#define ROOM_PEACEFUL           (1 << 4)   /* Violence not allowed         */
#define ROOM_SOUNDPROOF         (1 << 5)   /* Shouts, gossip blocked       */
#define ROOM_NOTRACK            (1 << 6)   /* Track won't go through       */
#define ROOM_NOMAGIC            (1 << 7)   /* Magic not allowed            */
#define ROOM_TUNNEL             (1 << 8)   /* room for only 2 pers         */
#define ROOM_PRIVATE            (1 << 9)   /* Can't teleport in            */
#define ROOM_GODROOM            (1 << 10)  /* LVL_GOD+ only allowed        */
#define ROOM_HOUSE              (1 << 11)  /* (R) Room is a house          */
#define ROOM_HOUSE_CRASH        (1 << 12)  /* (R) House needs saving       */
#define ROOM_ATRIUM             (1 << 13)  /* (R) The door to a house      */
#define ROOM_OLC                (1 << 14)  /* (R) Modifyable/!compress     */
#define ROOM_BFS_MARK           (1 << 15)  /* (R) breadth-first srch mrk   */
d67 2
a68 2
#define ROOM_NORECALL           (1 << 17)  /* No recalling                 */
#define ROOM_UNDERDARK          (1 << 18)  /*                                      (not used) */
d70 8
a77 8
#define ROOM_NOSHIFT            (1 << 20)  /* no plane shift                       (not used) */
#define ROOM_GUILDHALL          (1 << 21)  /*                                      (not used) */
#define ROOM_NOSCAN             (1 << 22)  /* Unable to scan to/from rooms */
#define ROOM_ALT_EXIT           (1 << 23)  /* The exits to this room have been altered */ 
#define ROOM_MAP                (1 << 24)  /* Room on the surface map              (not used) */
#define ROOM_ALWAYSLIT          (1 << 25)  /* Makes the room lit */
#define ROOM_ARENA              (1 << 26)  /* (safe) PK allowed in this room */
#define ROOM_OBSERVATORY        (1 << 27)  /* see into adjacent ARENA rooms */
d217 1
a217 1
#define MOB_AQUATIC         (1 << 24) /* Mob can't enter non-water rooms */
d224 1
a224 1
#define MOB_PEACEFUL        (1 << 31) /* mob can't be attacked.                */
d226 1
a226 1
#define MOB2_NOPOISON       (1 << 0)  /* Mob cannot be poisoned.           */
d229 1
a229 5
#define MOB2_NO_CLASS_AI    (1 << 3)  /* Mob does not execute class AI */


#define IS_VICIOUS(ch) ((IS_NPC(ch) && !MOB_FLAGGED((ch), MOB_NOVICIOUS)) || \
      (!IS_NPC(ch) && PRF_FLAGGED((ch), PRF_VICIOUS)))
d297 22
a318 22
#define AFF_BLIND             (1 << 0)           /* (R) Char is blind                */
#define AFF_INVISIBLE         (1 << 1)           /* Char is invisible                */
#define AFF_DETECT_ALIGN      (1 << 2)           /* Char is sensitive to align*/
#define AFF_DETECT_INVIS      (1 << 3)           /* Char can see invis chars  */
#define AFF_DETECT_MAGIC      (1 << 4)           /* Char is sensitive to magic*/
#define AFF_SENSE_LIFE        (1 << 5)           /* Char can sense hidden life*/
#define AFF_WATERWALK         (1 << 6)           /* Char can walk on water        */
#define AFF_SANCTUARY         (1 << 7)           /* Char protected by sanct.        */
#define AFF_GROUP             (1 << 8)           /* (R) Char is grouped        */
#define AFF_CURSE             (1 << 9)           /* Char is cursed                */
#define AFF_INFRAVISION       (1 << 10)           /* Char can see in dark        */
#define AFF_POISON            (1 << 11)           /* (R) Char is poisoned        */
#define AFF_PROTECT_EVIL      (1 << 12)           /* Char protected from evil  */
#define AFF_PROTECT_GOOD      (1 << 13)           /* Char protected from good  */
#define AFF_SLEEP             (1 << 14)           /* (R) Char magically asleep        */
#define AFF_NOTRACK              (1 << 15)           /* Char can't be tracked        */
#define AFF_TAMED              (1 << 16)           /* Room for future expansion        */
#define AFF_BERSERK           (1 << 17)          /* Char is berserking */
#define AFF_SNEAK             (1 << 18)           /* Char is sneaking                */
   /* Room for future expansion        (19) */
#define AFF_FLYING              (1 << 20)           /* Room for future expansion        */
#define AFF_CHARM             (1 << 21)           /* Char is charmed                */
d320 1
a320 1
#define AFF_FARSEE                          (1 << 23)
d376 11
a386 11
#define CON_PLAYING         0                /* Playing - Nominal state        */
#define CON_CLOSE         1                /* Disconnecting                */
#define CON_GET_NAME         2                /* By what name ..?                */
#define CON_NAME_CNFRM         3                /* Did I get that right, x?        */
#define CON_PASSWORD         4                /* Password:                        */
#define CON_NEWPASSWD         5                /* Give me a password for x        */
#define CON_CNFPASSWD         6                /* Please retype password:        */
#define CON_QSEX         7                /* Sex?                                */
#define CON_QCLASS         8                /* Class?                        */
#define CON_RMOTD         9                /* PRESS RETURN after MOTD        */
#define CON_MENU         10                /* Your choice: (main menu)        */
d388 29
a416 29
#define CON_CHPWD_GETOLD 12                /* Changing passwd: get old        */
#define CON_CHPWD_GETNEW 13                /* Changing passwd: get new        */
#define CON_CHPWD_VRFY   14                /* Verify new password                */
#define CON_DELCNF1         15                /* Delete confirmation 1        */
#define CON_DELCNF2         16                /* Delete confirmation 2        */
#define CON_QRACE        17             /* Complete Race Seletion Menu  */
#define CON_QANSI        18             /* Prompt for term type         */
#define CON_OEDIT         19                /*. OLC mode - object edit     .*/
#define CON_REDIT         20                /*. OLC mode - room edit       .*/
#define CON_ZEDIT         21                /*. OLC mode - zone info edit  .*/
#define CON_MEDIT         22                /*. OLC mode - mobile edit     .*/
#define CON_SEDIT         23                /*. OLC mode - shop edit       .*/
#define CON_QROLLSTATS   24 
#define CON_QHOMETOWN    25 
#define CON_QBONUS1      26
#define CON_QBONUS2      27
#define CON_QBONUS3      28
#define CON_QCANCHAR     29
#define CON_TEXTED       30
#define CON_HEDIT         31                /*. OLC mode - help edit       .*/
#define CON_TRIGEDIT         32                /*. OLC mode - trigger edit    .*/
#define CON_CLASSHELP    33             /* Char Gen Class Help          */
#define CON_SDEDIT       34
#define CON_QDIETY       35
#define CON_NAME_CHECK   36
#define CON_NAME_WAIT_APPROVAL 37       /* await imm aprroval of name   */
#define CON_NEW_NAME     38             /* name declined, get a new one */
#define CON_QGOODRACE    39             /* Menu Choice for Good races.  */
#define CON_ISPELL_BOOT  40             /* Obligatory disconnect bad names */ 
d462 28
a489 28
#define ITEM_LIGHT      1                /* Item is a light source        */
#define ITEM_SCROLL     2                /* Item is a scroll                */
#define ITEM_WAND       3                /* Item is a wand                */
#define ITEM_STAFF      4                /* Item is a staff                */
#define ITEM_WEAPON     5                /* Item is a weapon                */
#define ITEM_FIREWEAPON 6                /* Unimplemented                */
#define ITEM_MISSILE    7                /* Unimplemented                */
#define ITEM_TREASURE   8                /* Item is a treasure, not gold        */
#define ITEM_ARMOR      9                /* Item is armor                */
#define ITEM_POTION    10                 /* Item is a potion                */
#define ITEM_WORN      11                /* Unimplemented                */
#define ITEM_OTHER     12                /* Misc object                        */
#define ITEM_TRASH     13                /* Trash - shopkeeps won't buy        */
#define ITEM_TRAP      14                /* Unimplemented                */
#define ITEM_CONTAINER 15                /* Item is a container                */
#define ITEM_NOTE      16                /* Item is note                 */
#define ITEM_DRINKCON  17                /* Item is a drink container        */
#define ITEM_KEY       18                /* Item is a key                */
#define ITEM_FOOD      19                /* Item is food                        */
#define ITEM_MONEY     20                /* Item is money (gold)                */
#define ITEM_PEN       21                /* Item is a pen                */
#define ITEM_BOAT      22                /* Item is a boat                */
#define ITEM_FOUNTAIN  23                /* Item is a fountain                */
#define ITEM_PORTAL    24
#define ITEM_ROPE      25
#define ITEM_SPELLBOOK 26
#define ITEM_WALL      27
#define ITEM_TOUCHSTONE 28    /* Item sets homeroom when touched */
d492 15
a506 15
#define ITEM_WEAR_TAKE                (1 << 0)  /* Item can be takes                */
#define ITEM_WEAR_FINGER        (1 << 1)  /* Can be worn on finger        */
#define ITEM_WEAR_NECK                (1 << 2)  /* Can be worn around neck         */
#define ITEM_WEAR_BODY                (1 << 3)  /* Can be worn on body         */
#define ITEM_WEAR_HEAD                (1 << 4)  /* Can be worn on head         */
#define ITEM_WEAR_LEGS                (1 << 5)  /* Can be worn on legs        */
#define ITEM_WEAR_FEET                (1 << 6)  /* Can be worn on feet        */
#define ITEM_WEAR_HANDS                (1 << 7)  /* Can be worn on hands        */
#define ITEM_WEAR_ARMS                (1 << 8)  /* Can be worn on arms        */
#define ITEM_WEAR_SHIELD        (1 << 9)  /* Can be used as a shield        */
#define ITEM_WEAR_ABOUT                (1 << 10) /* Can be worn about body         */
#define ITEM_WEAR_WAIST         (1 << 11) /* Can be worn around waist         */
#define ITEM_WEAR_WRIST                (1 << 12) /* Can be worn on wrist         */
#define ITEM_WEAR_WIELD                (1 << 13) /* Can be wielded                */
#define ITEM_WEAR_HOLD                (1 << 14) /* Can be held                */
d510 1
a510 1
#define ITEM_WEAR_EAR      (1 << 18)
d545 1
a545 1
#define ITEM_CONT_LIGHT        (1 << 30)  /* NOT USED - available */
d551 7
a557 7
#define APPLY_NONE              0        /* No effect                        */
#define APPLY_STR               1        /* Apply to strength                */
#define APPLY_DEX               2        /* Apply to dexterity                */
#define APPLY_INT               3        /* Apply to constitution        */
#define APPLY_WIS               4        /* Apply to wisdom                */
#define APPLY_CON               5        /* Apply to constitution        */
#define APPLY_CHA                6        /* Apply to charisma                */
d560 5
a564 5
#define APPLY_AGE               9        /* Apply to age                        */
#define APPLY_CHAR_WEIGHT      10        /* Apply to weight                */
#define APPLY_CHAR_HEIGHT      11        /* Apply to height                */
#define APPLY_MANA             12        /* Apply to max mana                */
#define APPLY_HIT              13        /* Apply to max hit points        */
d568 1
a568 1
#define APPLY_AC               17        /* Apply to Armor Class                */
d570 7
a576 7
#define APPLY_DAMROLL          19        /* Apply to damage roll                */
#define APPLY_SAVING_PARA      20        /* Apply to save throw: paralz        */
#define APPLY_SAVING_ROD       21        /* Apply to save throw: rods        */
#define APPLY_SAVING_PETRI     22        /* Apply to save throw: petrif        */
#define APPLY_SAVING_BREATH    23        /* Apply to save throw: breath        */
#define APPLY_SAVING_SPELL     24        /* Apply to save throw: spells        */
#define APPLY_SIZE             25   /*WELL SHIT LETS SET SIZE...BANYAL*/
d584 4
a587 4
#define CONT_CLOSEABLE      (1 << 0)        /* Container can be closed        */
#define CONT_PICKPROOF      (1 << 1)        /* Container is pickproof        */
#define CONT_CLOSED         (1 << 2)        /* Container is closed                */
#define CONT_LOCKED         (1 << 3)        /* Container is locked                */
d591 10
a600 10
#define LIQ_WATER      0
#define LIQ_BEER       1
#define LIQ_WINE       2
#define LIQ_ALE        3
#define LIQ_DARKALE    4
#define LIQ_WHISKY     5
#define LIQ_LEMONADE   6
#define LIQ_FIREBRT    7
#define LIQ_LOCALSPC   8
#define LIQ_SLIME      9
d651 1
a651 2

#define NUM_COIN_TYPES        4
d667 2
a668 2
#define SUN_LIGHT        2
#define SUN_SET                3
d674 1
a674 1
#define NUM_HEMISPHERES                4
a757 1
 /* change as needed */
a771 1
 
d776 11
a786 2
#define NUM_OF_DIRS        8        /* number of directions in a room (nsewud) */

d788 2
a789 2
#define PASSES_PER_SEC        (1000000 / OPT_USEC)
#define RL_SEC                * PASSES_PER_SEC
d794 1
d796 3
a798 3
#define SMALL_BUFSIZE                1024
#define LARGE_BUFSIZE                (48 * 1024)
#define GARBAGE_SPACE                32
d1612 4
@


1.113
log
@Added NUM_SEXES and several trophy constants.  Removed a few constants
no longer necessary for pfiles.  Added a typedef for bitvectors.
Updated trophy, alias, spell memory, and strings for player files.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.112 2008/02/24 17:31:13 myc Exp myc $
d804 16
a819 16
#define MAX_STRING_LENGTH        20000
#define MAX_STRING_LENGTH_BIG        24000
#define MAX_INPUT_LENGTH        256        /* Max length per *line* of input */
#define MAX_RAW_INPUT_LENGTH        512        /* Max size of *raw* input */
#define MAX_MESSAGES                100
#define MAX_NAME_LENGTH                20  /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_PWD_LENGTH                10  /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_TITLE_LENGTH        80  /* Used in char_file_u *DO*NOT*CHANGE* */
#define HOST_LENGTH                30  /* Used in char_file_u *DO*NOT*CHANGE* */
#define EXDSCR_LENGTH                240 /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_TONGUE                3   /* Used in char_file_u *DO*NOT*CHANGE* */
#define TOP_SKILL                650 /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_AFFECT                32  /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_OBJ_AFFECT                6  /* Used in obj_file_elem *DO*NOT*CHANGE* */
#define MAX_SPELLBOOK_PAGES     100  /* Used in obj_file_elem *DO*NOT*CHANGE* */ 
#define SPELLBOOK_ENTRY_LENGTH  9    /* Used in obj_file_elem *DO*NOT*CHANGE* */
d821 3
a823 3
#define PAGE_SCRIBE_TIME        1   /* this is the time per page to scribe */
#define MAX_DAMAGE           1000   /* Maximum per hit allowed by damage() */
#define EVENT_FLAG_FIELDS       4   /* Number of fields for event flags */
d830 5
a834 5
typedef signed char                sbyte;
typedef unsigned char                ubyte;
typedef signed short int        sh_int;
typedef unsigned short int        ush_int;
typedef char                        bool;
d838 1
a838 1
typedef char                        byte;
d841 2
a842 2
typedef int        room_num;
typedef int        obj_num;
d848 1
a848 1
typedef unsigned long int bitvector_t;
d865 5
a869 9
struct char_coins_data {
        int plat; /*carried*/
        int gold; /*carried*/
        int silver; /*carried*/
        int copper; /*carriedt*/
        long bank_plat; /*coins in bank*/
        long bank_gold; /*coins in bank*/
        long bank_silver; /*silver in bank*/
        long bank_copper; /*copper in bank*/
a870 2
typedef struct char_coins_data char_coins;

d1005 2
a1006 1
   struct char_coins_data coins;
a1134 5
  /* Note that height and weight are ints here, while in the player file
   * they are ubyte.  Thus, player races cannot represent numbers over
   * 255.  This is a big problem, as ogres obviously weigh far more than 300
   * pounds!  Sigh.  Anyway, the solution is to cap PLAYERS at around 240
   * for each value.  Mobiles, not being saved, can get much bigger. */
d1141 1
a1141 1
/* Char's abilities.  Used in char_file_u *DO*NOT*CHANGE* */
a1143 1
   sbyte spare;
d1161 2
a1162 1
   struct char_coins_data coins;
a1163 1
           /* The experience of the player            */
d1198 3
a1200 3
   int        alignment;                /* +-1000 for alignments                */
   long        idnum;                        /* player's idnum; -1 for mobiles        */
   long        act;                        /* act flag for NPC's; player flag for PC's */
d1202 1
a1202 1
   long        affected_by;                /* Bitvector for spells/skills affected by */
a1238 5
   /*
    * This is where perception and hiddenness are accessed during the 
    * game.  For players, they are copied to the player_specials.saved
    * struct when the player is saved.
    */
a1298 1
  /* struct alias *aliases;*/
d1302 1
a1302 1
  byte roll[6];                  /* (NOT USED) */
a1427 8
/* in order to make certain pieces of code eaiser to port, and more readable
 * i type deff'ed to this...
 
 typedef struct char_data P_char;
*/
/*It was also crashing mud, the fix is teted and proven it somehow ws corrutping ch
Banyal*/

a1430 33
/* ==================== File Structure for Player ======================= */
/*             BEWARE: Changing it will ruin the playerfile                  */
struct char_file_u {
   /* char_player_data */
   char        name[MAX_NAME_LENGTH+1];
   char        description[EXDSCR_LENGTH];
   char        title[MAX_TITLE_LENGTH+1];
   char prompt[MAX_INPUT_LENGTH+1];
   byte sex;
   byte class;
   byte race;
   byte race_align;
   byte level;
   int hometown;
   time_t birth;   /* Time of birth of character     */
   int        played;    /* Number of secs played in total */
   ubyte weight;
   ubyte height;
   byte size;

   char        pwd[MAX_PWD_LENGTH+1];    /* character's password */

   struct char_special_data_saved char_specials_saved;
   struct player_special_data_saved player_specials_saved;
   struct char_ability_data abilities;
   struct char_point_data points;
   struct affected_type affected[MAX_AFFECT];

   time_t last_logon;                /* Time (in secs) of last logon */
   char host[HOST_LENGTH+1];        /* host of last logon */
};
/* ====================================================================== */

a1598 6
struct player_frags_data {
    int playerid;
    char        name[MAX_NAME_LENGTH+20];
    float frag;
};

d1607 5
@


1.112
log
@Added OLCComm and NoClanTell toggles (prf bits).
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.111 2008/02/16 20:31:32 myc Exp myc $
d125 1
d753 7
a778 11
/* MAX_CHAR SPELLS is the maximum number of spells a max_level char can */
/* have   Use this value with spell_save fcn's  DO NOT MODIFY independent */
/* of the circle/level assignment table in spell_mem.c */
#define MAX_CHAR_SPELLS   131 

 /*trophy defines*/
#define MAX_TROPHY 60 /*Max amount you can increase trphy to that wont
ruin pfile*/
#define USE_TROPHY 20 /*the amount of trophy game using*/


a811 1
#define MAX_WIZTITLE_LENGTH        30  /* Used in char_file_u *DO*NOT*CHANGE* */
a816 3
#define MAX_ALIAS_LENGTH        8   /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_REPLACE_LENGTH      48  /* Used in char_file_u *DO*NOT*CHANGE* */
#define NUM_ALIASES             20  /* Used in char_file_u *DO*NOT*CHANGE* */
a823 1
#define NUM_P_TITLES            9   /* Used in player_special_data *DO*NOT*CHANGE* */
d844 6
d1098 1
a1098 1
struct mem_list{
d1101 1
a1101 1
   int can_cast;
d1104 10
d1165 7
a1171 7
   sh_int mana;
   sh_int max_mana;     /* Max move for PC/NPC                           */
   sh_int hit;
   sh_int max_hit;      /* Max hit for PC/NPC                      */
   sh_int move;
   sh_int max_move;     /* Max move for PC/NPC                     */
   sh_int armor;        /* Internal -100..100, external -10..10 AC */
d1181 9
a1189 2
    int   virtual;
    float value;
d1192 3
a1194 3
struct alias {
  char alias[MAX_ALIAS_LENGTH];
  char replacement[MAX_REPLACE_LENGTH];
d1196 1
a1269 1
  byte PADDING0;                /* used to be spells_to_learn                */
d1280 3
a1282 15
  struct trophy_data trophy[MAX_TROPHY];
  struct alias aliases[NUM_ALIASES];
  int top;
  float frag;
  /* PC spell memory save */
  /* spellnum and can_cast flag*/
  int memmed_spells[MAX_CHAR_SPELLS][2];  
  
  /* number of spells in memory*/
  int spells_in_mem;
  
  /* spares below for future expansion.  You can change the names from
     'sparen' to something meaningful, but don't change the order.  */
  
  ubyte spheres[6];
a1283 1
  ubyte spare1;
a1285 4
  ubyte spare2;
  ubyte spare3;
  ubyte spare4;
  ubyte spare5;                
a1295 1
  int spare23;
d1297 7
a1303 16
  int nathps;
  long perception;
  long hiddenness;
  long spare44;
  long        spare19;
  long        spare20;
  long spare25;
  long        spare21;
  sh_int spare31;
  sh_int spare32;
  char   poofin[EXDSCR_LENGTH];
  char   poofout[EXDSCR_LENGTH];
  char   titles[NUM_P_TITLES][MAX_TITLE_LENGTH];
  char   spare33[EXDSCR_LENGTH];
  char   long_descr[EXDSCR_LENGTH]; 
  char   wiz_title[MAX_WIZTITLE_LENGTH];
d1427 1
a1427 5
  struct mem_list *spell_list;                 /* spells in mem queue */
  int num_spells;                               /* number of spells in mem list */  
  int num_memmed;                               /* hw many are currently memmed */
  int mem_status;                               /* is the PC memming now? */
  int spells_memmed_circle[NUM_SPELL_CIRCLES + 1];  /* number of spells memmed from each circle */
d1671 3
@


1.111
log
@Include zmalloc.h in all files when memory debugging.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.110 2008/02/09 21:07:50 myc Exp myc $
d249 3
a251 3
#define PRF_DISPHP       (1 << 4)  /* Display hit points in prompt       */
#define PRF_DISPMANA     (1 << 5)  /* Display mana points in prompt      */
#define PRF_DISPMOVE     (1 << 6)  /* Display move points in prompt      */
d269 1
a269 1
#define PRF_NOTDONE      (1 << 24) /* Can hear clan talk                 */
d1687 3
@


1.110
log
@Casting uses event flags instead of plr/mob flags now.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.109 2008/02/09 18:29:11 myc Exp myc $
d1679 4
d1687 3
@


1.109
log
@Camping and tracking now use event flags instead of having
their own event fields on the char_data struct.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.108 2008/02/09 06:19:44 jps Exp myc $
d182 1
a182 1
#define PLR_CASTING    (1 << 17)  /* currently casting a spell                 */
d184 1
a184 1
#define PLR_SCRIBE     (1 << 19)  /* scribing a spell into a book              */
a187 1
#define PLR_MEMMING    (1 << 23)  /* player is memorizing or praying for spells */
d212 1
a212 1
#define MOB_CASTING         (1 << 22) /* mob casting                        */
d1683 4
@


1.108
log
@Add "nohints" toggle for whether you receive command suggestions
after entering a typo.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.107 2008/02/09 03:06:17 myc Exp jps $
a1456 2
  struct event *camp_event;
  struct event *track_delayed_event;
d1684 4
@


1.107
log
@Adding a nice friendly 'do not mess with this' message to the perma
title define.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.106 2008/02/02 19:38:20 myc Exp myc $
d266 1
a266 1
#define PRF_NOGRATZ      (1 << 20) /* Can't hear grats channel           */
d1686 4
@


1.106
log
@Claimed some spare char space in player_special_data_saved
for player permanent titles.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.105 2008/01/30 19:20:57 myc Exp myc $
d832 1
a832 1
#define NUM_P_TITLES            9
d1686 4
@


1.105
log
@Removing the ch->regenerating field and replacing it with an event
flags member.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.104 2008/01/27 21:14:59 myc Exp myc $
d832 1
d1313 1
a1314 3
  char   spare34[EXDSCR_LENGTH];
  char   spare35[EXDSCR_LENGTH];
  char   spare36[EXDSCR_LENGTH];
d1686 4
@


1.104
log
@Adding affection flags for berserk and berserk-related chants.
Adding rage to the player structure.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.103 2008/01/27 13:43:50 jps Exp myc $
d831 1
d972 2
a1456 1
  int regenerating;                            /* Which regen events does it have */
d1462 1
d1687 4
@


1.103
log
@Moved race and species-related data to races.h/races.c and merged species into races.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.102 2008/01/27 09:45:41 jps Exp jps $
d316 1
a316 1
   /* Room for future expansion        (17) */
d373 3
d1290 1
a1290 1
  int spare11;                /* Rank within clan */
d1684 3
@


1.102
log
@Got rid of the MCLASS_ defines and we now have a single set of classes
for both players and mobiles.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.101 2008/01/25 21:12:26 myc Exp jps $
a120 22
#define SPECIES_HUMAN        0
#define SPECIES_ELF          1
#define SPECIES_GNOME        2
#define SPECIES_DWARF        3
#define SPECIES_TROLL        4
#define SPECIES_DROW_ELF     5
#define SPECIES_DUERGAR      6
#define SPECIES_OGRE         7
#define SPECIES_ORC          8
#define SPECIES_HALF_ELF     9
#define SPECIES_BARBARIAN   10
#define SPECIES_HALFLING    11
#define SPECIES_UNDEAD      12
#define SPECIES_HUMANOID    13
#define SPECIES_ANIMAL      14
#define SPECIES_DRAGON      15
#define SPECIES_GIANT       16
#define SPECIES_OTHER       17
#define SPECIES_GOBLIN      18
#define SPECIES_DEMON       19
#define SPECIES_NUMBER      20

d1681 4
@


1.101
log
@Added 'rage' for berserking.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.100 2008/01/20 23:18:52 myc Exp $
a142 28
#define MCLASS_VOID        -1   /* this now lines up with CLASS_UNDEFINED */
#define MCLASS_SORCERER     0
#define MCLASS_CLERIC       1
#define MCLASS_THIEF        2
#define MCLASS_WARRIOR      3
#define MCLASS_PALADIN      4
#define MCLASS_ANTI_PALADIN 5
#define MCLASS_RANGER       6
#define MCLASS_DRUID        7
#define MCLASS_SHAMAN       8
#define MCLASS_ASSASSIN     9
#define MCLASS_MERCENARY   10
#define MCLASS_NECROMANCER 11
#define MCLASS_CONJURER    12
#define MCLASS_MONK        13
#define MCLASS_BERSERKER   14
#define MCLASS_PRIEST      15
#define MCLASS_DIABOLIST   16
#define MCLASS_MYSTIC      17
#define MCLASS_ROGUE       18
#define MCLASS_BARD        19
#define MCLASS_PYROMANCER  20
#define MCLASS_CRYOMANCER  21
#define MCLASS_ILLUSIONIST 22
#define MCLASS_HUNTER      23
#define MCLASS_NUMBER      25        /* this array is referenced with a -1 cos element 0 is val -1*/


d1703 3
@


1.100
log
@Fixed mob AI to only leave out class actions.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.99 2008/01/20 22:58:39 myc Exp myc $
d703 8
d1274 1
d1731 3
@


1.99
log
@Added some new drinks.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.98 2008/01/12 19:08:14 myc Exp myc $
d277 1
a277 1
#define MOB2_NOAI           (1 << 3)  /* Mob does not execute normal AI */
d1722 3
@


1.98
log
@Rerowte a lot of mob AI functionality.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.97 2008/01/10 05:39:43 myc Exp myc $
d664 14
a677 1
#define NUM_LIQ_TYPES  24
d1722 3
@


1.97
log
@Had to add a LVL_PURGE to let the purge command be 101 on test and 103
on production.

damage() now returns the amount of damage it caused.  Negative values
indicate healing, and a return value of VICTIM_DEAD indicates that the
victim is dead.

Added a heal_msg to the message_type struct.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.96 2008/01/09 08:31:32 jps Exp myc $
d276 2
a277 1
#define MOB2_PLAYER_PHANTASM (1 << 2 ) /* illusion of player; mobs are aggro to */
d1709 10
@


1.96
log
@Change height and weight variables for characters to ints.
Note that the player file stores only bytes.  The code in
races.c has limited player values for these measurements
accordingly.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.95 2008/01/09 04:15:42 jps Exp jps $
d733 6
a738 5
#define LVL_ADMIN       104
#define LVL_BUILDER     104
#define LVL_GAMEMASTER  103
#define LVL_ATTENDANT   102
#define LVL_RESTORE     103
d740 6
a745 5
#define LVL_ADMIN       103
#define LVL_BUILDER     101
#define LVL_GAMEMASTER  102
#define LVL_ATTENDANT   101
#define LVL_RESTORE       1
d756 1
a756 1
#define LVL_REBOOT_MASTER LVL_HEAD_C
d758 1
a758 1
#define LVL_REBOOT_POSTPONE  LVL_GOD
d760 1
a760 1
#define LVL_REBOOT_VIEW      LVL_GOD
d762 3
a764 3
#define LVL_REBOOT_MASTER    LVL_HEAD_B
#define LVL_REBOOT_POSTPONE  LVL_IMMORT
#define LVL_REBOOT_VIEW      1
d775 3
d855 1
d1596 6
a1601 5
   struct msg_type die_msg;        /* messages when death                        */
   struct msg_type miss_msg;        /* messages when miss                        */
   struct msg_type hit_msg;        /* messages when hit                        */
   struct msg_type god_msg;        /* messages when hit on god                */
   struct message_type *next;        /* to next messages of this kind.        */
d1606 2
a1607 2
   int        a_type;                        /* Attack type                                */
   int        number_of_attacks;        /* How many attack messages to chose from. */
d1708 6
@


1.95
log
@Remove next_memming and next_scribing from struct char_data.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.94 2008/01/09 02:29:01 jps Exp jps $
d1147 8
a1154 2
  ubyte weight;       /* PC / NPC's weight                    */
  ubyte height;       /* PC / NPC's height                    */
d1701 3
@


1.94
log
@Remove unused fields from struct char_data. Move mobile nr to mob_specials.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.93 2008/01/09 01:50:06 jps Exp jps $
d238 1
a1432 2
  struct char_data *next_memming;              /* for currently meming PC's */
  struct char_data *next_scribing;             /* next in scribe list */
d1695 3
@


1.93
log
@Classify the elements of struct char_data. Remove the specifically stored
points events. Add int regenerating so we know which regeneration events
are on a character.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.92 2008/01/07 10:35:43 jps Exp jps $
d1356 1
a1421 1
  struct char_ability_data spare_abils;        /* Spare no longer used */
d1448 1
a1457 2
  long nr;                                     /* Mob's rnum */
  int clan_snoop;                              /* clan chat snoop */
a1472 2
    /* I have no idea */
  int mpactnum;
d1696 5
@


1.92
log
@Add a flag for a player phantasm.  It allows mobs to be aggressive to
it without removing the NPC flag.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.91 2008/01/06 23:50:47 jps Exp jps $
d1414 2
a1415 2
  int pfilepos;                                       /* playerfile pos */
  long nr;                                     /* Mob's rnum */
d1417 1
a1417 9
  room_num was_in_room;                               /* location for linkdead people */
  struct mem_list *spell_list;                 /* spells in mem queue */
  int num_spells;                               /* number of spells in mem list */  
  int num_memmed;                               /* hw many are currently memmed */
  int mem_status;                               /* is the PC memming now? */
  int clan_snoop;                               /* clan chat snoop */
  int spells_memmed_circle[NUM_SPELL_CIRCLES + 1];  /* number of spells memmed from each circle */
  struct scribing *scribe_list;                /* spells queued for scribing */
  struct char_player_data player;              /* Normal data */
a1422 3
  struct char_special_data char_specials;      /* PC/NPC specials */
  struct player_special_data *player_specials; /* PC specials */
  struct mob_special_data mob_specials;               /* NPC specials                  */
d1426 2
a1427 1
  struct descriptor_data *desc;                /* NULL for mobiles */
a1428 3
  long id;                                     /* used by DG triggers */
  struct trig_proto_list *proto_script;        /* list of default triggers */
  struct script_data *script;                  /* script info for the object */
d1435 1
a1435 1
  struct char_data *guarding;                       /* Char this char is guarding */
a1437 1
  struct know_spell *see_spell;                /* list of chars that guessed caster's spell */
d1440 1
a1440 1
  struct group_type *groupees;                       /* list of chars grouped */
d1443 26
a1468 2
  struct char_data *mgroupmaster;               /* groups master */
  struct event *points_event[3];                /* events for regening H/M/V */
a1471 2
  struct quest_list *quests;
  int mpactnum;
a1472 2
  struct char_data *next_caster;               /* A list of casters I'm in */
  struct char_data *casters;                   /* Chars who are casting spells at me */
d1474 2
d1699 4
@


1.91
log
@Added spells project and simulacrum, and MOB2_ILLUSORY flag.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.90 2008/01/06 17:34:29 jps Exp jps $
d275 1
d1691 3
@


1.90
log
@Get rid of obsolete struct class_thac0.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.89 2008/01/06 05:33:27 jps Exp jps $
d274 1
d1690 3
@


1.89
log
@use "sorcerer" and "rogue" instead of "magic user" and "thief"
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.88 2008/01/05 21:55:50 jps Exp jps $
a1648 13
struct class_thac0
{
  int thac0_01; /* level THAC0 */
  int thac0_00; /* THAC0 for a ** */
};

/*struct title_type {
   char        *title_m;
   char        *title_f;
   int        exp;
};*/


d1689 3
@


1.88
log
@Added circular-dependency prevention defs.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.87 2008/01/05 20:32:31 jps Exp jps $
d560 24
a583 24
#define ITEM_GLOW          (1 << 0)        /* Item is glowing                */
#define ITEM_HUM           (1 << 1)        /* Item is humming                */
#define ITEM_NORENT        (1 << 2)        /* Item cannot be rented        */
#define ITEM_NODONATE      (1 << 3)        /* Item cannot be donated        */
#define ITEM_NOINVIS           (1 << 4)        /* Item cannot be made invis        */
#define ITEM_INVISIBLE     (1 << 5)        /* Item is invisible                */
#define ITEM_MAGIC         (1 << 6)        /* Item is magical                */
#define ITEM_NODROP        (1 << 7)        /* Item is cursed: can't drop        */
#define ITEM_BLESS         (1 << 8)        /* Item is blessed                */
#define ITEM_ANTI_GOOD     (1 << 9)        /* Not usable by good people        */
#define ITEM_ANTI_EVIL     (1 << 10)        /* Not usable by evil people        */
#define ITEM_ANTI_NEUTRAL  (1 << 11)        /* Not usable by neutral people        */
#define ITEM_ANTI_MAGIC_USER (1 << 12)        /* Not usable by mages                */
#define ITEM_ANTI_CLERIC   (1 << 13)        /* Not usable by clerics        */
#define ITEM_ANTI_THIEF           (1 << 14)        /* Not usable by thieves        */
#define ITEM_ANTI_WARRIOR  (1 << 15)        /* Not usable by warriors        */
#define ITEM_NOSELL           (1 << 16)        /* Shopkeepers won't touch it        */
#define ITEM_ANTI_PALADIN  (1 << 17)
#define ITEM_ANTI_ANTI_PALADIN  (1 << 18)
#define ITEM_ANTI_RANGER   (1 << 19)
#define ITEM_ANTI_DRUID    (1 << 20)
#define ITEM_ANTI_SHAMAN   (1 << 21)
#define ITEM_ANTI_ASSASSIN  (1 << 22)
#define ITEM_ANTI_MERCENARY  (1 << 23)
d585 7
a591 7
#define ITEM_ANTI_CONJURER (1 << 25)
#define ITEM_NOBURN           (1 << 26)
#define ITEM_NOLOCATE      (1 << 27)
#define ITEM_TRANSIENT     (1 << 28)
#define ITEM_FLOAT           (1 << 29)
#define ITEM_CONT_LIGHT     (1 << 30)  /* NOT USED - available */
#define ITEM_WAS_DISARMED   (1 << 31)
d1702 3
@


1.87
log
@I hate tabs
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.86 2008/01/04 01:53:26 jps Exp jps $
d16 2
d1698 2
d1702 3
@


1.86
log
@Added races.h file and created global array "races" for much
race-related information.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.85 2008/01/02 02:11:03 jps Exp jps $
d19 3
a21 3
#define NOWHERE    -1    /* nil reference for room-database	*/
#define NOTHING	   -1    /* nil reference for objects		*/
#define NOBODY	   -1    /* nil reference for mobiles		*/
d28 1
a28 1
#define FORMAT_INDENT		(1 << 0)
d46 28
a73 28
#define ROOM_DARK		(1 << 0)   /* Dark			*/
#define ROOM_DEATH		(1 << 1)   /* Death trap		*/
#define ROOM_NOMOB		(1 << 2)   /* MOBs not allowed		*/
#define ROOM_INDOORS		(1 << 3)   /* Indoors			*/
#define ROOM_PEACEFUL		(1 << 4)   /* Violence not allowed	*/
#define ROOM_SOUNDPROOF		(1 << 5)   /* Shouts, gossip blocked	*/
#define ROOM_NOTRACK		(1 << 6)   /* Track won't go through	*/
#define ROOM_NOMAGIC		(1 << 7)   /* Magic not allowed		*/
#define ROOM_TUNNEL		(1 << 8)   /* room for only 1 pers	*/
#define ROOM_PRIVATE		(1 << 9)   /* Can't teleport in		*/
#define ROOM_GODROOM		(1 << 10)  /* LVL_GOD+ only allowed	*/
#define ROOM_HOUSE		(1 << 11)  /* (R) Room is a house	*/
#define ROOM_HOUSE_CRASH	(1 << 12)  /* (R) House needs saving	*/
#define ROOM_ATRIUM		(1 << 13)  /* (R) The door to a house	*/
#define ROOM_OLC		(1 << 14)  /* (R) Modifyable/!compress	*/
#define ROOM_BFS_MARK		(1 << 15)  /* (R) breath-first srch mrk	*/
#define ROOM_NOWELL             (1 << 16) /* NO MOONWELL OR EATHERPORTAL ETC*/
#define ROOM_NORECALL           (1 << 17) /* LETS BE AN ASS ...BANYAL*/
#define ROOM_UNDERDARK          (1 << 18) /*EVILS! THOSE BASTERDS*/
#define ROOM_NOSUMMON           (1 << 19) 
#define ROOM_NOSHIFT            (1 << 20) /* no plane shift*/
#define ROOM_GUILDHALL          (1 << 21)
#define ROOM_NOSCAN             (1 << 22) /* Unable to scan to/from rooms */
#define ROOM_ALT_EXIT           (1 << 23) /* The exits to this room have been altered */ 
#define ROOM_MAP	        (1 << 24) /* Room on the surface map */
#define ROOM_ALWAYSLIT          (1 << 25) /* Makes the room light */
#define ROOM_ARENA		(1 << 26) /* PK allowed in this room */
#define ROOM_OBSERVATORY	(1 << 27) /* see into adjacent ARENA rooms */
d76 5
a80 5
#define RAFF_FOG                (1 << 0)
#define RAFF_DARKNESS           (1 << 1)
#define RAFF_ILLUMINATION       (1 << 2)
#define RAFF_FOREST	        (1 << 3)
#define RAFF_CIRCLE_FIRE        (1 << 4)
d83 6
a88 6
#define EX_ISDOOR		(1 << 0)   /* Exit is a door		*/
#define EX_CLOSED		(1 << 1)   /* The door is closed	*/
#define EX_LOCKED		(1 << 2)   /* The door is locked	*/
#define EX_PICKPROOF		(1 << 3)   /* Lock can't be picked	*/
#define EX_HIDDEN 		(1 << 4)  /* exit is hidden */
#define EX_DESCRIPT		(1 << 5)   /* DE 4/6/99 Just an extra description */
d91 23
a113 23
#define SECT_INSIDE          0		   /* Indoors			*/
#define SECT_CITY            1		   /* In a city			*/
#define SECT_FIELD           2		   /* In a field		*/
#define SECT_FOREST          3		   /* In a forest		*/
#define SECT_HILLS           4		   /* In the hills		*/
#define SECT_MOUNTAIN        5		   /* On a mountain		*/
#define SECT_WATER_SWIM      6		   /* Swimmable water		*/
#define SECT_WATER_NOSWIM    7		   /* Water - need a boat	*/
#define SECT_UNDERWATER	     8		   /* Underwater		*/
#define SECT_FLYING	     9		   /* Wheee!			*/
#define SECT_ROAD        10
#define SECT_GRASSLANDS  11
#define SECT_OCEAN       12
#define SECT_RUINS       13
#define SECT_SWAMP       14
#define SECT_BEACH       15
#define SECT_UNDERDARK   16
#define SECT_ASTRALPLANE       17
#define SECT_AIRPLANE    18
#define SECT_FIREPLANE   19
#define SECT_EARTHPLANE  20
#define SECT_EATHREALPLANE 21
#define SECT_AVERNUS       22
d137 2
a138 2
#define SPECIES_GOBLIN	    18
#define SPECIES_DEMON	    19
d141 1
a141 1
#define MCLASS_VOID	   -1   /* this now lines up with CLASS_UNDEFINED */
d155 1
a155 1
#define MCLASS_MONK	   13
d157 1
a157 1
#define MCLASS_PRIEST	   15
d159 1
a159 1
#define MCLASS_MYSTIC	   17
d161 1
a161 1
#define MCLASS_BARD	   19
d165 2
a166 2
#define MCLASS_HUNTER	   23
#define MCLASS_NUMBER      25	/* this array is referenced with a -1 cos element 0 is val -1*/
d174 1
a174 1
/* DEFINE SIZES.....BANYAL*/
d195 14
a208 14
#define POS_DEAD       0	/* dead			*/
#define POS_MORTALLYW  1	/* mortally wounded	*/
#define POS_INCAP      2	/* incapacitated	*/
#define POS_STUNNED    3	/* stunned		*/
#define POS_SLEEPING   4	/* sleeping		*/
#define POS_RESTING    5	/* resting		*/
#define POS_SITTING    6	/* sitting		*/
#define POS_FIGHTING   7	/* fighting		*/
#define POS_STANDING   8	/* standing		*/
#define POS_FLYING     9        /* flying		*/

#define HIT_INCAP      -3	/* The hit level for incapacitation   */
#define HIT_MORTALLYW  -6	/* The hit level for mortally wound   */
#define HIT_DEAD       -11      /* The point you never want to get to */
d213 23
a235 23
#define PLR_KILLER	(1 << 0)   /* Player is a player-killer		*/
#define PLR_THIEF	(1 << 1)   /* Player is a player-thief		*/
#define PLR_FROZEN	(1 << 2)   /* Player is frozen			*/
#define PLR_DONTSET     (1 << 3)   /* Don't EVER set (ISNPC bit)	*/
#define PLR_WRITING	(1 << 4)   /* Player writing (board/mail/olc)	*/
#define PLR_MAILING	(1 << 5)   /* Player is writing mail		*/
#define PLR_CRASH	(1 << 6)   /* Player needs to be crash-saved	*/
#define PLR_SITEOK	(1 << 7)   /* Player has been site-cleared	*/
#define PLR_NOSHOUT	(1 << 8)   /* Player not allowed to shout/goss	*/
#define PLR_NOTITLE	(1 << 9)   /* Player not allowed to set title	*/
#define PLR_DELETED	(1 << 10)  /* Player deleted - space reusable	*/
#define PLR_LOADROOM	(1 << 11)  /* Player uses nonstandard loadroom	*/
#define PLR_NOWIZLIST	(1 << 12)  /* Player shouldn't be on wizlist	*/
#define PLR_NODELETE	(1 << 13)  /* Player shouldn't be deleted	*/
#define PLR_INVSTART	(1 << 14)  /* Player should enter game wizinvis	*/
#define PLR_CRYO	(1 << 15)  /* Player is cryo-saved (purge prog)	*/
#define PLR_MEDITATE (1 << 16)
#define PLR_CASTING  (1 << 17)
#define PLR_BOUND    (1 << 18)
#define PLR_SCRIBE   (1 << 19)     /* player is scribing into book */
#define PLR_TEACHING (1 << 20)     /* player is teaching a skill/spell */
#define PLR_NAPPROVE (1 << 21)	   /* Player name not approved yet */
#define PLR_NEWNAME  (1 << 22)     /* Player needs to choose a new name */
d238 25
a262 25
#define MOB_SPEC         (1 << 0)  /* Mob has a callable spec-proc	*/
#define MOB_SENTINEL     (1 << 1)  /* Mob should not move		*/
#define MOB_SCAVENGER    (1 << 2)  /* Mob picks up stuff on the ground	*/
#define MOB_ISNPC        (1 << 3)  /* (R) Automatically set on all Mobs	*/
#define MOB_AWARE	 (1 << 4)  /* Mob can't be backstabbed		*/
#define MOB_AGGRESSIVE   (1 << 5)  /* Mob hits players in the room	*/
#define MOB_STAY_ZONE    (1 << 6)  /* Mob shouldn't wander out of zone	*/
#define MOB_WIMPY        (1 << 7)  /* Mob flees if severely injured	*/
#define MOB_AGGR_EVIL	 (1 << 8)  /* auto attack evil PC's		*/
#define MOB_AGGR_GOOD	 (1 << 9)  /* auto attack good PC's		*/
#define MOB_AGGR_NEUTRAL (1 << 10) /* auto attack neutral PC's		*/
#define MOB_MEMORY	 (1 << 11) /* remember attackers if attacked	*/
#define MOB_HELPER	 (1 << 12) /* attack PCs fighting other NPCs	*/
#define MOB_NOCHARM	 (1 << 13) /* Mob can't be charmed		*/
#define MOB_NOSUMMON	 (1 << 14) /* Mob can't be summoned		*/
#define MOB_NOSLEEP	 (1 << 15) /* Mob can't be slept		*/
#define MOB_NOBASH	 (1 << 16) /* Mob can't be bashed (e.g. trees)	*/
#define MOB_NOBLIND	 (1 << 17) /* Mob can't be blinded		*/
#define MOB_MOUNTABLE	 (1 << 18)
#define MOB_ARRESTOR    (1 << 19)
#define MOB_FAST_TRACK  (1 << 20)
#define MOB_SLOW_TRACK  (1 << 21)
#define MOB_CASTING     (1 << 22) /*mob casting*/
#define MOB_PET         (1 << 23)
#define MOB_AQUATIC     (1 << 24) /* Mob can't enter non-water rooms */
d264 6
a269 6
#define MOB_AGGR_GOOD_RACE   (1 << 26)
#define MOB_NOSILENCE	      (1 << 27)
#define MOB_NOVICIOUS	 (1 << 28)
#define MOB_TEACHER    (1 << 29)
#define MOB_ANIMATED   (1 << 30) /* mob is animated - die if no anim affect */
#define MOB_PEACEFUL	(1 << 31) /* mob can't be attacked.		*/
d271 1
a271 1
#define MOB2_NOPOISON   (1 << 0)  /* Mob cannot be poisoned.           */
d290 32
a321 35
#define PRF_BRIEF	(1 << 0)  /* Room descs won't normally be shown	*/
#define PRF_COMPACT	(1 << 1)  /* No extra CRLF pair before prompts	*/
#define PRF_DEAF	(1 << 2)  /* Can't hear shouts			*/
#define PRF_NOTELL	(1 << 3)  /* Can't receive tells		*/
#define PRF_DISPHP	(1 << 4)  /* Display hit points in prompt	*/
#define PRF_DISPMANA	(1 << 5)  /* Display mana points in prompt	*/
#define PRF_DISPMOVE	(1 << 6)  /* Display move points in prompt	*/
#define PRF_AUTOEXIT	(1 << 7)  /* Display exits in a room		*/
#define PRF_NOHASSLE	(1 << 8)  /* Aggr mobs won't attack		*/
#define PRF_QUEST	(1 << 9)  /* On quest				*/
#define PRF_SUMMONABLE	(1 << 10) /* Can be summoned			*/
#define PRF_NOREPEAT	(1 << 11) /* No repetition of comm commands	*/
#define PRF_HOLYLIGHT	(1 << 12) /* Can see in dark			*/
#define PRF_COLOR_1	(1 << 13) /* Color (low bit)			*/
#define PRF_COLOR_2	(1 << 14) /* Color (high bit)			*/
#define PRF_NOWIZ	(1 << 15) /* Can't hear wizline			*/
#define PRF_LOG1	(1 << 16) /* On-line System Log (low bit)	*/
#define PRF_LOG2	(1 << 17) /* On-line System Log (high bit)	*/
#define PRF_AFK		(1 << 18) /* away from keyboard                 */

/*#define PRF_NOAUCT	(1 << 18)*/ /* Can't hear auction channel		*/
#define PRF_NOGOSS	(1 << 19) /* Can't hear gossip channel		*/
#define PRF_NOGRATZ	(1 << 20) /* Can't hear grats channel	       */

#define PRF_ROOMFLAGS	(1 << 21) /* Can see room flags (ROOM_x)	*/
#define PRF_NOPETI	(1 << 22) /*cant hear petitions*/
#define PRF_NONAME	(1 << 23) /* lets god hide name on title */
#define PRF_NOTDONE	(1 << 24) /* Can hear clan talk */
#define PRF_ANON	(1 << 25) /*Anon flag*/
#define PRF_SHOWVNUMS	(1 << 26) /* Show Virtual Numbers */
#define PRF_NICEAREA	(1 << 27)
#define PRF_VICIOUS	(1 << 28)
#define PRF_PASSIVE	(1 << 29)  /* char will not engage upon being cast on */
#define PRF_ROOMVIS	(1 << 30)
#define PRF_NOFOLLOW	(1 << 31) /* Cannot follow / well to this player*/ 
d328 6
a333 6
#define ACT_DELAY_DISARM          3	/* pulse violence */
#define ACT_DELAY_FUMBLING_PRIM   4	/* pulse violence */
#define ACT_DELAY_DROPPED_PRIM    5	/* pulse violence */
#define ACT_DELAY_FUMBLING_SECOND 6	/* pulse violence */
#define ACT_DELAY_DROPPED_SECOND  7	/* pulse violence */
#define ACT_DELAY_HEADBUTT        8	/* pulse violence */
d336 1
a336 1
#define ACT_DELAY_SUMMON_MOUNT    11
d338 2
a339 3
#define ACT_DELAY_FIRST_AID         13

#define MAX_ACTION_DELAYS      14 /* number of commands with special delays */
d343 22
a364 22
#define AFF_BLIND             (1 << 0)	   /* (R) Char is blind		*/
#define AFF_INVISIBLE         (1 << 1)	   /* Char is invisible		*/
#define AFF_DETECT_ALIGN      (1 << 2)	   /* Char is sensitive to align*/
#define AFF_DETECT_INVIS      (1 << 3)	   /* Char can see invis chars  */
#define AFF_DETECT_MAGIC      (1 << 4)	   /* Char is sensitive to magic*/
#define AFF_SENSE_LIFE        (1 << 5)	   /* Char can sense hidden life*/
#define AFF_WATERWALK	      (1 << 6)	   /* Char can walk on water	*/
#define AFF_SANCTUARY         (1 << 7)	   /* Char protected by sanct.	*/
#define AFF_GROUP             (1 << 8)	   /* (R) Char is grouped	*/
#define AFF_CURSE             (1 << 9)	   /* Char is cursed		*/
#define AFF_INFRAVISION       (1 << 10)	   /* Char can see in dark	*/
#define AFF_POISON            (1 << 11)	   /* (R) Char is poisoned	*/
#define AFF_PROTECT_EVIL      (1 << 12)	   /* Char protected from evil  */
#define AFF_PROTECT_GOOD      (1 << 13)	   /* Char protected from good  */
#define AFF_SLEEP             (1 << 14)	   /* (R) Char magically asleep	*/
#define AFF_NOTRACK	      (1 << 15)	   /* Char can't be tracked	*/
#define AFF_TAMED	      (1 << 16)	   /* Room for future expansion	*/
   /* Room for future expansion	(17) */
#define AFF_SNEAK             (1 << 18)	   /* Char is sneaking		*/
   /* Room for future expansion	(19) */
#define AFF_FLYING	      (1 << 20)	   /* Room for future expansion	*/
#define AFF_CHARM             (1 << 21)	   /* Char is charmed		*/
d366 1
a366 1
#define AFF_FARSEE			  (1 << 23)
d393 5
a397 5
#define AFF2_ON_FIRE	      (1 << 17)
#define AFF2_FEAR	      (1 << 18)
#define AFF2_TONGUES	      (1 << 19)
#define AFF2_DISEASE	      (1 << 20)
#define AFF2_INSANITY	      (1 << 21)
d419 17
a435 17
#define CON_PLAYING	 0		/* Playing - Nominal state	*/
#define CON_CLOSE	 1		/* Disconnecting		*/
#define CON_GET_NAME	 2		/* By what name ..?		*/
#define CON_NAME_CNFRM	 3		/* Did I get that right, x?	*/
#define CON_PASSWORD	 4		/* Password:			*/
#define CON_NEWPASSWD	 5		/* Give me a password for x	*/
#define CON_CNFPASSWD	 6		/* Please retype password:	*/
#define CON_QSEX	 7		/* Sex?				*/
#define CON_QCLASS	 8		/* Class?			*/
#define CON_RMOTD	 9		/* PRESS RETURN after MOTD	*/
#define CON_MENU	 10		/* Your choice: (main menu)	*/
#define CON_EXDESC	 11		/* Enter a new description:	*/
#define CON_CHPWD_GETOLD 12		/* Changing passwd: get old	*/
#define CON_CHPWD_GETNEW 13		/* Changing passwd: get new	*/
#define CON_CHPWD_VRFY   14		/* Verify new password		*/
#define CON_DELCNF1	 15		/* Delete confirmation 1	*/
#define CON_DELCNF2	 16		/* Delete confirmation 2	*/
d438 5
a442 5
#define CON_OEDIT	 19		/*. OLC mode - object edit     .*/
#define CON_REDIT	 20		/*. OLC mode - room edit       .*/
#define CON_ZEDIT	 21		/*. OLC mode - zone info edit  .*/
#define CON_MEDIT	 22		/*. OLC mode - mobile edit     .*/
#define CON_SEDIT	 23		/*. OLC mode - shop edit       .*/
d450 2
a451 2
#define CON_HEDIT	 31		/*. OLC mode - help edit       .*/
#define CON_TRIGEDIT	 32		/*. OLC mode - trigger edit    .*/
d494 1
a494 1
#define NUM_WEARS      27	/* This must be the # of eq positions!! */
d500 3
a502 3
#define HEAVENSGATE_OBJ		72
#define MOONWELL_OBJ		33
#define HELLGATE_OBJ		74
d505 23
a527 23
#define ITEM_LIGHT      1		/* Item is a light source	*/
#define ITEM_SCROLL     2		/* Item is a scroll		*/
#define ITEM_WAND       3		/* Item is a wand		*/
#define ITEM_STAFF      4		/* Item is a staff		*/
#define ITEM_WEAPON     5		/* Item is a weapon		*/
#define ITEM_FIREWEAPON 6		/* Unimplemented		*/
#define ITEM_MISSILE    7		/* Unimplemented		*/
#define ITEM_TREASURE   8		/* Item is a treasure, not gold	*/
#define ITEM_ARMOR      9		/* Item is armor		*/
#define ITEM_POTION    10 		/* Item is a potion		*/
#define ITEM_WORN      11		/* Unimplemented		*/
#define ITEM_OTHER     12		/* Misc object			*/
#define ITEM_TRASH     13		/* Trash - shopkeeps won't buy	*/
#define ITEM_TRAP      14		/* Unimplemented		*/
#define ITEM_CONTAINER 15		/* Item is a container		*/
#define ITEM_NOTE      16		/* Item is note 		*/
#define ITEM_DRINKCON  17		/* Item is a drink container	*/
#define ITEM_KEY       18		/* Item is a key		*/
#define ITEM_FOOD      19		/* Item is food			*/
#define ITEM_MONEY     20		/* Item is money (gold)		*/
#define ITEM_PEN       21		/* Item is a pen		*/
#define ITEM_BOAT      22		/* Item is a boat		*/
#define ITEM_FOUNTAIN  23		/* Item is a fountain		*/
d535 15
a549 15
#define ITEM_WEAR_TAKE		(1 << 0)  /* Item can be takes		*/
#define ITEM_WEAR_FINGER	(1 << 1)  /* Can be worn on finger	*/
#define ITEM_WEAR_NECK		(1 << 2)  /* Can be worn around neck 	*/
#define ITEM_WEAR_BODY		(1 << 3)  /* Can be worn on body 	*/
#define ITEM_WEAR_HEAD		(1 << 4)  /* Can be worn on head 	*/
#define ITEM_WEAR_LEGS		(1 << 5)  /* Can be worn on legs	*/
#define ITEM_WEAR_FEET		(1 << 6)  /* Can be worn on feet	*/
#define ITEM_WEAR_HANDS		(1 << 7)  /* Can be worn on hands	*/
#define ITEM_WEAR_ARMS		(1 << 8)  /* Can be worn on arms	*/
#define ITEM_WEAR_SHIELD	(1 << 9)  /* Can be used as a shield	*/
#define ITEM_WEAR_ABOUT		(1 << 10) /* Can be worn about body 	*/
#define ITEM_WEAR_WAIST 	(1 << 11) /* Can be worn around waist 	*/
#define ITEM_WEAR_WRIST		(1 << 12) /* Can be worn on wrist 	*/
#define ITEM_WEAR_WIELD		(1 << 13) /* Can be wielded		*/
#define ITEM_WEAR_HOLD		(1 << 14) /* Can be held		*/
d558 17
a574 17
#define ITEM_GLOW          (1 << 0)	/* Item is glowing		*/
#define ITEM_HUM           (1 << 1)	/* Item is humming		*/
#define ITEM_NORENT        (1 << 2)	/* Item cannot be rented	*/
#define ITEM_NODONATE      (1 << 3)	/* Item cannot be donated	*/
#define ITEM_NOINVIS	   (1 << 4)	/* Item cannot be made invis	*/
#define ITEM_INVISIBLE     (1 << 5)	/* Item is invisible		*/
#define ITEM_MAGIC         (1 << 6)	/* Item is magical		*/
#define ITEM_NODROP        (1 << 7)	/* Item is cursed: can't drop	*/
#define ITEM_BLESS         (1 << 8)	/* Item is blessed		*/
#define ITEM_ANTI_GOOD     (1 << 9)	/* Not usable by good people	*/
#define ITEM_ANTI_EVIL     (1 << 10)	/* Not usable by evil people	*/
#define ITEM_ANTI_NEUTRAL  (1 << 11)	/* Not usable by neutral people	*/
#define ITEM_ANTI_MAGIC_USER (1 << 12)	/* Not usable by mages		*/
#define ITEM_ANTI_CLERIC   (1 << 13)	/* Not usable by clerics	*/
#define ITEM_ANTI_THIEF	   (1 << 14)	/* Not usable by thieves	*/
#define ITEM_ANTI_WARRIOR  (1 << 15)	/* Not usable by warriors	*/
#define ITEM_NOSELL	   (1 << 16)	/* Shopkeepers won't touch it	*/
d584 1
a584 1
#define ITEM_NOBURN	   (1 << 26)
d587 1
a587 1
#define ITEM_FLOAT	   (1 << 29)
d594 25
a618 25
#define APPLY_NONE              0	/* No effect			*/
#define APPLY_STR               1	/* Apply to strength		*/
#define APPLY_DEX               2	/* Apply to dexterity		*/
#define APPLY_INT               3	/* Apply to constitution	*/
#define APPLY_WIS               4	/* Apply to wisdom		*/
#define APPLY_CON               5	/* Apply to constitution	*/
#define APPLY_CHA		6	/* Apply to charisma		*/
#define APPLY_CLASS             7	/* Reserved			*/
#define APPLY_LEVEL             8	/* Reserved			*/
#define APPLY_AGE               9	/* Apply to age			*/
#define APPLY_CHAR_WEIGHT      10	/* Apply to weight		*/
#define APPLY_CHAR_HEIGHT      11	/* Apply to height		*/
#define APPLY_MANA             12	/* Apply to max mana		*/
#define APPLY_HIT              13	/* Apply to max hit points	*/
#define APPLY_MOVE             14	/* Apply to max move points	*/
#define APPLY_GOLD             15	/* Reserved			*/
#define APPLY_EXP              16	/* Reserved			*/
#define APPLY_AC               17	/* Apply to Armor Class		*/
#define APPLY_HITROLL          18	/* Apply to hitroll		*/
#define APPLY_DAMROLL          19	/* Apply to damage roll		*/
#define APPLY_SAVING_PARA      20	/* Apply to save throw: paralz	*/
#define APPLY_SAVING_ROD       21	/* Apply to save throw: rods	*/
#define APPLY_SAVING_PETRI     22	/* Apply to save throw: petrif	*/
#define APPLY_SAVING_BREATH    23	/* Apply to save throw: breath	*/
#define APPLY_SAVING_SPELL     24	/* Apply to save throw: spells	*/
d620 1
a620 1
#define APPLY_HIT_REGEN        26     	   
d627 4
a630 4
#define CONT_CLOSEABLE      (1 << 0)	/* Container can be closed	*/
#define CONT_PICKPROOF      (1 << 1)	/* Container is pickproof	*/
#define CONT_CLOSED         (1 << 2)	/* Container is closed		*/
#define CONT_LOCKED         (1 << 3)	/* Container is locked		*/
d682 1
a682 1
#define NUM_COIN_TYPES	4
d688 10
a697 10
#define SUN_DARK	0
#define SUN_RISE	1
#define SUN_LIGHT	2
#define SUN_SET		3

#define HEMISPHERE_NORTHWEST	0
#define HEMISPHERE_NORTHEAST	1
#define HEMISPHERE_SOUTHWEST	2
#define HEMISPHERE_SOUTHEAST	3
#define NUM_HEMISPHERES		4
d741 1
a741 1
#define LVL_FREEZE	LVL_GRGOD
d760 1
a760 1
#define LVL_GOSSIP	1
d800 1
a800 1
#define NUM_OF_DIRS	8	/* number of directions in a room (nsewud) */
d802 3
a804 3
#define OPT_USEC	100000	/* 10 passes per second */
#define PASSES_PER_SEC	(1000000 / OPT_USEC)
#define RL_SEC		* PASSES_PER_SEC
d810 3
a812 3
#define SMALL_BUFSIZE		1024
#define LARGE_BUFSIZE		(48 * 1024)
#define GARBAGE_SPACE		32
d823 14
a836 14
#define MAX_STRING_LENGTH	20000
#define MAX_STRING_LENGTH_BIG	24000
#define MAX_INPUT_LENGTH	256	/* Max length per *line* of input */
#define MAX_RAW_INPUT_LENGTH	512	/* Max size of *raw* input */
#define MAX_MESSAGES		100
#define MAX_NAME_LENGTH		20  /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_PWD_LENGTH		10  /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_TITLE_LENGTH	80  /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_WIZTITLE_LENGTH	30  /* Used in char_file_u *DO*NOT*CHANGE* */
#define HOST_LENGTH		30  /* Used in char_file_u *DO*NOT*CHANGE* */
#define EXDSCR_LENGTH		240 /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_TONGUE		3   /* Used in char_file_u *DO*NOT*CHANGE* */
#define TOP_SKILL		650 /* Used in char_file_u *DO*NOT*CHANGE* */
#define MAX_AFFECT		32  /* Used in char_file_u *DO*NOT*CHANGE* */
d840 1
a840 1
#define MAX_OBJ_AFFECT		6  /* Used in obj_file_elem *DO*NOT*CHANGE* */
d844 1
a844 1
#define PAGE_SCRIBE_TIME	1   /* this is the time per page to scribe */
d851 5
a855 5
typedef signed char		sbyte;
typedef unsigned char		ubyte;
typedef signed short int	sh_int;
typedef unsigned short int	ush_int;
typedef char			bool;
d859 1
a859 1
typedef char			byte;
d862 2
a863 2
typedef int	room_num;
typedef int	obj_num;
d875 2
a876 2
   char	*keyword;                 /* Keyword in look/examine          */
   char	*description;             /* What to see                      */
d881 8
a888 8
	int plat; /*carried*/
	int gold; /*carried*/
	int silver; /*carried*/
	int copper; /*carriedt*/
	long bank_plat; /*coins in bank*/
	long bank_gold; /*coins in bank*/
	long bank_silver; /*silver in bank*/
	long bank_copper; /*copper in bank*/
d899 7
a905 7
   int	value[4];	/* Values of the item (see list)    */
   byte type_flag;	/* Type of item			    */
   int	wear_flags;	/* Where you can wear it	    */
   int	extra_flags;	/* If it hums, glows, etc.	    */
   int	weight;		/* Weigt what else                  */
   int	cost;		/* Value when sold (gp.)            */
   int	cost_per_day;	/* Cost to keep pr. real day        */
d907 1
a907 1
   int	timer;		/* Timer for object                 */
d911 1
a911 1
   long	hiddenness;	/* How difficult it is to see obj   */
d921 1
a921 1
	int target_status;
d955 2
a956 2
   obj_num item_number;		/* Where in data-base			*/
   room_num in_room;		/* In what room -1 when conta/carr	*/
d960 4
a963 4
   char	*name;                    /* Title of object :get etc.        */
   char	*description;		  /* When in room                     */
   char	*short_description;       /* when worn/carry/in cont.         */
   char	*action_description;      /* What to write when used          */
d966 2
a967 2
   struct char_data *worn_by;	  /* Worn by?			      */
   sh_int worn_on;		  /* Worn where?		      */
d973 1
a973 1
   struct char_data *last_to_hold;		/* If MOB forcibly loses item      */
d990 1
a990 1
/*                BEWARE: Changing it will ruin rent files		   */
d994 6
a999 6
 		      (20+)index in obj file (if it's in a container)  */
   int	value[4];
   int	extra_flags;
   int	weight;
   int	timer;
   int 	spell_flags; /* Object Spell affections - buru 25/5/98 */
d1002 1
a1002 1
   long	hiddenness;
d1020 4
a1023 4
   int	time;
   int	rentcode;
   int	net_cost_per_diem;
   int	nitems;
d1025 2
a1026 2
   int	spare6;
   int	spare7;
d1041 1
a1041 1
   char	*general_description;       /* When look DIR.			*/
d1043 1
a1043 1
   char	*keyword;		/* for open/close			*/
d1045 3
a1047 3
   int exit_info;		/* Exit info				*/
   obj_num key;			/* Key's number (-1 for no key)		*/
   room_num to_room;		/* Where direction leads (NOWHERE)	*/
d1051 4
a1054 4
	room_num room;        /* location in the world[] array of the room */
	int      timer;       /* how many ticks this affection lasts */
	long     affection;   /* which affection does this room have */
	int      spell;       /* the spell number */
d1056 1
a1056 1
	struct raff_node *next; /* link to the next node */
d1062 1
a1062 1
   room_num number;		/* Rooms number	(vnum)		      */
d1064 3
a1066 3
   int	sector_type;            /* sector type (move/hide)            */
   char	*name;                  /* Rooms name 'You are ...'           */
   char	*description;           /* Shown when entered                 */
d1069 1
a1069 1
   int room_flags;		/* DEATH,DARK ... etc                 */
d1089 1
a1089 1
   long	id;
d1107 1
a1107 1
   int	played;     /* This is the total accumulated time played in secs */
d1128 6
a1133 6
  char	passwd[MAX_PWD_LENGTH+1]; /* character's password      */
  char	*name;	       /* PC / NPC s name (kill ...  )         */
  char	*short_descr;  /* for NPC 'actions'                    */
  char	*long_descr;   /* for NPC 'look'       	 */
  char	*description;  /* Extra descriptions                   */
  char	*title;        /* PC / NPC's title  */
d1136 1
a1136 1
  byte class;         /* PC / NPC's class		       */
d1138 1
a1138 1
  byte race_align;		/*PC / NPC's race_align*/
d1140 1
a1140 1
  int	hometown;      /* PC s Hometown (zone)                 */
d1163 1
a1163 1
   sh_int max_mana;     /* Max move for PC/NPC			   */
d1170 1
a1170 1
   long	exp;            /* The experience of the player            */
d1198 3
a1200 3
   int	alignment;		/* +-1000 for alignments                */
   long	idnum;			/* player's idnum; -1 for mobiles	*/
   long	act;			/* act flag for NPC's; player flag for PC's */
d1202 1
a1202 1
   long	affected_by;		/* Bitvector for spells/skills affected by */
d1205 1
a1205 1
   sh_int apply_saving_throw[5]; /* Saving throw (Bonuses)		*/
d1211 2
a1212 2
   struct char_data *fighting;	/* Opponent				*/
   struct char_data *hunting;	/* Char hunted by this char		*/
d1216 1
a1216 1
   byte position;		/* Standing, fighting, sleeping, etc.	*/
d1230 3
a1232 3
   int	carry_weight;		/* Carried weight			*/
   byte carry_items;		/* Number of items carried		*/
   int	timer;			/* Timer for update			*/
d1236 1
a1236 1
   struct char_special_data_saved saved; /* constants saved in plrfile	*/
d1257 10
a1266 10
  sh_int skills[TOP_SKILL+1];	/* array of skills plus skill 0		 */
  byte PADDING0;		/* used to be spells_to_learn		*/
  bool talks[MAX_TONGUE];	/* PC s Tongues 0 for NPC		*/
  int	wimp_level;		/* Below this # of hit points, flee!	*/
  byte freeze_level;		/* Level of god who froze char, if any	*/
  sh_int invis_level;		/* level of invisibility		*/
  room_num load_room;		/* Which room to place char in		*/
  long	pref;			/* preference flags for PC's.		*/
  ubyte bad_pws;		/* number of bad password attemps	*/
  sbyte conditions[3];       /* Drunk, full, thirsty			*/
d1292 1
a1292 1
  int spells_to_learn;		/* How many can you learn yet this level*/
d1296 1
a1296 1
  int olc3_zone;	
d1298 1
a1298 1
  int olc4_zone;	
d1301 1
a1301 1
  int chant;			/* Chant counter */
d1308 2
a1309 2
  long	spare19;
  long	spare20;
d1311 1
a1311 1
  long	spare21;
d1334 4
a1337 4
  long last_tell;		/* idnum of last tell from		*/
  void *last_olc_targ;		/* olc control				*/
  int last_olc_mode;		/* olc control				*/
  byte roll[6];
d1368 1
a1368 1
  int	attack_type;        /* The Attack Type Bitvector for NPC's     */
d1370 2
a1371 2
  memory_rec *memory;	    /* List of attackers to remember	       */
  sbyte damnodice;          /* The number of damage dice's	       */
d1375 1
a1375 1
  int wait_state;	    /* Wait state for bashed mobs*/
d1388 1
a1388 1
   long	bitvector;       /* Tells which bits to set (AFF_XXX)       */
d1410 1
a1410 1
  int pfilepos;			               /* playerfile pos */
d1413 1
a1413 1
  room_num was_in_room;		               /* location for linkdead people */
d1415 4
a1418 4
  int num_spells;			       /* number of spells in mem list */  
  int num_memmed;			       /* hw many are currently memmed */
  int mem_status;			       /* is the PC memming now? */
  int clan_snoop;			       /* clan chat snoop */
d1429 1
a1429 1
  struct mob_special_data mob_specials;	       /* NPC specials		  */
d1444 1
a1444 1
  struct char_data *guarding;	               /* Char this char is guarding */
d1450 5
a1454 5
  struct group_type *groupees;		       /* list of chars grouped */
  struct char_data *groupmaster;	       /* group master */
  struct mgroup_type *mgroupees;	       /* major groups list */
  struct char_data *mgroupmaster;	       /* groups master */
  struct event *points_event[3]; 	       /* events for regening H/M/V */
d1478 1
a1478 1
/*             BEWARE: Changing it will ruin the playerfile		  */
d1481 3
a1483 3
   char	name[MAX_NAME_LENGTH+1];
   char	description[EXDSCR_LENGTH];
   char	title[MAX_TITLE_LENGTH+1];
d1492 1
a1492 1
   int	played;    /* Number of secs played in total */
d1497 1
a1497 1
   char	pwd[MAX_PWD_LENGTH+1];    /* character's password */
d1505 2
a1506 2
   time_t last_logon;		/* Time (in secs) of last logon */
   char host[HOST_LENGTH+1];	/* host of last logon */
d1515 1
a1515 1
   char	*text;
d1528 16
a1543 16
   socket_t	descriptor;		/* file descriptor for socket		*/
   char	host[HOST_LENGTH+1];	/* hostname				*/
   byte	bad_pws;		/* number of bad pw attemps this login	*/
   byte idle_tics;		/* tics idle at password prompt		*/
   int	connected;		/* mode of 'connectedness'		*/
   int	wait;			/* wait for how many loops		*/
   int	desc_num;		/* unique num assigned to desc		*/
   time_t login_time;		/* when the person connected		*/
   char *showstr_head;		/* for keeping track of an internal str	*/
   char **showstr_vector;	/* for paging through texts		*/
   int  showstr_count;		/* number of pages to page through	*/
   int  showstr_page;		/* which page are we currently showing?	*/
   char	**str;			/* for the modify-str system		*/
   char *backstr;		/* added for handling abort buffers     */
   size_t	max_str;		/*		-			*/
   long	mail_to;		/* name for mail system			*/
d1545 7
a1551 7
   int	prompt_mode;		/* control of prompt-printing		*/
   char	inbuf[MAX_RAW_INPUT_LENGTH];  /* buffer for raw input		*/
   char	last_input[MAX_INPUT_LENGTH]; /* the last input			*/
   char small_outbuf[SMALL_BUFSIZE];  /* standard output buffer		*/
   char *output;		/* ptr to the current output buffer	*/
   int  bufptr;			/* ptr to end of current output		*/
   int	bufspace;		/* space left in the output buffer	*/
d1553 6
a1558 6
   struct txt_q input;		/* q of unprocessed input		*/
   struct char_data *character;	/* linked to char			*/
   struct char_data *original;	/* original char if switched		*/
   struct descriptor_data *snooping; /* Who is this char snooping	*/
   struct descriptor_data *snoop_by; /* And who is snooping this char	*/
   struct descriptor_data *next; /* link to next descriptor		*/
d1569 3
a1571 3
   char	*attacker_msg;  /* message to attacker */
   char	*victim_msg;    /* message to victim   */
   char	*room_msg;      /* message to room     */
d1576 5
a1580 5
   struct msg_type die_msg;	/* messages when death			*/
   struct msg_type miss_msg;	/* messages when miss			*/
   struct msg_type hit_msg;	/* messages when hit			*/
   struct msg_type god_msg;	/* messages when hit on god		*/
   struct message_type *next;	/* to next messages of this kind.	*/
d1585 3
a1587 3
   int	a_type;			/* Attack type				*/
   int	number_of_attacks;	/* How many attack messages to chose from. */
   struct message_type *msg;	/* List of messages.			*/
d1592 2
a1593 2
	struct char_data *groupee;
	struct group_type *next;
d1597 2
a1598 2
	struct char_data *mgroupee;
	struct mgroup_type *next;
d1641 4
a1644 4
   int	pressure;	/* How is the pressure ( Mb ) */
   int	change;	/* How fast and what way does it change. */
   int	sky;	/* How is the sky. */
   int	sunlight;	/* And how much sun. */
d1654 3
a1656 3
   char	*title_m;
   char	*title_f;
   int	exp;
d1662 2
a1663 2
   int	virtual;    /* virtual number of this mob/obj           */
   int	number;     /* number of existing units of this mob/obj	*/
d1665 1
a1665 1
   	int object_limit;	/*vairies during game NOT saved to file*/	
d1692 1
a1692 1
    char	name[MAX_NAME_LENGTH+20];
d1698 4
@


1.85
log
@Moved class definition info to class.h.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.84 2007/12/29 00:05:10 jps Exp jps $
a168 20
#define RACE_UNDEFINED   -1
#define RACE_HUMAN        0
#define RACE_ELF          1
#define RACE_GNOME        2
#define RACE_DWARF        3
#define RACE_TROLL        4
#define RACE_DROW_ELF     5
#define RACE_DUERGAR      6
#define RACE_OGRE         7
#define RACE_ORC          8
#define RACE_HALF_ELF     9
#define RACE_BARBARIAN    10
#define RACE_HALFLING     11

/*Defines race align*/
#define RACE_ALIGN_GOOD		0
#define RACE_ALIGN_EVIL     1

#define NUM_RACES         12

d1702 3
@


1.84
log
@Changed name of BASE_SCRIBE_TIME to reflect the fact that it's
the time to scribe a page in a spellbook.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.83 2007/12/25 05:41:49 jps Exp jps $
a118 34

/* PC classes */
#define CLASS_UNDEFINED	   -1
#define CLASS_MAGIC_USER    0
#define CLASS_CLERIC        1
#define CLASS_THIEF         2 
#define CLASS_WARRIOR       3
#define CLASS_PALADIN       4
#define CLASS_ANTI_PALADIN  5
#define CLASS_RANGER        6
#define CLASS_DRUID         7
#define CLASS_SHAMAN        8
#define CLASS_ASSASSIN      9
#define CLASS_MERCENARY    10
#define CLASS_NECROMANCER  11
#define CLASS_CONJURER     12
#define CLASS_MONK	   13
#define CLASS_BERSERKER    14
#define CLASS_PRIEST	   15
#define CLASS_DIABOLIST    16
#define CLASS_MYSTIC	   17
#define CLASS_ROGUE        18
#define CLASS_BARD	   19
#define CLASS_PYROMANCER   20
#define CLASS_CRYOMANCER   21
#define CLASS_ILLUSIONIST  22
#define CLASS_HUNTER	   23
#define NUM_CLASSES	   24  /* This must be the number of classes!! */

#define WARRIOR_SUBCLASSES	4
#define CLERIC_SUBCLASSES	3
#define ROGUE_SUBCLASSES	3
#define MAGE_SUBCLASSES		3

d1722 4
@


1.83
log
@Updated event code so the each event type is positively identified.
Events may be tied to objects or characters so that when that object
or character is extracted, its events can be canceled.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.82 2007/12/19 20:56:42 myc Exp jps $
d902 1
a902 1
#define BASE_SCRIBE_TIME	1   /* this is the unadjusted time per page to scribe */
d1756 5
@


1.82
log
@Renaming the CLOAKED toggle to ROOMVIS.  Added a new connection
status for the clan description editor.  Added a NUM_COIN_TYPES
define.  Changed clan_rank from unsigned to signed in the
player structure.  Added a clan_id field to descriptor_data for
use by the clan description editor.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.81 2007/11/25 00:04:59 jps Exp myc $
a922 57
/* name approval time out event */
struct name_timeout_event
{
  struct descriptor_data *d;
};

/* Used for time-based spells */
struct spell_area_event_obj {
    int spell;
    int room;
    struct char_data *ch;
};
/*track info*/
struct track_info {
	sh_int speed;
	sh_int range;
	sh_int sense;
};


struct recall_event_obj {
  struct char_data* ch;
  int from_room; 
  int room;

};

/* Used to undo wandering woods spell */
struct room_undo_event_obj {
    int exit;
    int room;
    int connect_room;
};

/* Used for delayed spell damage effects */
struct spell_delayed_event_obj {
    int spell;
    struct char_data *ch;
    struct char_data *victim;
};

struct track_delayed_event_obj {
	struct track_info track;
	struct char_data *victim;
	struct char_data *ch;
	int track_room;
};



/* get out of jail free card... */
struct jail_event_obj
{
    struct char_data *ch;
    int room;
};

d1041 2
a1042 1
   struct char_data *casters; /* Characters who are casting spells at this */
d1521 1
d1756 7
@


1.81
log
@Spell targets will keep close track of whoever's casting a spell
at them.  This allows spells to be safely aborted if the target
is removed from the game before the spell is completed.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.80 2007/11/18 16:51:55 myc Exp jps $
d377 1
a377 1
#define PRF_CLOAKED	(1 << 30)
d518 1
d740 1
d1401 1
a1401 1
  ubyte clan_rank;
d1674 1
d1811 5
@


1.80
log
@Renamed LVL_QUESTMASTER as LVL_GAMEMASTER.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.79 2007/10/23 20:19:25 myc Exp myc $
d1096 1
d1327 1
a1327 1
struct char_data *consented;
d1573 2
d1808 3
@


1.79
log
@Created 'administration levels' to clean up the master command list.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.78 2007/10/13 20:13:09 myc Exp myc $
d786 1
a786 1
#define LVL_QUESTMASTER 103
d792 1
a792 1
#define LVL_QUESTMASTER 102
d1805 3
@


1.78
log
@ITEM_NOLOCATE now prevents items from being found using the
locate object spell.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.77 2007/10/11 20:14:48 myc Exp myc $
d782 14
a795 1
#define LVL_BUILDER    101 /* Demi-God */
d1805 4
@


1.77
log
@Changed skill defines to support chants and songs as skills, but
slightly distinguished from spells and skills.  TOP_SKILL is the
old MAX_SKILLS.  Chants and songs now each have a block of 50
defines above the new MAX_SKILLS (550).  This is important
because MAX_SKILLS (now TOP_SKILL) is used in the pfile.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.76 2007/10/04 16:20:24 myc Exp myc $
d642 1
a642 1
#define ITEM_HIDDEN        (1 << 27) /* NOT USED - available */
d1792 7
@


1.76
log
@Got rid of struct portal_decay_type.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.75 2007/10/02 02:52:27 myc Exp myc $
d878 1
a878 1
#define MAX_SKILLS		650 /* Used in char_file_u *DO*NOT*CHANGE* */
d1355 1
a1355 1
  sh_int skills[MAX_SKILLS+1];	/* array of skills plus skill 0		*/
d1460 1
a1460 1
  sh_int skills[MAX_SKILLS+1];
d1792 3
@


1.75
log
@Removed AFF_HIDE, and put AFF_SNEAK back in.  Added character forwarding
for switching/shapechanging.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.74 2007/09/21 08:44:45 jps Exp myc $
a907 6
/* Used for portal decay messages. constants.c */
struct portal_decay_type {
    int portal_vnum;
    char *message;
};

d1792 4
@


1.74
log
@Added object type "touchstone" and command "touch" so you can set
your home room by touching specific objects.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.73 2007/09/20 21:20:43 myc Exp jps $
d418 3
a420 2
   /* Room for future expansion	(17 and 18) */
#define AFF_HIDE              (1 << 19)	   /* Char is hidden		*/
d1538 1
d1798 4
@


1.73
log
@Hide points and perception are in.  AFF_HIDE, AFF_SNEAK, and ITEM_HIDDEN
are now unused.  Hiddenness replaces bitvector in obj_file_elem.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.72 2007/09/15 15:36:48 myc Exp myc $
d588 1
d1796 4
@


1.72
log
@Added camouflage aff3 bit for use by natures embrace.  Removed defunct
ITEM_ bitvector flags.  They were duplicating AFF flags.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.71 2007/09/15 05:37:15 myc Exp myc $
d344 2
a345 2
#define PRF_BRIEF       (1 << 0)  /* Room descs won't normally be shown	*/
#define PRF_COMPACT     (1 << 1)  /* No extra CRLF pair before prompts	*/
d362 1
a362 1
#define PRF_AFK         (1 << 18) /* away from keyboard                 */
d369 3
a371 3
#define PRF_NOPETI      (1 << 22) /*cant hear petitions*/
#define PRF_NONAME      (1 << 23) /* lets god hide name on title */
#define PRF_NOTDONE    (1 << 24) /* Can hear clan talk */
d374 5
a378 5
#define PRF_NICEAREA   (1 << 27)
#define PRF_VICIOUS    (1 << 28)
#define PRF_PASSIVE    (1 << 29)  /* char will not engage upon being cast on */
#define PRF_NONAME_BROADCAST (1 << 30)
#define PRF_NOFOLLOW    (1 << 31) /* Cannot follow / well to this player*/ 
d380 1
a380 1
/* max defines here is 31!!!! And we're there. */
d418 1
a418 2
   /* Room for futureexpansion	*/
#define AFF_SNEAK             (1 << 18)	   /* Char can move quietly	*/
d640 1
a640 1
#define ITEM_HIDDEN        (1 << 27)
d677 2
d1015 1
a1015 1
   long	bitvector;	/* To set chars bits                */
d1104 1
a1104 1
   long	bitvector;
d1253 1
a1253 1
   sbyte spare1;      /* Spare */
d1339 8
d1407 2
a1408 2
  long	spare17;
  long	spare18;
d1795 4
@


1.71
log
@Adding new liquids.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.70 2007/09/15 05:03:46 myc Exp myc $
d474 1
a646 26
/* These are the defines used by spell_flags for objs-BURU 25/5/98.*/
#define ITEM_BLIND			(1 << 0) /* Blinds PC wearing obj */
#define ITEM_DET_INVIS			(1 << 1) /* Self explanatory */
#define ITEM_DET_ALIGN			(1 << 2)
#define ITEM_DET_MAGIC		(1 << 3)
#define ITEM_BLUR			(1 << 4)
#define ITEM_HASTE			(1 << 5)
#define ITEM_INVIS			(1 << 6)
#define ITEM_PROT_EVIL			(1 << 7)
#define ITEM_PROT_GOOD		(1 << 8)
#define ITEM_SANCTUARY		(1 << 9)
#define ITEM_SLEEP			(1 << 10)
#define ITEM_STONESKIN			(1 << 11)
#define ITEM_SENSE_LIFE		(1 << 12)
#define ITEM_INFRA			(1 << 13)
#define ITEM_FLY			(1 << 14)
#define ITEM_FARSEE			(1 << 15)
#define ITEM_COMP_LANG		(1 << 16)
#define ITEM_PARALIZE			(1 << 17)
#define ITEM_POISON			(1 << 18)
#define ITEM_SNEAK			(1 << 19)
#define ITEM_HIDE			(1 << 20)
#define ITEM_WATERWALK		(1 << 21)
#define ITEM_NOTRACK			(1 << 22)


d1786 3
@


1.70
log
@AFF_DROPPED_PRIM and AFF_DROPPED_SECOND were incorrectly marked as AFF1
flags, but should be AFF2 flags.  Added MOB2 flags, which are saved as
an espec in the mob files.  Implemented MOB2_NOPOISON flag.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.69 2007/09/11 16:34:24 myc Exp myc $
a712 2
#define NUM_LIQ_TYPES 		16

d725 1
a725 1
#define LIQ_COFFE      12
d728 11
a738 1
#define LIQ_CLEARWATER 15
d1811 5
@


1.69
log
@Replaced MOB_NOGEAR with MOB_AQUATIC, which allows you to limit aquatic
mobs to water rooms.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.68 2007/09/04 06:49:19 myc Exp myc $
d325 3
d462 2
a463 2
#define AFF_DROPPED_PRIM      (1 << 28)
#define AFF_DROPPED_SECOND    (1 << 29)
d1489 1
d1803 4
@


1.68
log
@Getting rid of defunct weather_data constants.  Changing hemisphere data
structs.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.67 2007/08/23 00:31:48 jps Exp myc $
d316 1
a316 1
#define MOB_NOGEAR     (1 << 24) /*no gear on corpse*/
d1799 4
@


1.67
log
@Add !AIR and !EARTH flags, for elemental immunities.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.66 2007/08/22 17:58:05 jps Exp jps $
d750 5
a754 1
/* Sun state for weather_data */
d760 5
a765 5
/* Sky conditions for weather_data */
#define SKY_CLOUDLESS	0
#define SKY_CLOUDY	1
#define SKY_RAINING	2
#define SKY_LIGHTNING	3
d983 1
a983 1
typedef struct _hemisphere
d985 1
d988 1
a988 8
} HEMISPHERE, *LPHEMISPHERE;

#define NUM_HEMISPHERES  4

#define HEMISPHERE_NORTHWEST  0
#define HEMISPHERE_NORTHEAST  1
#define HEMISPHERE_SOUTHWEST  2
#define HEMISPHERE_SOUTHEAST  3
d1799 3
@


1.66
log
@Add definitions for what levels are required for various rebooting
actions.  Also to identify the reason for the game being restricted
(wizlocked).
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.65 2007/08/14 22:43:07 myc Exp jps $
d456 5
a460 3
#define AFF2_WATERFORM        (1 << 25)
#define AFF_DROPPED_PRIM      (1 << 26)
#define AFF_DROPPED_SECOND    (1 << 27)
d1801 5
@


1.65
log
@Adding conceal, corner, shadow, and stealth skills.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.64 2007/08/14 10:41:31 jps Exp myc $
a778 1
/* Changed by David Endre 1/16/99 to allow for 99 mortal levels */
d784 1
a784 1
#define LVL_GOD	       101 /* Demi-God */
d786 1
a786 2
#define LVL_MAX_MORT    99
/*Ok I just re-defined these levels so I didnt have to replace the old ones*/
d791 16
a807 2
/* For level-based gossip restrictions ... mebbe should go somewhere */
/*   else, but hey, it's here for now. -- Selina 3-25-99 */
d810 5
d818 14
a831 14
#define CIRCLE_1	1
#define CIRCLE_2	9
#define CIRCLE_3	17
#define CIRCLE_4	25
#define CIRCLE_5	33
#define CIRCLE_6	41
#define CIRCLE_7	49
#define CIRCLE_8	57
#define CIRCLE_9        65
#define CIRCLE_10	73
#define CIRCLE_11       81
#define CIRCLE_12       89
#define CIRCLE_13       97
#define CIRCLE_14      105
d1799 3
@


1.64
log
@Add variables to struct player_special_data to prevent spamming.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.63 2007/08/04 14:40:35 myc Exp jps $
d468 1
d1533 2
d1782 3
@


1.63
log
@Added MOB_PEACEFUL flag to prevent players from attacking certain mobs.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.62 2007/08/03 22:00:11 myc Exp myc $
d1430 6
d1779 3
@


1.62
log
@Added PK observatories that work adjacent to arena rooms.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.61 2007/08/03 03:51:44 myc Exp myc $
d323 1
d1773 3
@


1.61
log
@check_pk is now attack_ok, and covers many more cases than before,
including peaced rooms, shapeshifted pk, and arena rooms.  Almost all
offensive attacks now use attack_ok to determine whether an attack is
allowed.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.60 2007/07/19 17:51:36 jps Exp myc $
d72 2
a73 1
#define ROOM_PK			(1 << 26) /* PK allowed in this room */
d1772 6
@


1.60
log
@Move NUM_LIQ_TYPES from olc.h to structs.h, so the LIQ defines will
all be in one place.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.59 2007/07/18 21:05:00 jps Exp jps $
d72 1
d1771 4
@


1.59
log
@Added an IS_VICIOUS macro that works for mobs and players.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.58 2007/07/14 02:16:22 jps Exp jps $
d704 2
d1770 3
@


1.58
log
@Added some new constants related to mounts.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.57 2007/05/28 22:36:26 jps Exp jps $
d322 3
d1768 3
@


1.57
log
@Reduce the <base-class>_subclass arrays to the subclasses that are live.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.56 2007/05/11 20:13:28 myc Exp jps $
d322 12
d1765 3
@


1.56
log
@Vaporform is a new circle 13 spell for cryomancers.  It significantly
increases the caster's chance of dodging a hit.  It is a quest spell.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.55 2007/04/19 07:03:14 myc Exp myc $
d146 4
a149 4
#define WARRIOR_SUBCLASSES	5
#define CLERIC_SUBCLASSES	4
#define ROGUE_SUBCLASSES	5
#define MAGE_SUBCLASSES		5
d1753 4
@


1.55
log
@Renamed RAY_OF_ENFEB as RAY_OF_ENFEEB.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.54 2007/04/15 08:30:49 jps Exp myc $
d449 1
d1753 3
@


1.54
log
@Make scribing much, much faster. Also fix various idiosyncrasies related
to scribing and make it more user-friendly.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.53 2007/03/27 04:27:05 myc Exp jps $
d447 1
a447 1
#define AFF3_RAY_OF_ENFEB    (1 << 4)
d1752 4
@


1.53
log
@Added new size, colossal.  Renamed innate constants to be more descriptive.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.52 2007/02/08 01:30:00 myc Exp myc $
d853 1
a853 1
#define BASE_SCRIBE_TIME	20   /* this is the unadjusted time per page to scribe */
d1752 3
@


1.52
log
@Level 1s can gossip again.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.51 2007/02/04 18:12:31 myc Exp myc $
d235 2
a236 1
#define NUM_SIZES        7
d715 4
a718 4
#define INV    0
#define STR    1
#define DRK    2
#define LVT    3
d1752 3
@


1.51
log
@Page length now saves as a part of player specials.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.50 2006/12/08 05:06:58 myc Exp myc $
d773 1
a773 1
#define LVL_GOSSIP	3
d1751 3
@


1.50
log
@Coin indicies for coin arrays moved here from act.item.c.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.49 2006/11/18 21:01:09 jps Exp myc $
d1351 1
a1351 1
  ubyte spare;
a1517 1
  int page_length;
d1751 3
@


1.49
log
@Reworked disarm skill and disarmed-weapon retrieval.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.48 2006/11/18 04:26:32 jps Exp jps $
d719 5
d1752 3
@


1.48
log
@Renamed continual light spell to illumination, and it only works on
LIGHT items (still rooms too).
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.47 2006/11/17 22:52:59 jps Exp jps $
d396 1
a396 1
#define AFF_DROPPED_SECOND    (1 << 17)	   /* Room for futureexpansion	*/
a409 1
#define AFF_DROPPED_PRIM      (1 << 31)
d438 2
d1747 4
@


1.47
log
@Change AGGR_GOOD/EVIL_ALIGN to AGGR_GOOD/EVIL_RACE
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.46 2006/11/08 09:16:04 jps Exp jps $
d76 1
a76 1
#define RAFF_CONTINUAL_LIGHT    (1 << 2)
d616 1
a616 1
#define ITEM_CONT_LIGHT     (1 << 30)
d1746 3
@


1.46
log
@Fixed some loose-lose typos.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.45 2006/04/11 09:08:46 rls Exp jps $
d314 2
a315 2
#define MOB_AGGR_EVIL_ALIGN  (1 << 25)
#define MOB_AGGR_GOOD_ALIGN   (1 << 26)
d1746 3
@


1.45
log
@mods for medit.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.44 2004/11/01 06:02:01 jjl Exp $
d1044 1
a1044 1
   struct char_data *last_to_hold;		/* If MOB forcibly looses item      */
d1746 3
@


1.44
log
@Updating the buffer size for triggers
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.43 2003/06/25 05:06:59 jjl Exp $
d1414 2
d1746 3
@


1.43
log
@More updates.  I seem to be off of my game.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.41 2003/06/23 01:47:09 jjl Exp $
d825 2
a826 1
#define MAX_STRING_LENGTH	9992
d1744 3
@


1.42
log
@Fixed a reused toggle
@
text
@@


1.41
log
@Added a NOFOLLOW flag, and the "note" command, and show notes <player>
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.40 2003/04/16 02:00:22 jjl Exp $
a340 1
#define PRF_NOFOLLOW    (1 << 19) /* Cannot follow / well to this player*/ 
d356 3
a358 1
/* max defines here is 31!!!! */
d1743 3
@


1.40
log
@Added skill timers for Zzur.  They don't save to file, so they were a
quickie.
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.39 2002/10/19 18:29:52 jjl Exp $
d341 1
d1742 4
@


1.39
log
@New and improved red green and blue scrolls of recall. Yummy!
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.38 2002/09/13 02:32:10 jjl Exp $
d798 2
d1397 2
d1741 3
@


1.38
log
@Updated header comments
@
text
@d2 1
a2 1
 * $Id: structs.h,v 1.37 2002/08/29 17:37:50 rsd Exp $
d888 7
d1737 3
@


1.37
log
@Added a define for a new con state CON_ISPELL_BOOT to work
with new player name checking routines.
@
text
@d1 3
a3 1
// $Id: structs.h,v 1.36 2002/05/23 00:33:51 rls Exp $
d1728 190
a1917 184
// $Log: structs.h,v $
// Revision 1.36  2002/05/23 00:33:51  rls
// Struct for new thac0 function.
//
// Revision 1.35  2001/04/08 17:13:10  dce
// Added an alwayslit flag that makes a room lit no matter
// of the sector or room type...
//
// Revision 1.34  2001/04/01 22:04:28  mtp
// remove MAX_BASE_CLASS as CLASS_ROGUE is beyond its bounds
//
// Revision 1.33  2001/03/24 05:12:01  dce
// Objects will now accept a level through olc and upon
// booting the objects. The level code for the players will
// follow.
//
// Revision 1.32  2001/02/03 00:59:30  mtp
// added MAX_BASE_CLASS just for less hardcoding in the subclass area
//
// Revision 1.31  2000/11/28 01:14:40  mtp
// removed mobprog references
//
// Revision 1.30  2000/11/25 02:33:15  rsd
// Altered comment header and added back rlog messages
// from prior to the addition of the $log$ string.
//
// Revision 1.29  2000/11/22 01:09:13  mtp
// added motere mob classes (all the ones that are available for players)
//
// Revision 1.28  2000/11/07 01:32:57  mtp
// changes d WARRIOR_SUBCLASSES to 5 and ROGUE_SUBCLASSES to 5
//
// Revision 1.27  2000/11/03 05:43:18  jimmy
// removed the quest.h and put it where it should be
//
// Revision 1.26  2000/10/27 00:34:45  mtp
// included quest.h and added member to char_data structure for quests
//
// Revision 1.25  2000/04/21 00:58:02  rsd
// added a bool can_see_master to struct follow_type to work with
// follow code into the dark etc...
//
// Revision 1.24  2000/01/31 00:01:41  rsd
// added defines for good_race login, also fixed some tabs
// for the defines.
//
// Revision 1.23  1999/12/10 05:11:40  cso
// I moved one line down one line to make sense of it, line 205.
//
// Revision 1.22  1999/11/29 00:08:51  cso
// added defines for MOB_ANIMATED and AFF3_ANIMATED
//
// Revision 1.21  1999/09/05 07:00:39  jimmy
// Added RCS Log and Id strings to each source file
//
// Revision 1.20  1999/07/20 19:45:51  jimmy
// This is the spanky New Spell recognition code.
// This code allows mobs/players that have the KNOW_SPELL skill
// to make a skill check to guess the spell.  A good roll will show both
// the spell and the target.  A bad roll will show the spell garbled and
// then an INT check for the target.  If a really bad roll is made, the spell
// will be replaced by an incorrect one.  the heart of this system is
// start_chant(), end_chant, and bad_guess().
// --gurlaek 7/20/1999
//
// Revision 1.19  1999/07/15 03:27:34  jimmy
// Mob casters can not hit while casting.
// Updated spell cast times to be more realistic
// changed combat to 4 seconds per round.
// Removed do_order semantics that told the order to onlookers.
//
// Revision 1.18  1999/07/06 19:57:05  jimmy
// This is a Mass check-in of the new skill/spell/language assignment system.
// This New system combines the assignment of skill/spell/language for
// both mobs and PCs.  LOts of code was touched and many errors were fixed.
// MCLASS_VOID was moved from 13 to -1 to match CLASS_UNDEFINED for PC's.
// MObs now get random skill/spell/language levels baseed on their race/class/level
// that exactly align with PC's.  PC's no longer have to rent to use skills gained
// by leveling or when first creating a char.  Languages no longer reset to defaults
// when a PC levels.  Discovered that languages have been defined right in the middle
// of the spell area.  This needs to be fixed.  A conversion util neeDs to be run on
// the mob files to compensate for the 13 to -1 class change.
// --gurlaek 7/6/1999
//
// Revision 1.17  1999/06/30 18:11:09  jimmy
// act.offensive.c    config.c      handler.c    spells.c
// This is a major conversion from the 18 point attribute system to the
// 100 point attribute system.  A few of the major changes are:
// All attributes are now on a scale from 0-100
// Everyone views attribs the same but, the attribs for one race
//   may be differeent for that of another even if they are the
//   same number.
// Mobs attribs now get rolled and scaled using the same algorithim as PC's
// Mobs now have individual random attributes based on race/class.
// The STR_ADD attrib has been completely removed.
// All bonus tables for attribs in constants.c have been replaced by
//   algorithims that closely duplicate the tables except on a 100 scale.
// Some minor changes:
// Race selection at char creation can now be toggled by using
//   <world races off>
// Lots of cleanup done to affected areas of code.
// Setting attributes for mobs in the .mob file no longer functions
//   but is still in the code for later use.
// We now have a spare attribut structure in the pfile because the new
//   system only used three instead of four.
// --gurlaek 6/30/1999
//
// Revision 1.16  1999/05/04 17:19:33  dce
// Name accept system...version one...original code by Fingh, fixed up to work
// by Zantir.
//
// Revision 1.15  1999/04/16 03:55:09  dce
// Removed some things temporarly until they can be fixed.
//
// Revision 1.14  1999/04/07 01:20:18  dce
// Allows extra descriptions on no exits.
// 
// Revision 1.13  1999/03/26 19:44:35  jen
// Added a mortal gossip channel with 103+ godly control
//
// Revision 1.12  1999/03/14 00:53:03  mud
// In class.c added a new line before the fiery mud class explanation
// in config.c added the variable for name explanations and added the
// text for the variable
// in interpreter.c added the con_state stuff, whatever that was and
// added the CON_NAME_CHECK affirmation section to the creation menu
// loop or nanny.
// In structs.h added the CON_NAME_CHECK define..
// I also drove Jimmy absolutely insane with the deail in information
// I put into our change control system.
//
// Revision 1.11  1999/03/06 23:51:54  dce
// Add's chant songs, and can only chant once every four hours
//
// Revision 1.10  1999/03/05 20:02:36  dce
// Chant added to, and songs craeted
//
// Revision 1.9  1999/03/03 20:11:02  jimmy
// Many enhancements to scribe and spellbooks.  Lots of checks added.  Scribe is now a skill.
// Spellbooks now have to be held to scribe as well as a quill in the other hand.
// 
// -fingon
//
// Revision 1.8  1999/03/01 05:31:34  jimmy
// Rewrote spellbooks.  Moved the spells from fingh's PSE to a standard linked
// list.  Added Spellbook pages.  Rewrote Scribe to be a time based event based
// on the spell mem code.  Very basic at this point.  All spells are 5 pages long,
// and take 20 seconds to scribe each page.  This will be more dynamic when the
// SCRIBE skill is introduced.  --Fingon.
//
// Revision 1.7  1999/02/12 15:33:17  jimmy
// Brand new spell table, thanks to Zzur
// Glad I didnt' have to do it...
// fingon
//
// Revision 1.6  1999/02/11 22:17:40  jimmy
// Moved spell circles to every 8 levels.  Filled in the
// spells array to extend from level 70 to 105.
// fingon
//
// Revision 1.5  1999/02/10 22:21:42  jimmy
// Added do_wiztitle that allows gods to edit their
// godly title ie Overlord.  Also added this title
// to the playerfile
// fingon
//
// Revision 1.4  1999/02/10 05:57:14  jimmy
// Added long description to player file.  Added AFK toggle.
// removed NOAUCTION toggle.
// fingon
//
// Revision 1.3  1999/02/06 00:40:36  jimmy
// Major change to incorporate aliases into the pfile
// moved alias structure from interpreter.h to structs.h
// heavily modified alias code in interpreter.c
// Jimmy Kincaid AKA fingon
//
// Revision 1.2  1999/02/05 07:47:42  jimmy
// Added Poofs to the playerfile as well as 4 extra strings for
// future use.  fingon
//
// Revision 1.1  1999/01/29 01:23:32  mud
// Initial revision
// 
@


1.36
log
@Struct for new thac0 function.
@
text
@d1 1
a1 1
// $Id: structs.h,v 1.35 2001/04/08 17:13:10 dce Exp rls $
d485 3
d1727 3
@


1.35
log
@Added an alwayslit flag that makes a room lit no matter
of the sector or room type...
@
text
@d1 1
a1 1
// $Id: structs.h,v 1.34 2001/04/01 22:04:28 mtp Exp $
d1674 5
d1724 4
@


1.34
log
@remove MAX_BASE_CLASS as CLASS_ROGUE is beyond its bounds
@
text
@d1 1
a1 1
// $Id: structs.h,v 1.33 2001/03/24 05:12:01 dce Exp mtp $
d60 10
a69 9
#define ROOM_NOWELL         (1 << 16) /* NO MOONWELL OR EATHERPORTAL ETC*/
#define ROOM_NORECALL       (1 << 17) /* LETS BE AN ASS ...BANYAL*/
#define ROOM_UNDERDARK      (1 << 18) /*EVILS! THOSE BASTERDS*/
#define ROOM_NOSUMMON       (1 << 19) 
#define ROOM_NOSHIFT        (1 << 20) /* no plane shift*/
#define ROOM_GUILDHALL      (1 << 21)
#define ROOM_NOSCAN         (1 << 22) /* Unable to scan to/from rooms */
#define ROOM_ALT_EXIT       (1 << 23) /* The exits to this room have been altered */ 
#define ROOM_MAP	    (1 << 24) /* Room on the surface map */
d72 5
a76 5
#define RAFF_FOG        (1 << 0)
#define RAFF_DARKNESS   (1 << 1)
#define RAFF_CONTINUAL_LIGHT (1 << 2)
#define RAFF_FOREST	(1 << 3)
#define RAFF_CIRCLE_FIRE (1 << 4)
d1719 3
@


1.33
log
@Objects will now accept a level through olc and upon
booting the objects. The level code for the players will
follow.
@
text
@d1 1
a1 1
// $Id: structs.h,v 1.32 2001/02/03 00:59:30 mtp Exp $
a115 1
#define MAX_BASE_CLASS      3 /* 0,1,2,3 are the base classes anything else is subclasses*/
d1718 5
@


1.32
log
@added MAX_BASE_CLASS just for less hardcoding in the subclass area
@
text
@d1 1
a1 1
// $Id: structs.h,v 1.31 2000/11/28 01:14:40 mtp Exp $
d960 1
d1719 3
@


1.31
log
@removed mobprog references
@
text
@d1 1
a1 1
// $Id: structs.h,v 1.30 2000/11/25 02:33:15 rsd Exp mtp $
d116 1
d1718 3
@


1.30
log
@Altered comment header and added back rlog messages
from prior to the addition of the $log$ string.
@
text
@d1 1
a1 1
// $Id: structs.h,v 1.29 2000/11/22 01:09:13 mtp Exp $
a1144 39
/* MOBProgram foo */
  struct mob_prog_act_list {
    struct mob_prog_act_list *next;
    char *buf;
    struct char_data *ch;
    struct obj_data *obj;
    void *vo;
  };
  typedef struct mob_prog_act_list MPROG_ACT_LIST;
 
  struct mob_prog_data {
    struct mob_prog_data *next;
    int type;
    char *arglist;
    char *comlist;
  };
   typedef struct mob_prog_data MPROG_DATA;
 
  extern bool MOBTrigger;
 
  #define ERROR_PROG        -1
  #define IN_FILE_PROG       0
  #define ACT_PROG           1
  #define SPEECH_PROG        2
  #define RAND_PROG          4
  #define FIGHT_PROG         8
  #define DEATH_PROG        16
  #define HITPRCNT_PROG     32
  #define ENTRY_PROG        64
  #define GREET_PROG       128
  #define ALL_GREET_PROG   256
  #define GIVE_PROG        512
  #define BRIBE_PROG      1024
 
  /* end of MOBProg foo */
 
 


a1485 1
  MPROG_ACT_LIST *mpact;
a1683 2
   int  progtypes;  /* program types for MOBProg              */
   MPROG_DATA *mobprogs; /* programs for MOBProg              */
d1717 4
@


1.29
log
@added motere mob classes (all the ones that are available for players)
@
text
@d1 1
a1 1
// $Id: structs.h,v 1.28 2000/11/07 01:32:57 mtp Exp $
d1759 3
d1788 129
@


1.28
log
@changes d WARRIOR_SUBCLASSES to 5 and ROGUE_SUBCLASSES to 5
@
text
@d1 1
a1 1
// $Id: structs.h,v 1.27 2000/11/03 05:43:18 jimmy Exp mtp $
d184 12
a195 1
#define MCLASS_NUMBER      14
d1759 3
@


1.27
log
@removed the quest.h and put it where it should be
@
text
@d1 1
a1 1
// $Id: structs.h,v 1.26 2000/10/27 00:34:45 mtp Exp $
d143 1
a143 1
#define WARRIOR_SUBCLASSES	6
d145 1
a145 1
#define ROGUE_SUBCLASSES	4
d1748 3
@


1.26
log
@included quest.h and added member to char_data structure for quests
@
text
@d1 1
a1 1
// $Id: structs.h,v 1.25 2000/04/21 00:58:02 rsd Exp $
a14 1
#include "quest.h"
d1748 3
@


1.25
log
@added a bool can_see_master to struct follow_type to work with
follow code into the dark etc...
@
text
@d1 1
a1 1
// $Id: structs.h,v 1.24 2000/01/31 00:01:41 rsd Exp $
d15 1
d1516 1
d1749 4
@


1.24
log
@added defines for good_race login, also fixed some tabs
for the defines.
@
text
@d1 12
a12 10
// $Id: structs.h,v 1.23 1999/12/10 05:11:40 cso Exp rsd $
/*************************************************************************
*   File: structs.h                                     Part of CircleMUD *
*  Usage: header file for central structures and contstants               *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */
d1457 3
a1459 2
   struct char_data *follower;
   struct follow_type *next;
d1747 4
@


1.23
log
@I moved one line down one line to make sense of it, line 205.
@
text
@d1 1
a1 1
// $Id: structs.h,v 1.22 1999/11/29 00:08:51 cso Exp $
d448 2
a449 2
#define CON_QRACE    17     /* Race?  */
#define CON_QANSI    18     /*ask for term type*/
d455 7
a461 7
#define CON_QROLLSTATS 24 
#define CON_QHOMETOWN 25 
#define CON_QBONUS1 26
#define CON_QBONUS2 27
#define CON_QBONUS3 28
#define CON_QCANCHAR 29
#define CON_TEXTED   30
d464 8
a471 6
#define CON_CLASSHELP	33		/* Char Gen Class Help		*/
#define CON_SDEDIT      34
#define CON_QDIETY      35
#define CON_NAME_CHECK 36
#define CON_NAME_WAIT_APPROVAL 37      /* await imm aprroval of name */
#define CON_NEW_NAME   38              /* name declined, get a new one...*/ 
d1744 3
@


1.22
log
@added defines for MOB_ANIMATED and AFF3_ANIMATED
@
text
@d1 1
a1 1
// $Id: structs.h,v 1.21 1999/09/05 07:00:39 jimmy Exp $
d204 1
d1742 3
@


1.21
log
@Added RCS Log and Id strings to each source file
@
text
@d1 1
a1 1
// $Id$
a39 2


d302 1
d427 1
a560 2


d1740 4
a1743 1
// $Log$
@


1.20
log
@This is the spanky New Spell recognition code.
This code allows mobs/players that have the KNOW_SPELL skill
to make a skill check to guess the spell.  A good roll will show both
the spell and the target.  A bad roll will show the spell garbled and
then an INT check for the target.  If a really bad roll is made, the spell
will be replaced by an incorrect one.  the heart of this system is
start_chant(), end_chant, and bad_guess().
--gurlaek 7/20/1999
@
text
@d1 1
d1742 1
@


1.19
log
@Mob casters can not hit while casting.
Updated spell cast times to be more realistic
changed combat to 4 seconds per round.
Removed do_order semantics that told the order to onlookers.
@
text
@d1457 4
d1464 49
a1512 62
   int pfilepos;			 /* playerfile pos		  */
   long nr;                            /* Mob's rnum			  */
   room_num in_room;                     /* Location (real room number)	  */
   room_num was_in_room;		 /* location for linkdead people  */

  struct mem_list *spell_list;          /* spells in mem queue           */
  int num_spells;			 /* number of spells in mem list  */  
  int num_memmed;			 /* hw many are currently memmed*/
  int mem_status;			 /* is the PC memming now?*/
  int clan_snoop;			 /* clan chat snoop */
/* number of spells memmed from each circle */
  int spells_memmed_circle[NUM_SPELL_CIRCLES + 1];
  struct scribing *scribe_list;          /* spells queued for scribing    */
   struct char_player_data player;       /* Normal data                   */
   struct char_ability_data natural_abils; /* natural rolls */
   struct char_ability_data viewed_abils;  /* natural_abils + affectations VIEWING ONLY*/
   struct char_ability_data affected_abils;/* (viewed_abils)*(racial percentage) */
   struct char_ability_data spare_abils;   /* Spare no longer used  */
   struct char_point_data points;        /* Points                        */
   struct char_special_data char_specials;	/* PC/NPC specials	  */
   struct player_special_data *player_specials; /* PC specials		  */
   struct mob_special_data mob_specials;	/* NPC specials		  */

   struct affected_type *affected;       /* affected by what spells       */
   struct obj_data *equipment[NUM_WEARS];/* Equipment array               */

   struct obj_data *carrying;            /* Head of list                  */
   struct descriptor_data *desc;         /* NULL for mobiles              */

   long id;                            /* used by DG triggers             */
   struct trig_proto_list *proto_script; /* list of default triggers      */
   struct script_data *script;         /* script info for the object      */


   struct char_data *next_in_room;     /* For room->people - list         */
   struct char_data *next;             /* For either monster or ppl-list  */
   struct char_data *next_fighting;    /* For fighting list               */
   struct char_data *next_memming;     /* for currently meming PC's       */
   struct char_data *next_scribing;    /* next in scribe list             */
   struct char_data *guarded_by;       /* Character guarding this char    */
   struct char_data *guarding;	       /* Char this char is guarding      */

  struct follow_type *followers;        /* List of chars followers       */
   struct char_data *master;             /* Who is char following?        */
  struct group_type *groupees;			/*list of chars 
grouped*/

   struct char_data *groupmaster;		/*group master*/

   struct mgroup_type *mgroupees;		/*major groups list*/

 struct char_data *mgroupmaster;		/*groups master*/
    
   struct event *points_event[3]; 	 /* events for regening H/M/V     */
   struct event *jail_event;              /* get out of jail free... */
   struct event *camp_event;
   struct event *track_delayed_event;

   MPROG_ACT_LIST *mpact;
   int mpactnum;
   struct casting casting;   /* note this is NOT a pointer */
   int page_length;
@


1.18
log
@This is a Mass check-in of the new skill/spell/language assignment system.
This New system combines the assignment of skill/spell/language for
both mobs and PCs.  LOts of code was touched and many errors were fixed.
MCLASS_VOID was moved from 13 to -1 to match CLASS_UNDEFINED for PC's.
MObs now get random skill/spell/language levels baseed on their race/class/level
that exactly align with PC's.  PC's no longer have to rent to use skills gained
by leveling or when first creating a char.  Languages no longer reset to defaults
when a PC levels.  Discovered that languages have been defined right in the middle
of the spell area.  This needs to be fixed.  A conversion util neeDs to be run on
the mob files to compensate for the 13 to -1 class change.
--gurlaek 7/6/1999
@
text
@d785 1
a785 1
#define PULSE_VIOLENCE  (2 RL_SEC)
@


1.17
log
@act.item.c         class.c       db.c         medit.c        utils.hact.offensive.c    config.c      handler.c    spells.cThis is a major conversion from the 18 point attribute system to the
100 point attribute system.  A few of the major changes are:
All attributes are now on a scale from 0-100
Everyone views attribs the same but, the attribs for one race
  may be differeent for that of another even if they are the
  same number.
Mobs attribs now get rolled and scaled using the same algorithim as PC's
Mobs now have individual random attributes based on race/class.
The STR_ADD attrib has been completely removed.
All bonus tables for attribs in constants.c have been replaced by
  algorithims that closely duplicate the tables except on a 100 scale.
Some minor changes:
Race selection at char creation can now be toggled by using
  <world races off>
Lots of cleanup done to affected areas of code.
Setting attributes for mobs in the .mob file no longer functions
  but is still in the code for later use.
We now have a spare attribut structure in the pfile because the new
  system only used three instead of four.
--gurlaek 6/30/1999
@
text
@d1 1
a1 2
/*
************************************************************************
d115 26
a140 25
#define CLASS_UNDEFINED	  -1
#define CLASS_MAGIC_USER  0
#define CLASS_CLERIC      1
#define CLASS_THIEF       2
#define CLASS_WARRIOR     3
#define CLASS_PALADIN     4
#define CLASS_ANTI_PALADIN 5
#define CLASS_RANGER      6
#define CLASS_DRUID       7
#define CLASS_SHAMAN      8
#define CLASS_ASSASSIN    9
#define CLASS_MERCENARY   10
#define CLASS_NECROMANCER 11
#define CLASS_CONJURER    12
#define CLASS_MONK	  13
#define CLASS_BERSERKER   14
#define CLASS_PRIEST	  15
#define CLASS_DIABOLIST   16
#define CLASS_MYSTIC	  17
#define CLASS_ROGUE       18
#define CLASS_BARD	  19
#define CLASS_PYROMANCER  20
#define CLASS_CRYOMANCER  21
#define CLASS_ILLUSIONIST 22
#define CLASS_HUNTER	  23
a141 1
#define NUM_CLASSES	  24  /* This must be the number of classes!! */
d157 18
a174 17
#define SPECIES_BARBARIAN    10
#define SPECIES_HALFLING     11
#define SPECIES_UNDEAD       12
#define SPECIES_HUMANOID     13
#define SPECIES_ANIMAL       14
#define SPECIES_DRAGON       15
#define SPECIES_GIANT        16
#define SPECIES_OTHER        17
#define SPECIES_GOBLIN	     18
#define SPECIES_DEMON	     19
#define SPECIES_NUMBER       20

#define MCLASS_SORCERER    0
#define MCLASS_CLERIC      1
#define MCLASS_THIEF       2
#define MCLASS_WARRIOR     3
#define MCLASS_PALADIN     4
d176 4
a179 4
#define MCLASS_RANGER      6
#define MCLASS_DRUID       7
#define MCLASS_SHAMAN      8
#define MCLASS_ASSASSIN    9
d183 1
a183 4
#define MCLASS_VOID		   13


#define MCLASS_NUMBER 14
d1418 1
a1418 1
  byte skills[MAX_SKILLS+1];
@


1.16
log
@Name accept system...version one...original code by Fingh, fixed up to work
by Zantir.
@
text
@a147 2

#define SPECIES_OTHER       17
d160 9
a168 8
#define SPECIES_UNDEAD      12
#define SPECIES_HUMANOID    13
#define SPECIES_ANIMAL      14
#define SPECIES_DRAGON      15
#define SPECIES_GIANT       16
#define SPECIES_GOBLIN		18
#define SPECIES_DEMON		19
#define SPECIES_NUMBER 20
d1228 1
a1228 1
   sbyte str_add;      /* 000 - 100 if strength 18             */
d1477 4
a1480 4
   struct char_ability_data view_abils;  /*Sets viewing data*/
   struct char_ability_data vaff_abils;		/*Changes viewing data*/
   struct char_ability_data real_abils;	 /* Abilities without modifiers   */
   struct char_ability_data aff_abils;	 /* Abils with spells/stones/etc  */
d1505 1
a1505 1
   struct follow_type *followers;        /* List of chars followers       */
d1507 1
a1507 1
      struct group_type *groupees;			/*list of chars 
a1660 1

a1667 1

@


1.15
log
@Removed some things temporarly until they can be fixed.
@
text
@d273 2
a274 2


d342 2
a343 1

d469 3
a471 7
#define CON_QQUESTION1	36
#define CON_QQUESTION2	37
#define CON_QQUESTION3	38
#define CON_QQUESTION4	39
#define CON_QQUESTION5	40
#define CON_QQUESTION6	41
#define CON_NAME_CHECK  42
d849 6
@


1.14
log
@Allows extra descriptions on no exits.
@
text
@d751 1
a751 1
#define LVL_GOSSIP	1
@


1.13
log
@Added a mortal gossip channel with 103+ godly control
@
text
@d82 2
a83 2
#define EX_HIDDEN (1 << 4)  /* exit is hidden */

@


1.12
log
@In class.c added a new line before the fiery mud class explanation
in config.c added the variable for name explanations and added the
text for the variable
in interpreter.c added the con_state stuff, whatever that was and
added the CON_NAME_CHECK affirmation section to the creation menu
loop or nanny.
In structs.h added the CON_NAME_CHECK define..
I also drove Jimmy absolutely insane with the deail in information
I put into our change control system.
lala
@
text
@d748 6
@


1.11
log
@Add's chant songs, and can only chant once every four hours
@
text
@d474 1
@


1.10
log
@Chant added to, and songs craeted
@
text
@a429 1
#define AFF3_HIT_REGEN       (1 << 5)
d1361 1
a1361 1
  int spare15;
@


1.9
log
@Many enhancements to scribe and spellbooks.  Lots of checks added.  Scribe is now a skill.
Spellbooks now have to be held to scribe as well as a quill in the other hand.

-fingon
@
text
@d430 1
a430 1

@


1.8
log
@Rewrote spellbooks.  Moved the spells from fingh's PSE to a standard linked
list.  Added Spellbook pages.  Rewrote Scribe to be a time based event based
on the spell mem code.  Very basic at this point.  All spells are 5 pages long,
and take 20 seconds to scribe each page.  This will be more dynamic when the
SCRIBE skill is introduced.  --Fingon.
@
text
@d497 1
a497 1
#define WEAR_HOLD2	   19
d541 1
a541 1
#define ITEM_SPELLBOOK   26
d818 2
a819 2
#define MAX_SPELLBOOK_PAGES     200  /* Used in obj_file_elem *DO*NOT*CHANGE* */ 
#define SPELLBOOK_ENTRY_LENGTH  9
d1186 1
a1186 1

d1190 1
@


1.7
log
@Brand new spell table, thanks to Zzur
Glad I didnt' have to do it...
fingon
@
text
@d771 1
a771 1
  
d818 4
a821 1

d972 6
d989 2
a990 2
int mob_from;/*where the mob is from*/
   struct obj_flag_data obj_flags;/* Object information               */
a991 1

a999 1

a1001 1

a1004 1

a1005 1

d1008 7
a1014 6
    sh_int spell_component;
	int object_limitation;
	int spare1;
	long spare2;
	sh_int spare3;

d1033 2
a1034 1
   char PSE_Desc[128];   /* ouch, sorry for the kludge here guys:( */
d1187 6
a1192 1

d1459 1
a1459 1
struct mem_list *spell_list;          /* spells in mem queue           */
d1466 1
a1466 2


d1492 1
@


1.6
log
@Moved spell circles to every 8 levels.  Filled in the
spells array to extend from level 70 to 105.
fingon
@
text
@d767 4
a770 4
 /* MAX_CHAR SPELLS is the maximum number of spells a max_level char can */
 /* have   Use this value with spell_save fcn's  DO NOT MODIFY independent */
 /* of the circle/level assignment table in spell_mem.c */
 #define MAX_CHAR_SPELLS   135 
@


1.5
log
@Added do_wiztitle that allows gods to edit their
godly title ie Overlord.  Also added this title
to the playerfile
fingon
@
text
@d751 13
a763 13
#define CIRCLE_2	6
#define CIRCLE_3	11
#define CIRCLE_4	16
#define CIRCLE_5	21
#define CIRCLE_6	26
#define CIRCLE_7	31
#define CIRCLE_8	36
#define CIRCLE_9   41
#define CIRCLE_10	46
#define CIRCLE_11   51
#define CIRCLE_12   56
#define CIRCLE_13   61
#define CIRCLE_14   66
d765 1
a765 1
 #define NUM_SPELL_CIRCLES 14
@


1.4
log
@Added long description to player file.  Added AFK toggle.
removed NOAUCTION toggle.
fingon
@
text
@d808 1
d1370 1
@


1.3
log
@Major change to incorporate aliases into the pfile
moved alias structure from interpreter.h to structs.h
heavily modified alias code in interpreter.c
Jimmy Kincaid AKA fingon
@
text
@d327 3
a329 1
#define PRF_NOAUCT	(1 << 18) /* Can't hear auction channel		*/
d331 2
a332 1
#define PRF_NOGRATZ	(1 << 20) /* Can't hear grats channel		*/
d337 1
a337 1
#define PRF_ANON		(1 << 25) /*Anon flag*/
d342 1
a342 1
#define PRF_AFK
d1184 17
a1200 17
   char	passwd[MAX_PWD_LENGTH+1]; /* character's password      */
   char	*name;	       /* PC / NPC s name (kill ...  )         */
   char	*short_descr;  /* for NPC 'actions'                    */
   char	*long_descr;   /* for 'look'			       */
   char	*description;  /* Extra descriptions                   */
   char	*title;        /* PC / NPC's title  */
   char *prompt;       /* Player prompt*/
   byte sex;           /* PC / NPC's sex                       */
   byte class;         /* PC / NPC's class		       */
   byte race;          /* PC / NPC's race              */
   byte race_align;		/*PC / NPC's race_align*/
   byte level;         /* PC / NPC's level                     */
   int	hometown;      /* PC s Hometown (zone)                 */
   struct time_data time;  /* PC's AGE in days                 */
   ubyte weight;       /* PC / NPC's weight                    */
   ubyte height;       /* PC / NPC's height                    */
   byte size;
d1368 1
a1368 1
  
d1391 2
a1392 2
int ex_plat;
int ex_gold; 
d1394 22
a1415 22
   int ex_no_dice;
   int zone;
   sbyte ex_damroll;
   sbyte ex_hitroll;
   int ex_main_hp;
   byte skills[MAX_SKILLS+1];
   long ex_exp;
   byte class; 
   sh_int ex_hit;
   sh_int ex_max_hit; 
   byte last_direction;     /* The last direction the monster went     */
   int	attack_type;        /* The Attack Type Bitvector for NPC's     */
   byte default_pos;        /* Default position for NPC                */
   memory_rec *memory;	    /* List of attackers to remember	       */
   sbyte damnodice;          /* The number of damage dice's	       */
   sbyte damsizedice;        /* The size of the damage dice's           */
   sbyte ex_damnodice;
   sbyte ex_damsizedice;
   int wait_state;	    /* Wait state for bashed mobs*/
   int mem_state[12];
   int mem_memed[12];
   sh_int ex_armor;
@


1.2
log
@Added Poofs to the playerfile as well as 4 extra strings for
future use.  fingon
@
text
@d808 1
a808 2
#define MAX_SKILLS		650 /* Used in char_file_u *DO*NOT*CHANGE*
*/
d810 3
d1235 7
d1315 1
d1377 1
a1377 1
  struct alias *aliases;
@


1.1
log
@Initial revision
@
text
@d1293 63
a1355 56
   sh_int skills[MAX_SKILLS+1];	/* array of skills plus skill 0		*/
   byte PADDING0;		/* used to be spells_to_learn		*/
   bool talks[MAX_TONGUE];	/* PC s Tongues 0 for NPC		*/
   int	wimp_level;		/* Below this # of hit points, flee!	*/
   byte freeze_level;		/* Level of god who froze char, if any	*/
   sh_int invis_level;		/* level of invisibility		*/
   room_num load_room;		/* Which room to place char in		*/
   long	pref;			/* preference flags for PC's.		*/
   ubyte bad_pws;		/* number of bad password attemps	*/
   sbyte conditions[3];       /* Drunk, full, thirsty			*/
   sbyte innatetime[4];     /*Innate timers banyal*/
   sh_int speaking;
    struct trophy_data trophy[MAX_TROPHY];
    int top;
    float frag;
   /* PC spell memory save */
   /* spellnum and can_cast flag*/
   int memmed_spells[MAX_CHAR_SPELLS][2];  
   
   /* number of spells in memory*/
   int spells_in_mem;
   
   /* spares below for future expansion.  You can change the names from
      'sparen' to something meaningful, but don't change the order.  */

   ubyte spheres[6];
   ubyte spare;
   ubyte spare1;
   ubyte clan;
   ubyte clan_rank;
   ubyte spare2;
   ubyte spare3;
   ubyte spare4;
   ubyte spare5;                
   int spells_to_learn;		/* How many can you learn yet this level*/
   int olc_zone;
   int olc2_zone;
   int aggressive;
   int olc3_zone;	
   int spare11;                /* Rank within clan */
   int olc4_zone;	
   int olc5_zone;
   int diety;
   int spare15;
   int spare23;
   int lastlevel;
   int nathps;
   long	spare17;
   long	spare18;
   long spare44;
   long	spare19;
   long	spare20;
   long spare25;
   long	spare21;
   sh_int spare31;
   sh_int spare32;
d1366 7
a1372 10
   struct player_special_data_saved saved;

   char	*poofin;		/* Description on arrival of a god.     */
   char	*poofout;		/* Description upon a god's exit.       */
   struct alias *aliases;	/* Character's aliases			*/
   long last_tell;		/* idnum of last tell from		*/
   void *last_olc_targ;		/* olc control				*/
   int last_olc_mode;		/* olc control				*/
   byte roll[6];
   struct char_data *ignored;
@
