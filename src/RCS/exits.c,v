head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2009.03.09.04.33.20;	author jps;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.21.08.01.20;	author jps;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.21.07.10.14;	author jps;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.17.22.03.01;	author jps;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.17.04.32.16;	author jps;	state Exp;
branches;
next	;


desc
@Functions about... exits!
@


1.5
log
@Moved direction information from structs.h, constants.h, and constants.c
into directions.h and directions.c.
@
text
@/***************************************************************************
 * $Id: exits.c,v 1.4 2008/08/21 08:01:20 jps Exp jps $
 ***************************************************************************/
/***************************************************************************
 *   File: exits.c                                       Part of FieryMUD  *
 *  Usage: Functions for managing room exits                               *
 *                                                                         *
 *  All rights reserved.  See license.doc for complete information.        *
 *                                                                         *
 *  FieryMUD Copyright (C) 1998, 1999, 2000 by the Fiery Consortium        *
 ***************************************************************************/

#include "conf.h"
#include "sysdep.h"

#include "structs.h"
#include "utils.h"
#include "exits.h"
#include "rooms.h"
#include "handler.h"
#include "constants.h"
#include "db.h"
#include "math.h"
#include "directions.h"

struct exit *create_exit(int dest_room)
{
   struct exit *e;

   CREATE(e, struct exit, 1);

   e->key = -1;
   e->to_room = dest_room;

   return e;
}

bool exit_has_keyword(struct exit *exit, char *name)
{
   if (exit->keyword && *(exit->keyword))
      return isname(name, exit->keyword);
   return FALSE;
}

struct exit *opposite_exit(struct exit *exit, room_num roomvnum, int dir)
{
   struct room_data *room;
   struct exit *oe;
   int idir;

   if ((room = EXIT_DEST(exit))) {
      if ((oe = room->exits[rev_dir[dir]]) && EXIT_NDEST(oe) == roomvnum)
         return oe;
      for (idir = 0; idir < NUM_OF_DIRS; idir++)
         if ((oe = room->exits[idir]) && EXIT_NDEST(oe) == roomvnum)
            return oe;
   }

   return NULL;
}

char *exit_name(struct exit *exit)
{
   return exit->keyword ? fname(exit->keyword) : "door";
}

#define SHOW_EXDESC_LEN 57

char *exit_dest_desc(struct exit *e)
{
   static char buf[MAX_STRING_LENGTH];
   int nlpos, len, showlen;
   bool foundnl = FALSE;

   if (!e)
      return "";
   if (e->exit_info & EX_DESCRIPT) {
      len = strlen(e->general_description);
      for (nlpos = 0; nlpos < len; nlpos++)
         if (e->general_description[nlpos] == '\r' || e->general_description[nlpos] == '\n') {
            foundnl = TRUE;
            break;
         }
      showlen = MIN(nlpos, SHOW_EXDESC_LEN) + 3;
      snprintf(buf, showlen, "&3%s", e->general_description);
      if (showlen < nlpos + 3 || nlpos <= len - 3)
         sprintf(buf, "%s...&0", buf);
      else
         sprintf(buf, "%s&0", buf);
      return buf;
   }
   if (e->to_room == NOWHERE)
      return "&1&bnowhere&0";
   if (e->to_room < 0 || e->to_room >= top_of_world)
      sprintf(buf, "&1&RNUM OUT OF RANGE: %d&0", e->to_room);
   else
      sprintf(buf, "%d", world[e->to_room].vnum);
   return buf;
}

/***************************************************************************
 * $Log: exits.c,v $
 * Revision 1.4  2008/08/21 08:01:20  jps
 * Tweak the showing of exit descs in redit.
 *
 * Revision 1.3  2008/08/21 07:10:14  jps
 * Changed the way redit sees exit destinations. It's more informative and less crashy.
 *
 * Revision 1.2  2008/05/17 22:03:01  jps
 * Moving room-related code into rooms.h and rooms.c.
 *
 * Revision 1.1  2008/05/17 04:32:16  jps
 * Initial revision
 *
 ***************************************************************************/
@


1.4
log
@Tweak the showing of exit descs in redit.
@
text
@d2 1
a2 1
 * $Id: exits.c,v 1.3 2008/08/21 07:10:14 jps Exp jps $
d24 1
d103 3
@


1.3
log
@Changed the way redit sees exit destinations. It's more informative and less crashy.
@
text
@d2 1
a2 1
 * $Id: exits.c,v 1.2 2008/05/17 22:03:01 jps Exp jps $
d23 1
a23 1

d66 2
d71 2
d76 15
a90 2
   if (e->exit_info & EX_DESCRIPT)
      return "description";
d102 3
@


1.2
log
@Moving room-related code into rooms.h and rooms.c.
@
text
@d2 1
a2 1
 * $Id: exits.c,v 1.1 2008/05/17 04:32:16 jps Exp jps $
d22 1
d66 17
d85 3
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id$
d19 3
d36 29
d66 4
a69 1
 * $Log$
@
