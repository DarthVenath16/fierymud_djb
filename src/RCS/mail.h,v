head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2008.02.16.20.31.32;	author myc;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.13.02.32.10;	author jjl;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.23.02.26.40;	author rsd;	state Exp;
branches;
next	1.5;

1.5
date	99.09.05.07.00.39;	author jimmy;	state Exp;
branches;
next	1.4;

1.4
date	99.04.09.04.14.32;	author dce;	state Exp;
branches;
next	1.3;

1.3
date	99.04.08.16.56.24;	author dce;	state Exp;
branches;
next	1.2;

1.2
date	99.01.31.16.47.34;	author mud;	state Exp;
branches;
next	1.1;

1.1
date	99.01.29.01.23.31;	author mud;	state Exp;
branches;
next	;


desc
@/* ************************************************************************
*   File: mail.h                                        Part of CircleMUD *
*  Usage: header file for mail system                                     *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */

/******* MUD MAIL SYSTEM HEADER FILE *********************
 ***     written by Jeremy Elson (jelson@@cs.jhu.edu)   ***
 ********************************************************/

/* INSTALLATION INSTRUCTIONS in MAIL.C */

/* You can modify the following constants to fit your own MUD.  */

/* minimum level a player must be to send mail	*/
#define MIN_MAIL_LEVEL 2

/* # of gold coins required to send mail	*/
#define STAMP_PRICE 150

/* Maximum size of mail in bytes (arbitrary)	*/
#define MAX_MAIL_SIZE 4096

/* size of mail file allocation blocks		*/
#define BLOCK_SIZE 100

/*
 * NOTE:  Make sure that your block size is big enough -- if not,
 * HEADER_BLOCK_DATASIZE will end up negative.  This is a bad thing.
 * Check the define below to make sure it is >0 when choosing values
 * for NAME_SIZE and BLOCK_SIZE.  100 is a nice round number for
 * BLOCK_SIZE and is the default ... why bother trying to change it
 * anyway?
 *
 * The mail system will always allocate disk space in chunks of size
 * BLOCK_SIZE.
 */

/* USER CHANGABLE DEFINES ABOVE **
***************************************************************************
**   DON'T TOUCH DEFINES BELOW  */

int	scan_file(void);
int	has_mail(long recipient);
void	store_mail(long to, long from, int vnum, char *message_pointer);
char	*read_delete(long recipient, int *obj_vnum);


#define HEADER_BLOCK  -1
#define LAST_BLOCK    -2
#define DELETED_BLOCK -3

/*
 * note: next_block is part of header_blk in a data block; we can't combine
 * them here because we have to be able to differentiate a data block from a
 * header block when booting mail system.
 */

struct header_data_type {
   long	next_block;		/* if header block, link to next block	*/
   long from;			/* idnum of the mail's sender		*/
   long to;			/* idnum of mail's recipient		*/
   sh_int vnum;
   time_t mail_time;		/* when was the letter mailed?		*/
};

/* size of the data part of a header block */
#define HEADER_BLOCK_DATASIZE \
	(BLOCK_SIZE - sizeof(long) - sizeof(struct header_data_type) - sizeof(char))

/* size of the data part of a data block */
#define DATA_BLOCK_DATASIZE (BLOCK_SIZE - sizeof(long) - sizeof(char))

/* note that an extra space is allowed in all string fields for the
   terminating null character.  */

struct header_block_type_d {
   long	block_type;		/* is this a header or data block?	*/
   struct header_data_type header_data;	/* other header data		*/
   char	txt[HEADER_BLOCK_DATASIZE+1]; /* actual text plus 1 for null	*/
};

struct data_block_type_d {
   long	block_type;		/* -1 if header block, -2 if last data block
      				   in mail, otherwise a link to the next */
   char	txt[DATA_BLOCK_DATASIZE+1]; /* actual text plus 1 for null	*/
};

typedef struct header_block_type_d header_block_type;
typedef struct data_block_type_d data_block_type;

struct position_list_type_d {
   long	position;
   struct position_list_type_d *next;
};

typedef struct position_list_type_d position_list_type;

struct mail_index_type_d {
   long recipient;			/* who is this mail for?	*/
   position_list_type *list_start;	/* list of mail positions	*/
   struct mail_index_type_d *next;	/* link to next one		*/
};

typedef struct mail_index_type_d mail_index_type;
@


1.8
log
@Adding function to free mail index at program termination.
@
text
@/***************************************************************************
 * $Id: mail.h,v 1.7 2002/09/13 02:32:10 jjl Exp myc $
 ***************************************************************************/
/***************************************************************************
 *   File: mail.h                                        Part of FieryMUD  *
 *  Usage: header file for mail system                                     *
 *                                                                         *
 *  All rights reserved.  See license.doc for complete information.        *
 *                                                                         *
 *  FieryMUD Copyright (C) 1998, 1999, 2000 by the Fiery Consortium        *
 *  FieryMUD is based on CircleMUD Copyright (C) 1993, 94 by the Trustees  *
 *  of the Johns Hopkins University                                        *
 *  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
 ***************************************************************************/

/******* MUD MAIL SYSTEM HEADER FILE *********************
 ***     written by Jeremy Elson (jelson@@cs.jhu.edu)   ***
 ********************************************************/

/* INSTALLATION INSTRUCTIONS in MAIL.C */

/* You can modify the following constants to fit your own MUD.  */

/* minimum level a player must be to send mail	*/
#define MIN_MAIL_LEVEL 2

/* # of silver coins required to send mail	*/
#define STAMP_PRICE 200

/* Maximum size of mail in bytes (arbitrary)	*/
#define MAX_MAIL_SIZE 4096

/* size of mail file allocation blocks		*/
#define BLOCK_SIZE 100

/*
 * NOTE:  Make sure that your block size is big enough -- if not,
 * HEADER_BLOCK_DATASIZE will end up negative.  This is a bad thing.
 * Check the define below to make sure it is >0 when choosing values
 * for NAME_SIZE and BLOCK_SIZE.  100 is a nice round number for
 * BLOCK_SIZE and is the default ... why bother trying to change it
 * anyway?
 *
 * The mail system will always allocate disk space in chunks of size
 * BLOCK_SIZE.
 */

/* USER CHANGABLE DEFINES ABOVE **
***************************************************************************
**   DON'T TOUCH DEFINES BELOW  */

int	scan_file(void);
int	has_mail(long recipient);
void	store_mail(long to, long from, int vnum, char *message_pointer);
char	*read_delete(long recipient, int *obj_vnum);
void	free_mail_index(void);

#define HEADER_BLOCK  -1
#define LAST_BLOCK    -2
#define DELETED_BLOCK -3

/*
 * note: next_block is part of header_blk in a data block; we can't combine
 * them here because we have to be able to differentiate a data block from a
 * header block when booting mail system.
 */

struct header_data_type {
   long	next_block;		/* if header block, link to next block	*/
   long from;			/* idnum of the mail's sender		*/
   long to;			/* idnum of mail's recipient		*/
   sh_int vnum;
   time_t mail_time;		/* when was the letter mailed?		*/
};

/* size of the data part of a header block */
#define HEADER_BLOCK_DATASIZE \
	(BLOCK_SIZE - sizeof(long) - sizeof(struct header_data_type) - sizeof(char))

/* size of the data part of a data block */
#define DATA_BLOCK_DATASIZE (BLOCK_SIZE - sizeof(long) - sizeof(char))

/* note that an extra space is allowed in all string fields for the
   terminating null character.  */

struct header_block_type_d {
   long	block_type;		/* is this a header or data block?	*/
   struct header_data_type header_data;	/* other header data		*/
   char	txt[HEADER_BLOCK_DATASIZE+1]; /* actual text plus 1 for null	*/
};

struct data_block_type_d {
   long	block_type;		/* -1 if header block, -2 if last data block
      				   in mail, otherwise a link to the next */
   char	txt[DATA_BLOCK_DATASIZE+1]; /* actual text plus 1 for null	*/
};

typedef struct header_block_type_d header_block_type;
typedef struct data_block_type_d data_block_type;

struct position_list_type_d {
   long	position;
   struct position_list_type_d *next;
};

typedef struct position_list_type_d position_list_type;

struct mail_index_type_d {
   long recipient;			/* who is this mail for?	*/
   position_list_type *list_start;	/* list of mail positions	*/
   struct mail_index_type_d *next;	/* link to next one		*/
};

typedef struct mail_index_type_d mail_index_type;

/***************************************************************************
 * $Log: mail.h,v $
 * Revision 1.7  2002/09/13 02:32:10  jjl
 * Updated header comments
 *
 * Revision 1.6  2000/11/23 02:26:40  rsd
 * Altered the comment header and added the rlog messages
 * from prior to the addition of the $log$ string.
 *
 * Revision 1.5  1999/09/05 07:00:39  jimmy
 * Added RCS Log and Id strings to each source file
 *
 * Revision 1.4  1999/04/09 04:14:32  dce
 * Allow any type of coins.
 *
 * Revision 1.3  1999/04/08 16:56:24  dce
 * Mail is back!
 *
 * Revision 1.2  1999/01/31 16:47:34  mud
 * Changed price for stamp to 5, I hope that will mean 5 copper
 *
 * Revision 1.1  1999/01/29 01:23:31 mud
 * Initial revision
 *
 ***************************************************************************/
@


1.7
log
@Updated header comments
@
text
@d2 1
a2 1
 * $Id: mail.h,v 1.6 2000/11/23 02:26:40 rsd Exp $
d56 1
a56 1

d118 3
@


1.6
log
@Altered the comment header and added the rlog messages
from prior to the addition of the $log$ string.
@
text
@d1 3
a3 1
// $Id: mail.h,v 1.5 1999/09/05 07:00:39 jimmy Exp $
d116 22
a137 16
// $Log: mail.h,v $
// Revision 1.5  1999/09/05 07:00:39  jimmy
// Added RCS Log and Id strings to each source file
//
// Revision 1.4  1999/04/09 04:14:32  dce
// Allow any type of coins.
//
// Revision 1.3  1999/04/08 16:56:24  dce
// Mail is back!
//
// Revision 1.2  1999/01/31 16:47:34  mud
// Changed price for stamp to 5, I hope that will mean 5 copper
//
// Revision 1.1  1999/01/29 01:23:31 mud
// Initial revision
//
@


1.5
log
@Added RCS Log and Id strings to each source file
@
text
@d1 12
a12 10
// $Id$
/* ************************************************************************
*   File: mail.h                                        Part of CircleMUD *
*  Usage: header file for mail system                                     *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */
d113 17
a129 1
// $Log$
@


1.4
log
@Allow any type of coins.
@
text
@d1 1
d111 1
@


1.3
log
@Mail is back!
@
text
@d23 1
a23 1
#define STAMP_PRICE 2
@


1.2
log
@Changed price for stamp to 5, I hope that iwill mean 5 copper
@
text
@d22 2
a23 2
/* # of gold coins required to send mail	*/
#define STAMP_PRICE 5
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
#define STAMP_PRICE 150
@
