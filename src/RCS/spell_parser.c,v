head	1.192;
access;
symbols;
locks; strict;
comment	@ * @;


1.192
date	2011.08.06.15.22.52;	author rsd;	state Exp;
branches;
next	1.191;

1.191
date	2010.06.05.14.56.27;	author mud;	state Exp;
branches;
next	1.190;

1.190
date	2009.07.18.01.17.23;	author myc;	state Exp;
branches;
next	1.189;

1.189
date	2009.06.11.13.36.05;	author myc;	state Exp;
branches;
next	1.188;

1.188
date	2009.05.22.17.38.50;	author myc;	state Exp;
branches;
next	1.187;

1.187
date	2009.03.21.06.36.13;	author myc;	state Exp;
branches;
next	1.186;

1.186
date	2009.03.21.06.32.37;	author jps;	state Exp;
branches;
next	1.185;

1.185
date	2009.03.20.16.06.04;	author jps;	state Exp;
branches;
next	1.184;

1.184
date	2009.03.20.06.22.37;	author myc;	state Exp;
branches;
next	1.183;

1.183
date	2009.03.20.06.15.17;	author myc;	state Exp;
branches;
next	1.182;

1.182
date	2009.03.09.16.57.47;	author myc;	state Exp;
branches;
next	1.181;

1.181
date	2009.03.09.03.26.34;	author jps;	state Exp;
branches;
next	1.180;

1.180
date	2009.03.08.23.34.14;	author jps;	state Exp;
branches;
next	1.179;

1.179
date	2009.03.03.19.43.44;	author myc;	state Exp;
branches;
next	1.178;

1.178
date	2009.02.18.19.48.08;	author myc;	state Exp;
branches;
next	1.177;

1.177
date	2009.02.11.17.03.39;	author myc;	state Exp;
branches;
next	1.176;

1.176
date	2009.02.05.19.20.56;	author myc;	state Exp;
branches;
next	1.175;

1.175
date	2009.02.05.16.40.34;	author myc;	state Exp;
branches;
next	1.174;

1.174
date	2009.01.16.23.36.34;	author myc;	state Exp;
branches;
next	1.173;

1.173
date	2008.10.14.02.24.42;	author myc;	state Exp;
branches;
next	1.172;

1.172
date	2008.09.21.21.04.20;	author jps;	state Exp;
branches;
next	1.171;

1.171
date	2008.09.20.07.27.45;	author jps;	state Exp;
branches;
next	1.170;

1.170
date	2008.09.20.06.57.07;	author jps;	state Exp;
branches;
next	1.169;

1.169
date	2008.09.13.16.03.28;	author jps;	state Exp;
branches;
next	1.168;

1.168
date	2008.09.11.02.50.02;	author jps;	state Exp;
branches;
next	1.167;

1.167
date	2008.09.09.08.23.37;	author jps;	state Exp;
branches;
next	1.166;

1.166
date	2008.08.29.16.55.00;	author myc;	state Exp;
branches;
next	1.165;

1.165
date	2008.08.25.00.20.33;	author myc;	state Exp;
branches;
next	1.164;

1.164
date	2008.08.01.05.20.20;	author jps;	state Exp;
branches;
next	1.163;

1.163
date	2008.07.29.17.56.03;	author jps;	state Exp;
branches;
next	1.162;

1.162
date	2008.06.19.18.53.12;	author myc;	state Exp;
branches;
next	1.161;

1.161
date	2008.06.07.19.06.46;	author myc;	state Exp;
branches;
next	1.160;

1.160
date	2008.05.18.22.53.42;	author jps;	state Exp;
branches;
next	1.159;

1.159
date	2008.05.18.20.16.11;	author jps;	state Exp;
branches;
next	1.158;

1.158
date	2008.05.18.02.02.39;	author jps;	state Exp;
branches;
next	1.157;

1.157
date	2008.05.12.03.39.07;	author jps;	state Exp;
branches;
next	1.156;

1.156
date	2008.05.12.02.50.43;	author jps;	state Exp;
branches;
next	1.155;

1.155
date	2008.04.14.08.36.53;	author jps;	state Exp;
branches;
next	1.154;

1.154
date	2008.04.14.02.31.37;	author jps;	state Exp;
branches;
next	1.153;

1.153
date	2008.04.13.22.24.26;	author jps;	state Exp;
branches;
next	1.152;

1.152
date	2008.04.12.21.29.10;	author jps;	state Exp;
branches;
next	1.151;

1.151
date	2008.04.12.21.13.18;	author jps;	state Exp;
branches;
next	1.150;

1.150
date	2008.04.07.03.02.54;	author jps;	state Exp;
branches;
next	1.149;

1.149
date	2008.04.02.03.24.44;	author myc;	state Exp;
branches;
next	1.148;

1.148
date	2008.03.29.16.27.20;	author jps;	state Exp;
branches;
next	1.147;

1.147
date	2008.03.28.17.54.53;	author myc;	state Exp;
branches;
next	1.146;

1.146
date	2008.03.24.08.41.42;	author jps;	state Exp;
branches;
next	1.145;

1.145
date	2008.03.10.20.46.55;	author myc;	state Exp;
branches;
next	1.144;

1.144
date	2008.03.09.08.58.54;	author jps;	state Exp;
branches;
next	1.143;

1.143
date	2008.03.08.22.29.06;	author myc;	state Exp;
branches;
next	1.142;

1.142
date	2008.03.06.05.11.51;	author myc;	state Exp;
branches;
next	1.141;

1.141
date	2008.03.05.03.03.54;	author myc;	state Exp;
branches;
next	1.140;

1.140
date	2008.02.23.01.03.54;	author myc;	state Exp;
branches;
next	1.139;

1.139
date	2008.02.16.20.31.32;	author myc;	state Exp;
branches;
next	1.138;

1.138
date	2008.02.09.21.07.50;	author myc;	state Exp;
branches;
next	1.137;

1.137
date	2008.02.09.04.27.47;	author myc;	state Exp;
branches;
next	1.136;

1.136
date	2008.02.02.04.27.55;	author myc;	state Exp;
branches;
next	1.135;

1.135
date	2008.01.29.21.02.31;	author myc;	state Exp;
branches;
next	1.134;

1.134
date	2008.01.29.16.51.12;	author myc;	state Exp;
branches;
next	1.133;

1.133
date	2008.01.27.21.14.59;	author myc;	state Exp;
branches;
next	1.132;

1.132
date	2008.01.26.23.19.28;	author jps;	state Exp;
branches;
next	1.131;

1.131
date	2008.01.26.14.26.31;	author jps;	state Exp;
branches;
next	1.130;

1.130
date	2008.01.26.12.53.45;	author jps;	state Exp;
branches;
next	1.129;

1.129
date	2008.01.26.12.31.19;	author jps;	state Exp;
branches;
next	1.128;

1.128
date	2008.01.24.13.17.50;	author jps;	state Exp;
branches;
next	1.127;

1.127
date	2008.01.23.14.14.41;	author jps;	state Exp;
branches;
next	1.126;

1.126
date	2008.01.22.06.25.23;	author jps;	state Exp;
branches;
next	1.125;

1.125
date	2008.01.14.21.54.19;	author myc;	state Exp;
branches;
next	1.124;

1.124
date	2008.01.14.18.54.11;	author myc;	state Exp;
branches;
next	1.123;

1.123
date	2008.01.13.23.06.04;	author myc;	state Exp;
branches;
next	1.122;

1.122
date	2008.01.13.06.00.25;	author myc;	state Exp;
branches;
next	1.121;

1.121
date	2008.01.13.03.19.53;	author myc;	state Exp;
branches;
next	1.120;

1.120
date	2008.01.12.23.13.20;	author myc;	state Exp;
branches;
next	1.119;

1.119
date	2008.01.07.11.56.06;	author jps;	state Exp;
branches;
next	1.118;

1.118
date	2008.01.07.10.44.46;	author jps;	state Exp;
branches;
next	1.117;

1.117
date	2008.01.06.23.50.47;	author jps;	state Exp;
branches;
next	1.116;

1.116
date	2008.01.06.20.39.38;	author jps;	state Exp;
branches;
next	1.115;

1.115
date	2008.01.05.05.35.34;	author jps;	state Exp;
branches;
next	1.114;

1.114
date	2008.01.04.04.30.29;	author jps;	state Exp;
branches;
next	1.113;

1.113
date	2008.01.03.12.44.03;	author jps;	state Exp;
branches;
next	1.112;

1.112
date	2007.12.31.04.43.33;	author jps;	state Exp;
branches;
next	1.111;

1.111
date	2007.12.31.02.00.57;	author jps;	state Exp;
branches;
next	1.110;

1.110
date	2007.12.21.04.49.05;	author jps;	state Exp;
branches;
next	1.109;

1.109
date	2007.12.19.20.56.23;	author myc;	state Exp;
branches;
next	1.108;

1.108
date	2007.11.25.00.04.59;	author jps;	state Exp;
branches;
next	1.107;

1.107
date	2007.11.18.16.51.55;	author myc;	state Exp;
branches;
next	1.106;

1.106
date	2007.10.27.21.49.34;	author myc;	state Exp;
branches;
next	1.105;

1.105
date	2007.10.27.18.06.36;	author myc;	state Exp;
branches;
next	1.104;

1.104
date	2007.10.25.20.40.24;	author myc;	state Exp;
branches;
next	1.103;

1.103
date	2007.10.13.05.07.24;	author myc;	state Exp;
branches;
next	1.102;

1.102
date	2007.10.11.20.14.48;	author myc;	state Exp;
branches;
next	1.101;

1.101
date	2007.10.02.02.52.27;	author myc;	state Exp;
branches;
next	1.100;

1.100
date	2007.09.28.20.49.35;	author myc;	state Exp;
branches;
next	1.99;

1.99
date	2007.09.20.21.20.43;	author myc;	state Exp;
branches;
next	1.98;

1.98
date	2007.09.15.15.36.48;	author myc;	state Exp;
branches;
next	1.97;

1.97
date	2007.09.15.05.03.46;	author myc;	state Exp;
branches;
next	1.96;

1.96
date	2007.09.11.16.34.24;	author myc;	state Exp;
branches;
next	1.95;

1.95
date	2007.09.09.01.20.14;	author jps;	state Exp;
branches;
next	1.94;

1.94
date	2007.09.07.01.37.47;	author jps;	state Exp;
branches;
next	1.93;

1.93
date	2007.09.04.06.49.19;	author myc;	state Exp;
branches;
next	1.92;

1.92
date	2007.08.30.08.51.25;	author jps;	state Exp;
branches;
next	1.91;

1.91
date	2007.08.27.21.18.00;	author myc;	state Exp;
branches;
next	1.90;

1.90
date	2007.08.26.22.50.58;	author jps;	state Exp;
branches;
next	1.89;

1.89
date	2007.08.26.21.11.12;	author jps;	state Exp;
branches;
next	1.88;

1.88
date	2007.08.26.01.55.41;	author myc;	state Exp;
branches;
next	1.87;

1.87
date	2007.08.24.17.11.47;	author myc;	state Exp;
branches;
next	1.86;

1.86
date	2007.08.23.00.32.24;	author jps;	state Exp;
branches;
next	1.85;

1.85
date	2007.08.14.22.43.07;	author myc;	state Exp;
branches;
next	1.84;

1.84
date	2007.08.07.01.31.10;	author jps;	state Exp;
branches;
next	1.83;

1.83
date	2007.08.05.20.21.51;	author myc;	state Exp;
branches;
next	1.82;

1.82
date	2007.08.04.19.30.49;	author myc;	state Exp;
branches;
next	1.81;

1.81
date	2007.08.02.04.19.04;	author jps;	state Exp;
branches;
next	1.80;

1.80
date	2007.08.02.00.23.53;	author myc;	state Exp;
branches;
next	1.79;

1.79
date	2007.07.31.07.39.31;	author jps;	state Exp;
branches;
next	1.78;

1.78
date	2007.07.04.02.21.58;	author myc;	state Exp;
branches;
next	1.77;

1.77
date	2007.06.16.00.15.49;	author myc;	state Exp;
branches;
next	1.76;

1.76
date	2007.05.28.22.13.03;	author jps;	state Exp;
branches;
next	1.75;

1.75
date	2007.05.28.18.57.44;	author jps;	state Exp;
branches;
next	1.74;

1.74
date	2007.05.28.17.39.22;	author jps;	state Exp;
branches;
next	1.73;

1.73
date	2007.05.24.05.37.03;	author jps;	state Exp;
branches;
next	1.72;

1.72
date	2007.05.11.21.03.12;	author myc;	state Exp;
branches;
next	1.71;

1.71
date	2007.05.11.20.13.28;	author myc;	state Exp;
branches;
next	1.70;

1.70
date	2007.04.25.06.22.01;	author jps;	state Exp;
branches;
next	1.69;

1.69
date	2007.04.19.07.03.14;	author myc;	state Exp;
branches;
next	1.68;

1.68
date	2007.04.19.00.53.54;	author jps;	state Exp;
branches;
next	1.67;

1.67
date	2007.04.17.23.38.03;	author myc;	state Exp;
branches;
next	1.66;

1.66
date	2007.03.27.04.27.05;	author myc;	state Exp;
branches;
next	1.65;

1.65
date	2007.03.20.19.43.53;	author jps;	state Exp;
branches;
next	1.64;

1.64
date	2007.02.20.17.16.27;	author myc;	state Exp;
branches;
next	1.63;

1.63
date	2007.02.14.03.54.53;	author myc;	state Exp;
branches;
next	1.62;

1.62
date	2006.12.19.04.36.53;	author dce;	state Exp;
branches;
next	1.61;

1.61
date	2006.11.20.04.42.36;	author jps;	state Exp;
branches;
next	1.60;

1.60
date	2006.11.20.03.10.59;	author jps;	state Exp;
branches;
next	1.59;

1.59
date	2006.11.18.21.04.29;	author jps;	state Exp;
branches;
next	1.58;

1.58
date	2006.11.18.08.17.39;	author jps;	state Exp;
branches;
next	1.57;

1.57
date	2006.11.18.04.26.32;	author jps;	state Exp;
branches;
next	1.56;

1.56
date	2006.11.13.19.24.00;	author jps;	state Exp;
branches;
next	1.55;

1.55
date	2006.11.13.18.37.44;	author jps;	state Exp;
branches;
next	1.54;

1.54
date	2006.11.13.16.55.03;	author jps;	state Exp;
branches;
next	1.53;

1.53
date	2006.11.08.08.07.55;	author jps;	state Exp;
branches;
next	1.52;

1.52
date	2006.11.08.07.59.43;	author jps;	state Exp;
branches;
next	1.51;

1.51
date	2006.07.20.07.41.49;	author cjd;	state Exp;
branches;
next	1.50;

1.50
date	2002.12.19.07.41.09;	author rls;	state Exp;
branches;
next	1.49;

1.49
date	2002.10.14.02.16.08;	author jjl;	state Exp;
branches;
next	1.48;

1.48
date	2002.09.29.03.18.31;	author jjl;	state Exp;
branches;
next	1.47;

1.47
date	2002.09.15.03.56.46;	author jjl;	state Exp;
branches;
next	1.46;

1.46
date	2002.09.13.02.32.10;	author jjl;	state Exp;
branches;
next	1.45;

1.45
date	2002.07.16.23.25.38;	author rls;	state Exp;
branches;
next	1.44;

1.44
date	2002.07.16.23.22.54;	author rls;	state Exp;
branches;
next	1.43;

1.43
date	2002.03.30.19.31.02;	author dce;	state Exp;
branches;
next	1.42;

1.42
date	2002.03.26.04.52.29;	author rls;	state Exp;
branches;
next	1.41;

1.41
date	2002.03.26.04.25.58;	author rls;	state Exp;
branches;
next	1.40;

1.40
date	2002.02.25.11.01.14;	author rls;	state Exp;
branches;
next	1.39;

1.39
date	2001.01.26.23.53.00;	author mtp;	state Exp;
branches;
next	1.38;

1.38
date	2000.12.18.15.48.24;	author rsd;	state Exp;
branches;
next	1.37;

1.37
date	2000.11.25.02.33.15;	author rsd;	state Exp;
branches;
next	1.36;

1.36
date	2000.11.16.00.17.38;	author rsd;	state Exp;
branches;
next	1.35;

1.35
date	2000.10.05.03.12.10;	author rsd;	state Exp;
branches;
next	1.34;

1.34
date	2000.04.22.22.41.33;	author rsd;	state Exp;
branches;
next	1.33;

1.33
date	2000.04.15.23.13.08;	author rsd;	state Exp;
branches;
next	1.32;

1.32
date	2000.03.28.06.55.09;	author cso;	state Exp;
branches;
next	1.31;

1.31
date	2000.03.26.21.25.24;	author cso;	state Exp;
branches;
next	1.30;

1.30
date	2000.03.24.23.52.23;	author rsd;	state Exp;
branches;
next	1.29;

1.29
date	2000.03.18.06.22.54;	author rsd;	state Exp;
branches;
next	1.28;

1.28
date	99.11.29.00.05.28;	author cso;	state Exp;
branches;
next	1.27;

1.27
date	99.11.23.15.48.23;	author jimmy;	state Exp;
branches;
next	1.26;

1.26
date	99.11.21.00.22.07;	author jimmy;	state Exp;
branches;
next	1.25;

1.25
date	99.11.19.04.29.49;	author rsd;	state Exp;
branches;
next	1.24;

1.24
date	99.10.19.18.01.03;	author jimmy;	state Exp;
branches;
next	1.23;

1.23
date	99.10.08.17.49.54;	author rsd;	state Exp;
branches;
next	1.22;

1.22
date	99.09.18.16.46.06;	author dce;	state Exp;
branches;
next	1.21;

1.21
date	99.09.05.07.00.39;	author jimmy;	state Exp;
branches;
next	1.20;

1.20
date	99.08.28.01.06.50;	author mtp;	state Exp;
branches;
next	1.19;

1.19
date	99.08.18.19.23.42;	author mud;	state Exp;
branches;
next	1.18;

1.18
date	99.07.24.03.16.01;	author jimmy;	state Exp;
branches;
next	1.17;

1.17
date	99.07.24.01.28.40;	author jimmy;	state Exp;
branches;
next	1.16;

1.16
date	99.07.22.17.43.59;	author jimmy;	state Exp;
branches;
next	1.15;

1.15
date	99.07.20.19.45.51;	author jimmy;	state Exp;
branches;
next	1.14;

1.14
date	99.07.15.03.27.34;	author jimmy;	state Exp;
branches;
next	1.13;

1.13
date	99.07.14.19.24.03;	author jimmy;	state Exp;
branches;
next	1.12;

1.12
date	99.05.26.01.55.59;	author mud;	state Exp;
branches;
next	1.11;

1.11
date	99.04.18.20.12.54;	author dce;	state Exp;
branches;
next	1.10;

1.10
date	99.03.24.23.43.16;	author jimmy;	state Exp;
branches;
next	1.9;

1.9
date	99.03.10.00.03.37;	author dce;	state Exp;
branches;
next	1.8;

1.8
date	99.03.08.23.24.48;	author dce;	state Exp;
branches;
next	1.7;

1.7
date	99.03.08.20.22.35;	author dce;	state Exp;
branches;
next	1.6;

1.6
date	99.03.07.05.01.09;	author dce;	state Exp;
branches;
next	1.5;

1.5
date	99.03.03.20.11.02;	author jimmy;	state Exp;
branches;
next	1.4;

1.4
date	99.02.26.22.30.30;	author dce;	state Exp;
branches;
next	1.3;

1.3
date	99.02.13.19.37.12;	author dce;	state Exp;
branches;
next	1.2;

1.2
date	99.02.02.21.12.27;	author mud;	state Exp;
branches;
next	1.1;

1.1
date	99.01.29.01.23.32;	author mud;	state Exp;
branches;
next	;


desc
@/* ************************************************************************
*   File: spell_parser.c                                Part of CircleMUD *
*  Usage: top-level magic routines; outside points of entry to magic sys. *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */


#include "conf.h"
#include "sysdep.h"


#include "structs.h"
#include "utils.h"
#include "interpreter.h"
#include "spells.h"
#include "handler.h"
#include "comm.h"
#include "db.h"

struct spell_info_type spell_info[TOP_SPELL_DEFINE + 1];

#define SINFO spell_info[spellnum]

extern struct room_data *world;
extern void charge_mem(struct char_data *ch, int spellnum);
extern int check_spell_memory(struct char_data *ch, int spellnum);
void complete_spell(struct char_data *ch);
int mag_savingthrow(struct char_data * ch, int type);
void improve_skill(struct char_data *ch, int skill);
void appear(struct char_data * ch);

/*
 * This arrangement is pretty stupid, but the number of skills is limited by
 * the playerfile.  We can arbitrarily increase the number of skills by
 * increasing the space in the playerfile. Meanwhile, this should provide
 * ample slots for skills.
 */

char *spells[] =
{
  "!RESERVED!",			/* 0 - reserved */

  /* SPELLS */

  "armor",			/* 1 */
  "teleport",
  "bless",
  "blindness",
  "burning hands",
  "call lightning",
  "charm person",
  "chill touch",
  "clone",
  "color spray",		/* 10 */
  "control weather",
  "create food",
  "create water",
  "cure blind",
  "cure critic",
  "cure light",
  "curse",
  "detect alignment",
  "detect invisibility",
  "detect magic",		/* 20 */
  "detect poison",
  "dispel evil",
  "earthquake",
  "enchant weapon",
  "energy drain",
  "fireball",
  "harm",
  "heal",
  "invisibility",
  "lightning bolt",		/* 30 */
  "locate object",
  "magic missile",
  "poison",
  "protection from evil",
  "remove curse",
  "sanctuary",
  "shocking grasp",
  "sleep",
  "strength",
  "summon",			/* 40 */
  "ventriloquate",
  "word of recall",
  "remove poison",
  "sense life",
  "animate dead",
  "dispel good",
  "group armor",
  "group heal",
  "group recall",
  "infravision",		/* 50 */
  "waterwalk",
  "stone skin",
  "full heal",
  "full harm",
  "wall of fog",
  "wall of stone",
  "fly",
  "summon dracolich",
  "summon elemental",
  "summon demon",
  "summon greater demon",			/* 61 */
  "dimension door",
  "creeping doom",
  "doom",
  "meteorswarm",	/* 65 */
  "bigbys clenched fist",
  "farsee",
  "haste",
  "blur",
  "vitality",	/* 70 */
  "moonwell",
  "inn strength",
  "darkness",
  "continual light",
  "comprehend language",	/* 75 */
  "cone of cold",
  "ice storm",
  "ice shards",
  "major paralysis",
  "vampiric breath",	/* 80 */
 "resurrect",
  "incendiary nebula",
  "minor paralysis",
  "cause light",
  "cause serious",      /* 85 */
  "cause critical",
  "preserve",
  "cure serious",
  "vigorize light",
  "vigorize serious",	/* 90 */
  "vigorize critic",
  "soulshield",
  "destroy undead",
  "silence",
  "flamestrike",	/* 95 */
  "unholy word",
  "holy word",
  "plane shift",
  "dispel magic",
  "minor creation",	/* 100 */
  "concealment",
  "ray of enfeeblement",
  "levitate",
  "wizard eye",
  "fireshield",	/* 105 */
  "coldshield",
  "minor globe",
  "major globe",
  "disintegrate",
  "harness",	/* 110 */
  "chain lightning",
  "mass invisibility",
  "relocate",
  "fear",
  "circle of light",	/* 115 */
  "divine bolt",
  "prayer",
  "elemental warding",
  "divine ray",
  "lesser exorcism",	/* 120 */
  "lesser invocation",
  "speak in tongues",
  "enlightenment",
  "exorcism",
  "greater invocation",  /* 125 */
  "wings of heaven",
  "banish",
  "word of command",
  "divine essence",
  "heavens gate",	/* 130 */
  "dark presence",
  "demonskin",
  "dark feast",
  "hell bolt",
  "disease",/* 135 */
  "insanity",
  "demonic aspect",
  "hellfire and brimstone",
  "stygian eruption",
  "demonic mutation",/* 140 */
  "wings of hell",
  "sane mind",
  "hell gate",
  "barkskin",
  "night vision",/* 145 */
  "writhing weeds",
  "create spring",
  "nourishment",
  "cloak of gaia",
  "nature embrace",/* 150 */
  "entangle",
  "invigorate",
  "wandering woods",
  "urban renewal",
  "sunray", /* 155 */
  "armor of gaia",
   "fire darts",
   "magic torch",
   "smoke",
   "mirage",/* 160 */
   "flame blade",
   "heatwave",
   "firestorm",
   "melt",
   "circle of fire",/* 165 */
   "immolate",
   "supernova",
   "greater firewalk",
   "negate heat",
   "firewalk",/* 170 */
   "ice darts",
   "ice armor",
   "ice dagger",
   "freezing wind",
   "freeze", /* 175 */
   "wall of ice",
   "iceball",
   "flood",
   "greater waterwalk",
   "negate cold", /* 180 */
   "waterform",
   "douse",
   "rain",
   "reduce",
   "enlarge", /* 185 */
"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 190 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 195 */
"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/*200 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*205 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*210 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*215 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*220 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*225 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*230 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 235 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 240 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 245 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 250 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 255 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 260 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 265 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 270 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 275 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 280 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 285 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 290 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 295 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*300*/
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*305 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*310 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*315 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*320 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*325 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*330 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 335 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 340 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 345 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 350 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 355 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 360 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 365 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 370 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 375 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 380 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 385 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 390 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 395 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 400 */

/* SKILLS */
"backstab",			/* 401 */
"bash",				/*402 */
 "hide",				/* 403 */
"kick",				/* 404 */
"pick lock",			/* 405 */
 "punch",				/* 406 */
 "rescue",			/* 407 */
"sneak",				/* 408 */
"steal",				/*409 */
 "track",				/* 410 */
 "dual wield",			/*411 */
  "double attack",		/* 412 */
 "berserk",			/* 413 */
"springleap",			/* 414 */
  "mount",				/* 415 */
  "riding",			/* 416*/
  "tame",				/* 417*/
"throatcut",			/* 418*/
"doorbash",			/* 419*/
  "parry",				/* 420*/
 "dodge",			/* 421*/
 "ripost",				/* 422*/
 "meditate",			/* 423*/
"quick chant",			/* 424*/
  "utility",			/* 425 */
  "circle",			/* 426*/

  "bodyslam",
  "bind",/*428*/
  "shapechange",
  "switch",	/* 430 */
  "disarm",
  "DISARMUT!",
  "DISARMUT!",
  "guard",
  "breath",	/* 435 */
  "sweep",
  "roar",
  "douse",
 "aware",
 "instant kill",	/* 440 */
"hitall",
 "hunt",
"bandage",
 "first aid",
 "vampiric touch",	/* 445 */
 "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",
"!UNUSED!",	/* 450 */  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 455 */
"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 460 */  "!UNUSED!", "!UNUSED!",
"!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 465 */  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",
"!UNUSED!",	/* 470 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 475 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 480 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 485 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 490 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 495 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 500 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 505 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 510 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 515 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 520 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 525 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 530 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 535 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 540 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 545 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 550 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 555 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 560 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 565 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 570 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 575 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 580 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 585 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 590 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 595 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 600 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 605 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 610 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 615 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 620 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 625 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 630 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 635 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 640 */  "!UNUSED!", "!UNUSED!",
"!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 645 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 650 */



  /* OBJECT SPELLS AND NPC SPELLS/SKILLS */


"identify",				/* 651 */  "fire breath",			/* 652 */
"gas breath",				/* 653 */  "frost breath",			/* 654 */
"acid breath",			/* 655 */  "lightning breath",		/* 656 */

  "\n"				/* the end */
};


struct syllable {
  char *org;
  char *new;
};


struct syllable syls[] = {
  {" ", " "},
  {"ar", "abra"},
  {"ate", "i"},
  {"cau", "kada"},
  {"blind", "nose"},
  {"bur", "mosa"},
  {"cu", "judi"},
  {"de", "oculo"},
  {"dis", "mar"},
  {"ect", "kamina"},
  {"en", "uns"},
  {"gro", "cra"},
  {"light", "dies"},
  {"lo", "hi"},
  {"magi", "kari"},
  {"mon", "bar"},
  {"mor", "zak"},
  {"move", "sido"},
  {"ness", "lacri"},
  {"ning", "illa"},
  {"per", "duda"},
  {"ra", "gru"},
  {"re", "candus"},
  {"son", "sabru"},
  {"tect", "infra"},
  {"tri", "cula"},
  {"ven", "nofo"},
  {"word of", "inset"},
  {"a", "i"}, {"b", "v"}, {"c", "q"}, {"d", "m"}, {"e", "o"}, {"f", "y"}, {"g", "t"},
  {"h", "p"}, {"i", "u"}, {"j", "y"}, {"k", "t"}, {"l", "r"}, {"m", "w"}, {"n", "b"},
  {"o", "a"}, {"p", "s"}, {"q", "d"}, {"r", "f"}, {"s", "g"}, {"t", "h"}, {"u", "e"},
  {"v", "z"}, {"w", "x"}, {"x", "n"}, {"y", "l"}, {"z", "k"}, {"", ""}
};


int mag_manacost(struct char_data * ch, int spellnum)
{
  int mana;

  mana = MAX(SINFO.mana_max - (SINFO.mana_change *
		    (GET_LEVEL(ch) - SINFO.min_level[(int) GET_CLASS(ch)])),
	     SINFO.mana_min);

  return mana;
}


/* say_spell erodes buf, buf1, buf2 */
void say_spell(struct char_data * ch, int spellnum, struct char_data * tch,
	            struct obj_data * tobj)
{
  char lbuf[256];

  struct char_data *i;
  int j, ofs = 0;
if (spellnum == 0)
return;
  *buf = '\0';
  strcpy(lbuf, spells[spellnum]);


/*stop mobs saying this when no one about*/
  j = 0;
  if (IS_NPC(ch))
  for (i = world[ch->in_room].people; i; i = i->next_in_room)
  {
    if (i != ch)
      j++;
  }
  if (!j)
	  return;

  while (*(lbuf + ofs)) {
    for (j = 0; *(syls[j].org); j++) {
      if (!strncmp(syls[j].org, lbuf + ofs, strlen(syls[j].org))) {
	strcat(buf, syls[j].new);
	ofs += strlen(syls[j].org);
      }
    }
  }

  if (tch != NULL && tch->in_room == ch->in_room) {
    if (tch == ch)
      sprintf(lbuf, "$n closes $s eyes and utters the words, '%%s'.");
    else
      sprintf(lbuf, "$n stares at $N and utters the words, '%%s'.");
  } else if (tobj != NULL &&
	     ((tobj->in_room == ch->in_room) || (tobj->carried_by == ch)))
    sprintf(lbuf, "$n stares at $p and utters the words, '%%s'.");
  else
    sprintf(lbuf, "$n utters the words, '%%s'.");

  sprintf(buf1, lbuf, spells[spellnum]);
  sprintf(buf2, lbuf, buf);

  for (i = world[ch->in_room].people; i; i = i->next_in_room)
  {
    if (i == ch || i == tch || !i->desc || !AWAKE(i))
      continue;
    if (GET_CLASS(ch) == GET_CLASS(i) || GET_LEVEL(i) >= LVL_IMMORT)
      perform_act(buf1, ch, tobj, tch, i);
    else
      perform_act(buf2, ch, tobj, tch, i);
  }

  if (tch != NULL && tch != ch && tch->in_room == ch->in_room) {
    sprintf(buf1, "$n stares at you and utters the words, '%s'.",
	    (GET_CLASS(ch) == GET_CLASS(tch))||GET_LEVEL(tch)>=LVL_IMMORT
		? spells[spellnum] : buf);
    act(buf1, FALSE, ch, NULL, tch, TO_VICT);
  }
}


char *skill_name(int num)
{
  int i = 0;

  if (num <= 0) {
    if (num == -1)
      return "UNUSED";
    else
      return "UNDEFINED";
  }

  while (num && *spells[i] != '\n') {
    num--;
    i++;
  }

  if (*spells[i] != '\n')
    return spells[i];
  else
    return "UNDEFINED";
}


int find_skill_num(char *name)
{
  int index = 0, ok;
  char *temp, *temp2;
  char first[256], first2[256];

  while (*spells[++index] != '\n') {
    if (is_abbrev(name, spells[index]))
      return index;

    ok = 1;
    temp = any_one_arg(spells[index], first);
    temp2 = any_one_arg(name, first2);
    while (*first && *first2 && ok) {
      if (!is_abbrev(first2, first))
	ok = 0;
      temp = any_one_arg(temp, first);
      temp2 = any_one_arg(temp2, first2);
    }

    if (ok && !*first2)
      return index;
  }

  return -1;
}



/*
 * This function is the very heart of the entire magic system.  All
 * invocations of all types of magic -- objects, spoken and unspoken PC
 * and NPC spells, the works -- all come through this function eventually.
 * This is also the entry point for non-spoken or unrestricted spells.
 * Spellnum 0 is legal but silently ignored here, to make callers simpler.
 */
int call_magic(struct char_data * caster, struct char_data * cvict,
	     struct obj_data * ovict, int spellnum, int level, int casttype)
{
  int savetype, i, min_spell_level=NUM_SPELL_CIRCLES;

  if (spellnum < 1 || spellnum > TOP_SPELL_DEFINE)
    return 0;

  if (ROOM_FLAGGED(caster->in_room, ROOM_NOMAGIC)) {
    send_to_char("Your magic fizzles out and dies.\r\n", caster);
    act("$n's magic fizzles out and dies.", FALSE, caster, 0, 0, TO_ROOM);
    return 0;
  }
  if (IS_SET(ROOM_FLAGS(caster->in_room), ROOM_PEACEFUL) &&
      (SINFO.violent || IS_SET(SINFO.routines, MAG_DAMAGE))) {
    send_to_char("A flash of white light fills the room, dispelling your "
		 "violent magic!\r\n", caster);
    act("White light from no particular source suddenly fills the room, "
	"then vanishes.", FALSE, caster, 0, 0, TO_ROOM);
    return 0;
  }
  if (cvict && spell_info[spellnum].violent && IS_AFFECTED2(cvict, AFF2_MINOR_GLOBE | AFF2_MAJOR_GLOBE) && spellnum!=SPELL_DISPEL_MAGIC) {
    for(i=0;i<NUM_CLASSES;i++) {
      if(spell_info[spellnum].min_circle[i] < 10)
        min_spell_level = MIN(min_spell_level, spell_info[spellnum].min_circle[i]);
    }
    if((IS_AFFECTED2(cvict, AFF2_MINOR_GLOBE) && min_spell_level <= 3) ||
       (IS_AFFECTED2(cvict, AFF2_MAJOR_GLOBE) && min_spell_level <= 6)){
      act("&1&bThe shimmering globe around your body flares as the spell flows around it.&0", FALSE,caster,0,cvict,TO_VICT);
      act("&1&bThe shimmering globe around $N&1&b's body flares as your spell flows around it.&0", FALSE,caster,0,cvict,TO_CHAR);
      act("&1&bThe shimmering globe around $N&1&b's body flares as $n&1&b's spell flows around it.&0", FALSE,caster,0,cvict,TO_NOTVICT);
      return 0;
    }
  }

  /* determine the type of saving throw */
  switch (casttype) {
  case CAST_STAFF:
  case CAST_SCROLL:
  case CAST_POTION:
  case CAST_WAND:
    savetype = SAVING_ROD;
    break;
  case CAST_SPELL:
    savetype = SAVING_SPELL;
    break;
  case CAST_BREATH:
    savetype = SAVING_BREATH;
    break;
  default:
    savetype = SAVING_BREATH;
    break;
  }


  if (IS_SET(SINFO.routines, MAG_DAMAGE))
    mag_damage(level, caster, cvict, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_AFFECTS))
    mag_affects(level, caster, cvict, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_UNAFFECTS))
    mag_unaffects(level, caster, cvict, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_POINTS))
    mag_points(level, caster, cvict, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_ALTER_OBJS))
    mag_alter_objs(level, caster, ovict, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_GROUPS))
    mag_groups(level, caster, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_MASSES))
    mag_masses(level, caster, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_AREAS))
    mag_areas(level, caster, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_SUMMONS))
    mag_summons(level, caster, ovict, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_CREATIONS))
    mag_creations(level, caster, spellnum);

  if (IS_SET(SINFO.routines, MAG_ROOM))
    mag_room(level, caster, spellnum);

  if (IS_SET(SINFO.routines, MAG_MANUAL))
    switch (spellnum) {
    case SPELL_CHARM:		MANUAL_SPELL(spell_charm); break;
    case SPELL_CREATE_WATER:	MANUAL_SPELL(spell_create_water); break;
    case SPELL_DETECT_POISON:	MANUAL_SPELL(spell_detect_poison); break;
    case SPELL_ENCHANT_WEAPON:  MANUAL_SPELL(spell_enchant_weapon); break;
    case SPELL_IDENTIFY:	MANUAL_SPELL(spell_identify); break;
    case SPELL_LOCATE_OBJECT:   MANUAL_SPELL(spell_locate_object); break;
    case SPELL_SUMMON:		MANUAL_SPELL(spell_summon); break;
    case SPELL_WORD_OF_RECALL:  MANUAL_SPELL(spell_recall); break;
	case SPELL_DIMENSION_DOOR:  MANUAL_SPELL(spell_dimension_door); break;
	 case SPELL_CREEPING_DOOM:  MANUAL_SPELL(spell_creeping_doom); break;
	 case SPELL_MOONWELL:       MANUAL_SPELL(spell_moonwell); break;
	 case SPELL_MAJOR_PARALYSIS: MANUAL_SPELL(spell_major_paralysis);break;
	case SPELL_RESURRECT:	MANUAL_SPELL(spell_resurrect); break;
	case SPELL_INCENDIARY_NEBULA:     MANUAL_SPELL(spell_incendiary_nebula); break;
	case SPELL_PRESERVE:	MANUAL_SPELL(spell_preserve); break;
        case SPELL_PLANE_SHIFT: MANUAL_SPELL(spell_plane_shift); break;
	case SPELL_DISPEL_MAGIC: MANUAL_SPELL(spell_dispel_magic); break;
	case SPELL_MINOR_CREATION: MANUAL_SPELL(spell_minor_creation); break;
	case SPELL_WIZARD_EYE: MANUAL_SPELL(spell_wizard_eye); break;
	case SPELL_TELEPORT: MANUAL_SPELL(spell_teleport); break;
	case SPELL_DISINTEGRATE: MANUAL_SPELL(spell_disintegrate); break;
	case SPELL_MASS_INVIS: MANUAL_SPELL(spell_mass_invis); break;
	case SPELL_RELOCATE: MANUAL_SPELL(spell_relocate); break;
        case SPELL_FIRE_BREATH: MANUAL_SPELL(spell_fire_breath); break;
        case SPELL_FROST_BREATH: MANUAL_SPELL(spell_frost_breath); break;
        case SPELL_GAS_BREATH: MANUAL_SPELL(spell_gas_breath); break;
        case SPELL_ACID_BREATH: MANUAL_SPELL(spell_acid_breath); break;
        case SPELL_LIGHTNING_BREATH: MANUAL_SPELL(spell_lightning_breath);break;
	case SPELL_LESSER_INVOCATION: MANUAL_SPELL(spell_lesser_invocation);break;
	case SPELL_ENLIGHTENMENT: MANUAL_SPELL(spell_enlightenment);break;
	case SPELL_GREATER_INVOCATION: MANUAL_SPELL(spell_greater_invocation);break;
	case SPELL_BANISH: MANUAL_SPELL(spell_banish);break;
	case SPELL_WORD_OF_COMMAND: MANUAL_SPELL(spell_word_of_command);break;
	case SPELL_DIVINE_ESSENCE: MANUAL_SPELL(spell_divine_essence);break;
	case SPELL_HEAVENS_GATE: MANUAL_SPELL(spell_heavens_gate);break;
	case SPELL_DARK_FEAST: MANUAL_SPELL(spell_dark_feast);break;
        case SPELL_HELLS_GATE: MANUAL_SPELL(spell_hells_gate);break;
	case SPELL_WALL_OF_STONE: MANUAL_SPELL(spell_wall_of_stone);break;
	case SPELL_NATURES_EMBRACE: MANUAL_SPELL(spell_natures_embrace);break;
	case SPELL_WANDERING_WOODS: MANUAL_SPELL(spell_wandering_woods);break;
	case SPELL_ARMOR_OF_GAIA: MANUAL_SPELL(spell_armor_of_gaia);break;
	case SPELL_FIRE_DARTS: MANUAL_SPELL(spell_fire_darts);break;
	case SPELL_FLAME_BLADE: MANUAL_SPELL(spell_flame_blade);break;
	case SPELL_MELT: MANUAL_SPELL(spell_melt);break;
	case SPELL_IMMOLATE: MANUAL_SPELL(spell_immolate);break;
	case SPELL_SUPERNOVA: MANUAL_SPELL(spell_supernova);break;
	case SPELL_FIREWALK: MANUAL_SPELL(spell_firewalk);break;
	case SPELL_GREATER_FIREWALK: MANUAL_SPELL(spell_greater_firewalk);break;
	case SPELL_ICE_DARTS: MANUAL_SPELL(spell_ice_darts);break;
	case SPELL_ICE_DAGGER: MANUAL_SPELL(spell_ice_dagger);break;
	case SPELL_WALL_OF_ICE: MANUAL_SPELL(spell_wall_of_ice);break;
	case SPELL_FLOOD: MANUAL_SPELL(spell_flood);break;
	case SPELL_GREATER_WATERWALK: MANUAL_SPELL(spell_greater_waterwalk);break;
	case SPELL_RAIN: MANUAL_SPELL(spell_rain);break;
    }

  return 1;
}

/*
 * mag_objectmagic: This is the entry-point for all magic items.  This should
 * only be called by the 'quaff', 'use', 'recite', etc. routines.
 *
 * For reference, object values 0-3:
 * staff  - [0]	level	[1] max charges	[2] num charges	[3] spell num
 * wand   - [0]	level	[1] max charges	[2] num charges	[3] spell num
 * scroll - [0]	level	[1] spell num	[2] spell num	[3] spell num
 * potion - [0] level	[1] spell num	[2] spell num	[3] spell num
 *
 * Staves and wands will default to level 14 if the level is not specified;
 * the DikuMUD format did not specify staff and wand levels in the world
 * files (this is a CircleMUD enhancement).
 */

void mag_objectmagic(struct char_data * ch, struct obj_data * obj,
		          char *argument)
{
  int i, k;
  struct char_data *tch = NULL, *next_tch;
  struct obj_data *tobj = NULL;

  one_argument(argument, arg);

  k = generic_find(arg, FIND_CHAR_ROOM | FIND_OBJ_INV | FIND_OBJ_ROOM |
		   FIND_OBJ_EQUIP, ch, &tch, &tobj);

  switch (GET_OBJ_TYPE(obj)) {
  case ITEM_STAFF:
    act("You tap $p three times on the ground.", FALSE, ch, obj, 0, TO_CHAR);
    if (obj->action_description)
      act(obj->action_description, FALSE, ch, obj, 0, TO_ROOM);
    else
      act("$n taps $p three times on the ground.", FALSE, ch, obj, 0, TO_ROOM);

    if (GET_OBJ_VAL(obj, 2) <= 0) {
      act("It seems powerless.", FALSE, ch, obj, 0, TO_CHAR);
      act("Nothing seems to happen.", FALSE, ch, obj, 0, TO_ROOM);
    } else {
      GET_OBJ_VAL(obj, 2)--;
      WAIT_STATE(ch, PULSE_VIOLENCE);
      for (tch = world[ch->in_room].people; tch; tch = next_tch) {
	next_tch = tch->next_in_room;
	if (ch == tch)
	  continue;
	if (GET_OBJ_VAL(obj, 0))
	  call_magic(ch, tch, NULL, GET_OBJ_VAL(obj, 3),
		     GET_OBJ_VAL(obj, 0), CAST_STAFF);
	else
	  call_magic(ch, tch, NULL, GET_OBJ_VAL(obj, 3),
		     DEFAULT_STAFF_LVL, CAST_STAFF);
      }
    }
    break;
  case ITEM_WAND:
    if (k == FIND_CHAR_ROOM) {
      if (tch == ch) {
	act("You point $p at yourself.", FALSE, ch, obj, 0, TO_CHAR);
	act("$n points $p at $mself.", FALSE, ch, obj, 0, TO_ROOM);
      } else {
	act("You point $p at $N.", FALSE, ch, obj, tch, TO_CHAR);
	if (obj->action_description != NULL)
	  act(obj->action_description, FALSE, ch, obj, tch, TO_ROOM);
	else
	  act("$n points $p at $N.", TRUE, ch, obj, tch, TO_ROOM);
      }
    } else if (tobj != NULL) {
      act("You point $p at $P.", FALSE, ch, obj, tobj, TO_CHAR);
      if (obj->action_description != NULL)
	act(obj->action_description, FALSE, ch, obj, tobj, TO_ROOM);
      else
	act("$n points $p at $P.", TRUE, ch, obj, tobj, TO_ROOM);
    } else {
      act("At what should $p be pointed?", FALSE, ch, obj, NULL, TO_CHAR);
      return;
    }

    if (GET_OBJ_VAL(obj, 2) <= 0) {
      act("It seems powerless.", FALSE, ch, obj, 0, TO_CHAR);
      act("Nothing seems to happen.", FALSE, ch, obj, 0, TO_ROOM);
      return;
    }
    GET_OBJ_VAL(obj, 2)--;
    WAIT_STATE(ch, PULSE_VIOLENCE);
    if (GET_OBJ_VAL(obj, 0))
      call_magic(ch, tch, tobj, GET_OBJ_VAL(obj, 3),
		 GET_OBJ_VAL(obj, 0), CAST_WAND);
    else
      call_magic(ch, tch, tobj, GET_OBJ_VAL(obj, 3),
		 DEFAULT_WAND_LVL, CAST_WAND);
    break;
  case ITEM_SCROLL:
    if (*arg) {
      if (!k) {
	act("There is nothing to here to affect with $p.", FALSE,
	    ch, obj, NULL, TO_CHAR);
	return;
      }
    } else
      tch = ch;

    act("You recite $p which dissolves.", TRUE, ch, obj, 0, TO_CHAR);
    if (obj->action_description)
      act(obj->action_description, FALSE, ch, obj, NULL, TO_ROOM);
    else
      act("$n recites $p.", FALSE, ch, obj, NULL, TO_ROOM);

    WAIT_STATE(ch, PULSE_VIOLENCE);
    for (i = 1; i < 4; i++)
      if (!(call_magic(ch, tch, tobj, GET_OBJ_VAL(obj, i),
		       GET_OBJ_VAL(obj, 0), CAST_SCROLL)))
	break;

    if (obj != NULL)
      extract_obj(obj);
    break;
  case ITEM_POTION:
    tch = ch;
    act("You quaff $p.", FALSE, ch, obj, NULL, TO_CHAR);
    if (obj->action_description)
      act(obj->action_description, FALSE, ch, obj, NULL, TO_ROOM);
    else
      act("$n quaffs $p.", TRUE, ch, obj, NULL, TO_ROOM);

    WAIT_STATE(ch, PULSE_VIOLENCE);
    for (i = 1; i < 4; i++)
      if (!(call_magic(ch, ch, NULL, GET_OBJ_VAL(obj, i),
		       GET_OBJ_VAL(obj, 0), CAST_POTION)))
	break;

    if (obj != NULL)
      extract_obj(obj);
    break;
  default:
    log("SYSERR: Unknown object_type in mag_objectmagic");
    break;
  }
}


/*
 * cast_spell is used generically to cast any spoken spell, assuming we
 * already have the target char/obj and spell number.  It checks all
 * restrictions, etc., prints the words, etc.
 *
 * Entry point for NPC casts.  Recommended entry point for spells cast
 * by NPCs via specprocs.
 */

int cast_spell(struct char_data * ch, struct char_data * tch,
	           struct obj_data * tobj, int spellnum)
{
  char buf[256];

  if (spellnum < 0 || spellnum > TOP_SPELL_DEFINE) {
    sprintf(buf, "SYSERR: cast_spell trying to call spellnum %d\n", spellnum);
    log(buf);
    return 0;
  }

  if (GET_POS(ch) < SINFO.min_position) {
    switch (GET_POS(ch)) {
      case POS_SLEEPING:
      send_to_char("You dream about great magical powers.\r\n", ch);
      break;
    case POS_RESTING:
      send_to_char("You cannot concentrate while resting.\r\n", ch);
      break;
    case POS_SITTING:
      send_to_char("You can't do this sitting!\r\n", ch);
      break;
    case POS_FIGHTING:
      send_to_char("Impossible!  You can't concentrate enough!\r\n", ch);
      break;
    default:
      send_to_char("You can't do much of anything like this!\r\n", ch);
      break;
    }
    return 0;
  }
  if (IS_AFFECTED(ch, AFF_CHARM) && (ch->master == tch)) {
    send_to_char("You are afraid you might hurt your master!\r\n", ch);
    return 0;
  }
  if ((tch != ch) && IS_SET(SINFO.targets, TAR_SELF_ONLY)) {
    send_to_char("You can only cast this spell upon yourself!\r\n", ch);
    return 0;
  }
  if ((tch == ch) && IS_SET(SINFO.targets, TAR_NOT_SELF)) {
    send_to_char("You cannot cast this spell upon yourself!\r\n", ch);
    return 0;
  }
  if (IS_SET(SINFO.routines, MAG_GROUPS) && !IS_AFFECTED(ch, AFF_GROUP)) {
    send_to_char("You can't cast this spell if you're not in a group!\r\n",ch);
    return 0;
  }
  if(GET_LEVEL(ch) < LVL_IMMORT) {
    if((GET_CLASS(ch) == CLASS_PRIEST || GET_CLASS(ch) == CLASS_PALADIN ||
      GET_CLASS(ch) == CLASS_RANGER) && GET_ALIGNMENT(ch) < 350) {
      send_to_char("Your diety has removed your holy powers!\r\n",ch);
      return 0;
    }
    if((GET_CLASS(ch) == CLASS_DIABOLIST || GET_CLASS(ch) == CLASS_ANTI_PALADIN)
       && GET_ALIGNMENT(ch) > -350) {
      send_to_char("Your diety has removed your unholy powers!\r\n",ch);
      return 0;
    }
  }
  /*send_to_char(OK, ch);*/
  say_spell(ch, spellnum, tch, tobj);

  return (call_magic(ch, tch, tobj, spellnum, GET_LEVEL(ch), CAST_SPELL));
}


/*
 * do_cast is the entry point for PC-casted spells.  It parses the arguments,
 * determines the spell number and finds a target, throws the die to see if
 * the spell can be cast, checks for sufficient mana and subtracts it, and
 * passes control to cast_spell().
 */

ACMD(do_cast)
{
  struct char_data *tch = NULL;
  struct obj_data *tobj = NULL;
  char *s, *t, *misc= '\0';
  int spellnum, i, target = 0;
  int target_status = TARGET_NULL;

  /* get: blank, spell name, target name */
  s = strtok(argument, "'");

  if(AFF2_FLAGGED(ch, AFF2_SILENCE)) {
    send_to_char("Your lips move, but no sound forms.\r\n", ch);
    return;
  }

  if (MOB_FLAGGED(ch, MOB_CASTING))
    return;

  if(PLR_FLAGGED(ch, PLR_CASTING))
  {
      send_to_char("But you are already casting a spell!\r\n",ch);
      return;
  }
if(GET_POS1(ch) < POS1_STANDING){
send_to_char("You are to relaxed..\r\n", ch);
return;
}

  if (s == NULL) {
    send_to_char("Cast what where?\r\n", ch);
 	return;
  }

  s = strtok(NULL, "'");
  if (s == NULL) {
    send_to_char("Spell names must be enclosed in the Holy Magic Symbols: '\r\n", ch);
	return;
  }

  t = strtok(NULL, "\0");

  /* spellnum = search_block(s, spells, 0); */
  spellnum = find_skill_num(s);

  if ((spellnum < 1) || (spellnum > MAX_SPELLS))
  {
    send_to_char("Cast what?!?\r\n", ch);
    return;
  }

  if (IS_NPC(ch))
  {
    if (GET_LEVEL(ch) < SINFO.min_level[(int) GET_CLASS(ch)])
    {
      send_to_char("You do not know that spell!\r\n", ch);
	  return;
    }
  } else
  {
      if (GET_LEVEL(ch) < SINFO.min_level[(int) GET_CLASS(ch)])
      {
         send_to_char("You do not know that spell!\r\n", ch);
         return;

	  }
	  /*spheres banyal*/
/*
   if (SPHERE(ch, FIRE) < SINFO.fire) {
  send_to_char("The message you like to have.\r\n", ch);
  return;
}
if (SPHERE(ch, WATER) < SINFO.water) {
  send_to_char("The message you like to have.\r\n", ch);
  return;
}
if (SPHERE(ch, AIR) < SINFO.air) {
  send_to_char("The message you like to have.\r\n", ch);
  return;
}
if (SPHERE(ch, EARTH) < SINFO.earth) {
  send_to_char("The message you like to have.\r\n", ch);
  return;
}
if (SPHERE(ch, GENERIC) < SINFO.generic) {
  send_to_char("The message you like to have.\r\n", ch);
  return;
}
if (SPHERE(ch, HEALING) < SINFO.healing) {
  send_to_char("The message you like to have.\r\n", ch);
  return;
}
*/
  }

  if (GET_SKILL(ch, spellnum) == 0)
  {
    send_to_char("You are unfamiliar with that spell.\r\n", ch);
	return;
  }

  /* is the spell memorized? PC's only... */
   if((GET_LEVEL(ch) < LVL_IMMORT)&&(!IS_NPC(ch)))
     if(!check_spell_memory(ch, spellnum))
     {
        send_to_char("You do not have that spell memorized!\r\n", ch);
        return;
     }



  /* Find the target */
  if (t != NULL) {
    misc = str_dup(t);
    skip_spaces(&misc);
    one_argument(strcpy(arg, t), t);
    skip_spaces(&t);
  }
  if (IS_SET(SINFO.targets, TAR_IGNORE))
  {
    target = TRUE;
    target_status = TARGET_ALL_ROOM;
  } else if (t != NULL && *t)
  {
    if (!target && (IS_SET(SINFO.targets, TAR_CHAR_ROOM)))
    {
      if ((tch = get_char_room_vis(ch, t)) != NULL){
	  target = TRUE;
	  target_status = TARGET_IN_ROOM;
      }
    }
    if (!target && IS_SET(SINFO.targets, TAR_CHAR_WORLD))
      if ((tch = get_char_vis(ch, t))) {
	target = TRUE;
        target_status = TARGET_IN_WORLD;
      }
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_INV))
      if ((tobj = get_obj_in_list_vis(ch, t, ch->carrying))) {
	target = TRUE;
	target_status = TARGET_IN_INV;
      }
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_EQUIP))
    {
      for (i = 0; !target && i < NUM_WEARS; i++)
	    if (GET_EQ(ch, i) && !str_cmp(t, GET_EQ(ch, i)->name))
        {
	      tobj = GET_EQ(ch, i);
	      target = TRUE;
              target_status = TARGET_EQUIP;
        }
    }
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_ROOM))
      if ((tobj = get_obj_in_list_vis(ch, t, world[ch->in_room].contents))){
	     target = TRUE;
	     target_status = TARGET_IN_ROOM;
      }
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_WORLD))
      if ((tobj = get_obj_vis(ch, t))) {
	    target = TRUE;
 	    target_status = TARGET_IN_WORLD;
      }

  } else
  {			/* if target string is empty */
    if (!target && IS_SET(SINFO.targets, TAR_FIGHT_SELF))
      if (FIGHTING(ch) != NULL)
      {
	    tch = ch;
	    target = TRUE;
	    target_status = TARGET_SELF;
      }
    if (!target && IS_SET(SINFO.targets, TAR_FIGHT_VICT))
      if (FIGHTING(ch) != NULL)
      {
	    tch = FIGHTING(ch);
	    target = TRUE;
            target_status = TARGET_FIGHTING;
      }
    /* if no target specified, and the spell isn't violent, default to self */
    if (!target && IS_SET(SINFO.targets, TAR_CHAR_ROOM) && !SINFO.violent)
    {
      tch = ch;
      target = TRUE;
      target_status = TARGET_SELF;
    }
    if (!target)
    {
      sprintf(buf, "Upon %s should the spell be cast?\r\n", IS_SET(SINFO.targets, TAR_OBJ_ROOM | TAR_OBJ_INV | TAR_OBJ_WORLD) ? "what" : "who");
      send_to_char(buf, ch);
	  return;
    }
  }
/*
  if (target && (tch == ch) && SINFO.violent) {
    send_to_char("You shouldn't cast that on yourself -- could be bad for your health!\r\n", ch);
	return;
  }
*/
  if (!target) {
    send_to_char("Cannot find the target of your spell!\r\n", ch);
	return;
  }

  /* Lets make the basterds pop into view - Banyal*/

if (target && SINFO.violent) {
if (affected_by_spell(ch, SPELL_INVISIBLE))
   appear(ch);
 if (affected_by_spell(ch, SPELL_CONCEALMENT))
     appear(ch);
  REMOVE_BIT(AFF_FLAGS(ch), AFF_INVISIBLE | AFF_HIDE);
  }
  /* at this point, we found the target, we have the spell memorized, */
   /* lets remove the spell from memory and fry the victim! */
   /*charge_mem(ch, spellnum); let's do this AFTER the spell is cast -Nechtrous*/

     /* set ch to casting and setup the casting structure for complete_spell() */
   SET_BIT(PLR_FLAGS(ch), PLR_CASTING);
   if (IS_NPC(ch))
		SET_BIT(MOB_FLAGS(ch), MOB_CASTING);
   ch->casting.spell = spellnum;
   ch->casting.tch = tch;
   ch->casting.obj = tobj;
   ch->casting.misc = misc;
   ch->casting.target_status = target_status;
   if (number(1,102) < GET_SKILL(ch, SKILL_QUICK_CHANT))
     ch->casting.casting_time = (int)(SINFO.cast_time / 2);
   else
     ch->casting.casting_time = SINFO.cast_time;
   improve_skill(ch, SKILL_QUICK_CHANT);

   if(spell_info[ch->casting.spell].violent)
    act("$n starts casting an offensive spell...", TRUE, ch, 0, 0, TO_ROOM);
   else
       act("$n starts casting a spell...", TRUE, ch, 0, 0, TO_ROOM);

   act("You start chanting...", FALSE, ch, 0, 0, TO_CHAR);
   WAIT_STATE(ch, (PULSE_VIOLENCE / 2) * (ch->casting.casting_time + 1));
}

/* character is put into CON_CASTING and cycles through here every 1 second */
void update_casting(void)
{
    extern struct char_data *character_list;
    struct char_data *ch = character_list;
    struct obj_data *obj;
    int i, tick = 0;
    char buf[64];
    int tar_invalid = FALSE, found = FALSE;

    for(;ch;ch = ch->next)
    {
/*I added this if to stop start up lock-up due to trying to cast a spell
 on ch -1 and ch 0 at start of game wake up Banyal*/
if (ch != CON_PLAYING && ch->in_room == NOWHERE)
return;

if((PLR_FLAGGED(ch, PLR_CASTING)) || (MOB_FLAGGED(ch, MOB_CASTING)))
        {
	/* check to make sure target is still valid! Nechtrous */
            if(ch->casting.obj) { /* target is object */
              switch(ch->casting.target_status) {
		case TARGET_IN_ROOM:
                  if(ch->casting.obj->in_room != ch->in_room)
		    tar_invalid = TRUE;
		  break;
		case TARGET_IN_WORLD:
		  break;
		case TARGET_IN_INV:
		  for(obj=ch->carrying;obj;obj=obj->next)
		    if(ch->casting.obj == obj)
		      found = TRUE;
		  if(!found)
		    tar_invalid=TRUE;
		  break;
		case TARGET_EQUIP:
		  for(i=0;i<NUM_WEARS;i++)
		    if(ch->casting.obj == ch->equipment[i])
		      found = TRUE;
		  if(!found)
		    tar_invalid=TRUE;
		  break;
		default:
		  log("SYSERR: Error in update_casting() at obj valid check.");
	      }
	      if(tar_invalid) {
                  if (IS_NPC(ch))
			REMOVE_BIT(MOB_FLAGS(ch), MOB_CASTING);
			REMOVE_BIT(PLR_FLAGS(ch), PLR_CASTING);
                    act("You stop invoking abruptly!", FALSE, ch, 0, 0, TO_CHAR);
                    act("$n stops invoking abruptly!",FALSE, ch, 0, 0, TO_ROOM);
                    continue;
	      }
	    }
            if(ch->casting.tch) /* target is a char */
            {
 	      switch(ch->casting.target_status) {
		case TARGET_IN_ROOM:
                  if(ch->casting.tch->in_room != ch->in_room)
                    tar_invalid = TRUE;
		  break;
		case TARGET_IN_WORLD:
		  break;
		case TARGET_FIGHTING:
		  if(!FIGHTING(ch) || ch->casting.tch != FIGHTING(ch))
		    tar_invalid = TRUE;
		  break;
                /* added case for TARGET_SELF to prevent syserrors */
                case TARGET_SELF:
		  break;
		default:
		  log("SYSERR: Error in update_casting() at char valid check.");
	      }
	      if(tar_invalid) {
                if (IS_NPC(ch))
		  REMOVE_BIT(MOB_FLAGS(ch), MOB_CASTING);
		REMOVE_BIT(PLR_FLAGS(ch), PLR_CASTING);
                act("You stop invoking abruptly!", FALSE, ch, 0, 0, TO_CHAR);
                act("$n stops invoking abruptly!",FALSE, ch, 0, 0, TO_ROOM);
                continue;
	      }
            }


	/*if(number(1, 100) < GET_SKILL(ch, SKILL_QUICK_CHANT))
		ch->casting.casting_time = 0;
*/
            /* is ch done casting? */
	if((ch->casting.casting_time) <= 0)
            {
				if (IS_NPC(ch))
					REMOVE_BIT(MOB_FLAGS(ch), MOB_CASTING);
                REMOVE_BIT(PLR_FLAGS(ch), PLR_CASTING);
                complete_spell(ch);
            }
            else
            {
                memset(buf, 0x0, 64);
                sprintf(buf, "Casting: %s ", skill_name(ch->casting.spell));

                for(i =1; i <= ch->casting.casting_time; i++)
                   strcat(buf, "*");

                tick = 1;
                strcat(buf, "\r\n");

                if(tick)
                    send_to_char(buf, ch);
            }
	/* gonna check quick chant in do_cast  -Nechtrous
	if(ch->casting.casting_time >= 1) {
	  numb = number(1, 100);
	  if (numb - (GET_SKILL(ch, SKILL_QUICK_CHANT)) < -5) {
	    ch->casting.casting_time--;
	    ch->casting.casting_time--;
	  }
          else if (numb - (GET_SKILL(ch, SKILL_QUICK_CHANT)) < 10) {
	    ch->casting.casting_time--;
          } else
	    ch->casting.casting_time--;
	} */
	ch->casting.casting_time--;
    }
  }
}

void complete_spell(struct char_data *ch)
{
int circle_cast;

if(IS_AFFECTED2(ch, AFF2_INSANITY) && !mag_savingthrow(ch, SAVING_PARA)){
  act("$n babbles a bit as a strand of drool drips down $s chin.",TRUE,ch,0,0,TO_ROOM);
  act("Your mind is not in any condition to cast spells.",FALSE,ch,0,0,TO_CHAR);
  act("&1$n&1 stops chanting abruptly!&0", TRUE, ch, 0, 0, TO_ROOM);
  return;
}
if (IS_NPC(ch)) {
	circle_cast = 1 + ((int) ((spell_info[ch->casting.spell].min_level[(int) (GET_CLASS(ch))])/5));
		/*make sure not 0 or greater then 12*/
	circle_cast = MAX(1, MIN(circle_cast, 12));

  /* You throws the dice and you takes your chances.. 101% is total failure */
	if (number(0, 101) > GET_MSKILL(ch, ch->casting.spell)) {
		WAIT_STATE(ch, PULSE_VIOLENCE);
		if (!ch->casting.tch || !skill_message(0, ch, ch->casting.tch, ch->casting.spell))
		{
			send_to_char("You lost your concentration!\r\n", ch);
			act("$n stops chanting abruptly!", TRUE, ch, 0, 0, TO_ROOM);
		}
		if (circle_cast > 0) {
			if (number(1, 2) == 1)
				SET_MEM_MEMED(ch, circle_cast, MAX(0, (GET_MEM_MEMED(ch, circle_cast) -1)));
		}
	} else { /* cast spell returns 1 on success; subtract mana & set waitstate */
		if (GET_MEM_MEMED(ch, circle_cast) > 0) {
			cast_spell(ch, ch->casting.tch, ch->casting.obj, ch->casting.spell);
			WAIT_STATE(ch, PULSE_VIOLENCE * 2);
			SET_MEM_MEMED(ch, circle_cast, MAX(0, (GET_MEM_MEMED(ch, circle_cast) -1)));
         if (spell_info[ch->casting.spell].violent && ch->casting.tch &&
			IS_NPC(ch->casting.tch) && !FIGHTING(ch->casting.tch))
			if(number(0, 4)) {
                        hit(ch->casting.tch, ch, TYPE_UNDEFINED);
                        remember(ch->casting.tch, ch); }
		}
	}
	return;
} else {
	/*pc*/
	/* You throws the dice and you takes your chances.. 101% is total failure */
	if (number(0, 101) > GET_SKILL(ch, ch->casting.spell) &&
           (GET_LEVEL(ch) < spell_info[ch->casting.spell].min_level[(int) GET_CLASS(ch)] + 5) )
	{
		WAIT_STATE(ch, PULSE_VIOLENCE * 2);
		if (!ch->casting.tch || !skill_message(0, ch, ch->casting.tch, ch->casting.spell))
		{
			send_to_char("You lost your concentration!\r\n", ch);
			act("$n stops chanting abruptly!", TRUE, ch, 0, 0, TO_ROOM);
		}
		/*
		if (spell_info[ch->casting.spell].violent && ch->casting.tch
			&& IS_NPC(ch->casting.tch) && !FIGHTING(ch->casting.tch))
			hit(ch->casting.tch, ch, TYPE_UNDEFINED);
		*/
	} else { /* cast spell returns 1 on success; subtract mana & set waitstate */
		send_to_char("You complete your spell.\r\n", ch);
		act("$n completes $s spell...", FALSE, ch, 0, 0, TO_ROOM);
		if (cast_spell(ch, ch->casting.tch, ch->casting.obj, ch->casting.spell)) {
			WAIT_STATE(ch, PULSE_VIOLENCE);
			charge_mem(ch, ch->casting.spell);
                if (spell_info[ch->casting.spell].violent && ch->casting.tch &&
		IS_NPC(ch->casting.tch) && !FIGHTING(ch->casting.tch))
                      if(number(0, 4)) {
                        hit(ch->casting.tch, ch, TYPE_UNDEFINED);
			remember(ch->casting.tch, ch); }
		}
	}
}
}

void mob_cast(struct char_data *ch, struct char_data *tch, int spellnum)
{

struct obj_data *tobj = NULL;
char *t = '\0';
int i, target = 0;
int target_status = TARGET_NULL;


if(AFF2_FLAGGED(ch, AFF2_SILENCE)) {
    return;
  }

  if (MOB_FLAGGED(ch, MOB_CASTING))
    return;


if (1) {
	if ((spellnum < 1) || (spellnum > MAX_SPELLS)) {
		send_to_char("Cast what?!?\r\n", ch);
    return;
	}
	if (GET_LEVEL(ch) < SINFO.min_level[(int) (GET_CLASS(ch))]) {
		act(buf, TRUE, ch, 0, 0, TO_ROOM);
		return;
	}
}

	  if (MOB_FLAGGED(ch, MOB_CASTING))
		  return;
if ((GET_SKILL(ch, spellnum)) == 0) {
    send_to_char("You are unfamiliar with that spell.\r\n", ch);
    return;
}

  /* Find the target */

if (IS_SET(SINFO.targets, TAR_IGNORE)) {
    target = TRUE;
} else if (tch != NULL) {
    if (!target && (IS_SET(SINFO.targets, TAR_CHAR_ROOM))) {
		target = TRUE;
		target_status = TARGET_IN_ROOM;
    }
    if (!target && IS_SET(SINFO.targets, TAR_CHAR_WORLD)){
		target = TRUE;
		target_status = TARGET_IN_WORLD;
    }
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_INV)){
		if ((tobj = get_obj_in_list_vis(ch, t, ch->carrying)))
			target = TRUE;
			target_status=TARGET_IN_INV;
    }
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_EQUIP)) {
	for (i = 0; !target && i < NUM_WEARS; i++)
		if (GET_EQ(ch, i) && !str_cmp(t, GET_EQ(ch, i)->name)) {
			tobj = GET_EQ(ch, i);
			target = TRUE;
			target_status = TARGET_EQUIP;
		}
	}
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_ROOM))
	if ((tobj = get_obj_in_list_vis(ch, t, world[ch->in_room].contents))){
		target = TRUE;
		target_status = TARGET_IN_ROOM;
	}
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_WORLD))
	if ((tobj = get_obj_vis(ch, t))){
		target = TRUE;
		target_status = TARGET_IN_WORLD;
	}
} else {			/* if target string is empty */
	if (!target && IS_SET(SINFO.targets, TAR_FIGHT_SELF))
		if (FIGHTING(ch) != NULL) {
			tch = ch;
			target = TRUE;
			target_status = TARGET_SELF;
		}
		if (!target && IS_SET(SINFO.targets, TAR_FIGHT_VICT))
			if (FIGHTING(ch) != NULL) {
				tch = FIGHTING(ch);
				target = TRUE;
				target_status = TARGET_FIGHTING;
			}
    /* if no target specified, and the spell isn't violent, default to self */
			if (!target && IS_SET(SINFO.targets, TAR_CHAR_ROOM) &&
				!SINFO.violent) {
				tch = ch;
				target = TRUE;
				target_status = TARGET_SELF;
			}
			if (!target) {
				sprintf(buf, "Upon %s should the spell be cast?\r\n",
					IS_SET(SINFO.targets, TAR_OBJ_ROOM | TAR_OBJ_INV | TAR_OBJ_WORLD) ? "what" : "who");
				send_to_char(buf, ch);
				return;
			}
}

if (target && (tch == ch) && SINFO.violent) {
    send_to_char("You shouldn't cast that on yourself -- could be bad for your health!\r\n", ch);
    return;
}
if (!target) {
    send_to_char("Cannot find the target of your spell!\r\n", ch);
    return;
}

   SET_BIT(MOB_FLAGS(ch), MOB_CASTING);
   ch->casting.spell = spellnum;
   ch->casting.tch = tch;
   ch->casting.target_status = target_status;
   /*ch->casting.obj = tobj;
   */ch->casting.casting_time = SINFO.cast_time;
   if(spell_info[ch->casting.spell].violent)
    act("$n starts casting an offensive spell...", TRUE, ch, 0, 0, TO_ROOM);
   else
       act("$n starts casting a spell...", TRUE, ch, 0, 0, TO_ROOM);

   act("You start chanting...", FALSE, ch, 0, 0, TO_CHAR);


}


void spell_level(int spell, int class, int level, int circle)
{
  char buf[256];
  int bad = 0;

  if (spell < 0 || spell > TOP_SPELL_DEFINE) {
    sprintf(buf, "SYSERR: attempting assign to illegal spellnum %d", spell);
    log(buf);
    return;
  }

  if (class < 0 || class >= NUM_CLASSES) {
    sprintf(buf, "SYSERR: assigning '%s' to illegal class %d",
	    skill_name(spell), class);
    log(buf);
    bad = 1;
  }

  if (level < 1 || level > LVL_IMPL) {
    sprintf(buf, "SYSERR: assigning '%s' to illegal level %d",
	    skill_name(spell), level);
    log(buf);
    bad = 1;
  }

  if(circle < 1 || circle > NUM_SPELL_CIRCLES)
   {
      sprintf(buf, "SYSERR: assigning '%s' to illegal circle '%d'", skill_name(spell), circle);
      log(buf);
      bad = 1;
   }


  if (!bad)
  {
    spell_info[spell].min_level[class] = level;
	spell_info[spell].min_circle[class] = circle;
  }
}


/* Assign the spells on boot up */
void spello(int spl, int max_mana, int min_mana, int mana_change, byte minpos,
	         int targets, byte violent, int routines, int mem_time, int cast_time,
			 int damage_type, int sphere)
{
  int i;

  for (i = 0; i < NUM_CLASSES; i++)
    spell_info[spl].min_level[i] = LVL_IMMORT;

  spell_info[spl].mana_max = max_mana;
  spell_info[spl].mana_min = min_mana;
  spell_info[spl].mana_change = mana_change;
  spell_info[spl].min_position = minpos;
  spell_info[spl].targets = targets;
  spell_info[spl].violent = violent;
  spell_info[spl].routines = routines;
  spell_info[spl].damage_type = damage_type;
  spell_info[spl].sphere = sphere;

  for (i = 0; i < NUM_CLASSES; i++)
    spell_info[spl].min_circle[i] = NUM_SPELL_CIRCLES;

  spell_info[spl].mem_time = mem_time;
  spell_info[spl].cast_time = cast_time;

}


void unused_spell(int spl)
{
  int i;

  for (i = 0; i < NUM_CLASSES; i++)
    spell_info[spl].min_level[i] = LVL_IMPL + 1;
  spell_info[spl].mana_max = 0;
  spell_info[spl].mana_min = 0;
  spell_info[spl].mana_change = 0;
  spell_info[spl].min_position = 0;
  spell_info[spl].targets = 0;
  spell_info[spl].violent = 0;
  spell_info[spl].routines = 0;
  spell_info[spl].damage_type = 0;
  spell_info[spl].sphere = 0;
}

#define skillo(skill) spello(skill, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);


/*
 * Arguments for spello calls:
 *
 * spellnum, maxmana, minmana, manachng, minpos, targets, violent?, routines.
 *
 * spellnum:  Number of the spell.  Usually the symbolic name as defined in
 * spells.h (such as SPELL_HEAL).
 *
 * maxmana :  The maximum mana this spell will take (i.e., the mana it
 * will take when the player first gets the spell).
 *
 * minmana :  The minimum mana this spell will take, no matter how high
 * level the caster is.
 *
 * manachng:  The change in mana for the spell from level to level.  This
 * number should be positive, but represents the reduction in mana cost as
 * the caster's level increases.
 *
 * minpos  :  Minimum position the caster must be in for the spell to work
 * (usually fighting or standing). targets :  A "list" of the valid targets
 * for the spell, joined with bitwise OR ('|').
 *
 * violent :  TRUE or FALSE, depending on if this is considered a violent
 * spell and should not be cast in PEACEFUL rooms or on yourself.  Should be
 * set on any spell that inflicts damage, is considered aggressive (i.e.
 * charm, curse), or is otherwise nasty.
 *
 * routines:  A list of magic routines which are associated with this spell
 * if the spell uses spell templates.  Also joined with bitwise OR ('|').
 *
 * See the CircleMUD documentation for a more detailed description of these
 * fields.
 */

/*
 * NOTE: SPELL LEVELS ARE NO LONGER ASSIGNED HERE AS OF Circle 3.0 bpl9.
 * In order to make this cleaner, as well as to make adding new classes
 * much easier, spell levels are now assigned in class.c.  You only need
 * a spello() call to define a new spell; to decide who gets to use a spell
 * or skill, look in class.c.  -JE 5 Feb 1996
 */
void mag_assign_spells(void)
{
  int i;

  /* Do not change the loop below */
  for (i = 1; i <= TOP_SPELL_DEFINE; i++)
    unused_spell(i);
  /* Do not change the loop above */

  spello(SPELL_ICE_DARTS, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

  spello(SPELL_ICE_ARMOR, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

  spello(SPELL_ICE_DAGGER, 0, 0, 0, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_FREEZING_WIND, 0, 0, 0, POS_FIGHTING,
	TAR_IGNORE, TRUE, MAG_AREAS, C1,
	FAST, COLD_DAMAGE, SPELL_SPHERE_AIR);

  spello(SPELL_FREEZE, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

  spello(SPELL_WALL_OF_ICE, 0, 0, 0, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	SLOW, COLD_DAMAGE, SPELL_SPHERE_WATER);

  spello(SPELL_ICEBALL, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

  spello(SPELL_FLOOD, 0, 0, 0, POS_FIGHTING,
	TAR_IGNORE, TRUE, MAG_MANUAL, C1,
	SLOW, COLD_DAMAGE, SPELL_SPHERE_WATER);

  spello(SPELL_GREATER_WATERWALK, 0, 0, 0, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_GENERIC);

  spello(SPELL_NEGATE_COLD, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

  spello(SPELL_WATERFORM, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	SLOW, 0, SPELL_SPHERE_WATER);

  spello(SPELL_DOUSE, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM, FALSE, MAG_UNAFFECTS, C1,
	FAST, 0, SPELL_SPHERE_WATER);

  spello(SPELL_RAIN, 0, 0, 0, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_WATER);

  spello(SPELL_FIRE_DARTS, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_MAGIC_TORCH, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_FIRE);

  spello(SPELL_SMOKE, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_FIRE);

  spello(SPELL_MIRAGE, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_FIRE);

  spello(SPELL_FLAME_BLADE, 0, 0, 0, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_FIRE);

  spello(SPELL_HEATWAVE, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_FIRESTORM, 0, 0, 0, POS_FIGHTING,
	TAR_IGNORE, TRUE, MAG_AREAS, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_MELT, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_CIRCLE_OF_FIRE, 0, 0, 0, POS_STANDING,
	TAR_IGNORE, TRUE, MAG_ROOM, C1,
	SLOW, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_IMMOLATE, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_SUPERNOVA, 0, 0, 0, POS_FIGHTING,
	TAR_IGNORE, TRUE, MAG_MANUAL, C1,
	SLOW, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_GREATER_FIREWALK, 0, 0, 0, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_FIRE);

  spello(SPELL_NEGATE_HEAT, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_FIRE);

  spello(SPELL_FIREWALK, 0, 0, 0, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_FIRE);

  spello(SPELL_URBAN_RENEWAL, 0, 0, 0, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_ROOM, C1,
	SLOW, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_SUNRAY, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_AFFECTS, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_ARMOR_OF_GAIA, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_WANDERING_WOODS, 0, 0, 0, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_NOURISHMENT, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_POINTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_GAIAS_CLOAK, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_NATURES_EMBRACE, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_ENTANGLE, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_INVIGORATE, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_POINTS, C1,
	 FAST, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_WALL_OF_STONE, 0, 0, 0, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_CREATE_SPRING, 0, 0, 0, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_CREATIONS, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_BARKSKIN, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

  spello(SPELL_NIGHT_VISION, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_WRITHING_WEEDS, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC);

  spello(SPELL_HELLS_GATE, 0, 0, 0, POS_STANDING,
	TAR_CHAR_WORLD, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_SANE_MIND, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_UNAFFECTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_DARK_PRESENCE, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_DEMONSKIN, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

  spello(SPELL_DARK_FEAST, 0, 0, 0, POS_STANDING,
	TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_GENERIC);

  spello(SPELL_HELL_BOLT, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_DISEASE, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_INSANITY, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_DEMONIC_ASPECT, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_HELLFIRE_BRIMSTONE, 0, 0, 0, POS_FIGHTING,
	TAR_IGNORE, FALSE, MAG_AREAS, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_STYGIAN_ERUPTION, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_DEMONIC_MUTATION, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_WINGS_OF_HELL, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_DIVINE_ESSENCE, 0, 0, 0, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_HEAVENS_GATE, 0, 0, 0, POS_STANDING,
	TAR_CHAR_WORLD, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_WORD_OF_COMMAND, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM, TRUE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_GENERIC);

  spello(SPELL_WINGS_OF_HEAVEN, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_BANISH, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_ENLIGHTENMENT, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_GENERIC);

  spello(SPELL_SPEAK_IN_TONGUES, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_GREATER_INVOCATION, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_LESSER_INVOCATION, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_EXORCISM, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE,C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_DEATH);

  spello(SPELL_LESSER_EXORCISM, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_DEATH);

  spello(SPELL_DIVINE_RAY, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC);

  spello(SPELL_DIVINE_BOLT, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC);

  spello(SPELL_PRAYER, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_ELEMENTAL_WARDING, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

  spello(SPELL_CIRCLE_OF_LIGHT, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_FIRE);

  spello(SPELL_FIRE_BREATH, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_GAS_BREATH, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, AIR_DAMAGE, SPELL_SPHERE_AIR);

  spello(SPELL_FROST_BREATH, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

  spello(SPELL_LIGHTNING_BREATH, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);

  spello(SPELL_ACID_BREATH, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_FEAR, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_DEATH);

  spello(SPELL_CHAIN_LIGHTNING, 0, 0, 0, POS_FIGHTING,
	TAR_IGNORE, TRUE, MAG_AREAS, C1,
	FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);

  spello(SPELL_MASS_INVIS, 0, 0, 0, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_RELOCATE, 0, 0, 0, POS_STANDING,
	TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_AIR);

  spello(SPELL_DISINTEGRATE, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_HARNESS, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_GENERIC);

  spello(SPELL_MINOR_GLOBE, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

  spello(SPELL_MAJOR_GLOBE, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

  spello(SPELL_FIRESHIELD, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_COLDSHIELD, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

  spello(SPELL_MINOR_PARALYSIS, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_TELEPORT, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_GENERIC);

  spello(SPELL_RAY_OF_ENFEEB, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_LEVITATE, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_WIZARD_EYE, 0, 0, 0, POS_STANDING,
	TAR_CHAR_WORLD, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_GENERIC);

  spello(SPELL_MINOR_CREATION, 0, 0, 0,POS_STANDING,
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_DISPEL_MAGIC, 0, 0, 0, POS_FIGHTING,
   TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_OBJ_ROOM | TAR_OBJ_INV, TRUE, MAG_MANUAL,
         C1, FAST, 0, SPELL_SPHERE_GENERIC);

  spello(SPELL_UNHOLY_WORD, 0, 0, 0, POS_FIGHTING,
	TAR_IGNORE, TRUE, MAG_AREAS, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC);

  spello(SPELL_HOLY_WORD, 0, 0, 0, POS_FIGHTING,
	TAR_IGNORE, TRUE, MAG_AREAS, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC);

  spello(SPELL_ARMOR, 30, 15, 3, POS_FIGHTING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

  spello(SPELL_REDUCE, 35, 5, 3, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS | MAG_UNAFFECTS, C1,
	SLOW, 0, SPELL_SPHERE_ENCHANT);

 spello(SPELL_ENLARGE, 35, 5, 3, POS_STANDING,
        TAR_CHAR_ROOM, FALSE, MAG_AFFECTS | MAG_UNAFFECTS, C1,
        SLOW, 0, SPELL_SPHERE_ENCHANT);

 spello(SPELL_BLESS, 35, 5, 3, POS_STANDING,
        TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE, MAG_AFFECTS | MAG_ALTER_OBJS, C1,
        FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_BLINDNESS, 35, 25, 1, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_FIGHT_VICT, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_SILENCE, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_NOT_SELF, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_FLAMESTRIKE, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_COMPREHEND_LANG, 45, 30, 1, POS_STANDING,
	  TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	  FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_BURNING_HANDS, 30, 10, 3, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_CONE_OF_COLD, 35, 15, 3, POS_FIGHTING,
	  TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	  FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

  spello(SPELL_BIGBYS_CLENCHED_FIST, 90, 35, 3, POS_FIGHTING,
	  TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	  FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC);

  spello(SPELL_METEORSWARM, 100, 50, 3, POS_FIGHTING,
	  TAR_IGNORE, TRUE, MAG_AREAS, C1,
	  FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH);

 spello(SPELL_WATERWALK, 35, 5, 3, POS_STANDING,
 	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_WATER);

 spello(SPELL_ICE_SHARDS, 100, 50, 3, POS_FIGHTING,
	  TAR_IGNORE, TRUE, MAG_AREAS, C1,
	  FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

  spello(SPELL_ICE_STORM, 100, 50, 3, POS_FIGHTING,
	  TAR_IGNORE, TRUE, MAG_AREAS, C1,
	  FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

  spello(SPELL_CALL_LIGHTNING, 40, 25, 3, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);

  spello(SPELL_CHARM, 75, 50, 2, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_NOT_SELF, TRUE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_PLANE_SHIFT, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_CHILL_TOUCH, 30, 10, 3, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_AFFECTS, C1,
	FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

  spello(SPELL_CLONE, 80, 65, 5, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_SUMMONS, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_DARKNESS, 50, 25, 5, POS_STANDING,
		 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_ROOM, C1,
		 FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_CONTINUAL_LIGHT, 50, 25, 5, POS_STANDING,
		 TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE,
                 MAG_ROOM | MAG_ALTER_OBJS, C1,
                 FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_INN_STRENGTH, 35, 30, 1, POS_STANDING,
	  TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	  FAST, 0, 0);

  spello(SPELL_MAJOR_PARALYSIS, 35, 30, 1, POS_STANDING,
	  TAR_CHAR_ROOM, TRUE, MAG_MANUAL, C6,
	  FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_COLOR_SPRAY, 30, 15, 3, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC);

  spello(SPELL_CONTROL_WEATHER, 75, 25, 5, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_CREATE_FOOD, 30, 5, 4, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_CREATIONS, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_CREATE_WATER, 30, 5, 4, POS_STANDING,
	TAR_OBJ_INV | TAR_OBJ_EQUIP, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_CURE_BLIND, 30, 5, 2, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_UNAFFECTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_CURE_CRITIC, 30, 10, 2, POS_FIGHTING,
	TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_CURE_SERIOUS, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_CURE_LIGHT, 30, 10, 2, POS_FIGHTING,
	TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_VIGORIZE_LIGHT, 0,0,0, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_VIGORIZE_SERIOUS, 0,0,0, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_VIGORIZE_CRITIC, 0,0,0, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_CURSE, 80, 50, 2, POS_STANDING,
	TAR_CHAR_ROOM | TAR_OBJ_INV, TRUE, MAG_AFFECTS | MAG_ALTER_OBJS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_DETECT_ALIGN, 20, 10, 2, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_DETECT_INVIS, 20, 10, 2, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_DETECT_MAGIC, 20, 10, 2, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_FLY, 50, 5, 3, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_DETECT_POISON, 15, 5, 1, POS_STANDING,
	TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_DISPEL_EVIL, 40, 25, 3, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_ENCHANT);

  spello(SPELL_DISPEL_GOOD, 40, 25, 3, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_ENCHANT);

  spello(SPELL_EARTHQUAKE, 40, 25, 3, POS_FIGHTING,
	TAR_IGNORE, TRUE, MAG_AREAS, C1,
	FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH);

  spello(SPELL_DOOM, 0, 0, 0, POS_FIGHTING,
	TAR_IGNORE, TRUE, MAG_AREAS, C1,
	FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH);

  spello(SPELL_CREEPING_DOOM, 0, 0, 0, POS_FIGHTING,
	  TAR_IGNORE, TRUE, MAG_MANUAL, C1,
	  FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH);


  spello(SPELL_ENCHANT_WEAPON, 150, 100, 10, POS_STANDING,
	TAR_OBJ_INV | TAR_OBJ_EQUIP, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_ENERGY_DRAIN, 40, 25, 1, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, DEATH_DAMAGE, SPELL_SPHERE_DEATH);

  spello(SPELL_VAMPIRIC_BREATH, 40, 25, 1, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, DEATH_DAMAGE, SPELL_SPHERE_DEATH);

  spello(SPELL_GROUP_ARMOR, 50, 30, 2, POS_STANDING,
	TAR_IGNORE, FALSE, MAG_GROUPS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

  spello(SPELL_GROUP_RECALL, 50, 30, 2, POS_FIGHTING,
	TAR_IGNORE, FALSE, MAG_GROUPS, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_FIREBALL, 40, 30, 2, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

  spello(SPELL_FULL_HARM, 75, 45, 3, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING);

  spello(SPELL_FULL_HEAL, 75, 50, 3, POS_FIGHTING,
	TAR_CHAR_ROOM, FALSE, MAG_POINTS | MAG_UNAFFECTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_GROUP_HEAL, 80, 60, 5, POS_FIGHTING,
	TAR_IGNORE, FALSE, MAG_GROUPS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_HARM, 45, 15, 3, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING);

  spello(SPELL_HEAL, 60, 40, 3, POS_FIGHTING,
	TAR_CHAR_ROOM, FALSE, MAG_POINTS | MAG_UNAFFECTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_INFRAVISION, 25, 10, 1, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_INVISIBLE, 35, 25, 1, POS_STANDING,
	TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_AFFECTS | MAG_ALTER_OBJS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_CONCEALMENT, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_LIGHTNING_BOLT, 30, 15, 1, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);

  spello(SPELL_LOCATE_OBJECT, 25, 20, 1, POS_STANDING,
	TAR_OBJ_WORLD, FALSE, MAG_MANUAL, C1,
	FAST, 0, 0);

  spello(SPELL_MAGIC_MISSILE, 25, 10, 3, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC);

  spello(SPELL_POISON, 50, 20, 3, POS_STANDING,
	TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_OBJ_INV, TRUE, MAG_AFFECTS | MAG_ALTER_OBJS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_PROT_FROM_EVIL, 40, 10, 3, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

  spello(SPELL_REMOVE_CURSE, 45, 25, 5, POS_STANDING,
	TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE, MAG_UNAFFECTS | MAG_ALTER_OBJS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_SANCTUARY, 110, 85, 5, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

  spello(SPELL_SHOCKING_GRASP, 30, 15, 3, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);

  spello(SPELL_SLEEP, 40, 25, 5, POS_STANDING,
	TAR_CHAR_ROOM, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_STRENGTH, 35, 30, 1, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_SUMMON, 75, 50, 3, POS_STANDING,
	TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_RESURRECT, 75, 50, 3, POS_STANDING,
        TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
        SLOW, 0, SPELL_SPHERE_HEALING);

  spello(SPELL_PRESERVE, 0, 0, 0, POS_STANDING,
	TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_HEALING);


  spello(SPELL_DIMENSION_DOOR, 75, 45, 3, POS_STANDING,
	  TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
	  FAST, 0, SPELL_SPHERE_AIR);

  spello(SPELL_SUMMON_DRACOLICH, 100, 75, 3, POS_SITTING,
        TAR_OBJ_ROOM, FALSE, MAG_SUMMONS, C1,
		FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_ANIMATE_DEAD, 75, 15, 3, POS_SITTING,
        TAR_OBJ_ROOM, FALSE, MAG_SUMMONS, C1,
		FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_SUMMON_ELEMENTAL, 75, 15, 3, POS_SITTING,
        TAR_IGNORE, FALSE, MAG_SUMMONS, C1,
		FAST, 0, SPELL_SPHERE_SUMMON);

   spello(SPELL_SUMMON_DEMON, 100, 75, 3, POS_SITTING,
        TAR_IGNORE, FALSE, MAG_SUMMONS, C1,
		FAST, 0, SPELL_SPHERE_SUMMON);

   spello(SPELL_SUMMON_GREATER_DEMON, 130, 75, 3, POS_SITTING,
        TAR_IGNORE, FALSE, MAG_SUMMONS, C1,
		FAST, 0, SPELL_SPHERE_SUMMON);


  spello(SPELL_WORD_OF_RECALL, 20, 10, 2, POS_FIGHTING,
	TAR_CHAR_ROOM, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_REMOVE_POISON, 40, 8, 4, POS_STANDING,
	TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_UNAFFECTS | MAG_ALTER_OBJS, C1,
	FAST, 0, 0);
spello(SPELL_INCENDIARY_NEBULA, 0, 0, 0, POS_FIGHTING,
	   	TAR_IGNORE, TRUE, MAG_AREAS, C1, FAST, FIRE_DAMAGE,
	SPELL_SPHERE_FIRE);


  spello(SPELL_MOONWELL, 50, 50, 0, POS_STANDING,
         TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
		 FAST, 0, SPELL_SPHERE_EARTH);

  spello(SPELL_SENSE_LIFE, 20, 10, 2, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_SOULSHIELD, 0, 0, 0, POS_STANDING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

  spello(SPELL_DESTROY_UNDEAD, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_HEALING);

  spello(SPELL_STONE_SKIN, 50, 25, 3, POS_FIGHTING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

  spello(SPELL_HASTE, 50, 25, 3, POS_FIGHTING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_BLUR, 90, 60, 3, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

 spello(SPELL_VITALITY, 50, 30, 5, POS_STANDING,
	  TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	  FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_WALL_OF_FOG, 50, 25, 5, POS_STANDING,
		 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_ROOM, C1,
		 FAST, 0, SPELL_SPHERE_SUMMON);

  spello(SPELL_FARSEE, 25, 10, 1, POS_STANDING,
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

  spello(SPELL_CAUSE_LIGHT, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING);

  spello(SPELL_CAUSE_SERIOUS, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING);

  spello(SPELL_CAUSE_CRITIC, 0, 0, 0, POS_FIGHTING,
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING);


  /* NON-castable spells should appear here */
  spello(SPELL_IDENTIFY, 0, 0, 0, 0,
	TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
	FAST, 0, 0);


  /*
   * Declaration of skills - this actually doesn't do anything except
   * set it up so that immortals can use these skills by default.  The
   * min level to use the skill for other classes is set up in class.c.
   */

  skillo(SKILL_BACKSTAB);
  skillo(SKILL_INSTANT_KILL);
  skillo(SKILL_BIND);
  skillo(SKILL_CIRCLE);
  skillo(SKILL_BASH);
  skillo(SKILL_HIDE);
  skillo(SKILL_KICK);
  skillo(SKILL_PICK_LOCK);
  skillo(SKILL_PUNCH);
  skillo(SKILL_RESCUE);
  skillo(SKILL_SNEAK);
  skillo(SKILL_STEAL);
  skillo(SKILL_TRACK);
  skillo(SKILL_HUNT);
  skillo(SKILL_DUAL_WIELD);
  skillo(SKILL_DOUBLE_ATTACK);
  skillo(SKILL_BERSERK);
  skillo(SKILL_SPRINGLEAP);
  skillo(SKILL_MOUNT);
  skillo(SKILL_RIDING);
  skillo(SKILL_TAME);
  skillo(SKILL_THROATCUT);
  skillo(SKILL_DOORBASH);
  skillo(SKILL_PARRY);
  skillo(SKILL_DODGE);
  skillo(SKILL_RIPOST);
  skillo(SKILL_MEDITATE);
  skillo(SKILL_QUICK_CHANT);
  skillo(LANG_BARBARIAN);
  skillo(LANG_GNOMISH);
  skillo(LANG_DUERGAR);
  skillo(LANG_DROW);
  skillo(LANG_ORCISH);
  skillo(LANG_OGRE);
  skillo(LANG_COMMON);
  skillo(LANG_ELVEN);
  skillo(LANG_DWARVEN);
  skillo(LANG_TROLLISH);
  skillo(LANG_HALFLING);
  skillo(SKILL_SHAPECHANGE);
  skillo(SKILL_SWITCH);
  skillo(SKILL_GUARD);
  skillo(SKILL_BREATH);
  skillo(SKILL_SWEEP);
  skillo(SKILL_ROAR);
  skillo(SKILL_DOUSE);
  skillo(SKILL_INSTANT_KILL);
  skillo(SKILL_HITALL);
  skillo(SKILL_BANDAGE);
}
@


1.192
log
@Fixed log(buf) to log(%s buf)
@
text
@/***************************************************************************
 * $Id: spell_parser.c,v 1.191 2010/06/05 14:56:27 mud Exp $
 ***************************************************************************/
/***************************************************************************
 *   File: spell_parser.c                                 Part of FieryMUD *
 *  Usage: top-level magic routines; outside points of entry to magic sys. *
 *                                                                         *
 *  All rights reserved.  See license.doc for complete information.        *
 *                                                                         *
 *  FieryMUD Copyright (C) 1998, 1999, 2000 by the Fiery Consortium        *
 *  FieryMUD is based on CircleMUD Copyright (C) 1993, 94 by the Trustees  *
 *  of the Johns Hopkins University                                        *
 *  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
 ***************************************************************************/

#include "conf.h"
#include "sysdep.h"

#include "structs.h"
#include "utils.h"
#include "interpreter.h"
#include "casting.h"
#include "handler.h"
#include "comm.h"
#include "db.h"
#include "spell_parser.h"
#include "screen.h"
#include "class.h"
#include "events.h"
#include "skills.h"
#include "dg_scripts.h"
#include "math.h"
#include "magic.h"
#include "constants.h"
#include "fight.h"
#include "spells.h"
#include "cooldowns.h"

extern void charge_mem(struct char_data *ch, int spellnum);
extern int check_spell_memory(struct char_data *ch, int spellnum);
void complete_spell(struct char_data *ch);
void start_chant(struct char_data *ch);
void end_chant(struct char_data *ch, struct char_data *tch, struct obj_data *tobj, int spellnum);
int bad_guess(struct char_data *ch);
bool find_spell_target(int spellnum, struct char_data *ch, char *t,
      int *target_status, struct char_data **tch, struct obj_data **tobj);
bool check_spell_target(int spellnum, struct char_data *ch,
                        struct char_data *tch, struct obj_data *tobj);
void abort_casting(struct char_data *ch);
void aggro_lose_spells(struct char_data *ch);
EVENTFUNC(casting_handler);


int bogus_mage_spells[] = {0,
                           /* first 10 are defensive */
                           SPELL_STRENGTH,
                           SPELL_DETECT_INVIS,
                           SPELL_INFRAVISION,
                           SPELL_MINOR_GLOBE,
                           SPELL_FIRESHIELD,
                           SPELL_COLDSHIELD,
                           SPELL_FARSEE,
                           SPELL_FLY,
                           SPELL_HASTE,
                           SPELL_MAJOR_GLOBE,
                           /* next 10 are offensive */
                           SPELL_BURNING_HANDS,
                           SPELL_CHILL_TOUCH,
                           SPELL_MINOR_PARALYSIS,
                           SPELL_LIGHTNING_BOLT,
                           SPELL_RAY_OF_ENFEEB,
                           SPELL_SLEEP,
                           SPELL_CONE_OF_COLD,
                           SPELL_FIREBALL,
                           SPELL_BIGBYS_CLENCHED_FIST,
                           SPELL_CHAIN_LIGHTNING
};

int bogus_priest_spells[] = {0,
                             /* first 10 are defensive */
                             SPELL_CURE_LIGHT,
                             SPELL_BLESS,
                             SPELL_CURE_SERIOUS,
                             SPELL_PROT_FROM_EVIL,
                             SPELL_CURE_CRITIC,
                             SPELL_SENSE_LIFE,
                             SPELL_HEAL,
                             SPELL_VITALITY,
                             SPELL_WATERWALK,
                             SPELL_SOULSHIELD,
                             /* next 10 are offensive */
                             SPELL_CAUSE_LIGHT,
                             SPELL_CAUSE_SERIOUS,
                             SPELL_CAUSE_CRITIC,
                             SPELL_EARTHQUAKE,
                             SPELL_HARM,
                             SPELL_FLAMESTRIKE,
                             SPELL_FULL_HARM,
                             SPELL_BLINDNESS,
                             SPELL_SILENCE,
                             SPELL_DARKNESS
};

struct syllable {
  char *org;
  char *new;
};

struct syllable syls[] = {
  {" ", " "},
  {"ar", "abra"},
  {"ate", "i"},
  {"cau", "kada"},
  {"blind", "nose"},
  {"bur", "mosa"},
  {"cu", "judi"},
  {"de", "oculo"},
  {"dis", "mar"},
  {"ect", "kamina"},
  {"en", "uns"},
  {"gro", "cra"},
  {"light", "dies"},
  {"lo", "hi"},
  {"magi", "kari"},
  {"mon", "bar"},
  {"mor", "zak"},
  {"move", "sido"},
  {"ness", "lacri"},
  {"ning", "illa"},
  {"per", "duda"},
  {"ra", "gru"},
  {"re", "candus"},
  {"son", "sabru"},
  {"tect", "infra"},
  {"tri", "cula"},
  {"ven", "nofo"},
  {"word of", "inset"},
  {"a", "i"}, {"b", "v"}, {"c", "q"}, {"d", "m"}, {"e", "o"}, {"f", "y"}, {"g", "t"},
  {"h", "p"}, {"i", "u"}, {"j", "y"}, {"k", "t"}, {"l", "r"}, {"m", "w"}, {"n", "b"},
  {"o", "a"}, {"p", "s"}, {"q", "d"}, {"r", "f"}, {"s", "g"}, {"t", "h"}, {"u", "e"},
  {"v", "z"}, {"w", "x"}, {"x", "n"}, {"y", "l"}, {"z", "k"}, {"", ""}
};

void end_chant(struct char_data *ch, struct char_data *tch, struct obj_data *tobj, int spellnum) {
  struct char_data *gch;
  struct know_spell *tmp;
  char lbuf[256];
  char spellbuf[256];
  char saybuf[256];
  int ofs, j;
  bool found;

  /* There's no end-of-cast message for ventriloquate. */
  if (spellnum == SPELL_VENTRILOQUATE)
     return;

  /*
   * Loop through bystanders in the room and see if they recognize the
   * spell and/or target.
   */
  for (gch = world[ch->in_room].people; gch; gch = gch->next_in_room) {
    /* either the caster or sleeping bystander */
    if (ch == gch || !AWAKE(gch) || !gch->desc || PLR_FLAGGED(gch, PLR_WRITING) || EDITING(gch->desc))
      continue;

    memset(spellbuf, 0x0, 256);
    memset(saybuf, 0x0, 256);
    found = FALSE;

    /* gods see all */
    if (GET_LEVEL(gch) >= LVL_GOD)
      found = TRUE;

    /* see if anyone recognized the spell */
    for (tmp = ch->see_spell; tmp && !found; tmp = tmp->next)
      if (gch == tmp->sch)
        found = TRUE; /* ok he recognized it */

    if (!found) {
      /* change the syllables of the spoken spell */
      memset(lbuf, 0x0, 256);
      ofs = 0;
      strcpy(lbuf, skills[spellnum].name);
      while (*(lbuf + ofs))
        for (j = 0; *(syls[j].org); j++)
          if (!strncmp(syls[j].org, lbuf + ofs, strlen(syls[j].org))) {
            strcat(spellbuf, syls[j].new);
            ofs += strlen(syls[j].org);
          }
    }
    else
      /* on the list. recognize the spell */
      strcpy(spellbuf, skills[spellnum].name);

    /* Can the bystander see the caster? */
    if (CAN_SEE(gch, ch)) {
      /* Is there a PC/NPC Target?  Is it in the room? */
      if (tch && tch->in_room == ch->in_room) {
        /* Is the caster targetting himself? */
        if (ch == tch)
          sprintf(saybuf, "$n closes $s eyes and utters the words, '%s'.", spellbuf);
        /* Is the target the receiver of the message? */
        else if (tch == gch)
          sprintf(saybuf, "$n stares at you and utters the words, '%s'.", spellbuf);
        /* Ok, just a bystander.  But can they see the target? */
        else if (CAN_SEE(gch, tch))
          sprintf(saybuf, "$n stares at $N and utters the words, '%s'.", spellbuf);
        else
          sprintf(saybuf, "$n stares off at nothing and utters the words, '%s'.", spellbuf);
      }
      /* Is there an object target in the room? */
      else if (tobj && ((tobj->in_room == ch->in_room) || (tobj->carried_by == ch))) {
        if(CAN_SEE_OBJ(gch, tobj))
          sprintf(saybuf, "$n stares at $p and utters the words, '%s'.", spellbuf);
        else
          sprintf(saybuf, "$n stares at something and utters the words, '%s'.", spellbuf);
      }
      /* No target. */
      else
        sprintf(saybuf, "$n utters the words, '%s'.", spellbuf);
    }
    /* The bystander cannot see the caster. */
    else
      sprintf(saybuf, "Someone utters the words, '%s'.", spellbuf);

    /* Sending the message to the bystander or target. */
    perform_act(saybuf, ch, tobj, tch, gch);
  }
}

/*
 * This function is the very heart of the entire magic system.  All
 * invocations of all types of magic -- objects, spoken and unspoken PC
 * and NPC spells, the works -- all come through this function eventually.
 * This is also the entry point for non-spoken or unrestricted spells.
 * Spellnum 0 is legal but silently ignored here, to make callers simpler.
 *
 * Return value: CAST_RESULT_ flags.
 */
int call_magic(struct char_data * caster, struct char_data * cvict,
               struct obj_data * ovict, int spellnum, int skill, int casttype)
{
  int savetype, imp_skill = 0;
  struct char_data *newvict;

  struct char_data *random_attack_target(struct char_data *ch,
      struct char_data *target, bool verbose);

  if (IS_SKILL(spellnum))
    return FALSE;

  if (!cast_wtrigger(caster, cvict, ovict, spellnum) ||
      !cast_otrigger(caster, ovict, spellnum) ||
      !cast_mtrigger(caster, cvict, spellnum))
    return 0;

  /* Don't check PEACEFUL and NOMAGIC flags for gods */
  if (GET_LEVEL(caster) < LVL_ATTENDANT) {
    if (IS_SPELL(spellnum) && ROOM_FLAGGED(caster->in_room, ROOM_NOMAGIC)) {
      send_to_char("Your magic fizzles out and dies.\r\n", caster);
      act("$n's magic fizzles out and dies.", FALSE, caster, 0, 0, TO_ROOM);
      return FALSE;
    }

    if (ROOM_FLAGGED(caster->in_room, ROOM_PEACEFUL) && SINFO.violent) {
      if (IS_SPELL(spellnum)) {
        send_to_char("A flash of white light fills the room, dispelling your "
                     "violent magic!\r\n", caster);
        act("White light from no particular source suddenly fills the room, "
            "then vanishes.", FALSE, caster, 0, 0, TO_ROOM);
      }
      else { /* song/chant */
        send_to_char("Your words dissolve into peaceful nothingness...\r\n", caster);
        act("$n's words fade away into peaceful nothingness...\r\n",
            FALSE, caster, 0, 0, TO_ROOM);
      }
      return FALSE;
    }
  }

  /* A confused caster - spell could go to the wrong target */
  if (SINFO.violent && CONFUSED(caster) && cvict) {
    newvict = random_attack_target(caster, cvict, FALSE);
    if (newvict && newvict != cvict) {
      act("&5You fumbled the spell and aimed it at $N&0&5 instead!&0",
            FALSE, caster, 0, newvict, TO_CHAR);
      act("&5$n&0&5 fumbled the spell and aimed it at $N&0&5 instead!&0",
            TRUE, caster, 0, newvict, TO_NOTVICT);
      act("&5$n&0&5 fumbled the spell and aimed it at YOU instead!&0",
            FALSE, caster, 0, newvict, TO_VICT);
    }
    cvict = newvict;
  }

  /* A victim attacks back immediately, 80% of the time */
  if (SINFO.violent && cvict && IS_NPC(cvict) && !FIGHTING(cvict) &&
      GET_STANCE(cvict) >= STANCE_RESTING && number(0, 4)) {
    event_create(EVENT_QUICK_AGGRO, quick_aggro_event,
          mkgenericevent(cvict, caster, 0), TRUE, &(cvict->events), 0);
    remember(cvict, caster);
  }

  if (IS_SPELL(spellnum) && cvict && evades_spell(caster, cvict, spellnum, skill))
    return FALSE;

  /* determine the type of saving throw */
  switch (casttype) {
    case CAST_STAFF:
    case CAST_SCROLL:
    case CAST_POTION:
    case CAST_WAND:
      savetype = SAVING_ROD;
      break;
    case CAST_SPELL:
      savetype = SAVING_SPELL;
      break;
    case CAST_BREATH:
      savetype = SAVING_BREATH;
      break;
    default:
      savetype = SAVING_BREATH;
      break;
  }

  if (IS_SET(SINFO.routines, MAG_DAMAGE))
    imp_skill |= mag_damage(skill, caster, cvict, spellnum, savetype);

  /* Don't hit with any effects if they're already dead. */
  if (cvict && DECEASED(cvict))
    return imp_skill;

  /* We only allow a subset of illusory spellcasting */
  if (MOB_FLAGGED(caster, MOB_ILLUSORY)) {
    /* For beneficial and effect-causing spells, only allow casting upon self */
    if (caster == cvict) {
      if (IS_SET(SINFO.routines, MAG_AFFECT))
        imp_skill |= mag_affect(skill, caster, cvict, spellnum, savetype, casttype);

      if (IS_SET(SINFO.routines, MAG_UNAFFECT))
        imp_skill |= mag_unaffect(skill, caster, cvict, spellnum, savetype);

      if (IS_SET(SINFO.routines, MAG_POINT))
        imp_skill |= mag_point(skill, caster, cvict, spellnum, savetype);
    }

    /* Allow mag_areas because it will look like the caster is hurting folks */
    if (IS_SET(SINFO.routines, MAG_AREA))
      imp_skill |= mag_area(skill, caster, spellnum, savetype);

    /* And a few manual spells... */
    if (IS_SET(SINFO.routines, MAG_MANUAL))
      switch (spellnum) {
        case SPELL_COLOR_SPRAY:       MANUAL_SPELL(spell_color_spray); break;
        case SPELL_DEGENERATION:      MANUAL_SPELL(spell_degeneration); break;
        case SPELL_DIMENSION_DOOR:    MANUAL_SPELL(spell_dimension_door); break;
        case SPELL_ENERGY_DRAIN:      MANUAL_SPELL(spell_energy_drain); break;
        case SPELL_FEAR:              MANUAL_SPELL(spell_fear);break;
        case SPELL_HYSTERIA:          MANUAL_SPELL(spell_fear);break;
        case SPELL_FIRE_DARTS:        MANUAL_SPELL(spell_fire_darts);break;
        case SPELL_FLOOD:             MANUAL_SPELL(spell_flood);break;
        case SPELL_ICE_DAGGER:        MANUAL_SPELL(spell_ice_dagger);break;
        case SPELL_ICE_DARTS:         MANUAL_SPELL(spell_ice_darts);break;
        case SPELL_IMMOLATE:          MANUAL_SPELL(spell_immolate);break;
        case SPELL_ISOLATION:         MANUAL_SPELL(spell_isolation);break;
        case SPELL_LIGHTNING_BREATH:  MANUAL_SPELL(spell_lightning_breath);break;
        case SPELL_MAGIC_MISSILE:     MANUAL_SPELL(spell_magic_missile);break;
        case SPELL_MOONBEAM:          MANUAL_SPELL(spell_moonbeam); break;
        case SPELL_PHOSPHORIC_EMBERS: MANUAL_SPELL(spell_phosphoric_embers); break;
        case SPELL_SOUL_TAP:          MANUAL_SPELL(spell_soul_tap); break;
        case SPELL_TELEPORT:          MANUAL_SPELL(spell_teleport); break;
        case SPELL_VENTRILOQUATE:     MANUAL_SPELL(spell_ventriloquate); break;
        case SPELL_WORD_OF_COMMAND:   MANUAL_SPELL(spell_word_of_command);break;
      }
    return imp_skill;
  } /* END of illusory spellcasting section */

  if (IS_SET(SINFO.routines, MAG_AFFECT))
    imp_skill |= mag_affect(skill, caster, cvict, spellnum, savetype, casttype);

  if (IS_SET(SINFO.routines, MAG_UNAFFECT))
    imp_skill |= mag_unaffect(skill, caster, cvict, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_POINT))
    imp_skill |= mag_point(skill, caster, cvict, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_ALTER_OBJ))
    imp_skill |= mag_alter_obj(skill, caster, ovict, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_GROUP))
    imp_skill |= mag_group(skill, caster, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_MASS))
    imp_skill |= mag_mass(skill, caster, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_BULK_OBJS))
    imp_skill |= mag_bulk_objs(skill, caster, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_AREA))
    imp_skill |= mag_area(skill, caster, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_SUMMON))
    imp_skill |= mag_summon(skill, caster, cvict, ovict, spellnum, savetype);

  if (IS_SET(SINFO.routines, MAG_CREATION))
    imp_skill |= mag_creation(skill, caster, spellnum);

  if (IS_SET(SINFO.routines, MAG_ROOM))
    imp_skill |= mag_room(skill, caster, spellnum);

  if (IS_SET(SINFO.routines, MAG_MANUAL)) {
    switch (spellnum) {
    case SPELL_ARMOR_OF_GAIA:        MANUAL_SPELL(spell_armor_of_gaia);break;
    case SPELL_BANISH:               MANUAL_SPELL(spell_banish);break;
    case SPELL_CHARM:                MANUAL_SPELL(spell_charm); break;
    case SPELL_COLOR_SPRAY:          MANUAL_SPELL(spell_color_spray); break;
    case SPELL_CREATE_WATER:         MANUAL_SPELL(spell_create_water); break;
    case SPELL_CREEPING_DOOM:        MANUAL_SPELL(spell_creeping_doom); break;
    case SPELL_DARK_FEAST:           MANUAL_SPELL(spell_dark_feast);break;
    case SPELL_DARKNESS:             MANUAL_SPELL(spell_darkness);break;
    case SPELL_DEGENERATION:         MANUAL_SPELL(spell_degeneration); break;
    case SPELL_DIMENSION_DOOR:       MANUAL_SPELL(spell_dimension_door); break;
    case SPELL_DISPEL_MAGIC:         MANUAL_SPELL(spell_dispel_magic); break;
    case SPELL_ENCHANT_WEAPON:       MANUAL_SPELL(spell_enchant_weapon); break;
    case SPELL_ENERGY_DRAIN:         MANUAL_SPELL(spell_energy_drain); break;
    case SPELL_ENLIGHTENMENT:        MANUAL_SPELL(spell_enlightenment);break;
    case SPELL_FEAR:                 MANUAL_SPELL(spell_fear);break;
    case SPELL_HYSTERIA:             MANUAL_SPELL(spell_fear);break;
    case SPELL_FIRE_DARTS:           MANUAL_SPELL(spell_fire_darts);break;
    case SPELL_FLAME_BLADE:          MANUAL_SPELL(spell_flame_blade);break;
    case SPELL_FLOOD:                MANUAL_SPELL(spell_flood);break;
    case SPELL_FRACTURE:             MANUAL_SPELL(spell_fracture);break;
    case SPELL_HEAVENS_GATE:         MANUAL_SPELL(spell_heavens_gate);break;
    case SPELL_HELLS_GATE:           MANUAL_SPELL(spell_hells_gate);break;
    case SPELL_ICE_DAGGER:           MANUAL_SPELL(spell_ice_dagger);break;
    case SPELL_ICE_DARTS:            MANUAL_SPELL(spell_ice_darts);break;
    case SPELL_IDENTIFY:             MANUAL_SPELL(spell_identify); break;
    case SPELL_ILLUMINATION:         MANUAL_SPELL(spell_illumination);break;
    case SPELL_ILLUSORY_WALL:        MANUAL_SPELL(spell_magical_wall);break;
    case SPELL_IMMOLATE:             MANUAL_SPELL(spell_immolate);break;
    case SPELL_ISOLATION:            MANUAL_SPELL(spell_isolation);break;
    case SPELL_LIGHTNING_BREATH:     MANUAL_SPELL(spell_lightning_breath);break;
    case SPELL_LOCATE_OBJECT:        MANUAL_SPELL(spell_locate_object); break;
    case SPELL_MAGIC_MISSILE:        MANUAL_SPELL(spell_magic_missile);break;
    case SPELL_MAJOR_PARALYSIS:      MANUAL_SPELL(spell_major_paralysis);break;
    case SPELL_MINOR_CREATION:       MANUAL_SPELL(spell_minor_creation); break;
    case SPELL_MOONBEAM:             MANUAL_SPELL(spell_moonbeam); break;
    case SPELL_MOONWELL:             MANUAL_SPELL(spell_moonwell); break;
    case SPELL_PHOSPHORIC_EMBERS:    MANUAL_SPELL(spell_phosphoric_embers); break;
    case SPELL_PLANE_SHIFT:          MANUAL_SPELL(spell_plane_shift); break;
    case SPELL_PRESERVE:             MANUAL_SPELL(spell_preserve); break;
    case SPELL_PYRE:                 MANUAL_SPELL(spell_pyre); break;
    case SPELL_RAIN:                 MANUAL_SPELL(spell_rain);break;
    case SPELL_RELOCATE:             MANUAL_SPELL(spell_relocate); break;
    case SPELL_REMOVE_CURSE:         MANUAL_SPELL(spell_remove_curse); break;
    case SPELL_RESURRECT:            MANUAL_SPELL(spell_resurrect); break;
    case SPELL_SHIFT_CORPSE:         MANUAL_SPELL(spell_shift_corpse); break;
    case SPELL_SOUL_TAP:             MANUAL_SPELL(spell_soul_tap); break;
    case SPELL_SUMMON:               MANUAL_SPELL(spell_summon); break;
    case SPELL_SUMMON_CORPSE:        MANUAL_SPELL(spell_summon_corpse); break;
    case SPELL_TELEPORT:             MANUAL_SPELL(spell_teleport); break;
    case SPELL_VENTRILOQUATE:        MANUAL_SPELL(spell_ventriloquate); break;
    case SPELL_WIZARD_EYE:           MANUAL_SPELL(spell_wizard_eye); break;
    case SPELL_WALL_OF_ICE:          MANUAL_SPELL(spell_magical_wall);break;
    case SPELL_WALL_OF_STONE:        MANUAL_SPELL(spell_magical_wall);break;
    case SPELL_WANDERING_WOODS:      MANUAL_SPELL(spell_wandering_woods);break;
    case SPELL_WORD_OF_COMMAND:      MANUAL_SPELL(spell_word_of_command);break;
    case SPELL_WORD_OF_RECALL:       MANUAL_SPELL(spell_recall); break;

    case CHANT_PEACE:                MANUAL_SPELL(chant_peace); break;
    case CHANT_IVORY_SYMPHONY:       MANUAL_SPELL(chant_ivory_symphony); break;
    case CHANT_APOCALYPTIC_ANTHEM:   MANUAL_SPELL(chant_apocalyptic_anthem); break;
    }
    /* Check for death caused during manual spells */
    if (cvict && DECEASED(cvict))
      return imp_skill;
  }

   /* Violent spells cause fights. */
  if (SINFO.violent && caster && cvict && attack_ok(cvict, caster, FALSE))
      set_fighting(cvict, caster, FALSE);

  return imp_skill;
}

/* Random messages to be sent to the room when a scroll is recited at a mob. */
/* These are used when the spheres of the spells don't tell us what message
 * to send. */
char *scroll_mob_msg[] = {
   "The writing on $p glows faintly as $n recites it at $N.",
   "$n turns toward $N and recites $p.",
   "$n faces $N and recites $p.",
   NULL};

/* Choose randomly among the strings in scroll_mob_msg */
char *random_scroll_mob_msg(void) {
   char *msg = "$n recites $p at $N."; /* Default message */
   int i = 0;
   for (;scroll_mob_msg[i];i++) {
      if (number(1, i) == 1)
         msg = scroll_mob_msg[i];
   }
   return msg;
}

/* Choose a message according to the sphere of spell(s) cast. */
char *get_scroll_mob_msg(int spell1, int spell2, int spell3) {

   /* Select one of the passed spells at random. Its sphere will be used
    * to determine the message. */

   int chosenspell = spell1;

   if (spell2 >= 1 && spell2 <= TOP_SKILL_DEFINE && number(1, 2) == 1)
      chosenspell = spell2;

   if (spell3 >= 1 && spell3 <= TOP_SKILL_DEFINE && number(1, 3) == 1)
      chosenspell = spell3;

   switch (skills[chosenspell].sphere) {
      case SKILL_SPHERE_FIRE:
         return "$n faces $N and recites $p, which is consumed in a burst of flames.";
      case SKILL_SPHERE_WATER:
         return "$n faces $N and recites $p, which dissolves into paste.";
      case SKILL_SPHERE_EARTH:
         return "$n faces $N and recites $p, which crumbles to dust.";
      default:
         return random_scroll_mob_msg();
   }
}

/*
 * mag_objectmagic: This is the entry-point for all magic items.  This should
 * only be called by the 'quaff', 'use', 'recite', etc. routines.
 *
 * For reference, object values 0-3:
 * staff  - [0] skill [1] max charges [2] num charges [3] spell num
 * wand   - [0] skill [1] max charges [2] num charges [3] spell num
 * scroll - [0] skill [1] spell num   [2] spell num   [3] spell num
 * potion - [0] skill [1] spell num   [2] spell num   [3] spell num
 *
 * Staves and wands will default to level 14 if the level is not specified;
 * the DikuMUD format did not specify staff and wand levels in the world
 * files (this is a CircleMUD enhancement).
 */

#define SCROLL_FAILURE_NONE        0
#define SCROLL_FAILURE_NOTSELF     1
#define SCROLL_FAILURE_ONLYSELF    2

void mag_objectmagic(struct char_data * ch, struct obj_data * obj,
                          char *argument)
{
   int i, target_status, spellnum;
   struct char_data *tch = NULL, *next_tch;
   struct obj_data *tobj = NULL;
   int scroll_failure, scroll_success;
   char *misc = NULL;
   char *actmsg;

   one_argument(argument, arg);

   switch (GET_OBJ_TYPE(obj)) {
      case ITEM_STAFF:
         act("You tap $p three times on the ground.", FALSE, ch, obj, 0, TO_CHAR);
         if (obj->action_description && strncmp(obj->action_description, "Nothing.", 8))
            act(obj->action_description, FALSE, ch, obj, 0, TO_ROOM);
         else
            act("$n taps $p three times on the ground.", FALSE, ch, obj, 0, TO_ROOM);

         if (GET_OBJ_VAL(obj, VAL_STAFF_CHARGES_LEFT) <= 0) {
            act("It seems powerless.", FALSE, ch, obj, 0, TO_CHAR);
            act("Nothing seems to happen.", FALSE, ch, obj, 0, TO_ROOM);
         } else {
            GET_OBJ_VAL(obj, VAL_STAFF_CHARGES_LEFT)--;
            WAIT_STATE(ch, PULSE_VIOLENCE);
            if (!check_spell_target(GET_OBJ_VAL(obj, VAL_STAFF_SPELL), ch, NULL, NULL))
               return;
            for (tch = world[ch->in_room].people; tch; tch = next_tch) {
               next_tch = tch->next_in_room;
               if (ch == tch)
                  continue;
               ch->casting.spell = 0;
               if (GET_OBJ_VAL(obj, VAL_STAFF_LEVEL))
                  call_magic(ch, tch, NULL, GET_OBJ_VAL(obj, VAL_STAFF_SPELL),
                        GET_OBJ_VAL(obj, VAL_STAFF_LEVEL), CAST_STAFF);
               else
                  call_magic(ch, tch, NULL, GET_OBJ_VAL(obj, VAL_STAFF_SPELL),
                        DEFAULT_STAFF_LVL, CAST_STAFF);
            }
         }
         break;
      case ITEM_WAND:
         spellnum = GET_OBJ_VAL(obj, VAL_WAND_SPELL);

         if (find_spell_target(spellnum, ch, arg, &target_status, &tch, &tobj)) {

            if (tch) {
               if (tch == ch) {
                  if (SINFO.targets & TAR_NOT_SELF) {
                     send_to_char("You cannot cast this spell upon yourself.\r\n", ch);
                     return;
                  } else {
                     act("You point $p at yourself.", FALSE, ch, obj, 0, TO_CHAR);
                     if (obj->action_description && strncmp(obj->action_description, "Nothing.", 8))
                        act(obj->action_description, FALSE, ch, obj, tobj, TO_ROOM);
                     else
                        act("$n points $p at $mself.", FALSE, ch, obj, 0, TO_ROOM);
                  }
               } else {
                  act("You point $p at $N.", FALSE, ch, obj, tch, TO_CHAR);

                  /* For the sake of distance spells (e.g., moonwell) where
                   * the target may not be in the same room, there is no
                   * reason to give the name of the target to observers... */

                  if (ch->in_room == tch->in_room) {
                     if (obj->action_description && strncmp(obj->action_description, "Nothing.", 8))
                        act(obj->action_description, FALSE, ch, obj, tch, TO_ROOM);
                     else {
                        act("$n points $p at $N.", TRUE, ch, obj, tch, TO_NOTVICT);
                        act("$n points $p at you.", TRUE, ch, obj, tch, TO_VICT);
                     }
                  } else {
                     act("$n points $p at nothing in particular.", TRUE, ch, obj, 0, TO_ROOM);
                  }
               }
            } else if (tobj) {
               act("You point $p at $P.", FALSE, ch, obj, tobj, TO_CHAR);
               if (ch->in_room == tobj->in_room) {
                  if (obj->action_description && strncmp(obj->action_description, "Nothing.", 8))
                     act(obj->action_description, FALSE, ch, obj, tobj, TO_ROOM);
                  else
                     act("$n points $p at $P.", TRUE, ch, obj, tobj, TO_ROOM);
               } else {
                  act("$n points $p at nothing in particular.", TRUE, ch, obj, 0, TO_ROOM);
               }
            } else {
               act("You wave $p in the air.", TRUE, ch, obj, 0, TO_CHAR);
               act("$n waves $p in the air.", TRUE, ch, obj, 0, TO_ROOM);
            }
         } else if (*arg) {
            sprintf(buf, "You can't see any %s here.\r\n", arg);
            send_to_char(buf, ch);
            return;
         } else {
            act("At what should $p be pointed?", FALSE, ch, obj, NULL, TO_CHAR);
            return;
         }

         if (GET_OBJ_VAL(obj, VAL_WAND_CHARGES_LEFT) <= 0) {
            act("It seems powerless.", FALSE, ch, obj, 0, TO_CHAR);
            act("Nothing seems to happen.", FALSE, ch, obj, 0, TO_ROOM);
            return;
         }

         if (!check_spell_target(spellnum, ch, tch, tobj))
            return;

         GET_OBJ_VAL(obj, VAL_WAND_CHARGES_LEFT)--;
         WAIT_STATE(ch, PULSE_VIOLENCE);

         misc = strdup(arg);
         if (ch->casting.misc)
           free(ch->casting.misc);
         ch->casting.misc = misc;
         ch->casting.spell = 0;
         if (GET_OBJ_VAL(obj, 0))
            call_magic(ch, tch, tobj, GET_OBJ_VAL(obj, VAL_WAND_SPELL),
                  GET_OBJ_VAL(obj, VAL_WAND_LEVEL), CAST_WAND);
         else
            call_magic(ch, tch, tobj, GET_OBJ_VAL(obj, VAL_WAND_SPELL),
                  DEFAULT_WAND_LVL, CAST_WAND);
         break;
      case ITEM_SCROLL:
         /* A scroll has multiple spells, and therefore multiple
          * target opportunities.
          *
          * If any of the spells can be legally cast, given the
          * caster's target choice, the scroll will be used up and
          * no error message will be sent.
          *
          * However, if none can be cast, an error message about
          * improper targeting will be sent based on the first
          * spell in the scroll.
          */

         scroll_failure = SCROLL_FAILURE_NONE;
         scroll_success = FALSE;

         /* Attempt to cast each spell. */
         for (i = VAL_SCROLL_SPELL_1; i <= VAL_SCROLL_SPELL_3; i++) {
            spellnum = GET_OBJ_VAL(obj, i);
            if (spellnum >= 1 && spellnum <= TOP_SKILL_DEFINE &&
                  find_spell_target(spellnum, ch, arg, &target_status, &tch, &tobj)) {
               if (SINFO.targets & TAR_SELF_ONLY && ch != tch && GET_LEVEL(ch) < LVL_GOD) {
                  if (scroll_failure == SCROLL_FAILURE_NONE)
                     scroll_failure = SCROLL_FAILURE_ONLYSELF;
               } else if (SINFO.targets & TAR_NOT_SELF && ch == tch) {
                  if (scroll_failure == SCROLL_FAILURE_NONE)
                     scroll_failure = SCROLL_FAILURE_NOTSELF;
               } else {

                  if (!scroll_success) {
                     scroll_success = TRUE;
                     act("You recite $p which dissolves.", TRUE, ch, obj, 0, TO_CHAR);
                     /* Decide what message to send to the room. */
                     if (obj->action_description && strncmp(obj->action_description, "Nothing.", 8))
                        /* The scroll has a specific action desription message. */
                        act(obj->action_description, FALSE, ch, obj, NULL, TO_ROOM);
                     else if (tch) {
                        /* A mobile target */
                        actmsg = get_scroll_mob_msg(GET_OBJ_VAL(obj, VAL_SCROLL_SPELL_1),
                                                    GET_OBJ_VAL(obj, VAL_SCROLL_SPELL_2), 
                                                    GET_OBJ_VAL(obj, VAL_SCROLL_SPELL_3));
                        act(actmsg, FALSE, ch, obj, tch, TO_ROOM);
                     } else if (tobj) {
                        /* An object target */
                        act("$n places $s hand on $P and recites $p.", FALSE, ch, obj, tobj, TO_ROOM);
                     } else {
                        /* No target */
                        act("$n recites $p.", FALSE, ch, obj, NULL, TO_ROOM);
                     }
                     WAIT_STATE(ch, PULSE_VIOLENCE);
                     misc = strdup(arg);
                     if (ch->casting.misc)
                       free(ch->casting.misc);
                     ch->casting.misc = misc;
                     ch->casting.spell = 0;
                  }
                  call_magic(ch, tch, tobj, spellnum, GET_OBJ_VAL(obj, VAL_SCROLL_LEVEL), CAST_SCROLL);
               }
            }
         }

         if (scroll_success) {
            /* If any spells were cast, we're done with the scroll. */
            if (obj != NULL)
               extract_obj(obj);
         } else if (scroll_failure == SCROLL_FAILURE_NOTSELF) {
            send_to_char("You cannot cast this spell on yourself.\r\n", ch);
            return;
         } else if (scroll_failure == SCROLL_FAILURE_ONLYSELF) {
            send_to_char("You can only cast this spell on yourself.\r\n", ch);
            return;
         } else if (!(*arg)) {
            act("What do you want to recite $p at?", FALSE,
                  ch, obj, NULL, TO_CHAR);
            return;
         } else {
            sprintf(buf, "You can't see any %s here.\r\n", arg);
            send_to_char(buf, ch);
            return;
         }
         break;
      case ITEM_POTION:
         tch = ch;
         act("You quaff $p.", FALSE, ch, obj, NULL, TO_CHAR);
         if (obj->action_description && strncmp(obj->action_description, "Nothing.", 8))
            act(obj->action_description, FALSE, ch, obj, NULL, TO_ROOM);
         else
            act("$n quaffs $p.", TRUE, ch, obj, NULL, TO_ROOM);

         WAIT_STATE(ch, PULSE_VIOLENCE);
         ch->casting.spell=0;
            for (i = VAL_POTION_SPELL_1; i <= VAL_POTION_SPELL_3; i++)
               if (!(call_magic(ch, ch, NULL, GET_OBJ_VAL(obj, i),
                     GET_OBJ_VAL(obj, VAL_POTION_LEVEL), CAST_POTION)))
                  break;

         if (obj != NULL)
            extract_obj(obj);
         break;
      default:
         log("SYSERR: Unknown object_type in mag_objectmagic");
         break;
   }
}


bool check_spell_stance_position(struct char_data *ch, int spellnum)
{
   if (GET_STANCE(ch) < STANCE_ALERT) {
      switch (GET_STANCE(ch)) {
         case STANCE_SLEEPING:
            send_to_char("You dream about great magical powers.\r\n", ch);
            break;
         case STANCE_RESTING:
            send_to_char("You cannot concentrate while resting.\r\n", ch);
            break;
         default:
            send_to_char("You can't do much of anything like this!\r\n", ch);
            break;
      }
      return 0;
   }

   if (GET_POS(ch) < SINFO.minpos) {
      switch (SINFO.minpos) {
         case POS_FLYING:
            cprintf(ch, "You must be flying to cast this spell.\r\n");
            break;
         case POS_STANDING:
            cprintf(ch, "You can only cast this spell while standing.\r\n");
            break;
         case POS_KNEELING:
            cprintf(ch, "You must at least be kneeling to cast this spell.\r\n");
            break;
         case POS_SITTING:
            cprintf(ch, "You'll have to at least sit up to cast this spell.\r\n");
            break;
         default:
            cprintf(ch, "Sorry, you can't cast this spell.  Who knows why.\r\n");
            break;
      }
      return 0;
   }

   return 1;
}

/*
 * cast_spell is used generically to cast any spoken spell, assuming we
 * already have the target char/obj and spell number.  It checks all
 * restrictions, etc., prints the words, etc.
 *
 * Entry point for NPC casts.  Recommended entry point for spells cast
 * by NPCs via specprocs.
 *
 * Return value: CAST_RESULT_ flags.
 */

int cast_spell(struct char_data * ch, struct char_data * tch,
               struct obj_data * tobj, int spellnum)
{
   char buf[256];
   int sphere, cresult = 0;

   if (spellnum < 0 || spellnum > TOP_SKILL_DEFINE) {
      sprintf(buf, "SYSERR: cast_spell trying to call spellnum %d\n", spellnum);
      log("%s",buf);
      return 0;
   }

   if (GET_STANCE(ch) == STANCE_FIGHTING && !SINFO.fighting_ok &&
       GET_LEVEL(ch) <= LVL_IMMORT) {
      send_to_char("Impossible!  You can't concentrate enough!\r\n", ch);
      return 0;
   }

   if (!check_spell_stance_position(ch, spellnum))
      return 0;

   if (EFF_FLAGGED(ch, EFF_CHARM) && (ch->master == tch) && SINFO.violent) {
      send_to_char("You are afraid you might hurt your master!\r\n", ch);
      return 0;
   }
   if (!check_spell_target(spellnum, ch, tch, tobj))
      return 0;
   if (IS_SET(SINFO.routines, MAG_GROUP) && !IS_GROUPED(ch)) {
      send_to_char("You can't cast this spell if you're not in a group!\r\n", ch);
      return 0;
   }
   if (GET_LEVEL(ch) < LVL_IMMORT) {
      switch (GET_CLASS(ch)) {
        case CLASS_PRIEST:
        case CLASS_PALADIN:
        case CLASS_RANGER:
          if (!IS_GOOD(ch)) {
            send_to_char("Your deity has removed your holy powers!\r\n", ch);
            return 0;
          }
          break;
        case CLASS_DIABOLIST:
        case CLASS_ANTI_PALADIN:
          if (!IS_EVIL(ch)) {
            send_to_char("Your deity has removed your unholy powers!\r\n", ch);
            return 0;
          }
          break;
      }
   }
   end_chant(ch, tch, tobj, spellnum);

   sphere = skills[spellnum].sphere;
   cresult = call_magic(ch, tch, tobj, spellnum, GET_SKILL(ch, sphere), CAST_SPELL);

   /* Prevent skill improvement for spells cast upon illusions */
   if (tch && MOB_FLAGGED(tch, MOB_ILLUSORY))
      cresult &= ~CAST_RESULT_IMPROVE;

   if (cresult & CAST_RESULT_IMPROVE)
     improve_skill(ch, sphere);
   return cresult;
}


int chant(struct char_data *ch, struct char_data *tch,
           struct obj_data *obj, int chantnum) {
  int cresult;

  if (chantnum < 0 || chantnum > TOP_SKILL_DEFINE) {
    sprintf(buf, "SYSERR: chant trying to call chantnum %d", chantnum);
    log("%s",buf);
    return 0;
  }

  if (GET_STANCE(ch) == STANCE_FIGHTING && !skills[chantnum].fighting_ok &&
      GET_LEVEL(ch) <= LVL_IMMORT) {
    send_to_char("Impossible!  You can't concentrate enough!\r\n", ch);
    return 0;
  }

   if (GET_STANCE(ch) < STANCE_ALERT) {
      switch (GET_STANCE(ch)) {
         case STANCE_SLEEPING:
            send_to_char("You dream about great magical powers.\r\n", ch);
            break;
         case STANCE_RESTING:
            send_to_char("You cannot concentrate while resting.\r\n", ch);
            break;
         default:
            send_to_char("You can't do much of anything like this!\r\n", ch);
            break;
      }
      return 0;
   }

   if (GET_POS(ch) < skills[chantnum].minpos) {
      switch (skills[chantnum].minpos) {
         case POS_FLYING:
            cprintf(ch, "You must be flying to chant this song.\r\n");
            break;
         case POS_STANDING:
            cprintf(ch, "You can only chant this song while standing.\r\n");
            break;
         case POS_KNEELING:
            cprintf(ch, "You must at least be kneeling to chant this song.\r\n");
            break;
         case POS_SITTING:
            cprintf(ch, "You'll have to at least sit up to chant this song.\r\n");
            break;
         default:
            cprintf(ch, "Sorry, you can't chant this song.  Who knows why.\r\n");
            break;
      }
      return 0;
   }

  if (!check_spell_target(chantnum, ch, tch, obj))
    return 0;
  if (EFF_FLAGGED(ch, EFF_CHARM) && (ch->master == tch) &&
      skills[chantnum].violent) {
    send_to_char("You are afraid you might hurt your master!\r\n", ch);
    return 0;
  }
  if (IS_SET(skills[chantnum].routines, MAG_GROUP) && !IS_GROUPED(ch)) {
    send_to_char("You can't chant this song if you're not in a group!\r\n", ch);
    return 0;
  }

  act("$n begins chanting in a deep voice.", FALSE, ch, 0, 0, TO_ROOM);
  send_to_char("You begin chanting in a deep voice.\r\n", ch);

  if (number(0, 101) > 50 + GET_SKILL(ch, SKILL_CHANT)) {
    send_to_char("You choke and grunt a raspy wail of pain.\r\n", ch);
    act("$n chokes on $s tears and coughs a raspy grunt.", TRUE, ch, 0, 0, TO_ROOM);
    return CAST_RESULT_CHARGE;
  }

  cresult = call_magic(ch, tch, obj, chantnum, GET_SKILL(ch, SKILL_CHANT), CAST_CHANT);

  /* Prevent skill improvement for chants against illusions */
  if (IS_SET(cresult, CAST_RESULT_IMPROVE) &&
        tch && MOB_FLAGGED(tch, MOB_ILLUSORY))
     return cresult & ~CAST_RESULT_IMPROVE;

  return cresult;
}


/*
 * do_cast is the entry point for PC-casted spells.  It parses the arguments,
 * determines the spell number and finds a target, throws the die to see if
 * the spell can be cast, and passes control to cast_spell().
 *
 * this function is a mirror of mob_cast for npc's.  These two could easily
 * be combined once the target issue is resolved.
 * if you change this, please reflect any changes in mob_cast
 */
ACMD(do_cast)
{
  struct char_data *tch = NULL;
  struct obj_data *tobj = NULL;
  int spellnum, target = 0;
  int target_status = TARGET_NULL;

  if (EFF_FLAGGED(ch, EFF_SILENCE)) {
    send_to_char("Your lips move, but no sound forms.\r\n", ch);
    return;
  }

  if (CASTING(ch)) {
    send_to_char("But you are already casting a spell!\r\n", ch);
    return;
  }

  if (GET_STANCE(ch) < STANCE_ALERT) {
    send_to_char("You are too relaxed.\r\n", ch);
    return;
  }

  if (subcmd == SCMD_CHANT) {
    if (IS_NPC(ch)) {
      send_to_char("NPC's can't chant!\r\n", ch);
      return;
    }
    if (!GET_SKILL(ch, SKILL_CHANT)) {
      send_to_char("You imitate a monk chanting...Monkey see, monkey do?\r\n", ch);
      return;
    }
    if (GET_LEVEL(ch) < LVL_GOD && GET_COOLDOWN(ch, CD_CHANT)) {
      int hours = GET_COOLDOWN(ch, CD_CHANT) / (1 MUD_HR);
      if (hours == 1)
        strcpy(buf1, "hour");
      else
        sprintf(buf1, "%d hours", hours);
      sprintf(buf, "You're still out of breath from chanting recently!\r\n"
                   "You'll be able to chant again in another %s.\r\n", buf1);
      send_to_char(buf, ch);
      return;
    }
  }

  argument = delimited_arg(argument, arg, '\'');

  if (!*arg) {
    if (subcmd == SCMD_CHANT)
      send_to_char("What do you want to chant?\r\n", ch);
    else if (subcmd == SCMD_SING)
      send_to_char("What song do you want to sing?\r\n", ch);
    else
      send_to_char("Cast what where?\r\n", ch);
    return;
  }

  if (subcmd == SCMD_CHANT) {
    spellnum = find_chant_num(arg);
    if (!IS_CHANT(spellnum)) {
      send_to_char("Chant what?!?\r\n", ch);
      return;
    }
  }
  else if (subcmd == SCMD_SING) {
    spellnum = find_song_num(arg);
    if (!IS_SONG(spellnum)) {
      send_to_char("Sing what?!?\r\n", ch);
      return;
    }
  }
  else {
    spellnum = find_spell_num(arg);
    if (!IS_SPELL(spellnum)) {
      send_to_char("Cast what?!?\r\n", ch);
      return;
    }
  }

  /* Can the caster actually cast this spell? */
  if (GET_LEVEL(ch) < SINFO.min_level[(int) GET_CLASS(ch)] ||
      !GET_SKILL(ch, spellnum)) {
    if (subcmd == SCMD_CHANT)
      send_to_char("You do not know that chant!\r\n", ch);
    else if (subcmd == SCMD_SING)
      send_to_char("You do not know that song!\r\n", ch);
    else
      send_to_char("You do not know that spell!\r\n", ch);
    return;
  }

  /* Is the spell memorized?  PC's only. */
  if (subcmd == SCMD_CAST && !IS_NPC(ch) && GET_LEVEL(ch) < LVL_IMMORT &&
      !check_spell_memory(ch, spellnum)) {
    send_to_char("You do not have that spell memorized!\r\n", ch);
    return;
  }

  if (!check_spell_stance_position(ch, spellnum))
    return;

  /* Find the target */
  skip_spaces(&argument);
  one_argument(argument, arg);

  target = find_spell_target(spellnum, ch, arg,
        &target_status, &tch, &tobj);

  if (!target) {
    if (*arg) {
      if (subcmd == SCMD_CHANT)
        send_to_char("Cannot find the target of your chant!\r\n", ch);
      else if (subcmd == SCMD_SING)
        send_to_char("Cannot find the target of your song!\r\n", ch);
      else
        send_to_char("Cannot find the target of your spell!\r\n", ch);
    }
    else {
      if (subcmd == SCMD_CHANT)
        send_to_char("To whom should the chant be sung?\r\n", ch);
      else if (subcmd == SCMD_SING)
        send_to_char("To whom should the song be sung?\r\n", ch);
      else {
        sprintf(buf, "Upon %s should the spell be cast?\r\n",
                IS_SET(SINFO.targets, TAR_OBJ_ROOM | TAR_OBJ_INV |
                   TAR_OBJ_WORLD | TAR_STRING) ? "what" : "whom");
        send_to_char(buf, ch);
      }
    }
    return;
  }

  if (!check_spell_target(spellnum, ch, tch, tobj))
    return;

  /* An injured throat makes it difficult to cast. */
  if (EFF_FLAGGED(ch, EFF_HURT_THROAT) &&
      number(0, MAX_ABILITY_VALUE) > GET_VIEWED_CON(ch)) {
    if (subcmd == SCMD_CHANT) {
      act("$n starts chanting, but stops abruptly, coughing up blood!",
          FALSE, ch, 0, 0, TO_ROOM);
      cprintf(ch, "You begin chanting, but your throat causes you to "
                  "cough up blood!\r\n");
    }
    else if (subcmd == SCMD_SING) {
      act("$n starts singing, but stops abruptly, coughing up blood!",
          FALSE, ch, 0, 0, TO_ROOM);
      cprintf(ch, "You begin singing, but your throat causes you to "
                  "cough up blood!\r\n");
    }
    else {
      act("$n starts casting, but stops abruptly, coughing up blood!",
          FALSE, ch, 0, 0, TO_ROOM);
      cprintf(ch, "You begin casting, but your throat causes you to "
                  "cough up blood!\r\n");
    }
    WAIT_STATE(ch, PULSE_VIOLENCE);
    return;
  }

  /* If this is an aggro cast, make the caster become visible. */
  if (target && SINFO.violent)
     aggro_lose_spells(ch);

  /*
   * Set the character to casting and setup the casting structure for
   * complete_spell().
   */
  ch->casting.spell = spellnum;
  ch->casting.tch = tch;
  ch->casting.obj = tobj;

  /* Targets should only remember the caster for cast-type actions
   * that take time, like spells. If/when singing is implemented,
   * its targets should remember the caster if and only if the
   * singing is an event, at whose completion the targets will be
   * told to forget. Chanting is instantaneous, so its targets should
   * not remember the caster. */
  if (subcmd == SCMD_CAST)
    targets_remember_caster(ch);

  if (ch->casting.misc)
    free(ch->casting.misc);
  ch->casting.misc = strdup(argument);
  ch->casting.target_status = target_status;

  ch->casting.casting_time = SINFO.cast_time;

  if (subcmd == SCMD_CHANT) {
    int cresult = chant(ch, tch, tobj, spellnum);
    if (IS_SET(cresult, CAST_RESULT_IMPROVE))
      improve_skill(ch, SKILL_CHANT);
    if (IS_SET(cresult, CAST_RESULT_CHARGE)) {
      SET_COOLDOWN(ch, CD_CHANT, 4 MUD_HR);
      WAIT_STATE(ch, PULSE_VIOLENCE * 1.5);
    }
  }
  else if (subcmd == SCMD_SING) {

  }
  else {
    SET_FLAG(GET_EVENT_FLAGS(ch), EVENT_CASTING);

    /* Chance to quick chant. */
    if (number(1, 102) < GET_SKILL(ch, SKILL_QUICK_CHANT))
      ch->casting.casting_time /= 2;
    improve_skill(ch, SKILL_QUICK_CHANT);

    /* Show chant messages. */
    start_chant(ch);
    WAIT_STATE(ch, ch->casting.casting_time * PULSE_VIOLENCE / 2);

    /* Gods instacast.  Start chant and then stop casting in order to
     * display correct message. */
    if (GET_LEVEL(ch) >= LVL_GOD) {
      STOP_CASTING(ch);
      complete_spell(ch);
    } else {
      event_create(EVENT_CASTING, casting_handler, ch, FALSE,
          &(ch->events), PULSE_VIOLENCE / 2);
    }
  }
}

bool check_spell_target(int spellnum, struct char_data *ch,
                        struct char_data *tch, struct obj_data *tobj) {
  const char *verb = IS_CHANT(spellnum) ? "chant" : "cast";
  const char *noun = IS_CHANT(spellnum) ? "song" : "spell";

  if (IS_SET(SINFO.targets, TAR_SELF_ONLY) && tch != ch && GET_LEVEL(ch) < LVL_GOD) {
    cprintf(ch, "You can only %s this %s %s yourself!\r\n", verb, noun,
            IS_CHANT(spellnum) ? "to" : "upon");
    return FALSE;
  }
  if (IS_SET(SINFO.targets, TAR_NOT_SELF) && tch == ch) {
    cprintf(ch, "You cannot %s this %s %s yourself!\r\n", verb, noun,
            IS_CHANT(spellnum) ? "to" : "upon");
    return FALSE;
  }
  if (IS_SET(SINFO.targets, TAR_OUTDOORS) && CH_INDOORS(ch)) {
    cprintf(ch, "This area is too enclosed to %s that %s!\r\n", verb, noun);
    return FALSE;
  }
  if (IS_SET(SINFO.targets, TAR_GROUND) && !CH_INDOORS(ch) && !QUAKABLE(IN_ROOM(ch))) {
    cprintf(ch, "You must be on solid ground to %s that %s!\r\n", verb, noun);
    return FALSE;
  }
  if (IS_SET(SINFO.targets, TAR_NIGHT_ONLY) && SUN(IN_ROOM(ch)) == SUN_LIGHT) {
    cprintf(ch, "You cannot %s this %s during the day!\r\n", verb, noun);
    return FALSE;
  }
  if (IS_SET(SINFO.targets, TAR_DAY_ONLY) && SUN(IN_ROOM(ch)) == SUN_DARK) {
    cprintf(ch, "You can only %s this %s during the day!\r\n", verb, noun);
    return FALSE;
  }
  return TRUE;
}

/* FIND_SPELL_TARGET
 *
 * Given spell, caster, and target string, locate the actual targetted object,
 * based on the spell's allowable target locations.
 *
 * INPUTS
 *
 *   spellnum         Spell number.
 *   ch               The caster.
 *   t                String provided by the caster to indicate the target.
 *
 * OUTPUTS
 *
 *   (return value)   Whether a target was found.
 *   target_status    Type of location where the target was found.
 *   tch              A char_data target.
 *   tobj             An object target.
 */

bool find_spell_target(int spellnum, struct char_data *ch, char *t,
      int *target_status, struct char_data **tch, struct obj_data **tobj) {

   struct find_context context = find_vis_by_name(ch, t);

   *tch = NULL;
   *tobj = NULL;
   *target_status = TARGET_NULL;

   if (IS_SET(SINFO.targets, TAR_IGNORE)) {
      *target_status = TARGET_ALL_ROOM;
      return TRUE;
   } else if (*t) {
      if ((IS_SET(SINFO.targets, TAR_CHAR_ROOM))) {
         if ((*tch = find_char_in_room(&world[ch->in_room], context)) != NULL) {
            *target_status = TARGET_IN_ROOM;
            return TRUE;
         }
      }
      if (IS_SET(SINFO.targets, TAR_CHAR_WORLD))
         if ((*tch = find_char_around_char(ch, context))) {
            *target_status = TARGET_IN_WORLD;
            return TRUE;
         }
      if (IS_SET(SINFO.targets, TAR_OBJ_INV))
         if ((*tobj = find_obj_in_list(ch->carrying, context))) {
            *target_status = TARGET_IN_INV;
            return TRUE;
         }
      if (IS_SET(SINFO.targets, TAR_OBJ_EQUIP)) {
         if ((*tobj = find_obj_in_eq(ch, NULL, context))) {
            *target_status = TARGET_EQUIP;
            return TRUE;
         }
      }
      if (IS_SET(SINFO.targets, TAR_OBJ_ROOM))
         if ((*tobj = find_obj_in_list(world[ch->in_room].contents, find_vis_by_name(ch, t)))) {
            *target_status = TARGET_IN_ROOM;
            return TRUE;
         }
      if (IS_SET(SINFO.targets, TAR_OBJ_WORLD))
         if ((*tobj = find_obj_around_char(ch, find_vis_by_name(ch, t)))) {
            *target_status = TARGET_IN_WORLD;
            return TRUE;
         }
      if (IS_SET(SINFO.targets, TAR_STRING)) {
         *target_status = TARGET_STRING;
         return TRUE;
      }

   } else {                        /* if target string is empty */
      if (IS_SET(SINFO.targets, TAR_FIGHT_SELF))
         if (FIGHTING(ch) != NULL) {
            *tch = ch;
            *target_status = TARGET_SELF;
            return TRUE;
         }
      if (IS_SET(SINFO.targets, TAR_FIGHT_VICT))
         if (FIGHTING(ch) != NULL) {
            *tch = FIGHTING(ch);
            *target_status = TARGET_FIGHTING;
            return TRUE;
         }
      /* if no target specified, and the spell isn't violent, default to self */
      if (IS_SET(SINFO.targets, TAR_CHAR_ROOM) && !SINFO.violent &&
            !IS_SET(SINFO.targets, TAR_NOT_SELF)) {
         *tch = ch;
         *target_status = TARGET_SELF;
         return TRUE;
      }
   }
   return FALSE;
}


void complete_spell(struct char_data *ch) {

   /* Remove links from target to caster */
   if (ch->casting.obj)
      obj_forget_caster(ch->casting.obj, ch);
   if (ch->casting.tch)
      char_forget_caster(ch->casting.tch, ch);

   /* Insanity really makes it hard to cast spells. */
   if (EFF_FLAGGED(ch, EFF_INSANITY) && !mag_savingthrow(ch, SAVING_PARA)) {
      act("$n babbles a bit as a strand of drool drips down $s chin.", TRUE, ch, 0, 0, TO_ROOM);
      act("Your mind is not in any condition to cast spells.", FALSE, ch, 0, 0, TO_CHAR);
      act("&1$n&1 stops chanting abruptly!&0", TRUE, ch, 0, 0, TO_ROOM);
      return;
   }

   if (GET_LEVEL(ch) < LVL_GOD && ch->casting.spell != SPELL_VENTRILOQUATE) {
     send_to_char("You complete your spell.\r\n", ch);
     act("$n completes $s spell...", FALSE, ch, 0, 0, TO_ROOM);
   }

   if (cast_spell(ch, ch->casting.tch, ch->casting.obj, ch->casting.spell) &
         CAST_RESULT_CHARGE) {

      /* Lag the caster */
      WAIT_STATE(ch, PULSE_VIOLENCE);

      /* Erase memorized spell */
      charge_mem(ch, ch->casting.spell);
        

      if (IS_NPC(ch) && skills[ch->casting.spell].violent && 
            ch->casting.tch && IS_NPC(ch->casting.tch) && 
            !FIGHTING(ch->casting.tch) &&
            GET_STANCE(ch->casting.tch) >= STANCE_RESTING && number(0, 4)) {
         attack(ch->casting.tch, ch);
         remember(ch->casting.tch, ch);
      }

   }
}

/*
 * This function is a copy of do_cast, but it is for NPCs.  If you make
 * any changes here, make them to do_cast also.
 * Returns TRUE if the mob started casting and FALSE otherwise.
 */
bool mob_cast(struct char_data *ch, struct char_data *tch, struct obj_data *tobj, int spellnum)
{
  int target_status = TARGET_NULL;
  int circle = SPELL_CIRCLE(ch, spellnum);
  ACMD(do_stand);
  struct char_data *targ_ch = NULL;
  struct obj_data *targ_obj = NULL;

  if (!IS_NPC(ch))
    return FALSE;

  if (EFF_FLAGGED(ch, EFF_SILENCE))
    return FALSE;

  if (CASTING(ch))
    return FALSE;

  if (!AWAKE(ch))
    return FALSE;

  if (GET_MOB_WAIT(ch) <= 0 && GET_POS(ch) < POS_STANDING)
    do_stand(ch, "", 0, 0);

  if (GET_STANCE(ch) < STANCE_ALERT)
    return FALSE;

  if (!IS_SPELL(spellnum))
    return FALSE;

  if (GET_LEVEL(ch) < SINFO.min_level[(int) GET_CLASS(ch)])
    return FALSE;

  if (!GET_SKILL(ch, spellnum))
    return FALSE;

  if (ROOM_FLAGGED(ch->in_room, ROOM_NOMAGIC))
    return FALSE;

  /* Check alignment restrictions for clerical classes. */
  if ((GET_CLASS(ch) == CLASS_DIABOLIST && !IS_EVIL(ch)) ||
      (GET_CLASS(ch) == CLASS_PRIEST && !IS_GOOD(ch)) ||
      (GET_CLASS(ch) == CLASS_PALADIN && !IS_GOOD(ch)) ||
      (GET_CLASS(ch) == CLASS_RANGER && !IS_GOOD(ch)) ||
      (GET_CLASS(ch) == CLASS_ANTI_PALADIN && !IS_EVIL(ch)))
    return FALSE;

  /* Check mob's position and stance. */
  if (SINFO.minpos > GET_POS(ch) || GET_STANCE(ch) < STANCE_ALERT ||
        (!SINFO.fighting_ok && GET_STANCE(ch) == STANCE_FIGHTING))
    return FALSE;

  /* Check if mob has slots in this spell's circle in its spell bank */
  if (GET_MOB_SPLBANK(ch, circle) <= 0)
    return FALSE;

  /* Find the target */
  if (IS_SET(SINFO.targets, TAR_IGNORE))
    target_status = TARGET_ALL_ROOM;
  else if (tch && IS_SET(SINFO.targets, TAR_CHAR_ROOM) && ch->in_room == tch->in_room) {
    target_status = TARGET_IN_ROOM;
    targ_ch = tch;
  }
  else if (tch && IS_SET(SINFO.targets, TAR_CHAR_WORLD) && tch->in_room != NOWHERE) {
    target_status = TARGET_IN_WORLD;
    targ_ch = tch;
  }
  else if (tobj && IS_SET(SINFO.targets, TAR_OBJ_INV) && tobj->carried_by) {
    target_status = TARGET_IN_INV;
    targ_obj = tobj;
  }
  else if (tobj && IS_SET(SINFO.targets, TAR_OBJ_EQUIP) && tobj->worn_by) {
    target_status = TARGET_EQUIP;
    targ_obj = tobj;
  }
  else if (tobj && IS_SET(SINFO.targets, TAR_OBJ_ROOM) && ch->in_room == tobj->in_room) {
    target_status = TARGET_IN_ROOM;
    targ_obj = tobj;
  }
  else if (tobj && IS_SET(SINFO.targets, TAR_OBJ_WORLD)) {
    target_status = TARGET_IN_WORLD;
    targ_obj = tobj;
  }
  else if (FIGHTING(ch) && IS_SET(SINFO.targets, TAR_FIGHT_SELF)) {
    target_status = TARGET_SELF;
    targ_ch = ch;
  }
  else if (FIGHTING(ch) && IS_SET(SINFO.targets, TAR_FIGHT_VICT)) {
    target_status = TARGET_FIGHTING;
    targ_ch = FIGHTING(ch);
  }
  else if (IS_SET(SINFO.targets, TAR_CHAR_ROOM) && !SINFO.violent &&
        !IS_SET(SINFO.targets, TAR_NOT_SELF)) {
    target_status = TARGET_SELF;
    targ_ch = ch;
  }
  else
    return FALSE;

  if (!check_spell_target(spellnum, ch, tch, tobj))
    return FALSE;

  /* An injured throat makes it difficult to cast. */
  if (EFF_FLAGGED(ch, EFF_HURT_THROAT) &&
      number(0, MAX_ABILITY_VALUE) > GET_VIEWED_CON(ch)) {
    act("$n starts casting, but stops abruptly, coughing up blood!",
        FALSE, ch, 0, 0, TO_ROOM);
    cprintf(ch, "You begin casting, but your throat causes you to "
                "cough up blood!\r\n");
    WAIT_STATE(ch, PULSE_VIOLENCE);
    return TRUE; /* makes caller think we cast a spell so they don't try again */
  }

  /* Reveal hidden/invis/concealed attackers. */
  if (SINFO.violent)
     aggro_lose_spells(ch);

  SET_FLAG(GET_EVENT_FLAGS(ch), EVENT_CASTING);
  ch->casting.spell = spellnum;
  ch->casting.tch = targ_ch;
  ch->casting.obj = targ_obj;
  targets_remember_caster(ch);
  if (ch->casting.misc)
    free(ch->casting.misc);
  if (tch)
    ch->casting.misc = strdup(GET_NAME(tch));
  else if (tobj)
    ch->casting.misc = strdup(GET_OBJ_NAME(tobj));
  else
    ch->casting.misc = strdup("");
  ch->casting.target_status = target_status;

  /* Quick chant for mobs --gurlaek 7/13/1999 */
  if (number(1,102) < GET_SKILL(ch, SKILL_QUICK_CHANT))
    ch->casting.casting_time = (int) (SINFO.cast_time / 2);
  else
    ch->casting.casting_time = SINFO.cast_time;

  /* Show chant messages. */
  start_chant(ch);
  WAIT_STATE(ch, ch->casting.casting_time * PULSE_VIOLENCE / 2);
  event_create(EVENT_CASTING, casting_handler, ch, FALSE,
      &(ch->events), 0);
  return TRUE;
}

void start_chant(struct char_data *ch) {
  void garble_text(char *string, int percent);
  struct char_data *gch;
  struct know_spell *tmp, *tmp2;
  char lbuf[256];
  char spellbuf[256];
  char garblebuf[256];
  char namebuf[256];
  int ofs = 0, j, circle, percent;
  bool bad;

  memset(lbuf, 0x0, 256);
  memset(garblebuf, 0x0, 256);

  /* free the caster's old list of people that knew the spell */
  for(tmp = ch->see_spell; tmp; tmp = tmp2) {
    tmp2 = tmp->next;
    free(tmp);
  }
  ch->see_spell = NULL;

  /* Randomly garble the letters. */
  strcpy(lbuf, skills[ch->casting.spell].name);
  garble_text(lbuf, -1);

  /* Change the syllables of the spoken spell */
  while (*(lbuf + ofs))
    for (j = 0; *(syls[j].org); j++)
      if (!strncmp(syls[j].org, lbuf + ofs, strlen(syls[j].org))) {
        strcat(garblebuf, syls[j].new);
        ofs += strlen(syls[j].org);
      }

  /* Loop through bystanders and see if they recognize the spell */
  for (gch = world[ch->in_room].people; gch; gch = gch->next_in_room) {

    /* Caster gets its own message later, and no message to sleeping. */
    if(gch == ch || !AWAKE(gch))
      continue;

    /* The casting of ventriloquate is generally not heard */
    if (ch->casting.spell == SPELL_VENTRILOQUATE &&
          (GET_LEVEL(gch) < LVL_IMMORT || GET_LEVEL(gch) < GET_LEVEL(ch)))
       continue;

    bad = FALSE;
    memset(namebuf, 0x0, MAX_NAME_LENGTH);
    memset(spellbuf, 0x0, 256);
    percent = -1; /* assume failure at first */

    /* Clerical and arcane magic don't recognize each others spells. */
    if (MEM_MODE(ch) == MEM_MODE(gch)) {
      percent = GET_SKILL(gch, SKILL_KNOW_SPELL); /* now we have a chance */

      /* Find the circle of caster's spell */
      circle = SPELL_CIRCLE(ch, ch->casting.spell);

      /* If bystander does not have that circle, 50% chance to recognize. */
      if (!spells_of_circle[(int)GET_LEVEL(gch)][circle])
        percent /= 2;
      /* If bystander is more than 1 circle down, no chance */
      if (circle > 1 && !spells_of_circle[(int)GET_LEVEL(gch)][circle - 1])
        percent = 0;

      if (number(0, 1))
        improve_skill(gch, SKILL_KNOW_SPELL);
    }

    /* KNOW_SPELL skill check */
    if (number(0, 101) > percent && GET_LEVEL(gch) < LVL_GOD) {
      if (number(0, 100) < 20) {
        /* For really bad rolls, replace the spell with an incorrect one */
        strcpy(spellbuf, skills[bad_guess(ch)].name);
        bad = TRUE;
      }
      else
        /* Copy the garbled buffer into the spell */
        strcpy(spellbuf, garblebuf);
    }
    else {
      /* Hey we recognized the spell! */
      strcpy(spellbuf, skills[ch->casting.spell].name);

      /*
       * Create the caster's see_spell list: This is a list of char's who
       * have recognized the spell and will see it clearly when it is cast
       * if they are still in the room.
       */
      CREATE(tmp, struct know_spell, 1);
      tmp->sch = gch;
      tmp->next = ch->see_spell;
      ch->see_spell = tmp;
    }

    /* Is there a Target?  Is it in the room?  Is it not the caster?*/
    if (ch->casting.tch && ch->casting.tch->in_room == ch->in_room &&
        ch != ch->casting.tch) {

      /* Intelligence check to determine the target.  If we know the spell we know the target */
      if (number(0,101) < GET_INT(gch) ||
          !strcmp(spellbuf, skills[ch->casting.spell].name) ||
          (bad) ||
          GET_LEVEL(gch) >= LVL_GOD) {
        if(ch->casting.tch == gch)
          /* Target is the receiver of the message */
          sprintf(namebuf," at &1&bYou&0!!!");
        else
          /* target is someone else in room */
          sprintf(namebuf," at &7&b%s&0", GET_NAME(ch->casting.tch));
      }
    }

    /* Message to bystander */
    sprintf(buf, "$n %s &3&b'%s'&0%s...",
            (GET_LEVEL(ch) < LVL_GOD) ? "starts casting" : "casts",
            spellbuf, namebuf);
    act(buf, FALSE, ch, 0, gch, TO_VICT);
  }

  /* Message to caster */
  if (GET_LEVEL(ch) < LVL_GOD)
    send_to_char("You start chanting...\r\n", ch);
  else
    send_to_char("You cast your spell...\r\n", ch);
}

/*
 * Display incorrect spell on a very bad KNOW_SPELL roll.
 */
int bad_guess(struct char_data *ch) {

  /*
   * Replace offensive spells with nonoffensive spells,
   * and nonoffensive spells with offensive spells.
   */

  if (MEM_MODE(ch) == MEMORIZE) {
    if(skills[ch->casting.spell].violent)
      return bogus_mage_spells[number(1,10)];
    else
      return bogus_mage_spells[number(11,20)];
  }
  else {
    if (skills[ch->casting.spell].violent)
      return bogus_priest_spells[number(1,10)];
    else
      return bogus_priest_spells[number(11,20)];
  }
}



/* Remember someone who's casting a spell at me, so that if I'm
 * destroyed before the spell is completed, the spell can
 * be safely aborted. */
void targets_remember_caster(struct char_data *caster)
{
   struct char_data *temp;

   if (caster->casting.obj) {
      /* This should never happen. If this code catches a circular list,
       * it will prevent a crash. The execution time cost of this code should
       * be low, since the number of spells being cast at any person or object
       * should also be low. */
      for (temp = caster->casting.obj->casters; temp; temp = temp->next_caster)
         if (temp == caster) {
            sprintf(buf, "1. CIRCULAR CAST LIST ERROR: %s was already casting at %s!",
                  GET_NAME(caster), caster->casting.obj->short_description);
            mudlog(buf, NRM, LVL_GOD, TRUE);
            return;
         }
      caster->next_caster = caster->casting.obj->casters;
      caster->casting.obj->casters = caster;
   }

   if (caster->casting.tch) {
      for (temp = caster->casting.tch->casters; temp; temp = temp->next_caster)
         if (temp == caster) {
            sprintf(buf, "2. CIRCULAR CAST LIST ERROR: %s was already casting at %s!",
                  GET_NAME(caster), GET_NAME(caster->casting.tch));
            mudlog(buf, NRM, LVL_GOD, TRUE);
            return;
         }
      caster->next_caster = caster->casting.tch->casters;
      caster->casting.tch->casters = caster;
   }
}

/* Forget someone who's casting a spell at you.  This can happen when
 * the spell is complete or has been aborted for any reason. */
void obj_forget_caster(struct obj_data *obj, struct char_data *caster)
{
   struct char_data *temp;

   REMOVE_FROM_LIST(caster, obj->casters, next_caster);
}

void char_forget_caster(struct char_data *ch, struct char_data *caster)
{
   struct char_data *temp;

   REMOVE_FROM_LIST(caster, ch->casters, next_caster);
}

/* Forget everyone who is casting a spell at you.  This tends to happen
 * when you're removed from the game. */
void obj_forget_casters(struct obj_data *obj)
{
   struct char_data *caster, *c;

   for (caster = obj->casters; caster;) {
      /* First make the caster forget what they it was casting its
       * spell upon.  This prevents it from coming back and calling
       * obj_forget_caster() in STOP_CASTING() and messing up our list. */
      caster->casting.obj = NULL;
      STOP_CASTING(caster);
      if (AWAKE(caster)) {
         act("You stop chanting abruptly!", FALSE, caster, 0, 0, TO_CHAR);
         act("$n stops chanting abruptly!", FALSE, caster, 0, 0, TO_ROOM);
      }
      c = caster;
      caster = caster->next_caster;
      c->next_caster = NULL;
   }
   obj->casters = NULL;
}

void char_forget_casters(struct char_data *ch)
{
   struct char_data *caster, *c;

   for (caster = ch->casters; caster;) {
      /* First make the caster forget what it was casting its
       * spell upon.  This prevents it from coming back and calling
       * char_forget_caster() in STOP_CASTING() and messing up our list. */
      caster->casting.tch = NULL;
      STOP_CASTING(caster);
      if (AWAKE(caster)) {
         act("You stop chanting abruptly!", FALSE, caster, 0, 0, TO_CHAR);
         act("$n stops chanting abruptly!", FALSE, caster, 0, 0, TO_ROOM);
      }
      c = caster;
      caster = caster->next_caster;
      c->next_caster = NULL;
   }
   ch->casters = NULL;
}

bool valid_cast_stance(struct char_data *ch, int spellnum)
{
   if (!IS_SPELL(spellnum))
      return FALSE;

   if (!skills[spellnum].fighting_ok && GET_STANCE(ch) == STANCE_FIGHTING)
      return FALSE;

   return GET_POS(ch) >= skills[spellnum].minpos;
}

/***************************************************************************
 * $Log: spell_parser.c,v $
 * Revision 1.191  2010/06/05 14:56:27  mud
 * Moving cooldowns to their own file.
 *
 * Revision 1.190  2009/07/18 01:17:23  myc
 * Adding decay, iron maiden, spinechiller, and bone draw spells
 * for necromancer.
 *
 * Revision 1.189  2009/06/11 13:36:05  myc
 * When you level gain, you're healed to full.
 *
 * Revision 1.188  2009/05/22 17:38:50  myc
 * Fix missing newline on detonate failure message.
 *
 * Revision 1.187  2009/03/21 06:36:13  myc
 * Realphabetize manual spell list.
 *
 * Revision 1.186  2009/03/21 06:32:37  jps
 * Make phosphoric embers manual spell
 *
 * Revision 1.185  2009/03/20 16:06:04  jps
 * Removed spells of lesser/greater invocation.
 *
 * Revision 1.184  2009/03/20 06:22:37  myc
 * Oops, accidentally removed energy drain case from cast_spell.
 *
 * Revision 1.183  2009/03/20 06:15:17  myc
 * Adding a TAR_GROUND cast requirement.  Added detonation,
 * phosphoric embers, positive field, and acid burst spells.
 * Removed combust and heatwave.  Made soul tap a manual spell.
 *
 * Revision 1.182  2009/03/09 16:57:47  myc
 * Made detect poison more like detect align.
 *
 * Revision 1.181  2009/03/09 03:26:34  jps
 * Moved individual spell definitions to spell.c and spell.h.
 *
 * Revision 1.180  2009/03/08 23:34:14  jps
 * Renamed spells.[ch] to casting.
 *
 * Revision 1.179  2009/03/03 19:43:44  myc
 * New target finding mechanism in find.c.
 *
 * Revision 1.178  2009/02/18 19:48:08  myc
 * Let imms cast spells during fighting that they wouldn't normally
 * be able to ;)
 *
 * Revision 1.177  2009/02/11 17:03:39  myc
 * Check EDITING(d) where PLR_WRITING is checked in end_chant.
 *
 * Revision 1.176  2009/02/05 19:20:56  myc
 * Allow imms to cast spells in !magic rooms.
 *
 * Revision 1.175  2009/02/05 16:40:34  myc
 * Don't let players start casting a spell just to find out at the
 * end they're in the wrong stance/position.  It will stop them
 * immediately now.
 *
 * Revision 1.174  2009/01/16 23:36:34  myc
 * Fix use of uninitialized variable usage in mob_cast (effects
 * were showing up on syslog as errors in casting_handler() event).
 *
 * Revision 1.173  2008/10/14 02:24:42  myc
 * mob_cast was using GET_NAME on a possibly null tch.  Fixed.
 *
 * Revision 1.172  2008/09/21 21:04:20  jps
 * Passing cast type to mag_affect so that potions of bless/dark presence can be quaffed by neutral people.
 *
 * Revision 1.171  2008/09/20 07:27:45  jps
 * set_fighting takes a 3rd parameter, reciprocate, which will set the attackee fighting
 * the attacker if true.
 *
 * Revision 1.170  2008/09/20 06:57:07  jps
 * Don't cause the casting event to start immediately for mortals.
 *
 * Revision 1.169  2008/09/13 16:03:28  jps
 * The indoors check for spells was reversed.
 *
 * Revision 1.168  2008/09/11 02:50:02  jps
 * Changed skills so you have a minimum position, and fighting_ok fields.
 *
 * Revision 1.167  2008/09/09 08:23:37  jps
 * Placed sector info into a struct and moved its macros into rooms.h.
 *
 * Revision 1.166  2008/08/29 16:55:00  myc
 * Made it so immortals can cast self-only spells on other characters.
 * Also, players will get early warning if they can't cast a spell
 * because of targeting issues (instead of having to wait until the
 * end of the cast).
 *
 * Revision 1.165  2008/08/25 00:20:33  myc
 * Changed the way mobs memorize spells.
 *
 * Revision 1.164  2008/08/01 05:20:20  jps
 * Rolled "show spell" into "show skill".
 *
 * Revision 1.163  2008/07/29 17:56:03  jps
 * You can now call set_fighting without checking whether the subject was
 * fighting, first.
 *
 * Revision 1.162  2008/06/19 18:53:12  myc
 * Changed magic numbers to VAL_ constants for casting scrolls/potions.
 *
 * Revision 1.161  2008/06/07 19:06:46  myc
 * Moved object-related constants and routines to objects.h.
 *
 * Revision 1.160  2008/05/18 22:53:42  jps
 * Adding hysteria spell.
 *
 * Revision 1.159  2008/05/18 20:16:11  jps
 * Created fight.h and set dependents.
 *
 * Revision 1.158  2008/05/18 02:02:39  jps
 * Adding call to manual spell for isolation.
 *
 * Revision 1.157  2008/05/12 03:39:07  jps
 * Added valid_cast_stance function.
 *
 * Revision 1.156  2008/05/12 02:50:43  jps
 * Add do_show_spell and level_to_circle.
 *
 * Revision 1.155  2008/04/14 08:36:53  jps
 * Updated call to ASPELL, since it now includes the spell number.
 *
 * Revision 1.154  2008/04/14 02:31:37  jps
 * Consolidate the loss of hiddenness when being violent into a single
 * function.  It also removes glory.
 *
 * Revision 1.153  2008/04/13 22:24:26  jps
 * Cause single-target attack spells to get mis-targetted when the
 * caster is confused.  Moved the attack-back code into call_magic,
 * where it only needs to be written once.  Also made it into an
 * event.
 *
 * Revision 1.152  2008/04/12 21:29:10  jps
 * Removing prototype in magic.h.
 *
 * Revision 1.151  2008/04/12 21:13:18  jps
 * Using new header file magic.h.
 *
 * Revision 1.150  2008/04/07 03:02:54  jps
 * Changed the POS/STANCE system so that POS reflects the position
 * of your body, while STANCE describes your condition or activity.
 *
 * Revision 1.149  2008/04/02 03:24:44  myc
 * Rewrote group code and removed major group code.
 *
 * Revision 1.148  2008/03/29 16:27:20  jps
 * evades_spell() now also needs the casting power to make its decision.
 *
 * Revision 1.147  2008/03/28 17:54:53  myc
 * Now using flagvectors for effect, mob, player, preference, room, and
 * room effect flags.  AFF, AFF2, and AFF3 flags are now just EFF flags.
 *
 * Revision 1.146  2008/03/24 08:41:42  jps
 * Removing unused function prototypes.
 *
 * Revision 1.145  2008/03/10 20:46:55  myc
 * Renamed POS1 to 'stance'.
 *
 * Revision 1.144  2008/03/09 08:58:54  jps
 * Add manual spell calls for fear.
 *
 * Revision 1.143  2008/03/08 22:29:06  myc
 * Moving shapechange and chant to the cooldown system.
 *
 * Revision 1.142  2008/03/06 05:11:51  myc
 * Combined the 'saved' and 'unsaved' portions of the char_specials and
 * player_specials structures by moving all fields of each saved structure
 * to its parent structure.  Also combined the skills array from the
 * player and mob structures since they are identical.
 *
 * Revision 1.141  2008/03/05 03:03:54  myc
 * Fixed a memory leak in casting.
 *
 * Revision 1.140  2008/02/23 01:03:54  myc
 * Removing spell_level from here.  It's now skill_assign in skills.c.
 * The circle fields in the skilldef structure are gone; new macros for
 * accessing circle and mem info.
 *
 * Revision 1.139  2008/02/16 20:31:32  myc
 * Fix some 'freeing null pointer' warnings.
 *
 * Revision 1.138  2008/02/09 21:07:50  myc
 * Using event flags instead of plr/mob flags for casting.
 *
 * Revision 1.137  2008/02/09 04:27:47  myc
 * Now relying on math header file.
 *
 * Revision 1.136  2008/02/02 04:27:55  myc
 * Adding cast triggers.
 *
 * Revision 1.135  2008/01/29 21:02:31  myc
 * Removing a lot of extern declarations from code files and moving
 * them to header files, mostly db.h and constants.h.
 *
 * Revision 1.134  2008/01/29 16:51:12  myc
 * Adding skill names to the skilldef struct.
 *
 * Revision 1.133  2008/01/27 21:14:59  myc
 * Replace hit() with attack().
 *
 * Revision 1.132  2008/01/26 23:19:28  jps
 * Remove the equipment-destroying manual spell for acid breath.
 *
 * Revision 1.131  2008/01/26 14:26:31  jps
 * Moved a lot of skill-related code into skills.h and skills.c.
 *
 * Revision 1.130  2008/01/26 12:53:45  jps
 * Prevent skill improvement for spells and chants done to illusions.
 *
 * Revision 1.129  2008/01/26 12:31:19  jps
 * Use skills.h to import improve_skill().
 *
 * Revision 1.128  2008/01/24 13:17:50  jps
 * Put disintegrate into the sphere of generic.
 *
 * Revision 1.127  2008/01/23 14:14:41  jps
 * Added a field to skill definitions as to whether it's considered
 * humanoid-only.
 *
 * Revision 1.126  2008/01/22 06:25:23  jps
 * Check for death during manual spells.
 *
 * Revision 1.125  2008/01/14 21:54:19  myc
 * Allow illusions to cast degeneration.
 *
 * Revision 1.124  2008/01/14 18:54:11  myc
 * Auto-set the violent flag on a spell if the spell has the
 * MAG_DAMAGE routine.  Fix evades_spell to only go off for
 * violent spells.  Fix formatting in manual spell section.
 *
 * Revision 1.123  2008/01/13 23:06:04  myc
 * Changed the spells struct to store lowest_level and lowest_circle
 * data for each spell, thus making it unnecessary to calculate the
 * minimum spell level for major globe over and over.
 *
 * Revision 1.122  2008/01/13 06:00:25  myc
 * Check mob's position before casting in mob_cast.  Make curse spell
 * work while fighting.
 *
 * Revision 1.121  2008/01/13 03:19:53  myc
 * Removed melt as a manual spell.
 *
 * Revision 1.120  2008/01/12 23:13:20  myc
 * The mob_cast function now supports target objects.
 *
 * Revision 1.119  2008/01/07 11:56:06  jps
 * Allow simulacrum to be cast on self. Fix pages.
 *
 * Revision 1.118  2008/01/07 10:44:46  jps
 * Renamed spell project to phantasm.
 *
 * Revision 1.117  2008/01/06 23:50:47  jps
 * Added spells project and simulacrum, and MOB2_ILLUSORY flag.
 *
 * Revision 1.116  2008/01/06 20:39:38  jps
 * Did I mention I hate tabs?  Also, implemented ventriloquate.
 *
 * Revision 1.115  2008/01/05 05:35:34  jps
 * Using "talent" as generic name for spell/skill/song/chant.
 *
 * Revision 1.114  2008/01/04 04:30:29  jps
 * Made spellcasting into an event.
 *
 * Revision 1.113  2008/01/03 12:44:03  jps
 * Created an array of structs for class information. Renamed CLASS_MAGIC_USER
 * to CLASS_SORCERER.
 *
 * Revision 1.112  2007/12/31 04:43:33  jps
 * Made offensive spells, chants, and songs start fights.
 *
 * Revision 1.111  2007/12/31 02:00:57  jps
 * Made the general term for spells, skills, chants, and songs 'talent'.
 * Fixed mskillset to handle all talents.
 *
 * Revision 1.110  2007/12/21 04:49:05  jps
 * Only use the caster list for spells, which take time to complete.
 * Added code to detect the imminent creation of a circular casting
 * list and prevent it from happening - and to complain loudly about
 * it. I don't expect that code to actually detect anything until
 * someone changes the spellcasting code.
 *
 * Revision 1.109  2007/12/19 20:56:23  myc
 * Making id_skill_spell skip initial spaces.
 *
 * Revision 1.108  2007/11/25 00:04:59  jps
 * Spell targets will keep close track of whoever's casting a spell
 * at them.  This allows spells to be safely aborted if the target
 * is removed from the game before the spell is completed.
 *
 * Revision 1.107  2007/11/18 16:51:55  myc
 * Fixed bug with mobcast not setting casting.misc.
 *
 * Revision 1.106  2007/10/27 21:49:34  myc
 * Fixed a bug in mass invis
 *
 * Revision 1.105  2007/10/27 18:06:36  myc
 * Fix to chant for target checking.
 *
 * Revision 1.104  2007/10/25 20:40:24  myc
 * When fumbling/dropped weapon when disarming, it will say so, instead of
 * DISARMUT!
 *
 * Revision 1.103  2007/10/13 05:07:24  myc
 * Added new monk chants.
 *
 * Revision 1.102  2007/10/11 20:14:48  myc
 * Changed skill defines to support chants and songs as skills, but
 * slightly distinguished from spells and skills.  TOP_SKILL is the
 * old MAX_SKILLS.
 * Implemented monk chants as magic spells.  Updated id_skill_spell
 * to support chants and songs.  Modified do_cast and other magic
 * functions to support monk chants.  The benefit here is they share
 * target-finding code, as well as stuff like mag_affects.
 * Removed the spell wearoff messages array from constants.c, so
 * each spell's wearoff message is now defined in its spello call.
 *
 * Revision 1.101  2007/10/02 02:52:27  myc
 * Energy drain is now a manual spell.
 *
 * Revision 1.100  2007/09/28 20:49:35  myc
 * do_cast now uses delimited_arg() instead of parsing the argument
 * string itself.
 *
 * Revision 1.99  2007/09/20 21:20:43  myc
 * Hide points and perception are in.  Natures embrace and concealment
 * have changed in nature.
 *
 * Revision 1.98  2007/09/15 15:36:48  myc
 * Natures embrace now sets camouflage bit, which lets you be hidden as
 * long as you are outside, so it can only be cast outside.  Invigorate
 * is now a group spell.  Farsee is now divination instead of enchantment.
 *
 * Revision 1.97  2007/09/15 05:03:46  myc
 * Made poison spell castable in combat.
 *
 * Revision 1.96  2007/09/11 16:34:24  myc
 * Added peck, claw, and electrify skills for use by druid shapechanges.
 * end_chant will no longer send messages to you when you are in hedit
 * or writing or whatever.
 * Changed wall of ice, wall of stone, and minor creation to TAR_STRING
 * instead of TAR_IGNORE.
 *
 * Revision 1.95  2007/09/09 01:20:14  jps
 * The result of casting a spell is no longer just TRUE or FALSE,
 * but two possible bits combined: charge and/or improve. If
 * CAST_RESULT_CHARGE is returned, the spell was used and the caster
 * will be charged (have the spell erased from memory).  If
 * CAST_RESULT_IMPROVE is returned, the caster may improve in that
 * sphere of magic.
 * At the same time, casters will now correctly be charged for
 * spells that are cast on objects.
 *
 * Revision 1.94  2007/09/07 01:37:47  jps
 * Shorten the casting times for single-target sorcerer attack spells.
 *
 * Revision 1.93  2007/09/04 06:49:19  myc
 * Added new TAR_OUTDOORS, TAR_NIGHT_ONLY, and TAR_DAY_ONLY checks for
 * spells to limit when and where they may be cast.  This replaces checks
 * within each spell; the checks are made before the caster's spell memory
 * is charged.
 *
 * Revision 1.92  2007/08/30 08:51:25  jps
 * Generalize spell evasion (globe, elemental immunity, immortal) to area spells.
 *
 * Revision 1.91  2007/08/27 21:18:00  myc
 * You can now queue up commands while casting as well as abort midcast.
 * Casting commands such as look and abort are caught and interpreted
 * before the input is normally queued up by the game loop.
 *
 * Revision 1.90  2007/08/26 22:50:58  jps
 * Fixed crashy bugs.
 *
 * Revision 1.89  2007/08/26 21:11:12  jps
 * Handle deity immunity right in call_magic, so that they can't get
 * negative effects from spells.
 *
 * Revision 1.88  2007/08/26 01:55:41  myc
 * Fire now does real damage.  All fire spells have a chance to catch the
 * victim on fire.  Mobs attempt to douse themselves.
 *
 * Revision 1.87  2007/08/24 17:11:47  myc
 * Changing wording for reciting scrolls at items.
 *
 * Revision 1.86  2007/08/23 00:32:24  jps
 * All four elemental immunities are in effect, and neither damage nor
 * spell effects will reach mobs so protected. With an elemental
 * resistance (e.g., PROT-AIR) there is a 5% chance the spell will
 * miss entirely.
 *
 * Revision 1.85  2007/08/14 22:43:07  myc
 * Adding conceal, corner, shadow, and stealth skills.
 *
 * Revision 1.84  2007/08/07 01:31:10  jps
 * Changed find_skill_num so that when multiple skills or spells
 * match the given string, the one earliest in alphabetical order
 * is returned. Also, you can specify 'spell only' so that skill
 * names won't be considered.
 *
 * Revision 1.83  2007/08/05 20:21:51  myc
 * Added retreat and group retreat skills.
 *
 * Revision 1.82  2007/08/04 19:30:49  myc
 * Show 'disarm' instead of 'DISARMUT!' on spell list when disarmed.
 *
 * Revision 1.81  2007/08/02 04:19:04  jps
 * Added "moonbeam" spell for Druids.
 *
 * Revision 1.80  2007/08/02 00:23:53  myc
 * Standardized magic check-PK function.  Cut out a LOT of unnecessary magic
 * code and cleaned up the whole system in general.  Magic casts are now
 * guaranteed to use sphere skills rather than level.  Almost all magic
 * functions like mag_damage or even manual spells return a boolean now:
 * TRUE if the cast deserves a skill improvement, FALSE if it doesn't.
 * This return value is ignored for object magic (wands, etc.).
 *
 * Revision 1.79  2007/07/31 07:39:31  jps
 * Fix the number of pages required to scribe locate object.
 *
 * Revision 1.78  2007/07/04 02:21:58  myc
 * Renamed douse spell to extinguish.  Made word of command only aggro on
 * failure.  Sped up dispel poison cast time.  Made degeneration a quest
 * spell.
 *
 * Revision 1.77  2007/06/16 00:15:49  myc
 * Three spells for necromancers: soul tap, rebuke undead,
 * and degeneration.  One spell for rangers: natures guidance.
 *
 * Revision 1.76  2007/05/28 22:13:03  jps
 * Fixed the rcs log at the tail of spell_parser.c.
 *
 * Revision 1.75  2007/05/28 18:57:44  jps
 * Use specific messages about scroll targets, and some chosen according to
 * the sphere of the spell being cast.
 *
 * Revision 1.74  2007/05/28 17:39:22  jps
 * Fix crash bug when casting spell on an object.
 *
 * Revision 1.73  2007/05/24 05:37:03  jps
 * Stop putting spell effects on someone when they've been killed.
 *
 * Revision 1.72  2007/05/11 21:03:12  myc
 * New rogue skill, eye gouge, allows rogues to gouge out eyes.  A very
 * complicated skill.  :P  Fixed cure blind's logic, and made it support
 * eye gouge too.
 *
 * Revision 1.71  2007/05/11 20:13:28  myc
 * Vaporform is a new circle 13 spell for cryomancers.  It significantly
 * increases the caster's chance of dodging a hit.  It is a quest spell.
 *
 * Revision 1.70  2007/04/25 06:22:01  jps
 * Prevent the instant hit-back (due to an offensive spell) from being
 * performed if you've been knocked unconscious.
 *
 * Revision 1.69  2007/04/19 07:03:14  myc
 * Implemented demonic mutation as a more powerful version of demonic aspect.
 *
 * Revision 1.68  2007/04/19 00:53:54  jps
 * Create macros for stopping spellcasting.
 *
 * Revision 1.67  2007/04/17 23:38:03  myc
 * Introducing the new improved color spray!  It's now an area spell that
 * causes various effects based on caster skill.
 *
 * Revision 1.66  2007/03/27 04:27:05  myc
 * Increased casting times for cremate and combust.
 *
 * Revision 1.65  2007/03/20 19:43:53  jps
 * Allow a-desc to be used with wands targetted on self.
 *
 * Revision 1.64  2007/02/20 17:16:27  myc
 * Charm person not castable in combat.
 *
 * Revision 1.63  2007/02/14 03:54:53  myc
 * Added cremate and combust as spells to replace firewalk and greater firewalk.
 * Harness is cast on self now.  Minor paralysis, entangle, sleep, and charm
 * person now will now not make the mob attack for successes.
 *
 * Revision 1.62  2006/12/19 04:36:53  dce
 * Modified Supernova to mimic Ice Shards.
 *
 * Revision 1.61  2006/11/20 04:42:36  jps
 * Fix spell-item-checking for things in inventory
 *
 * Revision 1.60  2006/11/20 03:10:59  jps
 * Fix in-room target message for wands
 *
 * Revision 1.59  2006/11/18 21:04:29  jps
 * Make casting items use the same targeting code as regular spellcasting.
 *
 * Revision 1.58  2006/11/18 08:17:39  jps
 * Correct spelling of riposte.
 *
 * Revision 1.57  2006/11/18 04:26:32  jps
 * Renamed continual light spell to illumination, and it only works on
 * LIGHT items (still rooms too).
 *
 * Revision 1.56  2006/11/13 19:24:00  jps
 * "animate dead" is in sphere of death, and improves.
 *
 * Revision 1.55  2006/11/13 18:37:44  jps
 * Change name to "sphere of enchantment" - to be consistent with
 * all our documentation.
 *
 * Revision 1.54  2006/11/13 16:55:03  jps
 * Fix misuse of hide_invisible with act TO_VICT
 *
 * Revision 1.53  2006/11/08 08:07:55  jps
 * Typo SKILL_BREATH -> SKILL_BREATHE
 *
 * Revision 1.52  2006/11/08 07:59:43  jps
 * Typo fix spellname "cure critic" -> "cure critical"
 *
 * Revision 1.51  2006/07/20 07:41:49  cjd
 * Typo fixes.
 *
 * Revision 1.50  2002/12/19 07:41:09  rls
 * Updated define for curse to allow for cursing of in_room objects as well as updated
 * remove curse to look at the spell_remove_curse function (much more handy dandy!)
 *
 * Revision 1.49  2002/10/14 02:16:08  jjl
 * An update to turn vitality into a set of 6 spells, lesser endurance,
 * endurance, greater endurance, vitality, greater vitality, and dragon's
 * health.  Greater endurance is what vitality was.  The rest are scaled
 * appropriately.    The higher end may need scaled down, or may not.
 *
 * Revision 1.48  2002/09/29 03:18:31  jjl
 * This should fix my previous idiocy.  I had swapped the spell sphere with the
 * # of pages, thus it took like 100+ pages to scribe summon corpse.  DUH!
 *
 * Revision 1.47  2002/09/15 03:56:46  jjl
 * Added summon corpse and shift corpse - jjl
 *
 * Revision 1.46  2002/09/13 02:32:10  jjl
 * Updated header comments
 *
 * Revision 1.45  2002/07/16 23:25:38  rls
 * added in necro spell, bone armor
 *
 * Revision 1.44  2002/07/16 23:22:54  rls
 * added in new necro spell, bone armor
 * .c
 * ci spells.h
 *
 * Revision 1.43  2002/03/30 19:31:02  dce
 * *** empty log message ***
 *
 * Revision 1.42  2002/03/26 04:52:29  rls
 * *** empty log message ***
 *
 * Revision 1.41  2002/03/26 04:25:58  rls
 * Removed dispel magic, greater_firewalk, firewalk, circle of fire from spell defines
 *
 * Revision 1.40  2002/02/25 11:01:14  rls
 * Changed TAR_NOT_SELF to TAR_FIGHT_VICT in spell_blindness (now aggro)
 *
 * Revision 1.39  2001/01/26 23:53:00  mtp
 * fix mages mem bug while allowing warriors to use objects?
 *
 * Revision 1.38  2000/12/18 15:48:24  rsd
 * made creeping doom a quest spell.
 *
 * Revision 1.37  2000/11/25 02:33:15  rsd
 * Altered comment header and added back rlog messages
 * from prior to the addition of the $log$ string.
 *
 * Revision 1.36  2000/11/16 00:17:38  rsd
 * made blindness aggressive
 *
 * Revision 1.35  2000/10/05 03:12:10  rsd
 * Gurlaek altered some function, call magic I think, to
 * Zero out the spell when done so we don't get bogus info
 * when using items that cast spells.
 *
 * Revision 1.34  2000/04/22 22:41:33  rsd
 * fixed the spelling of deity in player output, also made
 * wall of freaking ice a quest spell.
 *
 * Revision 1.33  2000/04/15 23:13:08  rsd
 * made some spells that weren't quest before, quest...
 *
 * Revision 1.32  2000/03/28 06:55:09  cso
 * damn off-by-one errors
 *
 * Revision 1.31  2000/03/26 21:25:24  cso
 * find_skill_num: rather than exiting on partial match, made it mark partial
 *   matches but continue looking for a complete match, then return the partial
 *   at the end only if no complete was found.
 *
 * Revision 1.30  2000/03/24 23:52:23  rsd
 * altered the comment header while I had the file open for examination
 *
 * Revision 1.29  2000/03/18 06:22:54  rsd
 * WHOAAAAH NELLY!
 * Ok, since SPELL_SPHERE_X was removed each spello was sed'd
 * to replace it with SKILL_SPHERE_X
 *
 * Revision 1.28  1999/11/29 00:05:28  cso
 * cast_spell: pets can now cast nonviolent spells on master (couldn't cast any
 *  before)
 * do_cast: misc was being initialized to '\0'. shoulda been NULL. also fixed
 *  a mem leak every time someone casts a spell with an argument
 *
 * Revision 1.27  1999/11/23 15:48:23  jimmy
 * Fixed the slashing weapon skill.  I had it erroneously as stabbing. Doh.
 * Reinstated dual wield.
 * Allowed mobs/players to pick up items while fighting.
 * Fixed a bug in the damage message that wrongfully indicated a miss
 * due to a rounding error in the math.
 * This was all done in order to facilitate the chance to sling your
 * weapon in combat.  Dex and proficiency checks are now made on any missed
 * attact and a failure of both causes the weapon to be slung.
 *
 * Revision 1.26  1999/11/21 00:22:07  jimmy
 * Added weapon proficiency skills for stabbing, piercing, bludgeoning and two handed
 * of each of these, as well as missile weapons.  These were given to all classes
 * at first level execpt missile weapons which was commented out for now.
 *
 * Revision 1.25  1999/11/19 04:29:49  rsd
 * Added skillo references to the new sphere skills added
 * earlier by jimmy.  Also added the "sphere of X" array to
 * output to the players when they type skills.  Changed the
 * players output for know spell to "spell knowledge"
 *
 * Revision 1.24  1999/10/19 18:01:03  jimmy
 * Added SPHERE_DIVIN (divination) spell sphere.  Changed spheres of spells
 * to fit with future implementation of the spheres as skills.
 *
 * Revision 1.23  1999/10/08 17:49:54  rsd
 * fixed word of recall to check in the room for the target.
 *
 * Revision 1.22  1999/09/18 16:46:06  dce
 * Word oof recall is self only
 *
 * Revision 1.21  1999/09/05 07:00:39  jimmy
 * Added RCS Log and Id strings to each source file
 *
 * Revision 1.20  1999/08/28 01:06:50  mtp
 * rewrote strtok stuff to scan string so must have final quote
 *
 * Revision 1.19  1999/08/18 19:23:42  mud
 * made blur a quest spell
 *
 * Revision 1.18  1999/07/24 03:16:01  jimmy
 * fixed spell recognition so gods always see spells.
 * gods now instant cast spells without waiting
 * WORD OF RECALL was set to casting time of 1
 * as was HOLY/UNHOLY WORD
 * --gurlaek
 *
 * Revision 1.17  1999/07/24 01:28:40  jimmy
 * added a check in update_casting to stop players who were saved in the casting state
 * just before a crash.  Such players would get into an endless casting loop and crash
 * the mud.
 *
 * -gurlaek
 *
 * Revision 1.16  1999/07/22 17:43:59  jimmy
 * Added the IDENTIFY spell back in to the castable spells list.
 * --gurlaek
 *
 * Revision 1.15  1999/07/20 19:45:51  jimmy
 * This is the spanky New Spell recognition code.
 * This code allows mobs/players that have the KNOW_SPELL skill
 * to make a skill check to guess the spell.  A good roll will show both
 * the spell and the target.  A bad roll will show the spell garbled and
 * then an INT check for the target.  If a really bad roll is made, the spell
 * will be replaced by an incorrect one.  the heart of this system is
 * start_chant(), end_chant, and bad_guess().
 * --gurlaek 7/20/1999
 *
 * Revision 1.14  1999/07/15 03:27:34  jimmy
 * Mob casters can not hit while casting.
 * Updated spell cast times to be more realistic
 * changed combat to 4 seconds per round.
 * Removed do_order semantics that told the order to onlookers.
 *
 * Revision 1.13  1999/07/14 19:24:03  jimmy
 * The combat system was enhanced/improved in the following ways:  Mobs
 * can no longer flee while bashed or sitting.  Fleeing causes casters to
 * stop casting.  You can now flee while flying.  pk checks were added to
 * bash, bodyslam, throatcut, etc etc.  Lots of reformatting and little
 * fixes. spellcasting for mobs is now very similar to PC spellcasting.
 * MObs will now unhide/unconceal/univis/ etc when casting offensive spells.
 * Mobs no longer improve skills.  Bash now requires mobs to have a shield
 * just like PC's.  It's aT 25% with no shield and 50% with a 2handed weapon.
 * --gurlaek
 *
 * Revision 1.12  1999/05/26 01:55:59  mud
 * added skill 450 summon mount also added a skillo
 * skillo(SKILL_SUMMON_MOUNT)
 *
 * Revision 1.11  1999/04/18 20:12:54  dce
 * Magic missile works like Fire Dart, Ice Dart works.
 *
 * Revision 1.10  1999/03/24 23:43:16  jimmy
 * Working on quest spells.  Still in progress.  HOwever, spells[] array now has a flag
 * quest.  If it's true then it's considerd a quest spell.  Also, allowed pyro/cryo's to
 * learn from any sorcerer type teacher
 * fingon
 * l.
 *
 * Revision 1.9  1999/03/10 00:03:37  dce
 * Monk semantics for dodge/parry/ripost/attack
 *
 * Revision 1.8  1999/03/08 23:24:48  dce
 * Added Springleap for monks
 *
 * Revision 1.7  1999/03/08 20:22:35  dce
 * Adds the skill safefall for monks.
 *
 * Revision 1.6  1999/03/07 05:01:09  dce
 * Chant finishes and wearoff messages.
 *
 * Revision 1.5  1999/03/03 20:11:02  jimmy
 * Many enhancements to scribe and spellbooks.  Lots of checks added.  Scribe is now a skill.
 * Spellbooks now have to be held to scribe as well as a quill in the other hand.
 *
 * -fingon
 *
 * Revision 1.4  1999/02/26 22:30:30  dce
 * Monk additions/fixes
 *
 * Revision 1.3  1999/02/13 19:37:12  dce
 * Rewrote Continual Light and Darkness to be manual spells to meet our needs.
 *
 * Revision 1.2  1999/02/02 21:12:27  mud
 * indented entire FILE AAAARRRRGGGGG
 * dos2unix
 *
 * Revision 1.1  1999/01/29 01:23:32  mud
 * Initial revision
 *
 ***************************************************************************/
@


1.191
log
@Moving cooldowns to their own file.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.190 2009/07/18 01:17:23 myc Exp mud $
d840 1
a840 1
      log(buf);
d903 1
a903 1
    log(buf);
d1794 3
@


1.190
log
@Adding decay, iron maiden, spinechiller, and bone draw spells
for necromancer.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.189 2009/06/11 13:36:05 myc Exp myc $
d37 1
d1794 4
@


1.189
log
@When you level gain, you're healed to full.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.188 2009/05/22 17:38:50 myc Exp myc $
d430 1
d450 1
d1793 3
@


1.188
log
@Fix missing newline on detonate failure message.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.187 2009/03/21 06:36:13 myc Exp myc $
a990 1
  char *misc = NULL;
d1088 1
a1088 6
  if (*argument) {
    /* re-ordered to stop a mem leak -321 */
    skip_spaces(&argument);
    /* This strdup is attached to the char's casting struct and freed later */
    misc = strdup(argument);
  }
a1114 3
    /* Clean-up memory leak */
    if (misc)
      free(misc);
d1118 25
a1142 3
  if (!check_spell_target(spellnum, ch, tch, tobj)) {
    if (misc)
      free(misc);
d1169 1
a1169 1
  ch->casting.misc = misc;
d1486 11
d1791 3
@


1.187
log
@Realphabetize manual spell list.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.186 2009/03/21 06:32:37 jps Exp myc $
d1217 1
a1217 1
    cprintf(ch, "You must be on solid ground to %s that %s!", verb, noun);
d1767 3
@


1.186
log
@Make phosphoric embers manual spell
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.185 2009/03/20 16:06:04 jps Exp jps $
a355 2
        case SPELL_PHOSPHORIC_EMBERS: MANUAL_SPELL(spell_phosphoric_embers); break;
        case SPELL_SOUL_TAP:          MANUAL_SPELL(spell_soul_tap); break;
d367 2
a423 1
    case SPELL_SOUL_TAP:             MANUAL_SPELL(spell_soul_tap); break;
d446 1
a446 1
    case SPELL_PHOSPHORIC_EMBERS: MANUAL_SPELL(spell_phosphoric_embers); break;
d454 1
d1767 3
@


1.185
log
@Removed spells of lesser/greater invocation.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.184 2009/03/20 06:22:37 myc Exp jps $
d356 1
d447 1
d1767 3
@


1.184
log
@Oops, accidentally removed energy drain case from cast_spell.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.183 2009/03/20 06:15:17 myc Exp myc $
a429 1
    case SPELL_GREATER_INVOCATION:   MANUAL_SPELL(spell_greater_invocation);break;
a438 1
    case SPELL_LESSER_INVOCATION:    MANUAL_SPELL(spell_lesser_invocation);break;
d1765 3
@


1.183
log
@Adding a TAR_GROUND cast requirement.  Added detonation,
phosphoric embers, positive field, and acid burst spells.
Removed combust and heatwave.  Made soul tap a manual spell.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.182 2009/03/09 16:57:47 myc Exp myc $
d422 1
d1767 5
@


1.182
log
@Made detect poison more like detect align.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.181 2009/03/09 03:26:34 jps Exp myc $
d356 1
d422 1
a422 1
    case SPELL_ENERGY_DRAIN:         MANUAL_SPELL(spell_energy_drain); break;
d1198 3
d1202 2
a1203 4
    if (IS_CHANT(spellnum))
      send_to_char("You can only chant this song to yourself!\r\n", ch);
    else
      send_to_char("You can only cast this spell upon yourself!\r\n", ch);
d1207 2
a1208 4
    if (IS_CHANT(spellnum))
      send_to_char("You cannot chant this song to yourself!\r\n", ch);
    else
      send_to_char("You cannot cast this spell upon yourself!\r\n", ch);
d1212 5
a1216 4
    if (IS_CHANT(spellnum))
      send_to_char("This area is too enclosed to chant that song!\r\n", ch);
    else
      send_to_char("This area is too enclosed to cast that spell!\r\n", ch);
d1220 1
a1220 4
    if (IS_CHANT(spellnum))
      send_to_char("You cannot chant this song during the day!\r\n", ch);
    else
      send_to_char("You cannot cast this spell during the day!\r\n", ch);
d1224 1
a1224 4
    if (IS_CHANT(spellnum))
      send_to_char("You can only chant this song during the day!\r\n", ch);
    else
      send_to_char("You can only cast this spell during the day!\r\n", ch);
d1766 3
@


1.181
log
@Moved individual spell definitions to spell.c and spell.h.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.180 2009/03/08 23:34:14 jps Exp jps $
a417 1
    case SPELL_DETECT_POISON:        MANUAL_SPELL(spell_detect_poison); break;
d1771 3
@


1.180
log
@Renamed spells.[ch] to casting.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.179 2009/03/03 19:43:44 myc Exp jps $
d36 1
d1772 3
@


1.179
log
@New target finding mechanism in find.c.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.178 2009/02/18 19:48:08 myc Exp myc $
d22 1
a22 1
#include "spells.h"
d1771 3
@


1.178
log
@Let imms cast spells during fighting that they wouldn't normally
be able to ;)
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.177 2009/02/11 17:03:39 myc Exp myc $
d1257 1
a1257 1
   int i;
d1268 1
a1268 1
         if ((*tch = get_char_room_vis(ch, t)) != NULL){
d1274 1
a1274 1
         if ((*tch = get_char_vis(ch, t))) {
d1279 1
a1279 1
         if ((*tobj = get_obj_in_list_vis(ch, t, ch->carrying))) {
d1284 4
a1287 6
         for (i = 0; i < NUM_WEARS; i++)
            if (GET_EQ(ch, i) && !str_cmp(t, GET_EQ(ch, i)->name)) {
               *tobj = GET_EQ(ch, i);
               *target_status = TARGET_EQUIP;
               return TRUE;
            }
d1290 1
a1290 1
         if ((*tobj = get_obj_in_list_vis(ch, t, world[ch->in_room].contents))) {
d1295 1
a1295 1
         if ((*tobj = get_obj_vis(ch, t))) {
d1771 4
@


1.177
log
@Check EDITING(d) where PLR_WRITING is checked in end_chant.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.176 2009/02/05 19:20:56 myc Exp myc $
d839 2
a840 1
   if (GET_STANCE(ch) == STANCE_FIGHTING && !SINFO.fighting_ok) {
d902 2
a903 1
  if (GET_STANCE(ch) == STANCE_FIGHTING && !skills[chantnum].fighting_ok) {
d1773 3
@


1.176
log
@Allow imms to cast spells in !magic rooms.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.175 2009/02/05 16:40:34 myc Exp myc $
d161 1
a161 1
    if (ch == gch || !AWAKE(gch) || !gch->desc || PLR_FLAGGED(gch, PLR_WRITING))
d1771 3
@


1.175
log
@Don't let players start casting a spell just to find out at the
end they're in the wrong stance/position.  It will stop them
immediately now.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.174 2009/01/16 23:36:34 myc Exp myc $
d255 7
a261 5
  if (IS_SPELL(spellnum) && ROOM_FLAGGED(caster->in_room, ROOM_NOMAGIC)) {
    send_to_char("Your magic fizzles out and dies.\r\n", caster);
    act("$n's magic fizzles out and dies.", FALSE, caster, 0, 0, TO_ROOM);
    return FALSE;
  }
d263 13
a275 11
  if (ROOM_FLAGGED(caster->in_room, ROOM_PEACEFUL) && SINFO.violent) {
    if (IS_SPELL(spellnum)) {
      send_to_char("A flash of white light fills the room, dispelling your "
                   "violent magic!\r\n", caster);
      act("White light from no particular source suddenly fills the room, "
          "then vanishes.", FALSE, caster, 0, 0, TO_ROOM);
    }
    else { /* song/chant */
      send_to_char("Your words dissolve into peaceful nothingness...\r\n", caster);
      act("$n's words fade away into peaceful nothingness...\r\n",
          FALSE, caster, 0, 0, TO_ROOM);
a276 1
    return FALSE;
d1771 5
@


1.174
log
@Fix use of uninitialized variable usage in mob_cast (effects
were showing up on syslog as errors in casting_handler() event).
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.173 2008/10/14 02:24:42 myc Exp myc $
d772 1
a772 13
/*
 * cast_spell is used generically to cast any spoken spell, assuming we
 * already have the target char/obj and spell number.  It checks all
 * restrictions, etc., prints the words, etc.
 *
 * Entry point for NPC casts.  Recommended entry point for spells cast
 * by NPCs via specprocs.
 *
 * Return value: CAST_RESULT_ flags.
 */

int cast_spell(struct char_data * ch, struct char_data * tch,
               struct obj_data * tobj, int spellnum)
a773 14
   char buf[256];
   int sphere, cresult = 0;

   if (spellnum < 0 || spellnum > TOP_SKILL_DEFINE) {
      sprintf(buf, "SYSERR: cast_spell trying to call spellnum %d\n", spellnum);
      log(buf);
      return 0;
   }

   if (GET_STANCE(ch) == STANCE_FIGHTING && !SINFO.fighting_ok) {
      send_to_char("Impossible!  You can't concentrate enough!\r\n", ch);
      return 0;
   }

d810 34
d1078 3
d1768 4
@


1.173
log
@mob_cast was using GET_NAME on a possibly null tch.  Fixed.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.172 2008/09/21 21:04:20 jps Exp myc $
d1367 2
d1420 1
a1420 1
  else if (tch && IS_SET(SINFO.targets, TAR_CHAR_ROOM) && ch->in_room == tch->in_room)
d1422 3
a1424 1
  else if (tch && IS_SET(SINFO.targets, TAR_CHAR_WORLD) && tch->in_room != NOWHERE)
d1426 3
a1428 1
  else if (tobj && IS_SET(SINFO.targets, TAR_OBJ_INV) && tobj->carried_by)
d1430 3
a1432 1
  else if (tobj && IS_SET(SINFO.targets, TAR_OBJ_EQUIP) && tobj->worn_by)
d1434 3
a1436 1
  else if (tobj && IS_SET(SINFO.targets, TAR_OBJ_ROOM) && ch->in_room == tobj->in_room)
d1438 3
a1440 1
  else if (tobj && IS_SET(SINFO.targets, TAR_OBJ_WORLD))
d1442 2
a1444 1
    tch = ch;
d1446 1
a1448 1
    tch = FIGHTING(ch);
d1450 1
a1453 1
    tch = ch;
d1455 1
d1469 2
a1470 2
  ch->casting.tch = tch;
  ch->casting.obj = tobj;
d1757 3
@


1.172
log
@Passing cast type to mag_affect so that potions of bless/dark presence can be quaffed by neutral people.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.171 2008/09/20 07:27:45 jps Exp jps $
d1460 6
a1465 1
  ch->casting.misc = strdup(GET_NAME(tch));
d1743 3
@


1.171
log
@set_fighting takes a 3rd parameter, reciprocate, which will set the attackee fighting
the attacker if true.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.170 2008/09/20 06:57:07 jps Exp jps $
d332 1
a332 1
        imp_skill |= mag_affect(skill, caster, cvict, spellnum, savetype);
d371 1
a371 1
    imp_skill |= mag_affect(skill, caster, cvict, spellnum, savetype);
d1738 4
@


1.170
log
@Don't cause the casting event to start immediately for mortals.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.169 2008/09/13 16:03:28 jps Exp jps $
d472 1
a472 1
      set_fighting(cvict, caster);
d1738 3
@


1.169
log
@The indoors check for spells was reversed.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.168 2008/09/11 02:50:02 jps Exp jps $
d1174 1
a1174 1
          &(ch->events), 0);
d1513 1
a1513 1
    /* Caster gets their own message later, and no message to sleeping. */
d1571 1
a1571 1
    /* Is their a Target?  Is it in the room?  Is it not the caster?*/
d1688 2
a1689 2
      /* First make the caster forget what they were casting their
       * spell upon.  This prevents them from coming back and calling
d1709 2
a1710 2
      /* First make the caster forget what they were casting their
       * spell upon.  This prevents them from coming back and calling
d1738 3
@


1.168
log
@Changed skills so you have a minimum position, and fighting_ok fields.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.167 2008/09/09 08:23:37 jps Exp jps $
d1195 1
a1195 1
  if (IS_SET(SINFO.targets, TAR_OUTDOORS) && !CH_INDOORS(ch)) {
d1738 3
@


1.167
log
@Placed sector info into a struct and moved its macros into rooms.h.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.166 2008/08/29 16:55:00 myc Exp jps $
d26 1
d795 1
a795 1
   if (GET_STANCE(ch) == STANCE_FIGHTING && SINFO.stance != STANCE_FIGHTING) {
d800 1
a800 1
   if (GET_STANCE(ch) < SINFO.stance && GET_STANCE(ch) < STANCE_ALERT) {
d815 21
d890 1
a890 1
  if (GET_STANCE(ch) == STANCE_FIGHTING && skills[chantnum].stance != STANCE_FIGHTING) {
d895 35
a929 14
  if (GET_STANCE(ch) < skills[chantnum].stance && GET_STANCE(ch) < STANCE_ALERT) {
    switch (GET_STANCE(ch)) {
      case STANCE_SLEEPING:
        send_to_char("You dream about great magical powers.\r\n", ch);
        break;
      case STANCE_RESTING:
        send_to_char("You cannot concentrate while resting.\r\n", ch);
        break;
      default:
        send_to_char("You can't do much of anything like this!\r\n", ch);
        break;
    }
    return 0;
  }
d1406 3
a1408 2
  /* Check mob's position. */
  if (SINFO.stance > GET_STANCE(ch))
d1730 1
a1730 1
   if (skills[spellnum].stance != STANCE_FIGHTING && GET_STANCE(ch) == STANCE_FIGHTING)
d1733 1
a1733 4
   if (skills[spellnum].stance == STANCE_FIGHTING && GET_STANCE(ch) >= STANCE_ALERT)
      return TRUE;

   return GET_STANCE(ch) >= skills[spellnum].stance;
d1738 3
@


1.166
log
@Made it so immortals can cast self-only spells on other characters.
Also, players will get early warning if they can't cast a spell
because of targeting issues (instead of having to wait until the
end of the cast).
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.165 2008/08/25 00:20:33 myc Exp myc $
d1152 1
a1152 5
  if (IS_SET(SINFO.targets, TAR_OUTDOORS) &&
      (ROOM_FLAGGED(IN_ROOM(ch), ROOM_INDOORS) ||
      SECT(IN_ROOM(ch)) == SECT_INSIDE ||
      SECT(IN_ROOM(ch)) == SECT_UNDERDARK ||
      SECT(IN_ROOM(ch)) == SECT_UNDERWATER)) {
d1697 6
@


1.165
log
@Changed the way mobs memorize spells.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.164 2008/08/01 05:20:20 jps Exp myc $
d686 1
a686 1
               if (SINFO.targets & TAR_SELF_ONLY && ch != tch) {
d1066 6
d1138 1
a1138 1
  if (IS_SET(SINFO.targets, TAR_SELF_ONLY) && tch != ch) {
d1406 2
d1701 3
@


1.164
log
@Rolled "show spell" into "show skill".
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.163 2008/07/29 17:56:03 jps Exp jps $
d1291 2
a1292 3
   if (IS_NPC(ch)) {
      /* Make sure not 0 or greater than 12 */
      int spell_circle = MAX(1, MIN(12, 1 + (skills[ch->casting.spell].min_level[(int) GET_CLASS(ch)] - 1) / 8));
d1294 2
a1295 4
      if (GET_MEM_MEMED(ch, spell_circle) > 0) {
         cast_spell(ch, ch->casting.tch, ch->casting.obj, ch->casting.spell);
         WAIT_STATE(ch, PULSE_VIOLENCE);
         SET_MEM_MEMED(ch, spell_circle, MAX(0, GET_MEM_MEMED(ch, spell_circle) - 1));
d1297 10
a1306 6
         if (skills[ch->casting.spell].violent && ch->casting.tch &&
             IS_NPC(ch->casting.tch) && !FIGHTING(ch->casting.tch) &&
             GET_STANCE(ch->casting.tch) >= STANCE_RESTING && number(0, 4)) {
            attack(ch->casting.tch, ch);
            remember(ch->casting.tch, ch);
         }
a1307 5
   }
   else { /* Player */
      /* cast_spell returns CAST_RESULT_ flags */
      if (cast_spell(ch, ch->casting.tch, ch->casting.obj, ch->casting.spell) &
            CAST_RESULT_CHARGE) {
a1308 5
         /* Lag the caster */
         WAIT_STATE(ch, PULSE_VIOLENCE);
         /* Erase memorized spell */
         charge_mem(ch, ch->casting.spell);
      }
d1365 2
a1366 6
  /* Charge mob memory. */
  if (GET_MEM_STATE(ch, circle) == 0 && GET_MEM_MEMED(ch, circle == 0))
    SET_MEM_STATE(ch, circle, 1);
  if (GET_MEM_STATE(ch, circle) == 1 && GET_MEM_MEMED(ch, circle) == spells_of_circle[(int) GET_LEVEL(ch)][circle])
    SET_MEM_STATE(ch, circle, 0);
  if (GET_MEM_MEMED(ch, circle) <= 0 || GET_MEM_STATE(ch, circle) == 1)
d1693 3
@


1.163
log
@You can now call set_fighting without checking whether the subject was
fighting, first.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.162 2008/06/19 18:53:12 myc Exp jps $
a1689 153
void do_show_spell(struct char_data *ch, char *spellname)
{
   int spellnum, i;
   struct skilldef *spell;
   bool anytargets = FALSE, anyroutines = FALSE, anyassignments = FALSE;

   if (!spellname || !*spellname) {
      send_to_char("Show which spell?\r\n", ch);
      return;
   }

   spellnum = find_spell_num(spellname);

   if (!IS_SPELL(spellnum)) {
      send_to_char("There is no such spell.\r\n", ch);
      return;
   }

   spell = &skills[spellnum];

   /* Number and name */
   strcpy(buf2, spell->name);
   sprintf(buf, "&2Spell #%d&0, &5&b%s&0\r\n", spellnum, CAP(buf2));
   send_to_char(buf, ch);

   /* Stance */
   sprintf(buf, "Stance      : %s\r\n", stance_types[(int)spell->stance]);
   send_to_char(buf, ch);

   /* Targets */
   sprintf(buf, "Targets     :");
   for (i = 0; i < NUM_TAR_FLAGS; i++)
      if (spell->targets & (1 << i)) {
         strcat(buf, " ");
         strcat(buf, targets[i]);
         anytargets = TRUE;
      }
   if (!anytargets)
      strcat(buf, " -none-");
   strcat(buf, "\r\n");
   send_to_char(buf, ch);

   /* Violent */
   /* Damage type */
   if (spell->violent) {
      send_to_char("Violent     : &1&bYes&0\r\n", ch);
      if (VALID_DAMTYPE(spell->damage_type))
         sprintf(buf, "Damtype     : %s%s&0\r\n",
               damtypes[spell->damage_type].color,
               damtypes[spell->damage_type].name);
      else
         sprintf(buf, "Damtype     : &1&bINVALID (%d)&0\r\n",
               spell->damage_type);
      send_to_char(buf, ch);
   } else {
      send_to_char("Violent     : &6No&0\r\n", ch);
      send_to_char("Damtype     : -na-\r\n", ch);
   }

   /* Sphere */
   if (IS_SPHERE_SKILL(spell->sphere)) {
      sprintf(buf, "Sphere      : %s\r\n", skills[spell->sphere].name);
      send_to_char(buf, ch);
   } else {
      sprintf(buf, "Sphere      : &1&bINVALID (%d)&0\r\n",
            spell->sphere);
      send_to_char(buf, ch);
   }

   /* Routines */
   sprintf(buf, "Routines    :");
   for (i = 0; i < NUM_ROUTINE_TYPES; i++)
      if (spell->routines & (1 << i)) {
         strcat(buf, " ");
         strcat(buf, routines[i]);
         anyroutines = TRUE;
      }
   if (!anyroutines)
      strcat(buf, " -none-");
   strcat(buf, "\r\n");
   send_to_char(buf, ch);

   /* Mana */
   sprintf(buf, "Mana        : max %d  min %d  chg %d\r\n",
         spell->mana_max, spell->mana_min, spell->mana_change);
   send_to_char(buf, ch);

   /* Mem time */
   sprintf(buf, "Mem time    : %d\r\n", spell->mem_time);
   send_to_char(buf, ch);

   /* Cast time */
   sprintf(buf, "Cast time   : %d\r\n", spell->cast_time);
   send_to_char(buf, ch);

   /* Pages */
   sprintf(buf, "Pages       : &3%d&0\r\n", spell->pages);
   send_to_char(buf, ch);

   /* Quest */
   sprintf(buf, "Quest       : %s\r\n", spell->quest ? "&2&bYes&0" : "&4&bNo&0");
   send_to_char(buf, ch);

   /* Wearoff message */
   if (spell->wearoff && *(spell->wearoff)) {
      sprintf(buf, "Wearoff     : &6%s&0\r\n", spell->wearoff);
      send_to_char(buf, ch);
   } else
      send_to_char("Wearoff     : -none-\r\n", ch);

   /* Assignments */
   for (i = 0; i < NUM_CLASSES; i++)
      if (spell->min_level[i] > 0 && spell->min_level[i] < LVL_IMMORT) {
         sprintf(buf, "%s%-13s  Circle %d\n",
               anyassignments ? "              " : "Assignments : ",
               classes[i].plainname, level_to_circle(spell->min_level[i]));
         anyassignments = TRUE;
         send_to_char(buf, ch);
      }
   if (!anyassignments)
      send_to_char("Assignments : -none-\r\n", ch);
}

int level_to_circle(int level)
{
   if (level < CIRCLE_2)
      return 1;
   else if (level < CIRCLE_3)
      return 2;
   else if (level < CIRCLE_4)
      return 3;
   else if (level < CIRCLE_5)
      return 4;
   else if (level < CIRCLE_6)
      return 5;
   else if (level < CIRCLE_7)
      return 6;
   else if (level < CIRCLE_8)
      return 7;
   else if (level < CIRCLE_9)
      return 8;
   else if (level < CIRCLE_10)
      return 9;
   else if (level < CIRCLE_11)
      return 10;
   else if (level < CIRCLE_12)
      return 11;
   else if (level < CIRCLE_13)
      return 12;
   else
      return 13;
}

d1706 4
@


1.162
log
@Changed magic numbers to VAL_ constants for casting scrolls/potions.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.161 2008/06/07 19:06:46 myc Exp myc $
d470 1
a470 2
  if (SINFO.violent && caster && cvict && !FIGHTING(cvict) &&
         attack_ok(cvict, caster, FALSE))
d1859 3
@


1.161
log
@Moved object-related constants and routines to objects.h.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.160 2008/05/18 22:53:42 jps Exp myc $
d683 1
a683 1
         for (i = 1; i < 4; i++) {
d757 1
a757 1
            for (i = 1; i < 4; i++)
d1860 3
@


1.160
log
@Adding hysteria spell.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.159 2008/05/18 20:16:11 jps Exp jps $
d562 1
a562 1
         if (GET_OBJ_VAL(obj, 2) <= 0) {
d566 1
a566 1
            GET_OBJ_VAL(obj, 2)--;
d568 1
a568 1
            if (!check_spell_target(GET_OBJ_VAL(obj, 3), ch, NULL, NULL))
d575 3
a577 3
               if (GET_OBJ_VAL(obj, 0))
                  call_magic(ch, tch, NULL, GET_OBJ_VAL(obj, 3),
                        GET_OBJ_VAL(obj, 0), CAST_STAFF);
d579 1
a579 1
                  call_magic(ch, tch, NULL, GET_OBJ_VAL(obj, 3),
d585 1
a585 1
         spellnum = GET_OBJ_VAL(obj, 3);
d642 1
a642 1
         if (GET_OBJ_VAL(obj, 2) <= 0) {
d651 1
a651 1
         GET_OBJ_VAL(obj, 2)--;
d660 2
a661 2
            call_magic(ch, tch, tobj, GET_OBJ_VAL(obj, 3),
                  GET_OBJ_VAL(obj, 0), CAST_WAND);
d663 1
a663 1
            call_magic(ch, tch, tobj, GET_OBJ_VAL(obj, 3),
d704 3
a706 1
                        actmsg = get_scroll_mob_msg(GET_OBJ_VAL(obj, 1), GET_OBJ_VAL(obj, 2), GET_OBJ_VAL(obj, 3));
d722 1
a722 1
                  call_magic(ch, tch, tobj, spellnum, GET_OBJ_VAL(obj, 0), CAST_SCROLL);
d759 1
a759 1
                     GET_OBJ_VAL(obj, 0), CAST_POTION)))
d1860 3
@


1.159
log
@Created fight.h and set dependents.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.158 2008/05/18 02:02:39 jps Exp jps $
d352 1
d420 1
d1858 3
@


1.158
log
@Adding call to manual spell for isolation.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.157 2008/05/12 03:39:07 jps Exp jps $
d34 1
a244 1
  EVENTFUNC(quick_aggro_event);
d1856 3
@


1.157
log
@Added valid_cast_stance function.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.156 2008/05/12 02:50:43 jps Exp jps $
d347 17
a363 16
        case SPELL_DIMENSION_DOOR:   MANUAL_SPELL(spell_dimension_door); break;
        case SPELL_TELEPORT:         MANUAL_SPELL(spell_teleport); break;
        case SPELL_DEGENERATION:     MANUAL_SPELL(spell_degeneration); break;
        case SPELL_COLOR_SPRAY:      MANUAL_SPELL(spell_color_spray); break;
        case SPELL_LIGHTNING_BREATH: MANUAL_SPELL(spell_lightning_breath);break;
        case SPELL_WORD_OF_COMMAND:  MANUAL_SPELL(spell_word_of_command);break;
        case SPELL_FIRE_DARTS:       MANUAL_SPELL(spell_fire_darts);break;
        case SPELL_MAGIC_MISSILE:    MANUAL_SPELL(spell_magic_missile);break;
        case SPELL_IMMOLATE:         MANUAL_SPELL(spell_immolate);break;
        case SPELL_ICE_DARTS:        MANUAL_SPELL(spell_ice_darts);break;
        case SPELL_ICE_DAGGER:       MANUAL_SPELL(spell_ice_dagger);break;
        case SPELL_FEAR:             MANUAL_SPELL(spell_fear);break;
        case SPELL_FLOOD:            MANUAL_SPELL(spell_flood);break;
        case SPELL_MOONBEAM:         MANUAL_SPELL(spell_moonbeam); break;
        case SPELL_ENERGY_DRAIN:     MANUAL_SPELL(spell_energy_drain); break;
        case SPELL_VENTRILOQUATE:    MANUAL_SPELL(spell_ventriloquate); break;
d403 2
d406 1
d408 4
a412 6
    case SPELL_ENCHANT_WEAPON:       MANUAL_SPELL(spell_enchant_weapon); break;
    case SPELL_FEAR:                 MANUAL_SPELL(spell_fear);break;
    case SPELL_IDENTIFY:             MANUAL_SPELL(spell_identify); break;
    case SPELL_LOCATE_OBJECT:        MANUAL_SPELL(spell_locate_object); break;
    case SPELL_SUMMON:               MANUAL_SPELL(spell_summon); break;
    case SPELL_WORD_OF_RECALL:       MANUAL_SPELL(spell_recall); break;
a413 6
    case SPELL_CREEPING_DOOM:        MANUAL_SPELL(spell_creeping_doom); break;
    case SPELL_MOONWELL:             MANUAL_SPELL(spell_moonwell); break;
    case SPELL_MAJOR_PARALYSIS:      MANUAL_SPELL(spell_major_paralysis);break;
    case SPELL_RESURRECT:            MANUAL_SPELL(spell_resurrect); break;
    case SPELL_PRESERVE:             MANUAL_SPELL(spell_preserve); break;
    case SPELL_PLANE_SHIFT:          MANUAL_SPELL(spell_plane_shift); break;
d415 2
a416 10
    case SPELL_MINOR_CREATION:       MANUAL_SPELL(spell_minor_creation); break;
    case SPELL_WIZARD_EYE:           MANUAL_SPELL(spell_wizard_eye); break;
    case SPELL_TELEPORT:             MANUAL_SPELL(spell_teleport); break;
    case SPELL_SUMMON_CORPSE:        MANUAL_SPELL(spell_summon_corpse); break;
    case SPELL_SHIFT_CORPSE:         MANUAL_SPELL(spell_shift_corpse); break;
    case SPELL_DEGENERATION:         MANUAL_SPELL(spell_degeneration); break;
    case SPELL_RELOCATE:             MANUAL_SPELL(spell_relocate); break;
    case SPELL_COLOR_SPRAY:          MANUAL_SPELL(spell_color_spray); break;
    case SPELL_LIGHTNING_BREATH:     MANUAL_SPELL(spell_lightning_breath);break;
    case SPELL_LESSER_INVOCATION:    MANUAL_SPELL(spell_lesser_invocation);break;
d418 4
a422 2
    case SPELL_BANISH:               MANUAL_SPELL(spell_banish);break;
    case SPELL_WORD_OF_COMMAND:      MANUAL_SPELL(spell_word_of_command);break;
a423 1
    case SPELL_DARK_FEAST:           MANUAL_SPELL(spell_dark_feast);break;
d425 1
a425 7
    case SPELL_WALL_OF_STONE:        MANUAL_SPELL(spell_magical_wall);break;
    case SPELL_WANDERING_WOODS:      MANUAL_SPELL(spell_wandering_woods);break;
    case SPELL_ARMOR_OF_GAIA:        MANUAL_SPELL(spell_armor_of_gaia);break;
    case SPELL_FIRE_DARTS:           MANUAL_SPELL(spell_fire_darts);break;
    case SPELL_MAGIC_MISSILE:        MANUAL_SPELL(spell_magic_missile);break;
    case SPELL_FLAME_BLADE:          MANUAL_SPELL(spell_flame_blade);break;
    case SPELL_IMMOLATE:             MANUAL_SPELL(spell_immolate);break;
d427 2
a428 2
    case SPELL_ICE_DAGGER:           MANUAL_SPELL(spell_ice_dagger);break;
    case SPELL_WALL_OF_ICE:          MANUAL_SPELL(spell_magical_wall);break;
d430 12
a441 1
    case SPELL_FLOOD:                MANUAL_SPELL(spell_flood);break;
d443 1
a443 2
    case SPELL_ILLUMINATION:         MANUAL_SPELL(spell_illumination);break;
    case SPELL_DARKNESS:             MANUAL_SPELL(spell_darkness);break;
d445 5
a449 2
    case SPELL_MOONBEAM:             MANUAL_SPELL(spell_moonbeam); break;
    case SPELL_ENERGY_DRAIN:         MANUAL_SPELL(spell_energy_drain); break;
d451 7
d1856 3
@


1.156
log
@Add do_show_spell and level_to_circle.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.155 2008/04/14 08:36:53 jps Exp jps $
d1837 14
d1853 3
@


1.155
log
@Updated call to ASPELL, since it now includes the spell number.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.154 2008/04/14 02:31:37 jps Exp jps $
d33 1
a139 1

d1684 153
d1839 3
@


1.154
log
@Consolidate the loss of hiddenness when being violent into a single
function.  It also removes glory.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.153 2008/04/13 22:24:26 jps Exp jps $
d436 1
a436 1
    case SPELL_WALL_OF_STONE:        MANUAL_SPELL(spell_wall_of_stone);break;
d445 2
a446 1
    case SPELL_WALL_OF_ICE:          MANUAL_SPELL(spell_wall_of_ice);break;
d1686 4
@


1.153
log
@Cause single-target attack spells to get mis-targetted when the
caster is confused.  Moved the attack-back code into call_magic,
where it only needs to be written once.  Also made it into an
event.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.152 2008/04/12 21:29:10 jps Exp jps $
a36 1
void appear(struct char_data * ch);
d45 1
a48 1

d1060 2
a1061 9
  if (target && SINFO.violent) {
    if (affected_by_spell(ch, SPELL_INVISIBLE) ||
        affected_by_spell(ch, SPELL_NATURES_EMBRACE))
      appear(ch);
    REMOVE_FLAG(EFF_FLAGS(ch), EFF_INVISIBLE);
    REMOVE_FLAG(EFF_FLAGS(ch), EFF_CAMOUFLAGED);
    GET_HIDDENNESS(ch) = 0;
  }

d1408 2
a1409 8
  if (SINFO.violent) {
    if (affected_by_spell(ch, SPELL_INVISIBLE) ||
        affected_by_spell(ch, SPELL_NATURES_EMBRACE))
      appear(ch);
    REMOVE_FLAG(EFF_FLAGS(ch), EFF_INVISIBLE);
    REMOVE_FLAG(EFF_FLAGS(ch), EFF_CAMOUFLAGED);
    GET_HIDDENNESS(ch) = 0;
  }
d1685 6
@


1.152
log
@Removing prototype in magic.h.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.151 2008/04/12 21:13:18 jps Exp jps $
d241 5
d276 22
a904 8
  /* A victim attacks back immediately, 80% of the time */
  if (IS_SET(cresult, CAST_RESULT_CHARGE) &&
      skills[chantnum].violent && tch && IS_NPC(tch) &&
      !FIGHTING(tch) && AWAKE(tch) && number(0, 4)) {
    attack(tch, ch);
    remember(tch, ch);
  }

a1317 8

         /* A victim attacks back immediately, 80% of the time */
         if (skills[ch->casting.spell].violent && ch->casting.tch &&
             IS_NPC(ch->casting.tch) && !FIGHTING(ch->casting.tch) &&
             GET_STANCE(ch->casting.tch) >= STANCE_RESTING && number(0, 4)) {
            attack(ch->casting.tch, ch);
            remember(ch->casting.tch, ch);
         }
d1699 3
@


1.151
log
@Using new header file magic.h.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.150 2008/04/07 03:02:54 jps Exp jps $
a45 1
bool evades_spell(struct char_data *caster, struct char_data *vict, int spellnum, int power);
a774 2
            printf("The required stance is %d, while the caster's stance is %d\n",
                  SINFO.stance, GET_STANCE(ch));
d1688 3
@


1.150
log
@Changed the POS/STANCE system so that POS reflects the position
of your body, while STANCE describes your condition or activity.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.149 2008/04/02 03:24:44 myc Exp jps $
d32 1
a36 1
int mag_savingthrow(struct char_data * ch, int type);
d1691 4
@


1.149
log
@Rewrote group code and removed major group code.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.148 2008/03/29 16:27:20 jps Exp myc $
d298 1
a298 1
  if (cvict && GET_POS(cvict) == POS_DEAD)
d434 1
a434 1
    if (cvict && GET_POS(cvict) == POS_DEAD)
d762 8
a769 3
   if (GET_POS(ch) < SINFO.min_position) {
      switch (GET_POS(ch)) {
         case POS_SLEEPING:
d772 1
a772 1
         case POS_RESTING:
a774 6
         case POS_SITTING:
            send_to_char("You can't do this sitting!\r\n", ch);
            break;
         case POS_FIGHTING:
            send_to_char("Impossible!  You can't concentrate enough!\r\n", ch);
           break;
d776 2
d838 8
a845 3
  if (GET_POS(ch) < skills[chantnum].min_position) {
    switch (GET_POS(ch)) {
      case POS_SLEEPING:
d848 1
a848 1
      case POS_RESTING:
a850 6
      case POS_SITTING:
        send_to_char("You can't do this sitting!\r\n", ch);
        break;
      case POS_FIGHTING:
        send_to_char("Impossible!  You can't concentrate enough!\r\n", ch);
        break;
d925 1
a925 1
  if (GET_STANCE(ch) < STANCE_STANDING) {
d1287 1
a1287 1
             GET_POS(ch->casting.tch) >= POS_RESTING && number(0, 4)) {
d1306 1
a1306 1
             GET_POS(ch->casting.tch) >= POS_RESTING && number(0, 4)) {
d1337 1
a1337 1
  if (GET_MOB_WAIT(ch) <= 0 && GET_POS(ch) < POS_FIGHTING)
d1340 1
a1340 1
  if (GET_STANCE(ch) < STANCE_STANDING)
d1364 1
a1364 1
  if (SINFO.min_position > GET_POS(ch))
d1657 1
a1657 1
      if (GET_POS(caster) > POS_INCAP) {
d1678 1
a1678 1
      if (GET_POS(caster) > POS_INCAP) {
d1691 3
@


1.148
log
@evades_spell() now also needs the casting power to make its decision.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.147 2008/03/28 17:54:53 myc Exp jps $
d789 1
a789 1
   if (IS_SET(SINFO.routines, MAG_GROUP) && !EFF_FLAGGED(ch, EFF_GROUP)) {
d865 1
a865 2
  if (IS_SET(skills[chantnum].routines, MAG_GROUP) &&
      !EFF_FLAGGED(ch, EFF_GROUP)) {
d1691 3
@


1.147
log
@Now using flagvectors for effect, mob, player, preference, room, and
room effect flags.  AFF, AFF2, and AFF3 flags are now just EFF flags.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.146 2008/03/24 08:41:42 jps Exp myc $
d46 1
a46 1
bool evades_spell(struct char_data *caster, struct char_data *vict, int spellnum);
d272 1
a272 1
  if (IS_SPELL(spellnum) && cvict && evades_spell(caster, cvict, spellnum))
d1692 4
@


1.146
log
@Removing unused function prototypes.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.145 2008/03/10 20:46:55 myc Exp jps $
d302 1
a302 1
  if (MOB2_FLAGGED(caster, MOB2_ILLUSORY)) {
d305 2
a306 2
      if (IS_SET(SINFO.routines, MAG_AFFECTS))
        imp_skill |= mag_affects(skill, caster, cvict, spellnum, savetype);
d308 2
a309 2
      if (IS_SET(SINFO.routines, MAG_UNAFFECTS))
        imp_skill |= mag_unaffects(skill, caster, cvict, spellnum, savetype);
d311 2
a312 2
      if (IS_SET(SINFO.routines, MAG_POINTS))
        imp_skill |= mag_points(skill, caster, cvict, spellnum, savetype);
d316 2
a317 2
    if (IS_SET(SINFO.routines, MAG_AREAS))
      imp_skill |= mag_areas(skill, caster, spellnum, savetype);
d342 2
a343 2
  if (IS_SET(SINFO.routines, MAG_AFFECTS))
    imp_skill |= mag_affects(skill, caster, cvict, spellnum, savetype);
d345 2
a346 2
  if (IS_SET(SINFO.routines, MAG_UNAFFECTS))
    imp_skill |= mag_unaffects(skill, caster, cvict, spellnum, savetype);
d348 2
a349 2
  if (IS_SET(SINFO.routines, MAG_POINTS))
    imp_skill |= mag_points(skill, caster, cvict, spellnum, savetype);
d351 2
a352 2
  if (IS_SET(SINFO.routines, MAG_ALTER_OBJS))
    imp_skill |= mag_alter_objs(skill, caster, ovict, spellnum, savetype);
d354 2
a355 2
  if (IS_SET(SINFO.routines, MAG_GROUPS))
    imp_skill |= mag_groups(skill, caster, spellnum, savetype);
d357 2
a358 2
  if (IS_SET(SINFO.routines, MAG_MASSES))
    imp_skill |= mag_masses(skill, caster, spellnum, savetype);
d363 2
a364 2
  if (IS_SET(SINFO.routines, MAG_AREAS))
    imp_skill |= mag_areas(skill, caster, spellnum, savetype);
d366 2
a367 2
  if (IS_SET(SINFO.routines, MAG_SUMMONS))
    imp_skill |= mag_summons(skill, caster, cvict, ovict, spellnum, savetype);
d369 2
a370 2
  if (IS_SET(SINFO.routines, MAG_CREATIONS))
    imp_skill |= mag_creations(skill, caster, spellnum);
d783 1
a783 1
   if (AFF_FLAGGED(ch, AFF_CHARM) && (ch->master == tch) && SINFO.violent) {
d789 1
a789 1
   if (IS_SET(SINFO.routines, MAG_GROUPS) && !IS_AFFECTED(ch, AFF_GROUP)) {
d818 1
a818 1
   if (tch && MOB2_FLAGGED(tch, MOB2_ILLUSORY))
d860 1
a860 1
  if (AFF_FLAGGED(ch, AFF_CHARM) && (ch->master == tch) &&
d865 2
a866 2
  if (IS_SET(skills[chantnum].routines, MAG_GROUPS) &&
      !AFF_FLAGGED(ch, AFF_GROUP)) {
d892 1
a892 1
        tch && MOB2_FLAGGED(tch, MOB2_ILLUSORY))
d916 1
a916 1
  if (AFF2_FLAGGED(ch, AFF2_SILENCE)) {
d1050 2
a1051 2
    REMOVE_BIT(AFF_FLAGS(ch), AFF_INVISIBLE);
    REMOVE_BIT(AFF3_FLAGS(ch), AFF3_CAMOUFLAGED);
d1265 1
a1265 1
   if (AFF2_FLAGGED(ch, AFF2_INSANITY) && !mag_savingthrow(ch, SAVING_PARA)) {
d1329 1
a1329 1
  if (AFF2_FLAGGED(ch, AFF2_SILENCE))
d1413 2
a1414 2
    REMOVE_BIT(AFF_FLAGS(ch), AFF_INVISIBLE);
    REMOVE_BIT(AFF3_FLAGS(ch), AFF3_CAMOUFLAGED);
d1692 3
@


1.145
log
@Renamed POS1 to 'stance'.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.144 2008/03/09 08:58:54 jps Exp myc $
a45 2
bool protected_from_spell(struct char_data *ch, int spell);
bool immune_from_spell(struct char_data *ch, int spell);
d1692 3
@


1.144
log
@Add manual spell calls for fear.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.143 2008/03/08 22:29:06 myc Exp jps $
d928 1
a928 1
  if (GET_POS1(ch) < POS1_STANDING) {
d943 1
a943 1
      int hours = GET_COOLDOWN(ch, CD_CHANT) / (SECS_PER_MUD_HOUR RL_SEC);
d1087 1
a1087 1
      SET_COOLDOWN(ch, CD_CHANT, 4 * SECS_PER_MUD_HOUR RL_SEC);
d1343 1
a1343 1
  if (GET_POS1(ch) < POS1_STANDING)
d1694 3
@


1.143
log
@Moving shapechange and chant to the cooldown system.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.142 2008/03/06 05:11:51 myc Exp myc $
d335 1
d383 1
d1694 3
@


1.142
log
@Combined the 'saved' and 'unsaved' portions of the char_specials and
player_specials structures by moving all fields of each saved structure
to its parent structure.  Also combined the skills array from the
player and mob structures since they are identical.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.141 2008/03/05 03:03:54 myc Exp myc $
d940 3
a942 2
    if (GET_LEVEL(ch) < LVL_GOD && ch->player_specials->chant > 0) {
      if (ch->player_specials->chant == 1)
d945 1
a945 1
        sprintf(buf1, "%d hours", ch->player_specials->chant);
d1085 1
a1085 1
      ch->player_specials->chant = 4;
d1692 6
@


1.141
log
@Fixed a memory leak in casting.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.140 2008/02/23 01:03:54 myc Exp myc $
d940 2
a941 2
    if (GET_LEVEL(ch) < LVL_GOD && ch->player_specials->saved.chant > 0) {
      if (ch->player_specials->saved.chant == 1)
d944 1
a944 1
        sprintf(buf1, "%d hours", ch->player_specials->saved.chant);
d1084 1
a1084 1
      ch->player_specials->saved.chant = 4;
d1691 3
@


1.140
log
@Removing spell_level from here.  It's now skill_assign in skills.c.
The circle fields in the skilldef structure are gone; new macros for
accessing circle and mem info.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.139 2008/02/16 20:31:32 myc Exp myc $
d623 1
a623 1
         misc = str_dup(arg);
d683 1
a683 1
                     misc = str_dup(arg);
d1009 2
a1010 2
    /* This str_dup is attached to the char's casting struct and freed later */
    misc = str_dup(argument);
d1038 3
d1691 5
@


1.139
log
@Fix some 'freeing null pointer' warnings.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.138 2008/02/09 21:07:50 myc Exp myc $
d1319 1
a1319 1
  int circle = SINFO.min_circle[(int) GET_CLASS(ch)];
d1493 1
a1493 1
      circle = GET_CIRCLE(ch->casting.spell);
a1587 39
void spell_level(int spell, int class, int level, int circle)
{
  char buf[256];
  int bad = 0;

  if (spell < 0 || spell > TOP_SKILL_DEFINE) {
    sprintf(buf, "SYSERR: attempting assign to illegal talent num %d", spell);
    log(buf);
    return;
  }

  if (class < 0 || class >= NUM_CLASSES) {
    sprintf(buf, "SYSERR: assigning '%s' to illegal class %d",
            skill_name(spell), class);
    log(buf);
    bad = 1;
  }

  if (level < 1 || level > LVL_IMPL) {
    sprintf(buf, "SYSERR: assigning '%s' to illegal level %d",
            skill_name(spell), level);
    log(buf);
    bad = 1;
  }

  if (circle < 1 || circle > NUM_SPELL_CIRCLES) {
    sprintf(buf, "SYSERR: assigning '%s' to illegal circle '%d'", skill_name(spell), circle);
    log(buf);
    bad = 1;
  }

  if (!bad) {
    skills[spell].min_level[class] = level;
    skills[spell].min_circle[class] = circle;
    skills[spell].lowest_level = MIN(skills[spell].lowest_level, level);
    skills[spell].lowest_circle = MIN(skills[spell].lowest_circle, circle);
  }
}

d1688 3
@


1.138
log
@Using event flags instead of plr/mob flags for casting.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.137 2008/02/09 04:27:47 myc Exp myc $
d624 2
a625 1
         free(ch->casting.misc);
d684 2
a685 1
                     free(ch->casting.misc);
d1069 2
a1070 1
  free(ch->casting.misc);
d1419 2
a1420 1
  free(ch->casting.misc);
d1727 3
@


1.137
log
@Now relying on math header file.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.136 2008/02/02 04:27:55 myc Exp myc $
d1086 1
a1086 4
    if (IS_NPC(ch))
      SET_BIT(MOB_FLAGS(ch), MOB_CASTING);
    else
      SET_BIT(PLR_FLAGS(ch), PLR_CASTING);
d1103 2
a1104 2
      event_create(EVENT_CASTING, casting_handler,
          mkgenericevent(ch, 0, 0), &(ch->events), 0);
d1325 1
a1325 1
  if (MOB_FLAGGED(ch, MOB_CASTING))
d1411 1
a1411 1
  SET_BIT(MOB_FLAGS(ch), MOB_CASTING);
d1429 2
a1430 2
  event_create(EVENT_CASTING, casting_handler,
      mkgenericevent(ch, 0, 0), &(ch->events), 0);
d1723 3
@


1.136
log
@Adding cast triggers.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.135 2008/01/29 21:02:31 myc Exp myc $
d31 1
d1726 3
@


1.135
log
@Removing a lot of extern declarations from code files and moving
them to header files, mostly db.h and constants.h.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.134 2008/01/29 16:51:12 myc Exp myc $
d30 1
d247 5
d1725 4
@


1.134
log
@Adding skill names to the skilldef struct.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.133 2008/01/27 21:14:59 myc Exp myc $
a30 1
extern struct room_data *world;
d1719 3
@


1.133
log
@Replace hit() with attack().
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.132 2008/01/26 23:19:28 jps Exp myc $
d182 1
a182 1
      strcpy(lbuf, skillnames[spellnum]);
d192 1
a192 1
      strcpy(spellbuf, skillnames[spellnum]);
d1453 1
a1453 1
  strcpy(lbuf, skillnames[ch->casting.spell]);
d1503 1
a1503 1
        strcpy(spellbuf, skillnames[bad_guess(ch)]);
d1512 1
a1512 1
      strcpy(spellbuf, skillnames[ch->casting.spell]);
d1531 1
a1531 1
          !strcmp(spellbuf, skillnames[ch->casting.spell]) ||
d1720 3
@


1.132
log
@Remove the equipment-destroying manual spell for acid breath.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.131 2008/01/26 14:26:31 jps Exp jps $
d878 1
a878 1
    hit(tch, ch, TYPE_UNDEFINED);
d1279 1
a1279 1
            hit(ch->casting.tch, ch, TYPE_UNDEFINED);
d1298 1
a1298 1
            hit(ch->casting.tch, ch, TYPE_UNDEFINED);
d1720 3
@


1.131
log
@Moved a lot of skill-related code into skills.h and skills.c.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.130 2008/01/26 12:53:45 jps Exp jps $
a394 1
    case SPELL_ACID_BREATH:          MANUAL_SPELL(spell_acid_breath); break;
d1720 3
@


1.130
log
@Prevent skill improvement for spells and chants done to illusions.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.129 2008/01/26 12:31:19 jps Exp jps $
a30 2
struct spell_info_type spell_info[TOP_SPELL_DEFINE + 1];

a50 407
/*
 * This arrangement is pretty stupid, but the number of skills is limited by
 * the playerfile.  We can arbitrarily increase the number of skills by
 * increasing the space in the playerfile. Meanwhile, this should provide
 * ample slots for skills.
 */

char *spells[] =
{
  "!RESERVED!",                        /* 0 - reserved */

  /* SPELLS */

  "armor",                        /* 1 */
  "teleport",
  "bless",
  "blindness",
  "burning hands",
  "call lightning",
  "charm person",
  "chill touch",
  "clone",
  "color spray",                /* 10 */
  "control weather",
  "create food",
  "create water",
  "cure blind",
  "cure critical",
  "cure light",
  "curse",
  "detect alignment",
  "detect invisibility",
  "detect magic",                /* 20 */
  "detect poison",
  "dispel evil",
  "earthquake",
  "enchant weapon",
  "energy drain",
  "fireball",
  "harm",
  "heal",
  "invisibility",
  "lightning bolt",                /* 30 */
  "locate object",
  "magic missile",
  "poison",
  "protection from evil",
  "remove curse",
  "sanctuary",
  "shocking grasp",
  "sleep",
  "strength",
  "summon",                        /* 40 */
  "ventriloquate",
  "word of recall",
  "remove poison",
  "sense life",
  "animate dead",
  "dispel good",
  "group armor",
  "group heal",
  "group recall",
  "infravision",                /* 50 */
  "waterwalk",
  "stone skin",
  "full heal",
  "full harm",
  "wall of fog",
  "wall of stone",
  "fly",
  "summon dracolich",
  "summon elemental",
  "summon demon",
  "summon greater demon",                        /* 61 */
  "dimension door",
  "creeping doom",
  "doom",
  "meteorswarm",        /* 65 */
  "bigbys clenched fist",
  "farsee",
  "haste",
  "blur",
  "greater endurance",        /* 70 */
  "moonwell",
  "inn strength",
  "darkness",
  "illumination",
  "comprehend language",        /* 75 */
  "cone of cold",
  "ice storm",
  "ice shards",
  "major paralysis",
  "vampiric breath",        /* 80 */
  "resurrect",
  "incendiary nebula",
  "minor paralysis",
  "cause light",
  "cause serious",      /* 85 */
  "cause critical",
  "preserve",
  "cure serious",
  "vigorize light",
  "vigorize serious",        /* 90 */
  "vigorize critic",
  "soulshield",
  "destroy undead",
  "silence",
  "flamestrike",        /* 95 */
  "unholy word",
  "holy word",
  "plane shift",
  "dispel magic",
  "minor creation",        /* 100 */
  "concealment",
  "ray of enfeeblement",
  "levitate",
  "wizard eye",
  "fireshield",                /* 105 */
  "coldshield",
  "minor globe",
  "major globe",
  "disintegrate",
  "harness",                /* 110 */
  "chain lightning",
  "mass invisibility",
  "relocate",
  "fear",
  "circle of light",        /* 115 */
  "divine bolt",
  "prayer",
  "elemental warding",
  "divine ray",
  "lesser exorcism",        /* 120 */
  "lesser invocation",
  "speak in tongues",
  "enlightenment",
  "exorcism",
  "greater invocation",  /* 125 */
  "wings of heaven",
  "banish",
  "word of command",
  "divine essence",
  "heavens gate",         /* 130 */
  "dark presence",
  "demonskin",
  "dark feast",
  "hell bolt",
  "disease",             /* 135 */
  "insanity",
  "demonic aspect",
  "hellfire and brimstone",
  "stygian eruption",
  "demonic mutation",    /* 140 */
  "wings of hell",
  "sane mind",
  "hell gate",
  "barkskin",
  "night vision",        /* 145 */
  "writhing weeds",
  "create spring",
  "nourishment",
  "cloak of gaia",
  "natures embrace",     /* 150 */
  "entangle",
  "invigorate",
  "wandering woods",
  "urban renewal",
  "sunray",              /* 155 */
  "armor of gaia",
   "fire darts",
   "magic torch",
   "smoke",
   "mirage",             /* 160 */
   "flame blade",
   "heatwave",
   "firestorm",
   "melt",
   "circle of fire",     /* 165 */
   "immolate",
   "supernova",
   "cremate",
   "negate heat",
   "combust",            /* 170 */
   "ice darts",
   "ice armor",
   "ice dagger",
   "freezing wind",
   "freeze",             /* 175 */
   "wall of ice",
   "iceball",
   "flood",
   "vaporform",
   "negate cold",        /* 180 */
   "waterform",
   "extinguish",
   "rain",
   "reduce",
   "enlarge",            /* 185 */
  "identify",
  "bone armor",
  "summon corpse",
  "shift corpse",

  /* languages */
  "!UNUSED!",/* 190 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 195 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 200 */

  "fire breath",
  "gas breath",
  "frost breath",
  "acid breath",
  "lightning breath",        /* 205 */

  "lesser endurance",
  "endurance",
  "vitality",
  "greater vitality",
  "dragons health", /* 210 */

  "rebuke undead",
  "degeneration",
  "soul tap",
  "natures guidance",
  "moonbeam", /* 215 */
  "phantasm",
  "simulacrum",

  "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 220 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 225 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 230 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 235 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 240 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 245 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 250 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 255 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 260 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 265 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 270 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 275 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 280 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 285 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 290 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 295 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 300 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 305 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 310 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 315 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 320 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 325 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 330 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 335 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 340 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 345 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 350 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 355 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 360 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 365 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 370 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 375 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 380 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 385 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 390 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 395 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 400 */

/* SKILLS */

  "backstab",            /* 401 */
  "bash",                /* 402 */
  "hide",                /* 403 */
  "kick",                /* 404 */
  "pick lock",           /* 405 */
  "punch",               /* 406 */
  "rescue",              /* 407 */
  "sneak",               /* 408 */
  "steal",               /* 409 */
  "track",               /* 410 */
  "dual wield",          /* 411 */
  "double attack",       /* 412 */
  "berserk",             /* 413 */
  "springleap",          /* 414 */
  "mount",               /* 415 */
  "riding",              /* 416 */
  "tame",                /* 417 */
  "throatcut",           /* 418 */
  "doorbash",            /* 419 */
  "parry",               /* 420 */
  "dodge",               /* 421 */
  "riposte",             /* 422 */
  "meditate",            /* 423 */
  "quick chant",         /* 424 */
  "utility",             /* 425 */
  "circle",              /* 426 */
  "bodyslam",
  "bind",                /* 428 */
  "shapechange",
  "switch",              /* 430 */
  "disarm",
  "fumbling weapon",     /* fumbling */
  "dropped weapon",      /* dropped */
  "guard",
  "breath",              /* 435 */
  "sweep",
  "roar",
  "douse",
  "aware",
  "instant kill",        /* 440 */
  "hitall",
  "hunt",
  "bandage",
  "first aid",
  "vampiric touch",        /* 445 */
  "chant",
  "scribe",
  "safefall",
  "barehand",
  "summon mount",          /* 450 */
  "spell knowledge",
  "sphere of generic",
  "sphere of fire",
  "sphere of water",
  "sphere of earth",           /* 455 */
  "sphere of air",
  "sphere of healing",
  "sphere of protection",
  "sphere of enchantment",
  "sphere of summoning",   /* 460 */
  "sphere of death",
  "sphere of divination",
  "bludgeoning weapons",
  "piercing weapons",
  "slashing weapons",        /* 465 */
  "2H bludgeoning weapons",
  "2H piercing weapons",
  "2H slashing weapons",
  "missile weapons",
  "!ONFIRE!",        /* 470 */
  "lay hands",
  "eye gouge",
  "retreat",
  "group retreat",
  "corner",        /* 475 */
  "stealth",
  "shadow",
  "conceal",
  "peck",
  "claw",        /* 480 */
  "electrify",
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 485 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 490 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 495 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 500 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 505 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 510 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 515 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 520 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 525 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 530 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 535 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 540 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 545 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 550 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 555 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 560 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 565 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 570 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 575 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 580 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 585 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 590 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 595 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 600 */

  /* MONK CHANTS */
  "regeneration",
  "battle hymn",
  "war cry",
  "peace",
  "shadows sorrow song",        /* 605 */
  "ivory symphony",
  "aria of dissonance",
  "sonata of malaise",
  "apocalyptic anthem",
  "seed of destruction",        /* 610 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 615 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 620 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 625 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 630 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 635 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 640 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 645 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",        /* 650 */



  /* OBJECT SPELLS AND NPC SPELLS/SKILLS */

  "!UNUSED!",                               /* 651 */
  "fire breath",                       /* 652 */
  "gas breath",                               /* 653 */
  "frost breath",                       /* 654 */
  "acid breath",                       /* 655 */
  "lightning breath",                /* 656 */
  "\n"                                /* the end */
};

d182 1
a182 1
      strcpy(lbuf, spells[spellnum]);
d192 1
a192 1
      strcpy(spellbuf, spells[spellnum]);
a229 95
char *skill_name(int num)
{
  int i = 0;

  if (num <= 0) {
    if (num == -1)
      return "UNUSED";
    else
      return "UNDEFINED";
  }

  while (num && *spells[i] != '\n') {
    num--;
    i++;
  }

  if (*spells[i] != '\n')
    return spells[i];
  else
    return "UNDEFINED";
}

int find_talent_num(char *name, int restrict)
{
  int index = 0, abbrevmatch = -1, ok;
  char *temp, *temp2;
  char first[256], first2[256];

  skip_spaces(&name);

  /* Loop through the skills to find a match. */
  while (*spells[++index] != '\n') {

     if ((restrict == SPELL && !IS_SPELL(index)) ||
         (restrict == SKILL && !IS_SKILL(index)) ||
         (restrict == SONG && !IS_SONG(index)) ||
         (restrict == CHANT && !IS_CHANT(index)))
        continue;

    /* Exact match.  This is the skill we're looking for. */
    if (!strcmp(name, spells[index]))
      return index;

    /*
     * If we found an abbreviated match, we don't want to return its
     * index immediately, in case we find a better match later.
     */
    if (is_abbrev(name, spells[index])) {
       if (abbrevmatch == -1 || strcmp(spells[index], spells[abbrevmatch]) == -1) {
         abbrevmatch = index;
         continue;
       }
    }

    /*
     * Check for multiple-word abbreviations.
     */
    ok = 1;
    temp = any_one_arg(spells[index], first);
    temp2 = any_one_arg(name, first2);
    while (*first && *first2 && ok) {
      if (!is_abbrev(first2, first))
        ok = 0;
      temp = any_one_arg(temp, first);
      temp2 = any_one_arg(temp2, first2);
    }

    if (ok && !*first2 && abbrevmatch == -1) {
      abbrevmatch = index;
    }
  }

  return abbrevmatch;
}

int find_skill_num(char *name)
{
   return find_talent_num(name, SKILL);
}

int find_spell_num(char *name)
{
   return find_talent_num(name, SPELL);
}

int find_chant_num(char *name)
{
   return find_talent_num(name, CHANT);
}

int find_song_num(char *name)
{
   return find_talent_num(name, SONG);
}

d469 1
a469 1
   if (spell2 >= 1 && spell2 <= TOP_SPELL_DEFINE && number(1, 2) == 1)
d472 1
a472 1
   if (spell3 >= 1 && spell3 <= TOP_SPELL_DEFINE && number(1, 3) == 1)
d475 1
a475 1
   switch (spell_info[chosenspell].sphere) {
d492 4
a495 4
 * staff  - [0]        skill        [1] max charges        [2] num charges        [3] spell num
 * wand   - [0]        skill        [1] max charges        [2] num charges        [3] spell num
 * scroll - [0]        skill        [1] spell num        [2] spell num        [3] spell num
 * potion - [0] skill        [1] spell num        [2] spell num        [3] spell num
d648 1
a648 1
            if (spellnum >= 1 && spellnum <= TOP_SPELL_DEFINE &&
d749 1
a749 1
   if (spellnum < 0 || spellnum > TOP_SPELL_DEFINE) {
d807 1
a807 1
   sphere = spell_info[spellnum].sphere;
d824 1
a824 1
  if (chantnum < 0 || chantnum > TOP_SPELL_DEFINE) {
d830 1
a830 1
  if (GET_POS(ch) < spell_info[chantnum].min_position) {
d854 1
a854 1
      spell_info[chantnum].violent) {
d858 1
a858 1
  if (IS_SET(spell_info[chantnum].routines, MAG_GROUPS) &&
d877 1
a877 1
      spell_info[chantnum].violent && tch && IS_NPC(tch) &&
d1270 1
a1270 1
      int spell_circle = MAX(1, MIN(12, 1 + (spell_info[ch->casting.spell].min_level[(int) GET_CLASS(ch)] - 1) / 8));
d1277 1
a1277 1
         if (spell_info[ch->casting.spell].violent && ch->casting.tch &&
d1296 1
a1296 1
         if (spell_info[ch->casting.spell].violent && ch->casting.tch &&
d1454 1
a1454 1
  strcpy(lbuf, spells[ch->casting.spell]);
d1504 1
a1504 1
        strcpy(spellbuf, spells[bad_guess(ch)]);
d1513 1
a1513 1
      strcpy(spellbuf, spells[ch->casting.spell]);
d1532 1
a1532 1
          !strcmp(spellbuf, spells[ch->casting.spell]) ||
d1569 1
a1569 1
    if(spell_info[ch->casting.spell].violent)
d1575 1
a1575 1
    if (spell_info[ch->casting.spell].violent)
d1587 1
a1587 1
  if (spell < 0 || spell > TOP_SPELL_DEFINE) {
d1614 4
a1617 4
    spell_info[spell].min_level[class] = level;
    spell_info[spell].min_circle[class] = circle;
    spell_info[spell].lowest_level = MIN(spell_info[spell].lowest_level, level);
    spell_info[spell].lowest_circle = MIN(spell_info[spell].lowest_circle, circle);
a1621 1176
/* Define the skills on boot up */
void dskill(int spl, int max_mana, int min_mana, int mana_change, byte minpos,
            int targets, byte violent, bool humanoid, int routines, int mem_time,
            int cast_time, int damage_type, int sphere, int pages, int quest,
            char *wearoff)
{
  int i;

  for (i = 0; i < NUM_CLASSES; i++)
    spell_info[spl].min_level[i] = LVL_IMMORT;
  spell_info[spl].lowest_level = LVL_IMMORT;

  spell_info[spl].mana_max = max_mana;
  spell_info[spl].mana_min = min_mana;
  spell_info[spl].mana_change = mana_change;
  spell_info[spl].min_position = minpos;
  spell_info[spl].targets = targets;
  spell_info[spl].violent = violent || IS_SET(routines, MAG_DAMAGE);
  spell_info[spl].humanoid = humanoid;
  spell_info[spl].routines = routines;
  spell_info[spl].damage_type = damage_type;
  spell_info[spl].sphere = sphere;
  spell_info[spl].pages  = pages;
  spell_info[spl].quest  = quest;
  spell_info[spl].wearoff = wearoff;

  for (i = 0; i < NUM_CLASSES; i++)
    spell_info[spl].min_circle[i] = NUM_SPELL_CIRCLES;
  spell_info[spl].lowest_circle = NUM_SPELL_CIRCLES;

  spell_info[spl].mem_time = mem_time;
  spell_info[spl].cast_time = cast_time;
}


void unused_spell(int spl)
{
  int i;

  for (i = 0; i < NUM_CLASSES; i++)
    spell_info[spl].min_level[i] = LVL_IMPL + 1;
  spell_info[spl].lowest_level = LVL_IMPL + 1;

  spell_info[spl].mana_max = 0;
  spell_info[spl].mana_min = 0;
  spell_info[spl].mana_change = 0;
  spell_info[spl].min_position = 0;
  spell_info[spl].targets = 0;
  spell_info[spl].violent = 0;
  spell_info[spl].humanoid = FALSE;
  spell_info[spl].routines = 0;
  spell_info[spl].damage_type = 0;
  spell_info[spl].sphere = 0;
  spell_info[spl].pages = 0;
  spell_info[spl].quest = 0;
  spell_info[spl].wearoff = NULL;

  for (i = 0; i < NUM_CLASSES; i++)
    spell_info[spl].min_circle[i] = NUM_SPELL_CIRCLES;
  spell_info[spl].lowest_circle = NUM_SPELL_CIRCLES;

  spell_info[spl].mem_time = 0;
  spell_info[spl].cast_time = 0;

}

#define skillo(skill, humanoid) dskill(skill, 0, 0, 0, 0, 0, 0, humanoid, \
      0, 0, 0, 0, 0, 0, 0, NULL);
#define chanto(chant, minpos, targets, violent, routines, damage, quest, wearoff) \
     dskill(chant, 0, 0, 0, minpos, targets, violent, FALSE, routines, 0, 0, \
            damage, 0, 0, quest, wearoff)
#define songo(song, minpos, targets, violent, routines, damage, quest, wearoff) \
     dskill(song, 0, 0, 0, minpos, targets, violent, FALSE, routines, 0, 0, \
            damage, 0, 0, quest, wearoff)
#define spello(spl, max_mana, min_mana, mana_change, minpos, \
            targets, violent, routines, mem_time, \
            cast_time, damage_type, sphere, pages, quest, \
            wearoff) \
     dskill (spl, max_mana, min_mana, mana_change, minpos, \
            targets, violent, FALSE, routines, mem_time, \
            cast_time, damage_type, sphere, pages, quest, \
            wearoff)


/*
 * Arguments for spello calls:
 *
 * spellnum, maxmana, minmana, manachng, minpos, targets, violent?, routines.
 *
 * spellnum:  Number of the spell.  Usually the symbolic name as defined in
 * spells.h (such as SPELL_HEAL).
 *
 * maxmana :  The maximum mana this spell will take (i.e., the mana it
 * will take when the player first gets the spell).
 *
 * minmana :  The minimum mana this spell will take, no matter how high
 * level the caster is.
 *
 * manachng:  The change in mana for the spell from level to level.  This
 * number should be positive, but represents the reduction in mana cost as
 * the caster's level increases.
 *
 * minpos  :  Minimum position the caster must be in for the spell to work
 * (usually fighting or standing). targets :  A "list" of the valid targets
 * for the spell, joined with bitwise OR ('|').
 *
 * violent :  TRUE or FALSE, depending on if this is considered a violent
 * spell and should not be cast in PEACEFUL rooms or on yourself.  Should be
 * set on any spell that inflicts damage, is considered aggressive (i.e.
 * charm, curse), or is otherwise nasty.
 *
 * routines:  A list of magic routines which are associated with this spell
 * if the spell uses spell templates.  Also joined with bitwise OR ('|').
 *
 * pages:  Base Number of pages spell takes to write in a spellbook.
 *
 * quest:  TRUE if spell is a quest spell FALSE if not.
 *
 * wearoff: The message seen when the spell wears off.  NULL if none.
 *
 * See the CircleMUD documentation for a more detailed description of these
 * fields.
 */

/*
 * NOTE: SPELL LEVELS ARE NO LONGER ASSIGNED HERE AS OF Circle 3.0 bpl9.
 * In order to make this cleaner, as well as to make adding new classes
 * much easier, spell levels are now assigned in class.c.  You only need
 * a spello() call to define a new spell; to decide who gets to use a spell
 * or skill, look in class.c.  -JE 5 Feb 1996
 */
void mag_assign_spells(void)
{
  int i;

  /* Do not change the loop below */
  for (i = 1; i <= TOP_SPELL_DEFINE; i++)
    unused_spell(i);
  /* Do not change the loop above */

  spello(SPELL_FLOOD, 0, 0, 0, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_MANUAL, C1,
         18, COLD_DAMAGE, SKILL_SPHERE_WATER, 35, TRUE, NULL);

  spello(SPELL_FREEZE, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEEDE, COLD_DAMAGE, SKILL_SPHERE_WATER, 25, FALSE, NULL);

  spello(SPELL_FREEZING_WIND, 0, 0, 0, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_AREAS, C1,
         CAST_SPEED4, COLD_DAMAGE, SKILL_SPHERE_AIR, 21, FALSE, NULL);

  spello(SPELL_ICE_DARTS, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
         CAST_SPEEDD, COLD_DAMAGE, SKILL_SPHERE_WATER, 7, FALSE, NULL);

  spello(SPELL_ICE_ARMOR, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_PROT, 13, FALSE,
         "Your iced encasing melts away, leaving you vulnerable again.");

  spello(SPELL_ICE_DAGGER, 0, 0, 0, POS_STANDING,
         TAR_IGNORE, FALSE, MAG_MANUAL, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 17, FALSE, NULL);

  spello(SPELL_ICEBALL, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEEDF, COLD_DAMAGE, SKILL_SPHERE_WATER, 29, FALSE, NULL);

  spello(SPELL_NEGATE_COLD, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_PROT, 29, FALSE,
         "You feel vulnerable to the cold again.");

  spello(SPELL_PHANTASM, 0, 0, 0, POS_STANDING,
         TAR_IGNORE, FALSE, MAG_SUMMONS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_SUMMON, 12, FALSE, NULL);

  spello(SPELL_SIMULACRUM, 0, 0, 0, POS_STANDING,
         TAR_CHAR_WORLD, FALSE, MAG_SUMMONS, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_SUMMON, 15, FALSE, NULL);

  spello(SPELL_WALL_OF_ICE, 0, 0, 0, POS_STANDING,
         TAR_STRING, FALSE, MAG_MANUAL, C1,
         18, COLD_DAMAGE, SKILL_SPHERE_WATER, 27, TRUE,
         "The wall of ice melts away...");

  spello(SPELL_VAPORFORM, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_PROT, 35, TRUE,
         "Your form condenses into flesh once again.");

  spello(SPELL_VENTRILOQUATE, 0, 0, 0, POS_RESTING,
         TAR_CHAR_ROOM | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
         CAST_SPEED2, 0, SKILL_SPHERE_GENERIC, 6, FALSE, NULL);

  spello(SPELL_WATERFORM, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_WATER, 27, FALSE,
         "Your form solidifies into flesh once again.");

  spello(SPELL_EXTINGUISH, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM, FALSE, MAG_UNAFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_WATER, 11, FALSE, NULL);

  spello(SPELL_RAIN, 0, 0, 0, POS_STANDING,
         TAR_IGNORE, FALSE, MAG_MANUAL, C1,
         CAST_SPEED6, 0, SKILL_SPHERE_WATER, 23, FALSE, NULL);

  spello(SPELL_FIRE_DARTS, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
         CAST_SPEEDD, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 9, FALSE, NULL);

  spello(SPELL_MAGIC_TORCH, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 7, FALSE,
         "Your magic torch peters out.");

  spello(SPELL_SMOKE, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_FIRE, 11, FALSE,
         "As the smoke clears, your vision returns.");

  spello(SPELL_MIRAGE, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_FIRE, 17, FALSE,
         "You become more visible as the heat around your body dies out.");

  spello(SPELL_FLAME_BLADE, 0, 0, 0, POS_STANDING,
         TAR_IGNORE, FALSE, MAG_MANUAL, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_SUMMON, 19, FALSE, NULL);

  spello(SPELL_HEATWAVE, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEEDE, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 21, FALSE, NULL);

  spello(SPELL_FIRESTORM, 0, 0, 0, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_AREAS, C1,
         CAST_SPEED6, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 25, FALSE, NULL);

  spello(SPELL_MELT, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE,
         C1, CAST_SPEEDE, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 29, FALSE, NULL);

  spello(SPELL_CIRCLE_OF_FIRE, 0, 0, 0, POS_STANDING,
         TAR_IGNORE, TRUE, MAG_ROOM, C1,
         CAST_SPEED6, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 25, FALSE,
         "&1&bThe &1&bfl&3am&1es&0 &1surrounding &1the area &9&bdie out&0.");

  spello(SPELL_IMMOLATE, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
         CAST_SPEEDF, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 25, FALSE, NULL);

  spello(SPELL_SUPERNOVA, 100, 50, 3, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_AREAS, C1,
         16, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 31, TRUE, NULL);

  spello(SPELL_CREMATE, 0, 0, 0, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_AREAS, C1,
         CAST_SPEED7, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 35, FALSE, NULL);

  spello(SPELL_NEGATE_HEAT, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_PROT, 29, FALSE,
         "Your immunity to heat has passed.");

  spello(SPELL_COMBUST, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEEDF, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 23, FALSE, NULL);

  spello(SPELL_URBAN_RENEWAL, 0, 0, 0, POS_STANDING,
         TAR_IGNORE | TAR_OUTDOORS, FALSE, MAG_ROOM, C1,
         CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "&2The woods in the surrounding area break apart and crumble.&0");

  spello(SPELL_SUNRAY, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_AFFECTS,
         C1, CAST_SPEED6, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE,
         "Your vision has returned.");

  spello(SPELL_ARMOR_OF_GAIA, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);

  spello(SPELL_WANDERING_WOODS, 0, 0, 0, POS_STANDING,
         TAR_IGNORE, FALSE, MAG_MANUAL, C1,
         16, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "The woods around you shift back to their proper form.");

  spello(SPELL_NOURISHMENT, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_POINTS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_GAIAS_CLOAK, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY | TAR_OUTDOORS, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED6, 0, SKILL_SPHERE_PROT, 5, FALSE,
         "Your shroud of nature dissolves.");

  spello(SPELL_NATURES_EMBRACE, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY | TAR_OUTDOORS, FALSE, MAG_AFFECTS | MAG_POINTS, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "Nature releases you from her embrace.");

  spello(SPELL_ENTANGLE, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_OUTDOORS, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "You break free of the vines.");

  spello(SPELL_INVIGORATE, 0, 0, 0, POS_STANDING,
         TAR_IGNORE, FALSE, MAG_GROUPS, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_WALL_OF_STONE, 0, 0, 0, POS_STANDING,
         TAR_STRING, FALSE, MAG_MANUAL, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_SUMMON, 25, FALSE,
         "The wall of stone crumbles into dust.");

  spello(SPELL_CREATE_SPRING, 0, 0, 0, POS_STANDING,
         TAR_IGNORE, FALSE, MAG_CREATIONS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);

  spello(SPELL_BARKSKIN, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED2, 0, SKILL_SPHERE_PROT, 17, FALSE,
         "Your skin softens back to its original texture.");

  spello(SPELL_NIGHT_VISION, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "Your night vision fades out.");

  spello(SPELL_WRITHING_WEEDS, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_OUTDOORS, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED3, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 5, FALSE, NULL);

  spello(SPELL_HELLS_GATE, 0, 0, 0, POS_STANDING,
         TAR_CHAR_WORLD, FALSE, MAG_MANUAL, C1,
         18, 0, SKILL_SPHERE_SUMMON, 5, TRUE, NULL);

  spello(SPELL_SANE_MIND, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_UNAFFECTS, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_DARK_PRESENCE, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED2, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "You feel the dark presence leave you.");

  spello(SPELL_DEMONSKIN, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED1, 0, SKILL_SPHERE_PROT, 5, FALSE,
         "Your skin reverts back to normal.");

  spello(SPELL_DARK_FEAST, 0, 0, 0, POS_STANDING,
         TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
         CAST_SPEED2, 0, SKILL_SPHERE_GENERIC, 5, FALSE, NULL);

  spello(SPELL_HELL_BOLT, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED2, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE, NULL);

  spello(SPELL_DISEASE, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM, TRUE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "You are cured of your disease!");

  spello(SPELL_INSANITY, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "Your mind returns to reality.");

  spello(SPELL_DEMONIC_ASPECT, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "The demon within you fades away.");

  spello(SPELL_HELLFIRE_BRIMSTONE, 0, 0, 0, POS_FIGHTING,
         TAR_IGNORE, FALSE, MAG_AREAS, C1,
         16, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, TRUE, NULL);

  spello(SPELL_STYGIAN_ERUPTION, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED4, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE, NULL);

  spello(SPELL_DEMONIC_MUTATION, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "You mutate back to your original form.");

  spello(SPELL_WINGS_OF_HELL, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "Your giant bat-like wings fold up and vanish.");

  spello(SPELL_DIVINE_ESSENCE, 0, 0, 0, POS_STANDING,
         TAR_IGNORE, FALSE, MAG_GROUPS, C1,
         CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 5, FALSE, NULL);

  spello(SPELL_HEAVENS_GATE, 0, 0, 0, POS_STANDING,
         TAR_CHAR_WORLD, FALSE, MAG_MANUAL, C1,
         16, 0, SKILL_SPHERE_SUMMON, 5, TRUE, NULL);

  spello(SPELL_WORD_OF_COMMAND, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_MANUAL, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_GENERIC, 5, TRUE, NULL);

  spello(SPELL_WINGS_OF_HEAVEN, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "Your wings gently fold back and fade away.");

  spello(SPELL_BANISH, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_FIGHT_VICT, TRUE, MAG_MANUAL,
         C1, CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 5, TRUE, NULL);

  spello(SPELL_ENLIGHTENMENT, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_DIVIN, 5, FALSE, NULL);

  spello(SPELL_SPEAK_IN_TONGUES, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_DIVIN, 5, FALSE,
         "Your vocabular diminishes drastically.");

  spello(SPELL_GREATER_INVOCATION, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
         CAST_SPEED6, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);

  spello(SPELL_LESSER_INVOCATION, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);

  spello(SPELL_EXORCISM, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE,C1,
         18, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);

  spello(SPELL_LESSER_EXORCISM, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED5, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);

  spello(SPELL_DIVINE_RAY, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED5, ALIGN_DAMAGE, SKILL_SPHERE_GENERIC, 5, FALSE, NULL);

  spello(SPELL_DIVINE_BOLT, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED3, ALIGN_DAMAGE, SKILL_SPHERE_GENERIC, 5, FALSE, NULL);

  spello(SPELL_PRAYER, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "Your holy prayer fades.");

  spello(SPELL_ELEMENTAL_WARDING, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_PROT, 5, FALSE,
         "You feel less safe from the elements.");

  spello(SPELL_CIRCLE_OF_LIGHT, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "The circle of light above you fades out.");

  spello(SPELL_FIRE_BREATH, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED1, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE, NULL);

  spello(SPELL_GAS_BREATH, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_AFFECTS, C1,
         CAST_SPEED1, AIR_DAMAGE, SKILL_SPHERE_AIR, 5, FALSE, NULL);

  spello(SPELL_FROST_BREATH, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED1, COLD_DAMAGE, SKILL_SPHERE_WATER, 5, FALSE, NULL);

  spello(SPELL_LIGHTNING_BREATH, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
         CAST_SPEED1, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 5, FALSE, NULL);

  spello(SPELL_ACID_BREATH, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
         CAST_SPEED1, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE, NULL);

  spello(SPELL_FEAR, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "Your courage returns to you.");

  spello(SPELL_CHAIN_LIGHTNING, 0, 0, 0, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_AREAS, C1,
         CAST_SPEED5, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 27, FALSE, NULL);

  spello(SPELL_MASS_INVIS, 0, 0, 0, POS_STANDING,
         TAR_IGNORE, FALSE, MAG_BULK_OBJS | MAG_MASSES, C1,
         CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 23, FALSE, NULL);

  spello(SPELL_RELOCATE, 0, 0, 0, POS_STANDING,
         TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C14,
         20, 0, SKILL_SPHERE_SUMMON, 35, TRUE, NULL);

  spello(SPELL_DISINTEGRATE, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL,
         C1, CAST_SPEEDF, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 27, FALSE, NULL);

  spello(SPELL_HARNESS, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         2, 0, SKILL_SPHERE_GENERIC, 21, FALSE,
         "&4The harnessed power in your body fades.&0");

  spello(SPELL_MINOR_GLOBE, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_PROT, 23, FALSE,
         "The globe around your body fades out.");

  spello(SPELL_MAJOR_GLOBE, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_PROT, 35, TRUE,
         "The globe of force surrounding you dissipates.");

  spello(SPELL_FIRESHIELD, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 17, FALSE,
         "The flames around your body dissipate.");

  spello(SPELL_COLDSHIELD, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, COLD_DAMAGE, SKILL_SPHERE_WATER, 17, FALSE,
         "The ice formation around your body melts.");

  spello(SPELL_MINOR_PARALYSIS, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 21, FALSE,
         "Your muscles regain feeling.");

  spello(SPELL_TELEPORT, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 11, FALSE, NULL);

  spello(SPELL_RAY_OF_ENFEEB, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 21, FALSE,
         "Your strength returns to you.");

  spello(SPELL_LEVITATE, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 13, FALSE,
         "You float back to the ground.");

  spello(SPELL_WIZARD_EYE, 0, 0, 0, POS_STANDING,
         TAR_CHAR_WORLD, FALSE, MAG_MANUAL, C1,
         16, 0, SKILL_SPHERE_DIVIN, 17, TRUE, NULL);

  spello(SPELL_MINOR_CREATION, 0, 0, 0,POS_STANDING,
         TAR_STRING, FALSE, MAG_MANUAL, C1,
         CAST_SPEED1, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);

  spello(SPELL_DISPEL_MAGIC, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_OBJ_ROOM | TAR_OBJ_INV,
         TRUE, MAG_MANUAL,
         C1, CAST_SPEED4, 0, SKILL_SPHERE_GENERIC, 15, FALSE, NULL);

  spello(SPELL_UNHOLY_WORD, 0, 0, 0, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_AREAS, C1,
         1, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);

  spello(SPELL_HOLY_WORD, 0, 0, 0, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_AREAS, C1,
         1, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);

  spello(SPELL_ARMOR, 30, 15, 3, POS_FIGHTING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED2, 0, SKILL_SPHERE_PROT, 5, FALSE,
         "You feel less protected.");

  spello(SPELL_REDUCE, 35, 5, 3, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS | MAG_UNAFFECTS, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 29, FALSE,
         "&8You return to your normal size.&0");

  spello(SPELL_ENLARGE, 35, 5, 3, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS | MAG_UNAFFECTS, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 29, FALSE,
         "&8You return to your normal size.&0");

  spello(SPELL_BLESS, 35, 5, 3, POS_STANDING,
         TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE, MAG_AFFECTS | MAG_ALTER_OBJS,
         C1, CAST_SPEED2, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "You feel less righteous.");

  spello(SPELL_BLINDNESS, 35, 25, 1, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_NOT_SELF, TRUE,
         MAG_AFFECTS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "You feel a cloak of blindness dissolve.");

  spello(SPELL_SILENCE, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_NOT_SELF, TRUE, MAG_AFFECTS,
         C1, CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "You can speak again.");

  spello(SPELL_FLAMESTRIKE, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED3, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE, NULL);

  spello(SPELL_COMPREHEND_LANG, 45, 30, 1, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 15, FALSE,
         "&8Your magical knowledge of language fades away.&0");

  spello(SPELL_BURNING_HANDS, 30, 10, 3, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEEDD, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE, NULL);

  spello(SPELL_CONE_OF_COLD, 35, 15, 3, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEEDE, COLD_DAMAGE, SKILL_SPHERE_WATER, 19, FALSE, NULL);

  spello(SPELL_BIGBYS_CLENCHED_FIST, 90, 35, 3, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEEDE, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 25, FALSE, NULL);

  spello(SPELL_METEORSWARM, 100, 50, 3, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_AREAS, C9,
         CAST_SPEED7, EARTH_DAMAGE, SKILL_SPHERE_EARTH, 37, TRUE, NULL);

  spello(SPELL_WATERWALK, 35, 5, 3, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 29, FALSE,
         "Your feet seem less buoyant.");

  spello(SPELL_ICE_SHARDS, 100, 50, 3, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_AREAS, C1,
         16, COLD_DAMAGE, SKILL_SPHERE_WATER, 31, TRUE, NULL);

  spello(SPELL_ICE_STORM, 100, 50, 3, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_AREAS, C1,
         CAST_SPEED5, COLD_DAMAGE, SKILL_SPHERE_WATER, 23, FALSE, NULL);

  spello(SPELL_CALL_LIGHTNING, 40, 25, 3, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_OUTDOORS, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED4, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 5, FALSE, NULL);

  spello(SPELL_CHARM, 75, 50, 2, POS_STANDING,
         TAR_CHAR_ROOM | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 35, TRUE,
         "You feel more self-confident.");

  spello(SPELL_PLANE_SHIFT, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
         CAST_SPEED6, 0, SKILL_SPHERE_SUMMON, 5, TRUE, NULL);

  spello(SPELL_CHILL_TOUCH, 30, 10, 3, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_AFFECTS,
         C1, CAST_SPEEDD, COLD_DAMAGE, SKILL_SPHERE_WATER, 7, FALSE,
         "You feel your strength return.");

  spello(SPELL_CLONE, 80, 65, 5, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_SUMMONS, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 35, FALSE, NULL);

  spello(SPELL_DARKNESS, 50, 25, 5, POS_STANDING,
         TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE, MAG_MANUAL, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "The magical darkness lifts.");

  spello(SPELL_ILLUMINATION, 50, 25, 5, POS_STANDING,
         TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE,
         MAG_MANUAL, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "&8The magical light fades away.&0");

  /* innate strength */
  spello(SPELL_INN_STRENGTH, 35, 30, 1, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, 0, 7, FALSE,
         "You feel weaker.");

  spello(SPELL_MAJOR_PARALYSIS, 35, 30, 1, POS_STANDING,
         TAR_CHAR_ROOM, TRUE, MAG_MANUAL, C6,
         CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 35, FALSE,
         "You can move again.");

  spello(SPELL_COLOR_SPRAY, 30, 15, 3, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_MANUAL, C1,
         CAST_SPEED5, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 21, FALSE, NULL);

  spello(SPELL_CONTROL_WEATHER, 75, 25, 5, POS_STANDING,
         TAR_STRING, FALSE, MAG_MANUAL, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE, NULL);

  spello(SPELL_CREATE_FOOD, 30, 5, 4, POS_STANDING,
         TAR_IGNORE, FALSE, MAG_CREATIONS, C1,
         CAST_SPEED1, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);

  spello(SPELL_CREATE_WATER, 30, 5, 4, POS_STANDING,
         TAR_OBJ_INV | TAR_OBJ_EQUIP, FALSE, MAG_MANUAL, C1,
         CAST_SPEED1, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);

  spello(SPELL_CURE_BLIND, 30, 5, 2, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_UNAFFECTS, C1,
         CAST_SPEED2, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_CURE_CRITIC, 30, 10, 2, POS_FIGHTING,
         TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_HEALING, 15, FALSE, NULL);

  spello(SPELL_CURE_SERIOUS, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_CURE_LIGHT, 30, 10, 2, POS_FIGHTING,
         TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
         CAST_SPEED2, 0, SKILL_SPHERE_HEALING, 9, FALSE, NULL);

  spello(SPELL_VIGORIZE_LIGHT, 0,0,0, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
         CAST_SPEED2, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_VIGORIZE_SERIOUS, 0,0,0, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_VIGORIZE_CRITIC, 0,0,0, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_CURSE, 80, 50, 2, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, TRUE,
         MAG_AFFECTS | MAG_ALTER_OBJS, C1, CAST_SPEED5, 0,
         SKILL_SPHERE_ENCHANT, 5, FALSE,
         "You feel more optimistic.");

  spello(SPELL_DETECT_ALIGN, 20, 10, 2, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 9, FALSE,
         "You feel less aware.");

  spello(SPELL_DETECT_INVIS, 20, 10, 2, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 19, FALSE,
         "Your eyes stop tingling.");

  spello(SPELL_DETECT_MAGIC, 20, 10, 2, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 5, FALSE,
         "The detect magic wears off.");

  spello(SPELL_FLY, 50, 5, 3, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 17, FALSE,
         "You feel the weight of your body return.");

  spello(SPELL_DETECT_POISON, 15, 5, 1, POS_STANDING,
         TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
         CAST_SPEED1, 0, SKILL_SPHERE_DIVIN, 13, FALSE, NULL);

  spello(SPELL_DISPEL_EVIL, 40, 25, 3, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED3, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);

  spello(SPELL_DISPEL_GOOD, 40, 25, 3, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED5, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);

  spello(SPELL_EARTHQUAKE, 40, 25, 3, POS_FIGHTING,
         TAR_IGNORE | TAR_OUTDOORS, TRUE, MAG_AREAS, C1,
         CAST_SPEED5, EARTH_DAMAGE, SKILL_SPHERE_EARTH, 5, FALSE, NULL);

  spello(SPELL_DOOM, 0, 0, 0, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_AREAS, C1,
         CAST_SPEED6, EARTH_DAMAGE, SKILL_SPHERE_EARTH, 35, FALSE, NULL);

  spello(SPELL_CREEPING_DOOM, 0, 0, 0, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_MANUAL, C1,
         CAST_SPEED7, EARTH_DAMAGE, SKILL_SPHERE_EARTH, 35, TRUE, NULL);

  spello(SPELL_ENCHANT_WEAPON, 150, 100, 10, POS_STANDING,
         TAR_OBJ_INV | TAR_OBJ_EQUIP, FALSE, MAG_MANUAL, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 23, FALSE, NULL);

  spello(SPELL_ENERGY_DRAIN, 40, 25, 1, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
         CAST_SPEED5, DEATH_DAMAGE, SKILL_SPHERE_DEATH, 19, FALSE, NULL);

  spello(SPELL_VAMPIRIC_BREATH, 40, 25, 1, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
         CAST_SPEED1, DEATH_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);

  spello(SPELL_GROUP_ARMOR, 50, 30, 2, POS_STANDING,
         TAR_IGNORE, FALSE, MAG_GROUPS, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_PROT, 9, TRUE, NULL);

  spello(SPELL_GROUP_RECALL, 50, 30, 2, POS_FIGHTING,
         TAR_IGNORE, FALSE, MAG_GROUPS, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 5, TRUE, NULL);

  spello(SPELL_FIREBALL, 40, 30, 2, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEEDE, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 21, FALSE, NULL);

  spello(SPELL_FULL_HARM, 75, 45, 3, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED6, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_FULL_HEAL, 75, 50, 3, POS_FIGHTING,
         TAR_CHAR_ROOM, FALSE, MAG_POINTS | MAG_UNAFFECTS, C1,
         CAST_SPEED6, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_GROUP_HEAL, 80, 60, 5, POS_FIGHTING,
         TAR_IGNORE, FALSE, MAG_GROUPS, C1,
         CAST_SPEED6, 0, SKILL_SPHERE_HEALING, 5, TRUE, NULL);

  spello(SPELL_HARM, 45, 15, 3, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED5, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_HEAL, 60, 40, 3, POS_FIGHTING,
         TAR_CHAR_ROOM, FALSE, MAG_POINTS | MAG_UNAFFECTS, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_INFRAVISION, 25, 10, 1, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 9, FALSE,
         "Your night vision seems to fade.");

  spello(SPELL_INVISIBLE, 35, 25, 1, POS_STANDING,
         TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_AFFECTS |
         MAG_ALTER_OBJS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 17, FALSE,
         "You fade back into view.");

  spello(SPELL_CONCEALMENT, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
         CAST_SPEED2, 0, SKILL_SPHERE_ENCHANT, 13, FALSE,
         "You fade back into view.");

  spello(SPELL_LIGHTNING_BOLT, 30, 15, 1, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEEDD, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 17, FALSE, NULL);

  spello(SPELL_LOCATE_OBJECT, 25, 20, 1, POS_STANDING,
         TAR_STRING, FALSE, MAG_MANUAL, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_DIVIN, 12, FALSE, NULL);

  spello(SPELL_SUMMON_CORPSE, 25, 20, 1, POS_STANDING,
         TAR_OBJ_WORLD, FALSE, MAG_MANUAL, C1,
         CAST_SPEED6, 0, SKILL_SPHERE_SUMMON,17, FALSE, NULL);

  spello(SPELL_SHIFT_CORPSE, 25, 20, 1, POS_STANDING,
         TAR_OBJ_WORLD, FALSE, MAG_MANUAL, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 17, TRUE, NULL);

  spello(SPELL_MAGIC_MISSILE, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
         CAST_SPEEDD, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 5, FALSE, NULL);

  spello(SPELL_POISON, 50, 20, 3, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_OBJ_INV, TRUE,
         MAG_AFFECTS | MAG_ALTER_OBJS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "You feel less sick.");

  spello(SPELL_PROT_FROM_EVIL, 40, 10, 3, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_PROT, 5, FALSE,
         "You feel less protected.");

  spello(SPELL_REMOVE_CURSE, 45, 25, 5, POS_STANDING,
         TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_MANUAL,
         C1, CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE, NULL);

  spello(SPELL_SANCTUARY, 110, 85, 5, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED1, 0, SKILL_SPHERE_PROT, 35, FALSE,
         "The white aura around your body fades.");

  spello(SPELL_SHOCKING_GRASP, 30, 15, 3, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEEDD, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 9, FALSE, NULL);

  spello(SPELL_SLEEP, 40, 25, 5, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 19, FALSE,
         "You feel less tired.");

  spello(SPELL_STRENGTH, 35, 30, 1, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "You feel weaker.");

  spello(SPELL_SUMMON, 75, 50, 3, POS_STANDING,
         TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);

  spello(SPELL_RESURRECT, 75, 50, 3, POS_STANDING,
         TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
         26, 0, SKILL_SPHERE_HEALING, 5, TRUE, NULL);

  spello(SPELL_PRESERVE, 0, 0, 0, POS_STANDING,
         TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 11, FALSE, NULL);

  spello(SPELL_DIMENSION_DOOR, 75, 45, 3, POS_STANDING,
         TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 15, FALSE, NULL);

  spello(SPELL_SUMMON_DRACOLICH, 100, 75, 3, POS_SITTING,
         TAR_OBJ_ROOM, FALSE, MAG_SUMMONS, C1,
         20, 0, SKILL_SPHERE_SUMMON, 33, TRUE, NULL);

  spello(SPELL_ANIMATE_DEAD, 75, 15, 3, POS_SITTING,
         TAR_OBJ_ROOM, FALSE, MAG_SUMMONS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_DEATH, 21, FALSE, NULL);

  spello(SPELL_SUMMON_ELEMENTAL, 75, 15, 3, POS_SITTING,
         TAR_IGNORE, FALSE, MAG_SUMMONS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 19, FALSE, NULL);

  spello(SPELL_SUMMON_DEMON, 100, 75, 3, POS_SITTING,
         TAR_IGNORE, FALSE, MAG_SUMMONS, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_SUMMON, 31, FALSE, NULL);

  spello(SPELL_SUMMON_GREATER_DEMON, 130, 75, 3, POS_SITTING,
         TAR_IGNORE, FALSE, MAG_SUMMONS, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 35, FALSE, NULL);

  spello(SPELL_WORD_OF_RECALL, 20, 10, 2, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
         1, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);

  spello(SPELL_REMOVE_POISON, 40, 8, 4, POS_STANDING,
         TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_UNAFFECTS
         | MAG_ALTER_OBJS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_INCENDIARY_NEBULA, 0, 0, 0, POS_FIGHTING,
         TAR_IGNORE, TRUE, MAG_AREAS, C1, 15, FIRE_DAMAGE,
         SKILL_SPHERE_FIRE, 35, FALSE, NULL);

  spello(SPELL_MOONWELL, 50, 50, 0, POS_STANDING,
         TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
         18, 0, SKILL_SPHERE_SUMMON, 5, TRUE, NULL);

  spello(SPELL_SENSE_LIFE, 20, 10, 2, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 19, FALSE,
         "You feel less aware of your surroundings.");

  spello(SPELL_SOULSHIELD, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_PROT, 5, FALSE,
         "The aura guarding your body fades away.");

  spello(SPELL_DESTROY_UNDEAD, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED3, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);

  spello(SPELL_STONE_SKIN, 50, 25, 3, POS_FIGHTING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_PROT, 19, FALSE,
         "&3&dYour skin softens and returns to normal.&0");

  spello(SPELL_HASTE, 50, 25, 3, POS_FIGHTING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 19, FALSE,
         "Your pulse returns to normal.");

  spello(SPELL_BLUR, 90, 60, 3, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 25, TRUE,
         "The world solidifies as your vision unblurs, and you return to normal speed.");

  spello(SPELL_LESSER_ENDURANCE, 50, 30, 5, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
         "Your endurance returns to normal.");

  spello(SPELL_ENDURANCE, 50, 30, 5, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 7, FALSE,
         "Your endurance returns to normal.");

  spello(SPELL_GREATER_ENDURANCE, 50, 30, 5, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 11, FALSE,
         "Your endurance returns to normal.");

  spello(SPELL_VITALITY, 50, 30, 5, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 7, FALSE,
         "Your magical vitality drains away.");

  spello(SPELL_GREATER_VITALITY, 50, 30, 5, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 11, FALSE,
         "Your magical vitality drains away.");

  spello(SPELL_DRAGONS_HEALTH, 50, 30, 5, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 21, TRUE,
         "Your health returns to normal.");

  spello(SPELL_WALL_OF_FOG, 50, 25, 5, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_ROOM, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_SUMMON, 21, FALSE,
         "The fog seems to clear out.");

  spello(SPELL_FARSEE, 25, 10, 1, POS_STANDING,
         TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED2, 0, SKILL_SPHERE_DIVIN, 9, FALSE,
         "Your pupils dilate as your vision returns to normal.");

  spello(SPELL_CAUSE_LIGHT, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED2, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_CAUSE_SERIOUS, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED3, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_CAUSE_CRITIC, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED4, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE, NULL);

  spello(SPELL_IDENTIFY, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
         CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 5, FALSE, NULL);

 spello(SPELL_BONE_ARMOR, 0, 0, 0, POS_STANDING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED1, 0, SKILL_SPHERE_PROT, 12, FALSE,
         "&3Your skin returns to normal.&0");

  spello(SPELL_DEGENERATION, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, FALSE, MAG_MANUAL, C1,
         CAST_SPEED4, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 12, TRUE, NULL);

  spello(SPELL_SOUL_TAP, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
         CAST_SPEED4, HEALING_DAMAGE, SKILL_SPHERE_GENERIC, 15, FALSE,
         "Your hold on another's soul ceases and your own body weakens slightly.");

  spello(SPELL_REBUKE_UNDEAD, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
         CAST_SPEED2, 0, SKILL_SPHERE_ENCHANT, 8, FALSE, NULL);

  spello(SPELL_NATURES_GUIDANCE, 0, 0, 0, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
         CAST_SPEED2, 0, SKILL_SPHERE_ENCHANT, 8, FALSE,
         "You suddenly feel a little unguided.");

  spello(SPELL_MOONBEAM, 0, 0, 0, POS_FIGHTING,
         TAR_IGNORE | TAR_OUTDOORS | TAR_NIGHT_ONLY, TRUE, MAG_MANUAL, C1,
         CAST_SPEED4, 0, SKILL_SPHERE_WATER, 10, FALSE, NULL);

  /* NON-castable spells should appear here */

  /*
   * Declaration of skills - sets skills up so that immortals can use
   * them by default. Determines whether a skill is considered
   * "humanoid only". */

  /* skillo(skill, humanoid) */
  skillo(SKILL_BACKSTAB, TRUE);
  skillo(SKILL_INSTANT_KILL, TRUE);
  skillo(SKILL_BIND, TRUE);
  skillo(SKILL_CIRCLE, FALSE);
  skillo(SKILL_BASH, FALSE);
  skillo(SKILL_HIDE, FALSE);
  skillo(SKILL_KICK, TRUE);
  skillo(SKILL_PICK_LOCK, TRUE);
  skillo(SKILL_PUNCH, TRUE);
  skillo(SKILL_RESCUE, FALSE);
  skillo(SKILL_SNEAK, FALSE);
  skillo(SKILL_STEAL, TRUE);
  skillo(SKILL_TRACK, FALSE);
  skillo(SKILL_HUNT, FALSE);
  skillo(SKILL_DUAL_WIELD, TRUE);
  skillo(SKILL_DOUBLE_ATTACK, FALSE);
  skillo(SKILL_BERSERK, FALSE);
  skillo(SKILL_SPRINGLEAP, FALSE);
  skillo(SKILL_MOUNT, FALSE);
  skillo(SKILL_RIDING, FALSE);
  skillo(SKILL_TAME, FALSE);
  skillo(SKILL_THROATCUT, TRUE);
  skillo(SKILL_DOORBASH, FALSE);
  skillo(SKILL_PARRY, TRUE);
  skillo(SKILL_DODGE, FALSE);
  skillo(SKILL_RIPOST, TRUE);
  skillo(SKILL_MEDITATE, FALSE);
  skillo(SKILL_QUICK_CHANT, FALSE);
  skillo(SKILL_CHANT, FALSE);
  skillo(SKILL_SAFEFALL, FALSE);
  skillo(SKILL_BAREHAND, FALSE);
  skillo(LANG_BARBARIAN, FALSE);
  skillo(LANG_GNOMISH, FALSE);
  skillo(LANG_DUERGAR, FALSE);
  skillo(LANG_DROW, FALSE);
  skillo(LANG_ORCISH, FALSE);
  skillo(LANG_OGRE, FALSE);
  skillo(LANG_COMMON, FALSE);
  skillo(LANG_ELVEN, FALSE);
  skillo(LANG_DWARVEN, FALSE);
  skillo(LANG_TROLLISH, FALSE);
  skillo(LANG_HALFLING, FALSE);
  skillo(SKILL_SHAPECHANGE, FALSE);
  skillo(SKILL_SWITCH, FALSE);
  skillo(SKILL_GUARD, FALSE);
  skillo(SKILL_BREATHE, FALSE);
  skillo(SKILL_SWEEP, FALSE);
  skillo(SKILL_ROAR, FALSE);
  skillo(SKILL_DOUSE, FALSE);
  skillo(SKILL_SCRIBE, TRUE);
  skillo(SKILL_HITALL, FALSE);
  skillo(SKILL_BANDAGE, TRUE);
  skillo(SKILL_CHANT, FALSE);
  skillo(SKILL_SUMMON_MOUNT, TRUE);
  skillo(SKILL_KNOW_SPELL, FALSE);
  skillo(SKILL_SPHERE_GENERIC, FALSE);
  skillo(SKILL_SPHERE_FIRE, FALSE);
  skillo(SKILL_SPHERE_WATER, FALSE);
  skillo(SKILL_SPHERE_EARTH, FALSE);
  skillo(SKILL_SPHERE_AIR, FALSE);
  skillo(SKILL_SPHERE_HEALING, FALSE);
  skillo(SKILL_SPHERE_PROT, FALSE);
  skillo(SKILL_SPHERE_ENCHANT, FALSE);
  skillo(SKILL_SPHERE_SUMMON, FALSE);
  skillo(SKILL_SPHERE_DEATH, FALSE);
  skillo(SKILL_SPHERE_DIVIN, FALSE);
  skillo(SKILL_BLUDGEONING, TRUE);
  skillo(SKILL_PIERCING, TRUE);
  skillo(SKILL_SLASHING, TRUE);
  skillo(SKILL_2H_BLUDGEONING, TRUE);
  skillo(SKILL_2H_PIERCING, TRUE);
  skillo(SKILL_2H_SLASHING, TRUE);
  skillo(SKILL_MISSILE, TRUE);
  skillo(SKILL_EYE_GOUGE, TRUE);
  skillo(SKILL_RETREAT, FALSE);
  skillo(SKILL_GROUP_RETREAT, FALSE);
  skillo(SKILL_CORNER, FALSE);
  skillo(SKILL_STEALTH, FALSE);
  skillo(SKILL_SHADOW, FALSE);
  skillo(SKILL_CONCEAL, FALSE);
  skillo(SKILL_PECK, FALSE);
  skillo(SKILL_CLAW, FALSE);
  skillo(SKILL_ELECTRIFY, FALSE);

  /* Set up monk chants */
  chanto(CHANT_REGENERATION, POS_RESTING, TAR_CHAR_ROOM | TAR_SELF_ONLY,
         FALSE, MAG_AFFECTS, 0, FALSE, "Your healthy feeling subsides.");
  chanto(CHANT_BATTLE_HYMN, POS_STANDING, TAR_CHAR_ROOM | TAR_SELF_ONLY,
         FALSE, MAG_AFFECTS, 0, FALSE, "Your rage fades away.");
  chanto(CHANT_WAR_CRY, POS_STANDING, TAR_IGNORE,
         FALSE, MAG_GROUPS, 0, FALSE, "Your determination level returns to normal.");
  chanto(CHANT_PEACE, POS_FIGHTING, TAR_IGNORE,
         FALSE, MAG_MANUAL, 0, FALSE, NULL);
  chanto(CHANT_SHADOWS_SORROW_SONG, POS_FIGHTING, TAR_IGNORE,
         TRUE, MAG_MASSES, 0, FALSE, "The shadows in your mind clear up.");
  chanto(CHANT_IVORY_SYMPHONY, POS_FIGHTING, TAR_IGNORE,
         TRUE, MAG_MANUAL, 0, FALSE, "Feeling returns to your limbs.");
  chanto(CHANT_ARIA_OF_DISSONANCE, POS_FIGHTING,
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, 0, TRUE,
         "The dissonance stops ringing in your ears.");
  chanto(CHANT_SONATA_OF_MALAISE, POS_FIGHTING, TAR_IGNORE,
         TRUE, MAG_MASSES, 0, FALSE,
         "The sonata of malaise stops echoing in your ears.");
  chanto(CHANT_APOCALYPTIC_ANTHEM, POS_FIGHTING, TAR_IGNORE,
         TRUE, MAG_MANUAL, 0, TRUE, NULL);
  chanto(CHANT_SEED_OF_DESTRUCTION, POS_FIGHTING, TAR_CHAR_ROOM | TAR_FIGHT_VICT,
         TRUE, MAG_AFFECTS, 0, TRUE, "The disease leaves you.");

  /* Set up bardic songs. */
/*  songo(SONG_CHORUS_OF_COURAGE, POS_STANDING, TAR_CHAR_ROOM,
        FALSE, MAG_AFFECTS, 0, FALSE, "Your courage leaves you.");
*/
}
d1721 3
d1746 1
a1746 1
 * Changed the spell_info struct to store lowest_level and lowest_circle
d2210 1
a2210 1
 * Working on quest spells.  Still in progress.  HOwever, spell_info[] array now has a flag
@


1.129
log
@Use skills.h to import improve_skill().
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.128 2008/01/24 13:17:50 jps Exp jps $
d1313 5
d1386 6
d3401 3
@


1.128
log
@Put disintegrate into the sphere of generic.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.127 2008/01/23 14:14:41 jps Exp jps $
d29 1
a37 1
void improve_skill(struct char_data *ch, int skill);
d3390 3
@


1.127
log
@Added a field to skill definitions as to whether it's considered
humanoid-only.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.126 2008/01/22 06:25:23 jps Exp jps $
d128 2
a129 2
  "creeping doom", 
  "doom", 
d131 1
a131 1
  "bigbys clenched fist", 
d137 3
a139 3
  "inn strength", 
  "darkness", 
  "illumination", 
d141 1
a141 1
  "cone of cold", 
d143 2
a144 2
  "ice shards", 
  "major paralysis", 
d147 1
a147 1
  "incendiary nebula", 
d149 1
a149 1
  "cause light", 
d152 3
a154 3
  "preserve", 
  "cure serious", 
  "vigorize light", 
d156 4
a159 4
  "vigorize critic", 
  "soulshield", 
  "destroy undead", 
  "silence", 
d161 4
a164 4
  "unholy word", 
  "holy word", 
  "plane shift", 
  "dispel magic", 
d166 9
a174 9
  "concealment", 
  "ray of enfeeblement", 
  "levitate", 
  "wizard eye", 
  "fireshield",                /* 105 */ 
  "coldshield", 
  "minor globe", 
  "major globe", 
  "disintegrate", 
d176 4
a179 4
  "chain lightning", 
  "mass invisibility", 
  "relocate", 
  "fear", 
d181 4
a184 4
  "divine bolt", 
  "prayer", 
  "elemental warding", 
  "divine ray", 
d186 3
a188 3
  "lesser invocation", 
  "speak in tongues", 
  "enlightenment", 
d191 4
a194 4
  "wings of heaven", 
  "banish", 
  "word of command", 
  "divine essence", 
d196 4
a199 4
  "dark presence", 
  "demonskin", 
  "dark feast", 
  "hell bolt", 
d201 4
a204 4
  "insanity", 
  "demonic aspect", 
  "hellfire and brimstone", 
  "stygian eruption", 
d206 4
a209 4
  "wings of hell", 
  "sane mind", 
  "hell gate", 
  "barkskin", 
d211 3
a213 3
  "writhing weeds", 
  "create spring", 
  "nourishment", 
d215 5
a219 5
  "natures embrace",     /* 150 */ 
  "entangle", 
  "invigorate", 
  "wandering woods", 
  "urban renewal", 
d222 2
a223 2
   "fire darts",   
   "magic torch",  
d227 2
a228 2
   "heatwave",   
   "firestorm",  
d236 3
a238 3
   "ice darts", 
   "ice armor", 
   "ice dagger", 
d241 3
a243 3
   "wall of ice", 
   "iceball", 
   "flood", 
d246 4
a249 4
   "waterform", 
   "extinguish", 
   "rain", 
   "reduce", 
d252 1
a252 1
  "bone armor", 
a317 2
  
/* SKILLS */  
d319 5
a323 3
  "backstab",            /* 401 */  
  "bash",                /* 402 */ 
  "hide",                /* 403 */         
d325 6
a330 6
  "pick lock",           /* 405 */ 
  "punch",               /* 406 */ 
  "rescue",              /* 407 */  
  "sneak",               /* 408 */  
  "steal",               /* 409 */ 
  "track",               /* 410 */ 
d332 1
a332 1
  "double attack",       /* 412 */ 
d337 1
a337 1
  "tame",                /* 417 */  
d340 3
a342 3
  "parry",               /* 420 */ 
  "dodge",               /* 421 */ 
  "riposte",             /* 422 */ 
d346 1
a346 1
  "circle",              /* 426 */  
d354 1
a354 1
  "guard", 
d356 2
a357 2
  "sweep", 
  "roar", 
d360 1
a360 1
  "instant kill",        /* 440 */  
d365 2
a366 2
  "vampiric touch",        /* 445 */ 
  "chant", 
d370 4
a373 4
  "summon mount",          /* 450 */  
  "spell knowledge", 
  "sphere of generic", 
  "sphere of fire", 
d376 6
a381 6
  "sphere of air", 
  "sphere of healing", 
  "sphere of protection", 
  "sphere of enchantment", 
  "sphere of summoning",   /* 460 */  
  "sphere of death", 
d383 3
a385 3
  "bludgeoning weapons", 
  "piercing weapons", 
  "slashing weapons",        /* 465 */  
d448 1
a448 1
  
d451 1
a451 1
  "!UNUSED!",                               /* 651 */  
d453 1
a453 1
  "gas breath",                               /* 653 */  
d455 2
a456 2
  "acid breath",                       /* 655 */  
  "lightning breath",                /* 656 */  
d474 1
a474 1
                           SPELL_BURNING_HANDS, 
d566 1
a566 1
   * Loop through bystanders in the room and see if they recognize the 
d602 1
a602 1
    
d654 1
a654 1
  
d666 1
a666 1
  
d692 1
a692 1
      
d705 1
a705 1
    
d710 1
a710 1
  
d747 1
a747 1
  
d774 1
a774 1
  
d843 1
a843 1
  
d846 1
a846 1
  
d849 1
a849 1
  
d858 1
a858 1
  
d864 1
a864 1
  
d867 1
a867 1
  
d870 1
a870 1
  
d873 1
a873 1
  
d895 2
a896 2
    case SPELL_SUMMON_CORPSE:        MANUAL_SPELL(spell_summon_corpse); break; 
    case SPELL_SHIFT_CORPSE:         MANUAL_SPELL(spell_shift_corpse); break; 
d1258 1
a1258 1
  
d1357 1
a1357 1
  if (IS_SET(spell_info[chantnum].routines, MAG_GROUPS) && 
d1391 2
a1392 2
 * be combined once the target issue is resolved.                          
 * if you change this, please reflect any changes in mob_cast              
d1406 1
a1406 1
 
d1471 1
a1471 1
  
d1473 1
a1473 1
  if (GET_LEVEL(ch) < SINFO.min_level[(int) GET_CLASS(ch)] || 
d1483 1
a1483 1
  
d1526 1
a1526 1
  
d1537 1
a1537 1
  
d1539 1
a1539 1
   * Set the character to casting and setup the casting structure for 
d1556 2
a1557 2
  ch->casting.misc = misc;   
  ch->casting.target_status = target_status;  
d1588 1
a1588 1
    /* Gods instacast.  Start chant and then stop casting in order to 
d1691 1
a1691 1
         }     
d1770 1
a1770 1
         if (spell_info[ch->casting.spell].violent && ch->casting.tch && 
d1789 1
a1789 1
         if (spell_info[ch->casting.spell].violent && ch->casting.tch && 
d1800 1
a1800 1
 * This function is a copy of do_cast, but it is for NPCs.  If you make 
d1891 1
a1891 1
  
d1923 1
a1923 1
} 
d1957 1
a1957 1
  
d1988 1
a1988 1
      
d2009 2
a2010 2
       * Create the caster's see_spell list: This is a list of char's who 
       * have recognized the spell and will see it clearly when it is cast 
d2024 3
a2026 3
      if (number(0,101) < GET_INT(gch) || 
          !strcmp(spellbuf, spells[ch->casting.spell]) || 
          (bad) || 
d2055 1
a2055 1
  
d2085 1
a2085 1
  
d2092 1
a2092 1
  
d2099 1
a2099 1
  
d2153 1
a2153 1
  
d2249 1
a2249 1
  
d2301 1
a2301 1
  
d2306 1
a2306 1
  
d2315 1
a2315 1
  
d2319 1
a2319 1
  
d2323 1
a2323 1
  
d2327 2
a2328 2
  
  spello(SPELL_MAGIC_TORCH, 0, 0, 0, POS_FIGHTING,        
d2332 1
a2332 1
  
d2337 1
a2337 1
  
d2342 1
a2342 1
  
d2346 1
a2346 1
  
d2350 1
a2350 1
  
d2354 1
a2354 1
  
d2358 1
a2358 1
  
d2361 1
a2361 1
         CAST_SPEED6, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 25, FALSE, 
d2363 1
a2363 1
  
d2367 1
a2367 1
  
d2371 1
a2371 1
  
d2375 1
a2375 1
  
d2380 1
a2380 1
  
d2384 1
a2384 1
  
d2389 1
a2389 1
  
d2394 1
a2394 1
  
d2398 1
a2398 1
  
d2403 1
a2403 1
  
d2407 1
a2407 1
  
d2412 1
a2412 1
  
d2417 1
a2417 1
  
d2422 1
a2422 1
  
d2426 1
a2426 1
  
d2431 1
a2431 1
  
d2435 2
a2436 2
  
  spello(SPELL_BARKSKIN, 0, 0, 0, POS_FIGHTING,        
d2440 1
a2440 1
  
d2445 1
a2445 1
  
d2449 1
a2449 1
  
d2453 1
a2453 1
  
d2457 1
a2457 1
  
d2462 1
a2462 1
  
d2467 1
a2467 1
  
d2471 1
a2471 1
  
d2475 1
a2475 1
  
d2480 1
a2480 1
  
d2485 1
a2485 1
  
d2490 1
a2490 1
  
d2494 1
a2494 1
  
d2498 1
a2498 1
  
d2503 1
a2503 1
  
d2508 1
a2508 1
  
d2512 1
a2512 1
  
d2516 1
a2516 1
  
d2520 1
a2520 1
  
d2525 1
a2525 1
  
d2529 1
a2529 1
  
d2533 1
a2533 1
  
d2538 1
a2538 1
  
d2541 2
a2542 2
         CAST_SPEED6, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL); 
  
d2546 1
a2546 1
  
d2550 1
a2550 1
  
d2554 1
a2554 1
  
d2558 1
a2558 1
  
d2562 1
a2562 1
  
d2567 1
a2567 1
  
d2572 1
a2572 1
  
d2577 1
a2577 1
  
d2581 1
a2581 1
  
d2585 1
a2585 1
  
d2589 1
a2589 1
  
d2593 1
a2593 1
  
d2597 1
a2597 1
  
d2602 1
a2602 1
  
d2606 1
a2606 1
  
d2610 1
a2610 1
  
d2614 1
a2614 1
  
d2617 2
a2618 2
         C1, CAST_SPEEDF, GENERIC_DAMAGE, SKILL_SPHERE_FIRE, 27, FALSE, NULL);
  
d2623 1
a2623 1
  
d2628 1
a2628 1
  
d2633 1
a2633 1
  
d2638 1
a2638 1
  
d2643 1
a2643 1
  
d2648 1
a2648 1
  
d2652 1
a2652 1
  
d2657 1
a2657 1
  
d2662 1
a2662 1
  
d2666 1
a2666 1
  
d2670 1
a2670 1
  
d2675 1
a2675 1
  
d2679 1
a2679 1
  
d2683 1
a2683 1
  
d2688 1
a2688 1
  
d2693 1
a2693 1
  
d2698 1
a2698 1
  
d2703 1
a2703 1
  
d2709 1
a2709 1
  
d2714 1
a2714 1
  
d2718 1
a2718 1
  
d2723 1
a2723 1
  
d2727 1
a2727 1
  
d2731 1
a2731 1
  
d2735 1
a2735 1
  
d2739 1
a2739 1
  
d2744 1
a2744 1
  
d2748 1
a2748 1
  
d2752 1
a2752 1
  
d2756 1
a2756 1
  
d2761 1
a2761 1
  
d2765 1
a2765 1
  
d2770 1
a2770 1
  
d2774 1
a2774 1
  
d2779 1
a2779 1
  
d2791 1
a2791 1
  
d2796 1
a2796 1
  
d2804 1
a2804 1
  
d2808 1
a2808 1
  
d2812 1
a2812 1
  
d2816 1
a2816 1
  
d2820 1
a2820 1
  
d2824 1
a2824 1
  
d2828 1
a2828 1
  
d2832 1
a2832 1
  
d2836 1
a2836 1
  
d2840 1
a2840 1
  
d2842 2
a2843 2
         TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, TRUE, 
         MAG_AFFECTS | MAG_ALTER_OBJS, C1, CAST_SPEED5, 0, 
d2846 1
a2846 1
  
d2851 1
a2851 1
  
d2856 1
a2856 1
  
d2861 1
a2861 1
  
d2866 1
a2866 1
  
d2870 1
a2870 1
  
d2874 1
a2874 1
  
d2878 1
a2878 1
  
d2882 1
a2882 1
  
d2886 1
a2886 1
  
d2890 1
a2890 1
  
d2894 1
a2894 1
  
d2898 1
a2898 1
  
d2902 1
a2902 1
  
d2906 1
a2906 1
  
d2910 1
a2910 1
  
d2914 1
a2914 1
  
d2918 1
a2918 1
  
d2922 1
a2922 1
  
d2926 1
a2926 1
  
d2930 1
a2930 1
  
d2934 1
a2934 1
  
d2939 1
a2939 1
  
d2945 1
a2945 1
  
d2950 1
a2950 1
  
d2954 1
a2954 1
  
d2970 1
a2970 1
  
d2976 1
a2976 1
  
d2983 1
a2983 1
         TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_MANUAL, 
d2985 1
a2985 1
  
d2990 1
a2990 1
  
d2994 1
a2994 1
  
d2999 1
a2999 1
  
d3004 1
a3004 1
  
d3008 1
a3008 1
  
d3012 1
a3012 1
  
d3016 1
a3016 1
  
d3020 2
a3021 2
  
  spello(SPELL_SUMMON_DRACOLICH, 100, 75, 3, POS_SITTING, 
d3024 2
a3025 2
  
  spello(SPELL_ANIMATE_DEAD, 75, 15, 3, POS_SITTING, 
d3028 2
a3029 2
  
  spello(SPELL_SUMMON_ELEMENTAL, 75, 15, 3, POS_SITTING, 
d3032 2
a3033 2
  
  spello(SPELL_SUMMON_DEMON, 100, 75, 3, POS_SITTING, 
d3036 2
a3037 2
  
  spello(SPELL_SUMMON_GREATER_DEMON, 130, 75, 3, POS_SITTING, 
d3040 1
a3040 1
  
d3044 1
a3044 1
  
d3053 1
a3053 1
  
d3057 1
a3057 1
  
d3062 1
a3062 1
  
d3067 1
a3067 1
  
d3071 1
a3071 1
  
d3076 1
a3076 1
  
d3081 1
a3081 1
  
d3086 1
a3086 1
  
d3111 1
a3111 1
  
d3121 1
a3121 1
  
d3126 1
a3126 1
  
d3130 1
a3130 1
  
d3134 1
a3134 1
  
d3138 1
a3138 1
  
d3143 1
a3143 1
 spello(SPELL_BONE_ARMOR, 0, 0, 0, POS_STANDING,        
d3154 1
a3154 1
         CAST_SPEED4, HEALING_DAMAGE, SKILL_SPHERE_GENERIC, 15, FALSE, 
d3165 1
a3165 1
  
d3390 4
d3828 1
a3828 1
 * 
d3891 1
a3891 1
 * 
@


1.126
log
@Check for death during manual spells.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.125 2008/01/14 21:54:19 myc Exp jps $
d2115 5
a2119 4
/* Assign the spells on boot up */
void spello(int spl, int max_mana, int min_mana, int mana_change, byte minpos,
            int targets, byte violent, int routines, int mem_time, int cast_time,
            int damage_type, int sphere, int pages, int quest, char *wearoff)
d2122 1
a2122 1
  
d2126 1
a2126 1
  
d2133 1
a2146 1
  
d2164 1
d2181 2
a2182 1
#define skillo(skill) spello(skill, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL);
d2184 1
a2184 1
     spello(chant, 0, 0, 0, minpos, targets, violent, routines, 0, 0, \
d2187 1
a2187 1
     spello(song, 0, 0, 0, minpos, targets, violent, routines, 0, 0, \
d2189 8
d3173 88
a3260 89
   * Declaration of skills - this actually doesn't do anything except
   * set it up so that immortals can use these skills by default.  The
   * min level to use the skill for other classes is set up in class.c.
   */

  skillo(SKILL_BACKSTAB);
  skillo(SKILL_INSTANT_KILL);
  skillo(SKILL_BIND);
  skillo(SKILL_CIRCLE);
  skillo(SKILL_BASH);
  skillo(SKILL_HIDE);
  skillo(SKILL_KICK);
  skillo(SKILL_PICK_LOCK);
  skillo(SKILL_PUNCH);
  skillo(SKILL_RESCUE);
  skillo(SKILL_SNEAK);
  skillo(SKILL_STEAL);
  skillo(SKILL_TRACK);
  skillo(SKILL_HUNT);
  skillo(SKILL_DUAL_WIELD);
  skillo(SKILL_DOUBLE_ATTACK);
  skillo(SKILL_BERSERK);
  skillo(SKILL_SPRINGLEAP);
  skillo(SKILL_MOUNT);
  skillo(SKILL_RIDING);
  skillo(SKILL_TAME);
  skillo(SKILL_THROATCUT);
  skillo(SKILL_DOORBASH);
  skillo(SKILL_PARRY);
  skillo(SKILL_DODGE);
  skillo(SKILL_RIPOST);
  skillo(SKILL_MEDITATE);
  skillo(SKILL_QUICK_CHANT);
  skillo(SKILL_CHANT);
  skillo(SKILL_SAFEFALL);
  skillo(SKILL_BAREHAND);
  skillo(LANG_BARBARIAN);
  skillo(LANG_GNOMISH);
  skillo(LANG_DUERGAR);
  skillo(LANG_DROW);
  skillo(LANG_ORCISH);
  skillo(LANG_OGRE);
  skillo(LANG_COMMON);
  skillo(LANG_ELVEN);
  skillo(LANG_DWARVEN);
  skillo(LANG_TROLLISH);
  skillo(LANG_HALFLING);
  skillo(SKILL_SHAPECHANGE);
  skillo(SKILL_SWITCH);
  skillo(SKILL_GUARD);
  skillo(SKILL_BREATHE);
  skillo(SKILL_SWEEP);
  skillo(SKILL_ROAR);
  skillo(SKILL_DOUSE);
  skillo(SKILL_SCRIBE);
  skillo(SKILL_HITALL);
  skillo(SKILL_BANDAGE);
  skillo(SKILL_CHANT);
  skillo(SKILL_SAFEFALL);
  skillo(SKILL_SUMMON_MOUNT);
  skillo(SKILL_KNOW_SPELL);
  skillo(SKILL_SPHERE_GENERIC);
  skillo(SKILL_SPHERE_FIRE);
  skillo(SKILL_SPHERE_WATER);
  skillo(SKILL_SPHERE_EARTH);
  skillo(SKILL_SPHERE_AIR);
  skillo(SKILL_SPHERE_HEALING);
  skillo(SKILL_SPHERE_PROT);
  skillo(SKILL_SPHERE_ENCHANT);
  skillo(SKILL_SPHERE_SUMMON);
  skillo(SKILL_SPHERE_DEATH);
  skillo(SKILL_SPHERE_DIVIN);
  skillo(SKILL_BLUDGEONING);
  skillo(SKILL_PIERCING);
  skillo(SKILL_SLASHING);
  skillo(SKILL_2H_BLUDGEONING);
  skillo(SKILL_2H_PIERCING);
  skillo(SKILL_2H_SLASHING);
  skillo(SKILL_MISSILE);
  skillo(SKILL_EYE_GOUGE);
  skillo(SKILL_RETREAT);
  skillo(SKILL_GROUP_RETREAT);
  skillo(SKILL_CORNER);
  skillo(SKILL_STEALTH);
  skillo(SKILL_SHADOW);
  skillo(SKILL_CONCEAL);
  skillo(SKILL_PECK);
  skillo(SKILL_CLAW);
  skillo(SKILL_ELECTRIFY);
d3390 3
@


1.125
log
@Allow illusions to cast degeneration.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.124 2008/01/14 18:54:11 myc Exp myc $
d796 1
a796 1
  
d874 1
a874 1
  if (IS_SET(SINFO.routines, MAG_MANUAL))
d932 4
d3380 3
@


1.124
log
@Auto-set the violent flag on a spell if the spell has the
MAG_DAMAGE routine.  Fix evades_spell to only go off for
violent spells.  Fix formatting in manual spell section.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.123 2008/01/13 23:06:04 myc Exp myc $
d824 1
d3376 5
@


1.123
log
@Changed the spell_info struct to store lowest_level and lowest_circle
data for each spell, thus making it unnecessary to calculate the
minimum spell level for major globe over and over.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.122 2008/01/13 06:00:25 myc Exp myc $
d757 1
a757 2
  if (IS_SET(ROOM_FLAGS(caster->in_room), ROOM_PEACEFUL) &&
      (SINFO.violent || IS_SET(SINFO.routines, MAG_DAMAGE))) {
d876 1
a876 1
    case SPELL_CREATE_WATER:        MANUAL_SPELL(spell_create_water); break;
d878 6
a883 6
    case SPELL_ENCHANT_WEAPON:  MANUAL_SPELL(spell_enchant_weapon); break;
    case SPELL_IDENTIFY:        MANUAL_SPELL(spell_identify); break;
    case SPELL_LOCATE_OBJECT:   MANUAL_SPELL(spell_locate_object); break;
    case SPELL_SUMMON:                MANUAL_SPELL(spell_summon); break;
    case SPELL_WORD_OF_RECALL:  MANUAL_SPELL(spell_recall); break;
    case SPELL_DIMENSION_DOOR:  MANUAL_SPELL(spell_dimension_door); break;
d885 9
a893 9
    case SPELL_MOONWELL:        MANUAL_SPELL(spell_moonwell); break;
    case SPELL_MAJOR_PARALYSIS:        MANUAL_SPELL(spell_major_paralysis);break;
    case SPELL_RESURRECT:        MANUAL_SPELL(spell_resurrect); break;
    case SPELL_PRESERVE:        MANUAL_SPELL(spell_preserve); break;
    case SPELL_PLANE_SHIFT:        MANUAL_SPELL(spell_plane_shift); break;
    case SPELL_DISPEL_MAGIC:        MANUAL_SPELL(spell_dispel_magic); break;
    case SPELL_MINOR_CREATION:        MANUAL_SPELL(spell_minor_creation); break;
    case SPELL_WIZARD_EYE:        MANUAL_SPELL(spell_wizard_eye); break;
    case SPELL_TELEPORT:        MANUAL_SPELL(spell_teleport); break;
d895 7
a901 7
    case SPELL_SHIFT_CORPSE:        MANUAL_SPELL(spell_shift_corpse); break; 
    case SPELL_DEGENERATION:        MANUAL_SPELL(spell_degeneration); break;
    case SPELL_RELOCATE:        MANUAL_SPELL(spell_relocate); break;
    case SPELL_ACID_BREATH:        MANUAL_SPELL(spell_acid_breath); break;
    case SPELL_COLOR_SPRAY:        MANUAL_SPELL(spell_color_spray); break;
    case SPELL_LIGHTNING_BREATH:        MANUAL_SPELL(spell_lightning_breath);break;
    case SPELL_LESSER_INVOCATION:        MANUAL_SPELL(spell_lesser_invocation);break;
d903 6
a908 6
    case SPELL_GREATER_INVOCATION:        MANUAL_SPELL(spell_greater_invocation);break;
    case SPELL_BANISH:                MANUAL_SPELL(spell_banish);break;
    case SPELL_WORD_OF_COMMAND:        MANUAL_SPELL(spell_word_of_command);break;
    case SPELL_HEAVENS_GATE:        MANUAL_SPELL(spell_heavens_gate);break;
    case SPELL_DARK_FEAST:        MANUAL_SPELL(spell_dark_feast);break;
    case SPELL_HELLS_GATE:        MANUAL_SPELL(spell_hells_gate);break;
d910 1
a910 1
    case SPELL_WANDERING_WOODS:        MANUAL_SPELL(spell_wandering_woods);break;
d912 1
a912 1
    case SPELL_FIRE_DARTS:        MANUAL_SPELL(spell_fire_darts);break;
d914 5
a918 5
    case SPELL_FLAME_BLADE:        MANUAL_SPELL(spell_flame_blade);break;
    case SPELL_IMMOLATE:        MANUAL_SPELL(spell_immolate);break;
    case SPELL_ICE_DARTS:        MANUAL_SPELL(spell_ice_darts);break;
    case SPELL_ICE_DAGGER:        MANUAL_SPELL(spell_ice_dagger);break;
    case SPELL_WALL_OF_ICE:        MANUAL_SPELL(spell_wall_of_ice);break;
d920 6
a925 6
    case SPELL_RAIN:                MANUAL_SPELL(spell_rain);break;
    case SPELL_ILLUMINATION:        MANUAL_SPELL(spell_illumination);break;
    case SPELL_DARKNESS:        MANUAL_SPELL(spell_darkness);break;
    case SPELL_REMOVE_CURSE:        MANUAL_SPELL(spell_remove_curse); break;
    case SPELL_MOONBEAM:        MANUAL_SPELL(spell_moonbeam); break;
    case SPELL_ENERGY_DRAIN:        MANUAL_SPELL(spell_energy_drain); break;
d928 2
a929 2
    case CHANT_IVORY_SYMPHONY:        MANUAL_SPELL(chant_ivory_symphony); break;
    case CHANT_APOCALYPTIC_ANTHEM:        MANUAL_SPELL(chant_apocalyptic_anthem); break;
d933 2
a934 2
  if (spell_info[spellnum].violent && caster && cvict &&
         !FIGHTING(cvict) && attack_ok(cvict, caster, FALSE))
d2126 1
a2126 1
  spell_info[spl].violent = violent;
d3375 5
@


1.122
log
@Check mob's position before casting in mob_cast.  Make curse spell
work while fighting.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.121 2008/01/13 03:19:53 myc Exp myc $
d2105 2
d2120 1
d2137 2
a2138 1
  
d2151 2
d2165 8
d3376 4
@


1.121
log
@Removed melt as a manual spell.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.120 2008/01/12 23:13:20 myc Exp myc $
d1844 4
d2812 1
a2812 1
  spello(SPELL_CURSE, 80, 50, 2, POS_STANDING,
d3362 3
@


1.120
log
@The mob_cast function now supports target objects.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.119 2008/01/07 11:56:06 jps Exp myc $
a829 1
        case SPELL_MELT:             MANUAL_SPELL(spell_melt);break;
a915 1
    case SPELL_MELT:                MANUAL_SPELL(spell_melt);break;
d2323 1
a2323 1
         TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL,
d3358 3
@


1.119
log
@Allow simulacrum to be cast on self. Fix pages.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.118 2008/01/07 10:44:46 jps Exp jps $
d1800 1
d1802 1
a1802 1
void mob_cast(struct char_data *ch, struct char_data *tch, int spellnum)
d1805 2
d1809 1
a1809 1
    return;  
d1811 2
a1812 4
  if (AFF2_FLAGGED(ch, AFF2_SILENCE)) {
    send_to_char("Your lips move, but no sound forms.\r\n", ch);
    return;
  }
d1815 19
a1833 1
    return;
d1835 2
a1836 4
  if (GET_POS1(ch) < POS1_STANDING) {
    send_to_char("You are too relaxed.\r\n", ch);
    return;
  }        
d1838 7
a1844 4
  if (!IS_SPELL(spellnum)) {
    send_to_char("Cast what?!?\r\n", ch);
    return;
  }
d1846 7
a1852 4
  if (GET_LEVEL(ch) < SINFO.min_level[(int) GET_CLASS(ch)]) {
    send_to_char("You do not know that spell!\r\n", ch);
    return;
  }        
a1853 5
  if (!GET_SKILL(ch, spellnum)) {
    send_to_char("You are unfamiliar with that spell.\r\n", ch);
    return;        
  }        
  
d1859 9
a1867 1
  else if (tch && IS_SET(SINFO.targets, TAR_CHAR_WORLD))
d1883 1
a1883 1
    target_status = 0;
a1884 7
  if (!target_status) {
    sprintf(buf, "Upon %s should the spell be cast?\r\n",
            IS_SET(SINFO.targets, TAR_OBJ_ROOM | TAR_OBJ_INV | 
            TAR_OBJ_WORLD) ? "what" : "who");
    send_to_char(buf, ch);
    return;
  } 
d1899 1
a1899 1
  ch->casting.obj = NULL;
d1907 1
a1907 1
    ch->casting.casting_time = (int)(SINFO.cast_time / 2);
d1913 1
a1913 1
  WAIT_STATE(ch, (PULSE_VIOLENCE / 2));
d1916 1
a1919 1
  extern int spells_of_circle[(LVL_MAX_MORT + 1)][(NUM_SPELL_CIRCLES + 1)];
d3360 3
@


1.118
log
@Renamed spell project to phantasm.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.117 2008/01/06 23:50:47 jps Exp jps $
d2241 1
a2241 1
         CAST_SPEED4, 0, SKILL_SPHERE_SUMMON, 14, FALSE, NULL);
d2244 2
a2245 2
         TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_SUMMONS, C1,
         CAST_SPEED5, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);
d3341 3
@


1.117
log
@Added spells project and simulacrum, and MOB2_ILLUSORY flag.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.116 2008/01/06 20:39:38 jps Exp jps $
d278 1
a278 1
  "project",
d2239 1
a2239 1
  spello(SPELL_PROJECT, 0, 0, 0, POS_STANDING,
d3341 3
@


1.116
log
@Did I mention I hate tabs?  Also, implemented ventriloquate.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.115 2008/01/05 05:35:34 jps Exp jps $
d278 2
d281 1
a281 1
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 220 */
d321 1
a321 1
  "backstab",                /* 401 */  
d325 22
a346 22
  "pick lock",                     /* 405 */ 
  "punch",                    /* 406 */ 
  "rescue",                /* 407 */  
  "sneak",                     /* 408 */  
  "steal",                /* 409 */ 
  "track",                    /* 410 */ 
  "dual wield",                /* 411 */
  "double attack",             /* 412 */ 
  "berserk",                       /* 413 */
  "springleap",                /* 414 */
  "mount",                     /* 415 */
  "riding",                      /* 416 */
  "tame",                      /* 417 */  
  "throatcut",                /* 418 */
  "doorbash",                /* 419 */
  "parry",                       /* 420 */ 
  "dodge",                      /* 421 */ 
  "riposte",                       /* 422 */ 
  "meditate",                /* 423 */
  "quick chant",               /* 424 */
  "utility",                       /* 425 */
  "circle",                       /* 426 */  
d348 1
a348 1
  "bind",               /* 428 */
d350 1
a350 1
  "switch",                /* 430 */
d352 2
a353 2
  "fumbling weapon", /* fumbling */
  "dropped weapon", /* dropped */
d355 1
a355 1
  "breath",                /* 435 */
d802 40
d867 1
a867 1
    imp_skill |= mag_summons(skill, caster, ovict, spellnum, savetype);
d2239 8
d3341 3
@


1.115
log
@Using "talent" as generic name for spell/skill/song/chant.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.114 2008/01/04 04:30:29 jps Exp jps $
d62 1
a62 1
  "!RESERVED!",			/* 0 - reserved */
d66 1
a66 1
  "armor",			/* 1 */
d75 1
a75 1
  "color spray",		/* 10 */
d85 1
a85 1
  "detect magic",		/* 20 */
d95 1
a95 1
  "lightning bolt",		/* 30 */
d105 1
a105 1
  "summon",			/* 40 */
d115 1
a115 1
  "infravision",		/* 50 */
d126 1
a126 1
  "summon greater demon",			/* 61 */
d130 1
a130 1
  "meteorswarm",	/* 65 */
d135 1
a135 1
  "greater endurance",	/* 70 */
d140 1
a140 1
  "comprehend language",	/* 75 */
d145 1
a145 1
  "vampiric breath",	/* 80 */
d155 1
a155 1
  "vigorize serious",	/* 90 */
d160 1
a160 1
  "flamestrike",	/* 95 */
d165 1
a165 1
  "minor creation",	/* 100 */
d170 1
a170 1
  "fireshield",	        /* 105 */ 
d175 1
a175 1
  "harness",	        /* 110 */
d180 1
a180 1
  "circle of light",	/* 115 */
d185 1
a185 1
  "lesser exorcism",	/* 120 */
d195 1
a195 1
  "heavens gate",	 /* 130 */
d265 1
a265 1
  "lightning breath",	/* 205 */
d319 26
a344 26
  "backstab",		/* 401 */  
  "bash",		/* 402 */ 
  "hide",		/* 403 */	 
  "kick",		/* 404 */
  "pick lock",	     	/* 405 */ 
  "punch",    		/* 406 */ 
  "rescue",		/* 407 */  
  "sneak",     		/* 408 */  
  "steal",		/* 409 */ 
  "track",    		/* 410 */ 
  "dual wield",		/* 411 */
  "double attack",     	/* 412 */ 
  "berserk",	       	/* 413 */
  "springleap",		/* 414 */
  "mount",     		/* 415 */
  "riding",	      	/* 416 */
  "tame",      		/* 417 */  
  "throatcut",		/* 418 */
  "doorbash",		/* 419 */
  "parry",	       	/* 420 */ 
  "dodge",	      	/* 421 */ 
  "riposte",	       	/* 422 */ 
  "meditate",		/* 423 */
  "quick chant",       	/* 424 */
  "utility",	       	/* 425 */
  "circle",	       	/* 426 */  
d348 1
a348 1
  "switch",	        /* 430 */
d353 1
a353 1
  "breath",	        /* 435 */
d358 1
a358 1
  "instant kill",	/* 440 */  
d363 1
a363 1
  "vampiric touch",	/* 445 */ 
d373 1
a373 1
  "sphere of earth",	   /* 455 */
d383 1
a383 1
  "slashing weapons",	/* 465 */  
d388 1
a388 1
  "!ONFIRE!",	/* 470 */
d393 1
a393 1
  "corner",	/* 475 */
d398 1
a398 1
  "claw",	/* 480 */
d400 24
a423 24
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 485 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 490 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 495 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 500 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 505 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 510 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 515 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 520 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 525 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 530 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 535 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 540 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 545 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 550 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 555 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 560 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 565 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 570 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 575 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 580 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 585 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 590 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 595 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 600 */
d430 1
a430 1
  "shadows sorrow song",	/* 605 */
d435 9
a443 9
  "seed of destruction",	/* 610 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 615 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 620 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 625 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 630 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 635 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 640 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 645 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 650 */
d449 7
a455 7
  "!UNUSED!",		       	/* 651 */  
  "fire breath",	       	/* 652 */
  "gas breath",		       	/* 653 */  
  "frost breath",	       	/* 654 */
  "acid breath",	       	/* 655 */  
  "lightning breath",		/* 656 */  
  "\n"				/* the end */
d460 22
a481 22
			   /* first 10 are defensive */
			   SPELL_STRENGTH,
			   SPELL_DETECT_INVIS,
			   SPELL_INFRAVISION,
			   SPELL_MINOR_GLOBE,
			   SPELL_FIRESHIELD,
			   SPELL_COLDSHIELD,
			   SPELL_FARSEE,
			   SPELL_FLY,
			   SPELL_HASTE,
			   SPELL_MAJOR_GLOBE,
			   /* next 10 are offensive */
			   SPELL_BURNING_HANDS, 
			   SPELL_CHILL_TOUCH,
			   SPELL_MINOR_PARALYSIS,
			   SPELL_LIGHTNING_BOLT,
			   SPELL_RAY_OF_ENFEEB,
			   SPELL_SLEEP,
			   SPELL_CONE_OF_COLD,
			   SPELL_FIREBALL,
			   SPELL_BIGBYS_CLENCHED_FIST,
			   SPELL_CHAIN_LIGHTNING
d485 22
a506 22
			     /* first 10 are defensive */
			     SPELL_CURE_LIGHT,
			     SPELL_BLESS,
			     SPELL_CURE_SERIOUS,
			     SPELL_PROT_FROM_EVIL,
			     SPELL_CURE_CRITIC,
			     SPELL_SENSE_LIFE,
			     SPELL_HEAL,
			     SPELL_VITALITY,
			     SPELL_WATERWALK,
			     SPELL_SOULSHIELD,
			     /* next 10 are offensive */
			     SPELL_CAUSE_LIGHT,
			     SPELL_CAUSE_SERIOUS,
			     SPELL_CAUSE_CRITIC,
			     SPELL_EARTHQUAKE,
			     SPELL_HARM,
			     SPELL_FLAMESTRIKE,
			     SPELL_FULL_HARM,
			     SPELL_BLINDNESS,
			     SPELL_SILENCE,
			     SPELL_DARKNESS
d558 5
a562 1
  
d583 1
a583 1
	found = TRUE; /* ok he recognized it */
d591 5
a595 5
	for (j = 0; *(syls[j].org); j++)
	  if (!strncmp(syls[j].org, lbuf + ofs, strlen(syls[j].org))) {
	    strcat(spellbuf, syls[j].new);
	    ofs += strlen(syls[j].org);
	  }
d606 2
a607 2
	if (ch == tch)
	  sprintf(saybuf, "$n closes $s eyes and utters the words, '%s'.", spellbuf);
d609 5
a613 5
	else if (tch == gch)
	  sprintf(saybuf, "$n stares at you and utters the words, '%s'.", spellbuf);
	/* Ok, just a bystander.  But can they see the target? */
	else if (CAN_SEE(gch, tch))
	  sprintf(saybuf, "$n stares at $N and utters the words, '%s'.", spellbuf);
d619 4
a622 4
	if(CAN_SEE_OBJ(gch, tobj))
	  sprintf(saybuf, "$n stares at $p and utters the words, '%s'.", spellbuf);
	else
	  sprintf(saybuf, "$n stares at something and utters the words, '%s'.", spellbuf);
d626 1
a626 1
	sprintf(saybuf, "$n utters the words, '%s'.", spellbuf);
d742 1
a742 1
	       struct obj_data * ovict, int spellnum, int skill, int casttype)
d835 3
a837 3
    case SPELL_CHARM:		MANUAL_SPELL(spell_charm); break;
    case SPELL_CREATE_WATER:	MANUAL_SPELL(spell_create_water); break;
    case SPELL_DETECT_POISON:	MANUAL_SPELL(spell_detect_poison); break;
d839 1
a839 1
    case SPELL_IDENTIFY:	MANUAL_SPELL(spell_identify); break;
d841 1
a841 1
    case SPELL_SUMMON:		MANUAL_SPELL(spell_summon); break;
d844 47
a890 46
    case SPELL_CREEPING_DOOM:	MANUAL_SPELL(spell_creeping_doom); break;
    case SPELL_MOONWELL:	MANUAL_SPELL(spell_moonwell); break;
    case SPELL_MAJOR_PARALYSIS:	MANUAL_SPELL(spell_major_paralysis);break;
    case SPELL_RESURRECT:	MANUAL_SPELL(spell_resurrect); break;
    case SPELL_PRESERVE:	MANUAL_SPELL(spell_preserve); break;
    case SPELL_PLANE_SHIFT:	MANUAL_SPELL(spell_plane_shift); break;
    case SPELL_DISPEL_MAGIC:	MANUAL_SPELL(spell_dispel_magic); break;
    case SPELL_MINOR_CREATION:	MANUAL_SPELL(spell_minor_creation); break;
    case SPELL_WIZARD_EYE:	MANUAL_SPELL(spell_wizard_eye); break;
    case SPELL_TELEPORT:	MANUAL_SPELL(spell_teleport); break;
    case SPELL_SUMMON_CORPSE:	MANUAL_SPELL(spell_summon_corpse); break; 
    case SPELL_SHIFT_CORPSE:	MANUAL_SPELL(spell_shift_corpse); break; 
    case SPELL_DEGENERATION:	MANUAL_SPELL(spell_degeneration); break;
    case SPELL_RELOCATE:	MANUAL_SPELL(spell_relocate); break;
    case SPELL_ACID_BREATH:	MANUAL_SPELL(spell_acid_breath); break;
    case SPELL_COLOR_SPRAY:	MANUAL_SPELL(spell_color_spray); break;
    case SPELL_LIGHTNING_BREATH:	MANUAL_SPELL(spell_lightning_breath);break;
    case SPELL_LESSER_INVOCATION:	MANUAL_SPELL(spell_lesser_invocation);break;
    case SPELL_ENLIGHTENMENT:	MANUAL_SPELL(spell_enlightenment);break;
    case SPELL_GREATER_INVOCATION:	MANUAL_SPELL(spell_greater_invocation);break;
    case SPELL_BANISH:		MANUAL_SPELL(spell_banish);break;
    case SPELL_WORD_OF_COMMAND:	MANUAL_SPELL(spell_word_of_command);break;
    case SPELL_HEAVENS_GATE:	MANUAL_SPELL(spell_heavens_gate);break;
    case SPELL_DARK_FEAST:	MANUAL_SPELL(spell_dark_feast);break;
    case SPELL_HELLS_GATE:	MANUAL_SPELL(spell_hells_gate);break;
    case SPELL_WALL_OF_STONE:	MANUAL_SPELL(spell_wall_of_stone);break;
    case SPELL_WANDERING_WOODS:	MANUAL_SPELL(spell_wandering_woods);break;
    case SPELL_ARMOR_OF_GAIA:	MANUAL_SPELL(spell_armor_of_gaia);break;
    case SPELL_FIRE_DARTS:	MANUAL_SPELL(spell_fire_darts);break;
    case SPELL_MAGIC_MISSILE:	MANUAL_SPELL(spell_magic_missile);break;
    case SPELL_FLAME_BLADE:	MANUAL_SPELL(spell_flame_blade);break;
    case SPELL_MELT:		MANUAL_SPELL(spell_melt);break;
    case SPELL_IMMOLATE:	MANUAL_SPELL(spell_immolate);break;
    case SPELL_ICE_DARTS:	MANUAL_SPELL(spell_ice_darts);break;
    case SPELL_ICE_DAGGER:	MANUAL_SPELL(spell_ice_dagger);break;
    case SPELL_WALL_OF_ICE:	MANUAL_SPELL(spell_wall_of_ice);break;
    case SPELL_FLOOD:		MANUAL_SPELL(spell_flood);break;
    case SPELL_RAIN:		MANUAL_SPELL(spell_rain);break;
    case SPELL_ILLUMINATION:	MANUAL_SPELL(spell_illumination);break;
    case SPELL_DARKNESS:	MANUAL_SPELL(spell_darkness);break;
    case SPELL_REMOVE_CURSE:	MANUAL_SPELL(spell_remove_curse); break;
    case SPELL_MOONBEAM:	MANUAL_SPELL(spell_moonbeam); break;
    case SPELL_ENERGY_DRAIN:	MANUAL_SPELL(spell_energy_drain); break;
    case CHANT_PEACE:		MANUAL_SPELL(chant_peace); break;
    case CHANT_IVORY_SYMPHONY:	MANUAL_SPELL(chant_ivory_symphony); break;
    case CHANT_APOCALYPTIC_ANTHEM:	MANUAL_SPELL(chant_apocalyptic_anthem); break;
d952 4
a955 4
 * staff  - [0]	skill	[1] max charges	[2] num charges	[3] spell num
 * wand   - [0]	skill	[1] max charges	[2] num charges	[3] spell num
 * scroll - [0]	skill	[1] spell num	[2] spell num	[3] spell num
 * potion - [0] skill	[1] spell num	[2] spell num	[3] spell num
d967 1
a967 1
		          char *argument)
d1204 1
a1204 1
	       struct obj_data * tobj, int spellnum)
d1671 1
a1671 1
   } else {			/* if target string is empty */
d1685 2
a1686 1
      if (IS_SET(SINFO.targets, TAR_CHAR_ROOM) && !SINFO.violent) {
d1712 1
a1712 1
   if (GET_LEVEL(ch) < LVL_GOD) {
d1777 1
a1777 1
  }	
d1787 1
a1787 1
  }	
d1791 2
a1792 2
    return;	
  }	
d1809 2
a1810 1
  else if (IS_SET(SINFO.targets, TAR_CHAR_ROOM) && !SINFO.violent) {
d1887 2
a1888 2
	strcat(garblebuf, syls[j].new);
	ofs += strlen(syls[j].org);
d1897 6
a1902 1
    
d1923 1
a1923 1
	improve_skill(gch, SKILL_KNOW_SPELL);
d1929 3
a1931 3
	/* For really bad rolls, replace the spell with an incorrect one */
	strcpy(spellbuf, spells[bad_guess(ch)]);
	bad = TRUE;
d1934 2
a1935 2
	/* Copy the garbled buffer into the spell */
	strcpy(spellbuf, garblebuf);
d1958 1
a1958 1
	  !strcmp(spellbuf, spells[ch->casting.spell]) || 
d1960 7
a1966 7
	  GET_LEVEL(gch) >= LVL_GOD) {
	if(ch->casting.tch == gch)
	  /* Target is the receiver of the message */
	  sprintf(namebuf," at &1&bYou&0!!!");
	else
	  /* target is someone else in room */
	  sprintf(namebuf," at &7&b%s&0", GET_NAME(ch->casting.tch));
d2021 1
a2021 1
	    skill_name(spell), class);
d2028 1
a2028 1
	    skill_name(spell), level);
d2048 2
a2049 2
	    int targets, byte violent, int routines, int mem_time, int cast_time,
	    int damage_type, int sphere, int pages, int quest, char *wearoff)
d2163 12
d2176 3
a2178 3
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	 CAST_SPEEDD, COLD_DAMAGE, SKILL_SPHERE_WATER, 7, FALSE, NULL);
  
d2180 2
a2181 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_PROT, 13, FALSE,
d2183 1
a2183 1
  
d2185 12
a2196 11
	 TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 17, FALSE, NULL);
  
  spello(SPELL_FREEZING_WIND, 0, 0, 0, POS_FIGHTING,
	 TAR_IGNORE, TRUE, MAG_AREAS, C1,
	 CAST_SPEED4, COLD_DAMAGE, SKILL_SPHERE_AIR, 21, FALSE, NULL);
  
  spello(SPELL_FREEZE, 0, 0, 0, POS_FIGHTING,
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEEDE, COLD_DAMAGE, SKILL_SPHERE_WATER, 25, FALSE, NULL);
  
d2198 2
a2199 2
	 TAR_STRING, FALSE, MAG_MANUAL, C1,
	 18, COLD_DAMAGE, SKILL_SPHERE_WATER, 27, TRUE,
a2201 8
  spello(SPELL_ICEBALL, 0, 0, 0, POS_FIGHTING,
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEEDF, COLD_DAMAGE, SKILL_SPHERE_WATER, 29, FALSE, NULL);
  
  spello(SPELL_FLOOD, 0, 0, 0, POS_FIGHTING,
	 TAR_IGNORE, TRUE, MAG_MANUAL, C1,
	 18, COLD_DAMAGE, SKILL_SPHERE_WATER, 35, TRUE, NULL);
  
d2203 2
a2204 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_PROT, 35, TRUE,
d2207 4
a2210 5
  spello(SPELL_NEGATE_COLD, 0, 0, 0, POS_STANDING,
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_PROT, 29, FALSE,
         "You feel vulnerable to the cold again.");
  
d2212 2
a2213 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_WATER, 27, FALSE,
d2217 2
a2218 2
	 TAR_CHAR_ROOM, FALSE, MAG_UNAFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_WATER, 11, FALSE, NULL);
d2221 2
a2222 2
	 TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_WATER, 23, FALSE, NULL);
d2225 2
a2226 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	 CAST_SPEEDD, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 9, FALSE, NULL);
d2228 3
a2230 3
  spello(SPELL_MAGIC_TORCH, 0, 0, 0, POS_FIGHTING,	
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 7, FALSE,
d2234 2
a2235 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_FIRE, 11, FALSE,
d2239 2
a2240 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_FIRE, 17, FALSE,
d2244 2
a2245 2
	 TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_SUMMON, 19, FALSE, NULL);
d2248 2
a2249 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEEDE, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 21, FALSE, NULL);
d2252 2
a2253 2
	 TAR_IGNORE, TRUE, MAG_AREAS, C1,
	 CAST_SPEED6, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 25, FALSE, NULL);
d2256 2
a2257 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL,
	 C1, CAST_SPEEDE, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 29, FALSE, NULL);
d2260 2
a2261 2
	 TAR_IGNORE, TRUE, MAG_ROOM, C1,
	 CAST_SPEED6, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 25, FALSE, 
d2265 2
a2266 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	 CAST_SPEEDF, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 25, FALSE, NULL);
d2269 2
a2270 2
	 TAR_IGNORE, TRUE, MAG_AREAS, C1,
	 16, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 31, TRUE, NULL);
d2273 2
a2274 2
	 TAR_IGNORE, TRUE, MAG_AREAS, C1,
	 CAST_SPEED7, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 35, FALSE, NULL);
d2277 2
a2278 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_PROT, 29, FALSE,
d2282 2
a2283 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEEDF, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 23, FALSE, NULL);
d2286 2
a2287 2
	 TAR_IGNORE | TAR_OUTDOORS, FALSE, MAG_ROOM, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2291 2
a2292 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_AFFECTS,
	 C1, CAST_SPEED6, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE,
d2296 2
a2297 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);
d2300 2
a2301 2
	 TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	 16, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2305 2
a2306 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_POINTS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d2309 2
a2310 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY | TAR_OUTDOORS, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_PROT, 5, FALSE,
d2314 2
a2315 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY | TAR_OUTDOORS, FALSE, MAG_AFFECTS | MAG_POINTS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2319 2
a2320 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_OUTDOORS, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2324 2
a2325 2
	 TAR_IGNORE, FALSE, MAG_GROUPS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d2328 2
a2329 2
	 TAR_STRING, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_SUMMON, 25, FALSE,
d2333 2
a2334 2
	 TAR_IGNORE, FALSE, MAG_CREATIONS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);
d2336 3
a2338 3
  spello(SPELL_BARKSKIN, 0, 0, 0, POS_FIGHTING,	
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED2, 0, SKILL_SPHERE_PROT, 17, FALSE,
d2342 2
a2343 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2347 2
a2348 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_OUTDOORS, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED3, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 5, FALSE, NULL);
d2351 2
a2352 2
	 TAR_CHAR_WORLD, FALSE, MAG_MANUAL, C1,
	 18, 0, SKILL_SPHERE_SUMMON, 5, TRUE, NULL);
d2355 2
a2356 2
	 TAR_CHAR_ROOM, FALSE, MAG_UNAFFECTS, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d2359 2
a2360 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED2, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2364 2
a2365 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED1, 0, SKILL_SPHERE_PROT, 5, FALSE,
d2369 2
a2370 2
	 TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED2, 0, SKILL_SPHERE_GENERIC, 5, FALSE, NULL);
d2373 2
a2374 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED2, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE, NULL);
d2377 2
a2378 2
	 TAR_CHAR_ROOM, TRUE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2382 2
a2383 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2387 2
a2388 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2392 2
a2393 2
	 TAR_IGNORE, FALSE, MAG_AREAS, C1,
	 16, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, TRUE, NULL);
d2396 2
a2397 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED4, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE, NULL);
d2400 2
a2401 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2405 2
a2406 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2410 2
a2411 2
	 TAR_IGNORE, FALSE, MAG_GROUPS, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 5, FALSE, NULL);
d2414 2
a2415 2
	 TAR_CHAR_WORLD, FALSE, MAG_MANUAL, C1,
	 16, 0, SKILL_SPHERE_SUMMON, 5, TRUE, NULL);
d2418 2
a2419 2
	 TAR_CHAR_ROOM, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_GENERIC, 5, TRUE, NULL);
d2422 2
a2423 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2427 2
a2428 2
	 TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_FIGHT_VICT, TRUE, MAG_MANUAL,
	 C1, CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 5, TRUE, NULL);
d2431 2
a2432 2
	 TAR_CHAR_ROOM | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_DIVIN, 5, FALSE, NULL);
d2435 2
a2436 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_DIVIN, 5, FALSE,
d2440 2
a2441 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL); 
d2444 2
a2445 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);
d2448 2
a2449 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE,C1,
	 18, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);
d2452 2
a2453 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED5, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);
d2456 2
a2457 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED5, ALIGN_DAMAGE, SKILL_SPHERE_GENERIC, 5, FALSE, NULL);
d2460 2
a2461 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED3, ALIGN_DAMAGE, SKILL_SPHERE_GENERIC, 5, FALSE, NULL);
d2464 2
a2465 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2469 2
a2470 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_PROT, 5, FALSE,
d2474 2
a2475 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2479 2
a2480 2
	 TAR_CHAR_ROOM, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED1, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE, NULL);
d2483 2
a2484 2
	 TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_AFFECTS, C1,
	 CAST_SPEED1, AIR_DAMAGE, SKILL_SPHERE_AIR, 5, FALSE, NULL);
d2487 2
a2488 2
	 TAR_CHAR_ROOM, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED1, COLD_DAMAGE, SKILL_SPHERE_WATER, 5, FALSE, NULL);
d2491 2
a2492 2
	 TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	 CAST_SPEED1, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 5, FALSE, NULL);
d2495 2
a2496 2
	 TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	 CAST_SPEED1, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE, NULL);
d2499 2
a2500 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2504 2
a2505 2
	 TAR_IGNORE, TRUE, MAG_AREAS, C1,
	 CAST_SPEED5, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 27, FALSE, NULL);
d2508 2
a2509 2
	 TAR_IGNORE, FALSE, MAG_BULK_OBJS | MAG_MASSES, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 23, FALSE, NULL);
d2512 2
a2513 2
	 TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C14,
	 20, 0, SKILL_SPHERE_SUMMON, 35, TRUE, NULL);
d2516 2
a2517 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL,
	 C1, CAST_SPEEDF, GENERIC_DAMAGE, SKILL_SPHERE_FIRE, 27, FALSE, NULL);
d2520 2
a2521 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 2, 0, SKILL_SPHERE_GENERIC, 21, FALSE,
d2525 2
a2526 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_PROT, 23, FALSE,
d2530 2
a2531 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_PROT, 35, TRUE,
d2535 2
a2536 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 17, FALSE,
d2540 2
a2541 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, COLD_DAMAGE, SKILL_SPHERE_WATER, 17, FALSE,
d2545 2
a2546 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 21, FALSE,
d2550 2
a2551 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 11, FALSE, NULL);
d2554 2
a2555 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 21, FALSE,
d2559 2
a2560 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 13, FALSE,
d2564 2
a2565 2
	 TAR_CHAR_WORLD, FALSE, MAG_MANUAL, C1,
	 16, 0, SKILL_SPHERE_DIVIN, 17, TRUE, NULL);
d2568 2
a2569 2
	 TAR_STRING, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED1, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);
d2572 2
a2573 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_OBJ_ROOM | TAR_OBJ_INV,
	 TRUE, MAG_MANUAL,
d2577 2
a2578 2
	 TAR_IGNORE, TRUE, MAG_AREAS, C1,
	 1, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);
d2581 2
a2582 2
	 TAR_IGNORE, TRUE, MAG_AREAS, C1,
	 1, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);
d2585 2
a2586 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED2, 0, SKILL_SPHERE_PROT, 5, FALSE,
d2590 2
a2591 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS | MAG_UNAFFECTS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 29, FALSE,
d2595 2
a2596 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS | MAG_UNAFFECTS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 29, FALSE,
d2600 2
a2601 2
	 TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE, MAG_AFFECTS | MAG_ALTER_OBJS,
	 C1, CAST_SPEED2, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2605 3
a2607 3
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_NOT_SELF, TRUE,
	 MAG_AFFECTS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2611 2
a2612 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_NOT_SELF, TRUE, MAG_AFFECTS,
	 C1, CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2616 2
a2617 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED3, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE, NULL);
d2620 2
a2621 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 15, FALSE,
d2625 2
a2626 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEEDD, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE, NULL);
d2629 2
a2630 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEEDE, COLD_DAMAGE, SKILL_SPHERE_WATER, 19, FALSE, NULL);
d2633 2
a2634 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEEDE, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 25, FALSE, NULL);
d2637 2
a2638 2
	 TAR_IGNORE, TRUE, MAG_AREAS, C9,
	 CAST_SPEED7, EARTH_DAMAGE, SKILL_SPHERE_EARTH, 37, TRUE, NULL);
d2641 2
a2642 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 29, FALSE,
d2646 2
a2647 2
	 TAR_IGNORE, TRUE, MAG_AREAS, C1,
	 16, COLD_DAMAGE, SKILL_SPHERE_WATER, 31, TRUE, NULL);
d2650 2
a2651 2
	 TAR_IGNORE, TRUE, MAG_AREAS, C1,
	 CAST_SPEED5, COLD_DAMAGE, SKILL_SPHERE_WATER, 23, FALSE, NULL);
d2654 2
a2655 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_OUTDOORS, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED4, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 5, FALSE, NULL);
d2658 2
a2659 2
	 TAR_CHAR_ROOM | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 35, TRUE,
d2663 2
a2664 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_SUMMON, 5, TRUE, NULL);
d2667 2
a2668 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_AFFECTS,
	 C1, CAST_SPEEDD, COLD_DAMAGE, SKILL_SPHERE_WATER, 7, FALSE,
d2672 2
a2673 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_SUMMONS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 35, FALSE, NULL);
d2676 2
a2677 2
	 TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2681 3
a2683 3
	 TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE,
	 MAG_MANUAL, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2688 2
a2689 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, 0, 7, FALSE,
d2693 2
a2694 2
	 TAR_CHAR_ROOM, TRUE, MAG_MANUAL, C6,
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 35, FALSE,
d2698 2
a2699 2
	 TAR_IGNORE, TRUE, MAG_MANUAL, C1,
	 CAST_SPEED5, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 21, FALSE, NULL);
d2702 2
a2703 2
	 TAR_STRING, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE, NULL);
d2706 2
a2707 2
	 TAR_IGNORE, FALSE, MAG_CREATIONS, C1,
	 CAST_SPEED1, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);
d2710 2
a2711 2
	 TAR_OBJ_INV | TAR_OBJ_EQUIP, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED1, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);
d2714 2
a2715 2
	 TAR_CHAR_ROOM, FALSE, MAG_UNAFFECTS, C1,
	 CAST_SPEED2, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d2718 2
a2719 2
	 TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_HEALING, 15, FALSE, NULL);
d2722 2
a2723 2
	 TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d2726 2
a2727 2
	 TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	 CAST_SPEED2, 0, SKILL_SPHERE_HEALING, 9, FALSE, NULL);
d2730 2
a2731 2
	 TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	 CAST_SPEED2, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d2734 2
a2735 2
	 TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d2738 2
a2739 2
	 TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d2742 3
a2744 3
	 TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, TRUE, 
	 MAG_AFFECTS | MAG_ALTER_OBJS, C1, CAST_SPEED5, 0, 
	 SKILL_SPHERE_ENCHANT, 5, FALSE,
d2748 2
a2749 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 9, FALSE,
d2753 2
a2754 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 19, FALSE,
d2758 2
a2759 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 5, FALSE,
d2763 2
a2764 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 17, FALSE,
d2768 2
a2769 2
	 TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED1, 0, SKILL_SPHERE_DIVIN, 13, FALSE, NULL);
d2772 2
a2773 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED3, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);
d2776 2
a2777 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED5, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);
d2780 2
a2781 2
	 TAR_IGNORE | TAR_OUTDOORS, TRUE, MAG_AREAS, C1,
	 CAST_SPEED5, EARTH_DAMAGE, SKILL_SPHERE_EARTH, 5, FALSE, NULL);
d2784 2
a2785 2
	 TAR_IGNORE, TRUE, MAG_AREAS, C1,
	 CAST_SPEED6, EARTH_DAMAGE, SKILL_SPHERE_EARTH, 35, FALSE, NULL);
d2788 2
a2789 2
	 TAR_IGNORE, TRUE, MAG_MANUAL, C1,
	 CAST_SPEED7, EARTH_DAMAGE, SKILL_SPHERE_EARTH, 35, TRUE, NULL);
d2792 2
a2793 2
	 TAR_OBJ_INV | TAR_OBJ_EQUIP, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 23, FALSE, NULL);
d2796 2
a2797 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	 CAST_SPEED5, DEATH_DAMAGE, SKILL_SPHERE_DEATH, 19, FALSE, NULL);
d2800 2
a2801 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	 CAST_SPEED1, DEATH_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);
d2804 2
a2805 2
	 TAR_IGNORE, FALSE, MAG_GROUPS, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_PROT, 9, TRUE, NULL);
d2808 2
a2809 2
	 TAR_IGNORE, FALSE, MAG_GROUPS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 5, TRUE, NULL);
d2812 2
a2813 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEEDE, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 21, FALSE, NULL);
d2816 2
a2817 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED6, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d2820 2
a2821 2
	 TAR_CHAR_ROOM, FALSE, MAG_POINTS | MAG_UNAFFECTS, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d2824 2
a2825 2
	 TAR_IGNORE, FALSE, MAG_GROUPS, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_HEALING, 5, TRUE, NULL);
d2828 2
a2829 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED5, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d2832 2
a2833 2
	 TAR_CHAR_ROOM, FALSE, MAG_POINTS | MAG_UNAFFECTS, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d2836 2
a2837 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 9, FALSE,
d2841 3
a2843 3
	 TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_AFFECTS |
	 MAG_ALTER_OBJS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 17, FALSE,
d2847 2
a2848 2
	 TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	 CAST_SPEED2, 0, SKILL_SPHERE_ENCHANT, 13, FALSE,
d2852 2
a2853 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEEDD, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 17, FALSE, NULL);
d2856 2
a2857 2
	 TAR_STRING, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_DIVIN, 12, FALSE, NULL);
d2860 2
a2861 2
	 TAR_OBJ_WORLD, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_SUMMON,17, FALSE, NULL);
d2864 2
a2865 2
	 TAR_OBJ_WORLD, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 17, TRUE, NULL);
d2868 2
a2869 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	 CAST_SPEEDD, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 5, FALSE, NULL);
d2872 1
a2872 1
	 TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_OBJ_INV, TRUE,
d2874 1
a2874 1
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2878 2
a2879 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_PROT, 5, FALSE,
d2883 2
a2884 2
	 TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_MANUAL, 
	 C1, CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE, NULL);
d2887 2
a2888 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED1, 0, SKILL_SPHERE_PROT, 35, FALSE,
d2892 2
a2893 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEEDD, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 9, FALSE, NULL);
d2896 2
a2897 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 19, FALSE,
d2901 2
a2902 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2906 2
a2907 2
	 TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);
d2910 2
a2911 2
	 TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
	 26, 0, SKILL_SPHERE_HEALING, 5, TRUE, NULL);
d2914 2
a2915 2
	 TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 11, FALSE, NULL);
d2918 2
a2919 2
	 TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 15, FALSE, NULL);
d2922 2
a2923 2
	 TAR_OBJ_ROOM, FALSE, MAG_SUMMONS, C1,
	 20, 0, SKILL_SPHERE_SUMMON, 33, TRUE, NULL);
d2926 2
a2927 2
	 TAR_OBJ_ROOM, FALSE, MAG_SUMMONS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_DEATH, 21, FALSE, NULL);
d2930 2
a2931 2
	 TAR_IGNORE, FALSE, MAG_SUMMONS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 19, FALSE, NULL);
d2934 2
a2935 2
	 TAR_IGNORE, FALSE, MAG_SUMMONS, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_SUMMON, 31, FALSE, NULL);
d2938 2
a2939 2
	 TAR_IGNORE, FALSE, MAG_SUMMONS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 35, FALSE, NULL);
d2942 2
a2943 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
	 1, 0, SKILL_SPHERE_SUMMON, 5, FALSE, NULL);
d2946 3
a2948 3
	 TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_UNAFFECTS
	 | MAG_ALTER_OBJS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d2951 2
a2952 2
	 TAR_IGNORE, TRUE, MAG_AREAS, C1, 15, FIRE_DAMAGE,
	 SKILL_SPHERE_FIRE, 35, FALSE, NULL);
d2956 1
a2956 1
	 18, 0, SKILL_SPHERE_SUMMON, 5, TRUE, NULL);
d2959 2
a2960 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 19, FALSE,
d2964 2
a2965 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_PROT, 5, FALSE,
d2969 2
a2970 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED3, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE, NULL);
d2973 2
a2974 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_PROT, 19, FALSE,
d2978 2
a2979 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 19, FALSE,
d2983 2
a2984 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 25, TRUE,
d2988 2
a2989 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE,
d2993 2
a2994 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 7, FALSE,
d2998 2
a2999 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 11, FALSE,
d3003 2
a3004 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 7, FALSE,
d3008 2
a3009 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 11, FALSE,
d3013 2
a3014 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 21, TRUE,
d3018 2
a3019 2
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_ROOM, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_SUMMON, 21, FALSE,
d3023 2
a3024 2
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED2, 0, SKILL_SPHERE_DIVIN, 9, FALSE,
d3028 2
a3029 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED2, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d3032 2
a3033 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED3, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d3036 2
a3037 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	 CAST_SPEED4, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE, NULL);
d3040 2
a3041 2
	 TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 5, FALSE, NULL);
d3043 3
a3045 3
 spello(SPELL_BONE_ARMOR, 0, 0, 0, POS_STANDING,	
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	 CAST_SPEED1, 0, SKILL_SPHERE_PROT, 12, FALSE,
d3291 3
@


1.114
log
@Made spellcasting into an event.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.113 2008/01/03 12:44:03 jps Exp jps $
d2000 1
a2000 1
  
d2002 1
a2002 1
    sprintf(buf, "SYSERR: attempting assign to illegal spellnum %d", spell);
d2026 1
a2026 2
  
  
d3275 3
@


1.113
log
@Created an array of structs for class information. Renamed CLASS_MAGIC_USER
to CLASS_SORCERER.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.112 2007/12/31 04:43:33 jps Exp jps $
d28 1
d50 1
d1544 3
a1688 100
/* Characters are flagged CASTING and updated here once a second. */
void update_casting(void)
{
  extern struct char_data *character_list;
  struct char_data *ch;
  struct obj_data *obj;
  int i;
  char castbuf[64];
  int tar_invalid = FALSE, found = FALSE;
  
  for (ch = character_list; ch; ch = ch->next) {

    /* I added this to stop lock-ups due to trying to cast a spell
       on ch -1 and ch 0 at start of game wake up Banyal*/
    if (ch != CON_PLAYING && ch->in_room == NOWHERE)
      return;

    if (!CASTING(ch))
      continue;

    /* Stop player casting loops --gurlaek 7/23/1999 */
    if (!IS_SPELL(ch->casting.spell)) {
      STOP_CASTING(ch);
      sprintf(castbuf, "SYSERR: removed casting loop on %s", GET_NAME(ch));
      log(castbuf);
      continue;
    }

    /* Check to make sure target is still valid! Nechtrous */
    if (ch->casting.obj) { /* target is object */
      switch (ch->casting.target_status) {
        case TARGET_IN_ROOM:
          if (ch->casting.obj->in_room != ch->in_room)
            tar_invalid = TRUE;
          break;
        case TARGET_IN_WORLD:
          break;
        case TARGET_IN_INV:
          for (obj = ch->carrying; obj; obj = obj->next_content)
            if (ch->casting.obj == obj)
              found = TRUE;
          if (!found)
            tar_invalid=TRUE;
          break;
        case TARGET_EQUIP:
          for (i = 0; i < NUM_WEARS; ++i)
            if (ch->casting.obj == ch->equipment[i])
              found = TRUE;
          if (!found)
            tar_invalid=TRUE;
            break;
        default:
          log("SYSERR: Error in update_casting() at obj valid check.");
      }
      if (tar_invalid || GET_POS(ch) < POS_STANDING) {
        abort_casting(ch);
        continue;
      }	
    }  
    else if (ch->casting.tch) { /* target is a char */
      switch (ch->casting.target_status) {
        case TARGET_IN_ROOM:
          if (ch->casting.tch->in_room != ch->in_room)
            tar_invalid = TRUE;
          break;
        case TARGET_IN_WORLD:
          break;
        case TARGET_FIGHTING:
          if (!FIGHTING(ch) || ch->casting.tch != FIGHTING(ch))
            tar_invalid = TRUE;
          break;
        case TARGET_SELF:
          break;                  
        default:
          log("SYSERR: Error in update_casting() at char valid check.");
      }
      if (tar_invalid) {
        abort_casting(ch);
        continue;
      }
    }

    /* Is the character done casting? */
    if (ch->casting.casting_time <= 0) { 
      STOP_CASTING(ch);
      complete_spell(ch);      
    }
    else {
      memset(castbuf, 0x0, 64);
      sprintf(castbuf, "Casting: %s ", skill_name(ch->casting.spell));
	      
      for (i = 1; i <= ch->casting.casting_time; i += 2)
        strcat(castbuf, "*");
      strcat(castbuf, "\r\n");
      send_to_char(castbuf, ch);
    }
	  
    ch->casting.casting_time -= 2;
  }
}
d1846 2
d3276 4
@


1.112
log
@Made offensive spells, chants, and songs start fights.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.111 2007/12/31 02:00:57 jps Exp jps $
d27 1
a1943 1
  extern int check_mem_mode(struct char_data *ch);
d1990 1
a1990 1
    if (check_mem_mode(ch) == check_mem_mode(gch)) {
a2068 1
  extern int check_mem_mode(struct char_data *ch);
d2075 1
a2075 1
  if (check_mem_mode(ch) == MEMORIZE) {
d3369 3
@


1.111
log
@Made the general term for spells, skills, chants, and songs 'talent'.
Fixed mskillset to handle all talents.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.110 2007/12/21 04:49:05 jps Exp jps $
a546 1
/* Spell Recognition --gurlaek 7/16/1999 */
d885 5
a1941 1
/* Spell Recognition --gurlaek 7/16/1999 */
d3370 4
@


1.110
log
@Only use the caster list for spells, which take time to complete.
Added code to detect the imminent creation of a circular casting
list and prevent it from happening - and to complain loudly about
it. I don't expect that code to actually detect anything until
someone changes the spellcasting code.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.109 2007/12/19 20:56:23 myc Exp jps $
d653 1
a653 1
int id_skill_spell(char *name, int restrict)
d708 1
a708 1
   return id_skill_spell(name, SKILL);
d713 1
a713 1
   return id_skill_spell(name, SPELL);
d718 1
a718 1
   return id_skill_spell(name, CHANT);
d723 1
a723 1
   return id_skill_spell(name, SONG);
d3367 7
@


1.109
log
@Making id_skill_spell skip initial spaces.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.108 2007/11/25 00:04:59 jps Exp myc $
d1426 1
a1426 1
  }	
d1489 10
a1498 2
  targets_remember_caster(ch);
  /* memory leak. need to free ch->casting.misc first... -321 */
d3274 2
d3277 11
d3293 7
d3367 3
@


1.108
log
@Spell targets will keep close track of whoever's casting a spell
at them.  This allows spells to be safely aborted if the target
is removed from the game before the spell is completed.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.107 2007/11/18 16:51:55 myc Exp jps $
d659 2
d3339 5
@


1.107
log
@Fixed bug with mobcast not setting casting.misc.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.106 2007/10/27 21:49:34 myc Exp myc $
d1487 1
d1772 6
d1912 1
d3259 76
d3337 3
@


1.106
log
@Fixed a bug in mass invis
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.105 2007/10/27 18:06:36 myc Exp myc $
d1305 1
a1305 1
  act("$n begins chanting in a deep voice.", TRUE, ch, 0, 0, TO_ROOM);
d1500 1
a1500 1
      WAIT_STATE(ch, PULSE_VIOLENCE * 2);
d1904 3
d3253 3
@


1.105
log
@Fix to chant for target checking.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.104 2007/10/25 20:40:24 myc Exp myc $
d2563 1
a2563 1
	 TAR_IGNORE, FALSE, MAG_BULK_OBJS, C1,
d3250 3
@


1.104
log
@When fumbling/dropped weapon when disarming, it will say so, instead of
DISARMUT!
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.103 2007/10/13 05:07:24 myc Exp myc $
d1292 2
d1533 4
a1536 1
    send_to_char("You can only cast this spell upon yourself!\r\n", ch);
d1540 4
a1543 1
    send_to_char("You cannot cast this spell upon yourself!\r\n", ch);
d1551 4
a1554 1
    send_to_char("This area is too enclosed to cast that spell!\r\n", ch);
d1558 4
a1561 1
    send_to_char("You cannot cast this spell during the day!\r\n", ch);
d1565 4
a1568 1
    send_to_char("You can only cast this spell during the day!\r\n", ch);
d3250 4
@


1.103
log
@Added new monk chants.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.102 2007/10/11 20:14:48 myc Exp myc $
d347 2
a348 2
  "disarm", /* fumbling */
  "disarm", /* dropped */
d3233 3
@


1.102
log
@Changed skill defines to support chants and songs as skills, but
slightly distinguished from spells and skills.  TOP_SKILL is the
old MAX_SKILLS.
Implemented monk chants as magic spells.  Updated id_skill_spell
to support chants and songs.  Modified do_cast and other magic
functions to support monk chants.  The benefit here is they share
target-finding code, as well as stuff like mag_affects.
Removed the spell wearoff messages array from constants.c, so
each spell's wearoff message is now defined in its spello call.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.101 2007/10/02 02:52:27 myc Exp myc $
d427 6
a432 2
  "!UNUSED!",	/* 605 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 610 */
d808 1
a808 1
    mag_masses(skill, caster, spellnum, savetype);
d810 3
a845 1
    case SPELL_MASS_INVIS:	MANUAL_SPELL(spell_mass_invis); break;
d880 2
d2546 1
a2546 1
	 TAR_IGNORE, FALSE, MAG_MANUAL, C1,
d3210 14
d3233 11
@


1.101
log
@Energy drain is now a manual spell.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.100 2007/09/28 20:49:35 myc Exp myc $
d420 8
a427 2
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "regeneration",	/* 600 */
  "battle hymn", "war cry", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 605 */
d649 1
a649 1
int id_skill_spell(char *name, int spellonly)
d658 4
a661 1
     if (spellonly && !IS_SPELL(index))
d702 1
a702 1
   return id_skill_spell(name, 0);
d707 11
a717 1
   return id_skill_spell(name, 1);
d734 4
a737 4
  if (!IS_SPELL(spellnum))
     return FALSE;
  
  if (ROOM_FLAGGED(caster->in_room, ROOM_NOMAGIC)) {
d745 11
a755 4
    send_to_char("A flash of white light fills the room, dispelling your "
                 "violent magic!\r\n", caster);
    act("White light from no particular source suddenly fills the room, "
        "then vanishes.", FALSE, caster, 0, 0, TO_ROOM);
d759 1
a759 1
  if (cvict && evades_spell(caster, cvict, spellnum))
d873 1
d1253 64
d1349 21
d1373 6
a1378 1
    send_to_char("Cast what where?\r\n", ch);
d1382 20
a1401 5
  spellnum = find_spell_num(arg);
  
  if (!IS_SPELL(spellnum)) {
    send_to_char("Cast what?!?\r\n", ch);
    return;
d1405 8
a1412 7
  if (GET_LEVEL(ch) < SINFO.min_level[(int) GET_CLASS(ch)]) {
    send_to_char("You do not know that spell!\r\n", ch);
    return;
  }	
  
  if (GET_SKILL(ch, spellnum) == 0) {
    send_to_char("You are unfamiliar with that spell.\r\n", ch);
d1417 1
a1417 1
  if (!IS_NPC(ch) && GET_LEVEL(ch) < LVL_IMMORT &&
d1436 8
a1443 2
    if (*arg)
      send_to_char("Cannot find the target of your spell!\r\n", ch);
d1445 10
a1454 4
      sprintf(buf, "Upon %s should the spell be cast?\r\n",
              IS_SET(SINFO.targets, TAR_OBJ_ROOM | TAR_OBJ_INV |
                 TAR_OBJ_WORLD | TAR_STRING) ? "what" : "whom");
      send_to_char(buf, ch);
a1473 4
  if (IS_NPC(ch))
    SET_BIT(MOB_FLAGS(ch), MOB_CASTING);
  else
    SET_BIT(PLR_FLAGS(ch), PLR_CASTING);
d1484 10
a1493 4
  /* Chance to quick chant. */
  if (number(1, 102) < GET_SKILL(ch, SKILL_QUICK_CHANT))
    ch->casting.casting_time /= 2;
  improve_skill(ch, SKILL_QUICK_CHANT);   
d1495 6
a1500 3
  /* Show chant messages. */
  start_chant(ch);
  WAIT_STATE(ch, ch->casting.casting_time * PULSE_VIOLENCE / 2);
d1502 15
a1516 3
  if (GET_LEVEL(ch) >= LVL_GOD) {
    STOP_CASTING(ch);
    complete_spell(ch);
d2083 1
a2083 1
	    int damage_type, int sphere, int pages, int quest)
d2101 1
d2129 1
d2132 7
a2138 1
#define skillo(skill) spello(skill, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
d2175 2
d2199 1
a2199 1
	 CAST_SPEEDD, COLD_DAMAGE, SKILL_SPHERE_WATER, 7, FALSE);
d2203 2
a2204 1
	 CAST_SPEED3, 0, SKILL_SPHERE_PROT, 13, FALSE);
d2208 1
a2208 1
	 CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 17, FALSE);
d2212 1
a2212 1
	 CAST_SPEED4, COLD_DAMAGE, SKILL_SPHERE_AIR, 21, FALSE);
d2216 1
a2216 1
	 CAST_SPEEDE, COLD_DAMAGE, SKILL_SPHERE_WATER, 25, FALSE);
d2220 2
a2221 1
	 18, COLD_DAMAGE, SKILL_SPHERE_WATER, 27, TRUE);
d2225 1
a2225 1
	 CAST_SPEEDF, COLD_DAMAGE, SKILL_SPHERE_WATER, 29, FALSE);
d2229 1
a2229 1
	 18, COLD_DAMAGE, SKILL_SPHERE_WATER, 35, TRUE);
d2233 2
a2234 1
	 CAST_SPEED7, 0, SKILL_SPHERE_PROT, 35, TRUE);
d2238 2
a2239 1
	 CAST_SPEED7, 0, SKILL_SPHERE_PROT, 29, FALSE);
d2243 2
a2244 1
	 CAST_SPEED7, 0, SKILL_SPHERE_WATER, 27, FALSE);
d2248 1
a2248 1
	 CAST_SPEED3, 0, SKILL_SPHERE_WATER, 11, FALSE);
d2252 1
a2252 1
	 CAST_SPEED6, 0, SKILL_SPHERE_WATER, 23, FALSE);
d2256 1
a2256 1
	 CAST_SPEEDD, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 9, FALSE);
d2260 2
a2261 1
	 CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 7, FALSE);
d2265 2
a2266 1
	 CAST_SPEED3, 0, SKILL_SPHERE_FIRE, 11, FALSE);
d2270 2
a2271 1
	 CAST_SPEED4, 0, SKILL_SPHERE_FIRE, 17, FALSE);
d2275 1
a2275 1
	 CAST_SPEED4, 0, SKILL_SPHERE_SUMMON, 19, FALSE);
d2279 1
a2279 1
	 CAST_SPEEDE, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 21, FALSE);
d2283 1
a2283 1
	 CAST_SPEED6, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 25, FALSE);
d2287 1
a2287 1
	 C1, CAST_SPEEDE, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 29, FALSE);
d2291 2
a2292 1
	 CAST_SPEED6, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 25, FALSE);
d2296 1
a2296 1
	 CAST_SPEEDF, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 25, FALSE);
d2300 1
a2300 1
	 16, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 31, TRUE);
d2304 1
a2304 1
	 CAST_SPEED7, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 35, FALSE);
d2308 2
a2309 1
	 CAST_SPEED7, 0, SKILL_SPHERE_PROT, 29, FALSE);
d2313 1
a2313 1
	 CAST_SPEEDF, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 23, FALSE);
d2317 2
a2318 1
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2322 2
a2323 1
	 C1, CAST_SPEED6, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE);
d2327 1
a2327 1
	 CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 5, FALSE);
d2331 2
a2332 1
	 16, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2336 1
a2336 1
	 CAST_SPEED4, 0, SKILL_SPHERE_HEALING, 5, FALSE);
d2340 2
a2341 1
	 CAST_SPEED6, 0, SKILL_SPHERE_PROT, 5, FALSE);
d2345 2
a2346 1
	 CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2350 2
a2351 1
	 CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2355 1
a2355 1
	 CAST_SPEED7, 0, SKILL_SPHERE_HEALING, 5, FALSE);
d2359 2
a2360 1
	 CAST_SPEED5, 0, SKILL_SPHERE_SUMMON, 25, FALSE);
d2364 1
a2364 1
	 CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 5, FALSE);
d2368 2
a2369 1
	 CAST_SPEED2, 0, SKILL_SPHERE_PROT, 17, FALSE);
d2373 2
a2374 1
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2378 1
a2378 1
	 CAST_SPEED3, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 5, FALSE);
d2382 1
a2382 1
	 18, 0, SKILL_SPHERE_SUMMON, 5, TRUE);
d2386 1
a2386 1
	 CAST_SPEED5, 0, SKILL_SPHERE_HEALING, 5, FALSE);
d2390 2
a2391 1
	 CAST_SPEED2, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2395 2
a2396 1
	 CAST_SPEED1, 0, SKILL_SPHERE_PROT, 5, FALSE);
d2400 1
a2400 1
	 CAST_SPEED2, 0, SKILL_SPHERE_GENERIC, 5, FALSE);
d2404 1
a2404 1
	 CAST_SPEED2, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE);
d2408 2
a2409 1
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2413 2
a2414 1
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2418 2
a2419 1
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2423 1
a2423 1
	 16, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, TRUE);
d2427 1
a2427 1
	 CAST_SPEED4, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE);
d2431 2
a2432 1
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2436 2
a2437 1
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2441 1
a2441 1
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2445 1
a2445 1
	 16, 0, SKILL_SPHERE_SUMMON, 5, TRUE);
d2449 1
a2449 1
	 CAST_SPEED7, 0, SKILL_SPHERE_GENERIC, 5, TRUE);
d2453 2
a2454 1
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2458 1
a2458 1
	 C1, CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 5, TRUE);
d2462 1
a2462 1
	 CAST_SPEED5, 0, SKILL_SPHERE_DIVIN, 5, FALSE);
d2466 2
a2467 1
	 CAST_SPEED5, 0, SKILL_SPHERE_DIVIN, 5, FALSE);
d2471 1
a2471 1
	 CAST_SPEED6, 0, SKILL_SPHERE_SUMMON, 5, FALSE); 
d2475 1
a2475 1
	 CAST_SPEED4, 0, SKILL_SPHERE_SUMMON, 5, FALSE);
d2479 1
a2479 1
	 18, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE);
d2483 1
a2483 1
	 CAST_SPEED5, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE);
d2487 1
a2487 1
	 CAST_SPEED5, ALIGN_DAMAGE, SKILL_SPHERE_GENERIC, 5, FALSE);
d2491 1
a2491 1
	 CAST_SPEED3, ALIGN_DAMAGE, SKILL_SPHERE_GENERIC, 5, FALSE);
d2495 2
a2496 1
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2500 2
a2501 1
	 CAST_SPEED4, 0, SKILL_SPHERE_PROT, 5, FALSE);
d2505 2
a2506 1
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2510 1
a2510 1
	 CAST_SPEED1, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE);
d2514 1
a2514 1
	 CAST_SPEED1, AIR_DAMAGE, SKILL_SPHERE_AIR, 5, FALSE);
d2518 1
a2518 1
	 CAST_SPEED1, COLD_DAMAGE, SKILL_SPHERE_WATER, 5, FALSE);
d2522 1
a2522 1
	 CAST_SPEED1, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 5, FALSE);
d2526 1
a2526 1
	 CAST_SPEED1, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE);
d2530 2
a2531 1
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2535 1
a2535 1
	 CAST_SPEED5, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 27, FALSE);
d2539 1
a2539 1
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 23, FALSE);
d2543 1
a2543 1
	 20, 0, SKILL_SPHERE_SUMMON, 35, TRUE);
d2547 1
a2547 1
	 C1, CAST_SPEEDF, GENERIC_DAMAGE, SKILL_SPHERE_FIRE, 27, FALSE);
d2551 2
a2552 1
	 2, 0, SKILL_SPHERE_GENERIC, 21, FALSE);
d2556 2
a2557 1
	 CAST_SPEED4, 0, SKILL_SPHERE_PROT, 23, FALSE);
d2561 2
a2562 1
	 CAST_SPEED7, 0, SKILL_SPHERE_PROT, 35, TRUE);
d2566 2
a2567 1
	 CAST_SPEED3, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 17, FALSE);
d2571 2
a2572 1
	 CAST_SPEED3, COLD_DAMAGE, SKILL_SPHERE_WATER, 17, FALSE);
d2576 2
a2577 1
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 21, FALSE);
d2581 1
a2581 1
	 CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 11, FALSE);
d2585 2
a2586 1
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 21, FALSE);
d2590 2
a2591 1
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 13, FALSE);
d2595 1
a2595 1
	 16, 0, SKILL_SPHERE_DIVIN, 17, TRUE);
d2599 1
a2599 1
	 CAST_SPEED1, 0, SKILL_SPHERE_SUMMON, 5, FALSE);
d2604 1
a2604 1
         C1, CAST_SPEED4, 0, SKILL_SPHERE_GENERIC, 15, FALSE);
d2608 1
a2608 1
	 1, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE);
d2612 1
a2612 1
	 1, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE);
d2616 2
a2617 1
	 CAST_SPEED2, 0, SKILL_SPHERE_PROT, 5, FALSE);
d2621 2
a2622 1
	 CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 29, FALSE);
d2626 2
a2627 1
	 CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 29, FALSE);
d2631 2
a2632 1
	 C1, CAST_SPEED2, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2637 2
a2638 1
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2642 2
a2643 1
	 C1, CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2647 1
a2647 1
	 CAST_SPEED3, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE);
d2651 2
a2652 1
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 15, FALSE);
d2656 1
a2656 1
	 CAST_SPEEDD, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE);
d2660 1
a2660 1
	 CAST_SPEEDE, COLD_DAMAGE, SKILL_SPHERE_WATER, 19, FALSE);
d2664 1
a2664 1
	 CAST_SPEEDE, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 25, FALSE);
d2668 1
a2668 1
	 CAST_SPEED7, EARTH_DAMAGE, SKILL_SPHERE_EARTH, 37, TRUE);
d2672 2
a2673 1
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 29, FALSE);
d2677 1
a2677 1
	 16, COLD_DAMAGE, SKILL_SPHERE_WATER, 31, TRUE);
d2681 1
a2681 1
	 CAST_SPEED5, COLD_DAMAGE, SKILL_SPHERE_WATER, 23, FALSE);
d2685 1
a2685 1
	 CAST_SPEED4, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 5, FALSE);
d2689 2
a2690 1
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 35, TRUE);
d2694 1
a2694 1
	 CAST_SPEED6, 0, SKILL_SPHERE_SUMMON, 5, TRUE);
d2698 2
a2699 1
	 C1, CAST_SPEEDD, COLD_DAMAGE, SKILL_SPHERE_WATER, 7, FALSE);
d2703 1
a2703 1
	 CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 35, FALSE);
d2707 2
a2708 1
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2713 3
a2715 1
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2719 2
a2720 1
	 CAST_SPEED3, 0, 0, 7, FALSE);
d2724 2
a2725 1
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 35, FALSE);
d2729 1
a2729 1
	 CAST_SPEED5, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 21, FALSE);
d2733 1
a2733 1
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2737 1
a2737 1
	 CAST_SPEED1, 0, SKILL_SPHERE_SUMMON, 5, FALSE);
d2741 1
a2741 1
	 CAST_SPEED1, 0, SKILL_SPHERE_SUMMON, 5, FALSE);
d2745 1
a2745 1
	 CAST_SPEED2, 0, SKILL_SPHERE_HEALING, 5, FALSE);
d2749 1
a2749 1
	 CAST_SPEED4, 0, SKILL_SPHERE_HEALING, 15, FALSE);
d2753 1
a2753 1
	 CAST_SPEED3, 0, SKILL_SPHERE_HEALING, 5, FALSE);
d2757 1
a2757 1
	 CAST_SPEED2, 0, SKILL_SPHERE_HEALING, 9, FALSE);
d2761 1
a2761 1
	 CAST_SPEED2, 0, SKILL_SPHERE_HEALING, 5, FALSE);
d2765 1
a2765 1
	 CAST_SPEED3, 0, SKILL_SPHERE_HEALING, 5, FALSE);
d2769 1
a2769 1
	 CAST_SPEED4, 0, SKILL_SPHERE_HEALING, 5, FALSE);
d2774 2
a2775 1
	 SKILL_SPHERE_ENCHANT, 5, FALSE);
d2779 2
a2780 1
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 9, FALSE);
d2784 2
a2785 1
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 19, FALSE);
d2789 2
a2790 1
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 5, FALSE);
d2794 2
a2795 1
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 17, FALSE);
d2799 1
a2799 1
	 CAST_SPEED1, 0, SKILL_SPHERE_DIVIN, 13, FALSE);
d2803 1
a2803 1
	 CAST_SPEED3, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE);
d2807 1
a2807 1
	 CAST_SPEED5, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE);
d2811 1
a2811 1
	 CAST_SPEED5, EARTH_DAMAGE, SKILL_SPHERE_EARTH, 5, FALSE);
d2815 1
a2815 1
	 CAST_SPEED6, EARTH_DAMAGE, SKILL_SPHERE_EARTH, 35, FALSE);
d2819 1
a2819 1
	 CAST_SPEED7, EARTH_DAMAGE, SKILL_SPHERE_EARTH, 35, TRUE);
d2823 1
a2823 1
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 23, FALSE);
d2827 1
a2827 1
	 CAST_SPEED5, DEATH_DAMAGE, SKILL_SPHERE_DEATH, 19, FALSE);
d2831 1
a2831 1
	 CAST_SPEED1, DEATH_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE);
d2835 1
a2835 1
	 CAST_SPEED5, 0, SKILL_SPHERE_PROT, 9, TRUE);
d2839 1
a2839 1
	 CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 5, TRUE);
d2843 1
a2843 1
	 CAST_SPEEDE, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 21, FALSE);
d2847 1
a2847 1
	 CAST_SPEED6, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE);
d2851 1
a2851 1
	 CAST_SPEED6, 0, SKILL_SPHERE_HEALING, 5, FALSE);
d2855 1
a2855 1
	 CAST_SPEED6, 0, SKILL_SPHERE_HEALING, 5, TRUE);
d2859 1
a2859 1
	 CAST_SPEED5, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE);
d2863 1
a2863 1
	 CAST_SPEED5, 0, SKILL_SPHERE_HEALING, 5, FALSE);
d2867 2
a2868 1
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 9, FALSE);
d2873 2
a2874 1
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 17, FALSE);
d2878 2
a2879 1
	 CAST_SPEED2, 0, SKILL_SPHERE_ENCHANT, 13, FALSE);
d2883 1
a2883 1
	 CAST_SPEEDD, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 17, FALSE);
d2887 1
a2887 1
	 CAST_SPEED4, 0, SKILL_SPHERE_DIVIN, 12, FALSE);
d2891 1
a2891 1
	 CAST_SPEED6, 0, SKILL_SPHERE_SUMMON,17, FALSE);
d2895 1
a2895 1
	 CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 17, TRUE);
d2899 1
a2899 1
	 CAST_SPEEDD, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 5, FALSE);
d2904 2
a2905 1
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2909 2
a2910 1
	 CAST_SPEED3, 0, SKILL_SPHERE_PROT, 5, FALSE);
d2914 1
a2914 1
	 C1, CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2918 2
a2919 1
	 CAST_SPEED1, 0, SKILL_SPHERE_PROT, 35, FALSE);
d2923 1
a2923 1
	 CAST_SPEEDD, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 9, FALSE);
d2927 2
a2928 1
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 19, FALSE);
d2932 2
a2933 1
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2937 1
a2937 1
	 CAST_SPEED5, 0, SKILL_SPHERE_SUMMON, 5, FALSE);
d2941 1
a2941 1
	 26, 0, SKILL_SPHERE_HEALING, 5, TRUE);
d2945 1
a2945 1
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 11, FALSE);
d2949 1
a2949 1
	 CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 15, FALSE);
d2953 1
a2953 1
	 20, 0, SKILL_SPHERE_SUMMON, 33, TRUE);
d2957 1
a2957 1
	 CAST_SPEED3, 0, SKILL_SPHERE_DEATH, 21, FALSE);
d2961 1
a2961 1
	 CAST_SPEED3, 0, SKILL_SPHERE_SUMMON, 19, FALSE);
d2965 1
a2965 1
	 CAST_SPEED5, 0, SKILL_SPHERE_SUMMON, 31, FALSE);
d2969 1
a2969 1
	 CAST_SPEED7, 0, SKILL_SPHERE_SUMMON, 35, FALSE);
d2973 1
a2973 1
	 1, 0, SKILL_SPHERE_SUMMON, 5, FALSE);
d2978 1
a2978 1
	 CAST_SPEED3, 0, SKILL_SPHERE_HEALING, 5, FALSE);
d2982 1
a2982 1
	 SKILL_SPHERE_FIRE, 35, FALSE);
d2986 1
a2986 1
	 18, 0, SKILL_SPHERE_SUMMON, 5, TRUE);
d2990 2
a2991 1
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 19, FALSE);
d2995 2
a2996 1
	 CAST_SPEED3, 0, SKILL_SPHERE_PROT, 5, FALSE);
d3000 1
a3000 1
	 CAST_SPEED3, ALIGN_DAMAGE, SKILL_SPHERE_DEATH, 5, FALSE);
d3004 2
a3005 1
	 CAST_SPEED3, 0, SKILL_SPHERE_PROT, 19, FALSE);
d3009 2
a3010 1
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 19, FALSE);
d3014 2
a3015 1
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 25, TRUE);
d3019 2
a3020 1
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d3024 2
a3025 1
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 7, FALSE);
d3029 2
a3030 1
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 11, FALSE);
d3034 2
a3035 1
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 7, FALSE);
d3039 2
a3040 1
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 11, FALSE);
d3044 2
a3045 1
	 CAST_SPEED7, 0, SKILL_SPHERE_ENCHANT, 21, TRUE);
d3049 2
a3050 1
	 CAST_SPEED5, 0, SKILL_SPHERE_SUMMON, 21, FALSE);
d3054 2
a3055 1
	 CAST_SPEED2, 0, SKILL_SPHERE_DIVIN, 9, FALSE);
d3059 1
a3059 1
	 CAST_SPEED2, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE); 
d3063 1
a3063 1
	 CAST_SPEED3, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE); 
d3067 1
a3067 1
	 CAST_SPEED4, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 5, FALSE); 
d3071 1
a3071 1
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 5, FALSE);
d3075 2
a3076 1
	 CAST_SPEED1, 0, SKILL_SPHERE_PROT, 12, FALSE);
d3080 1
a3080 1
         CAST_SPEED4, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 12, TRUE);
d3084 2
a3085 1
         CAST_SPEED4, HEALING_DAMAGE, SKILL_SPHERE_GENERIC, 15, FALSE);
d3089 1
a3089 1
         CAST_SPEED2, 0, SKILL_SPHERE_ENCHANT, 8, FALSE);
d3093 2
a3094 1
         CAST_SPEED2, 0, SKILL_SPHERE_ENCHANT, 8, FALSE);
d3098 1
a3098 1
         CAST_SPEED4, 0, SKILL_SPHERE_WATER, 10, FALSE);
d3192 15
d3211 3
@


1.100
log
@do_cast now uses delimited_arg() instead of parsing the argument
string itself.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.99 2007/09/20 21:20:43 myc Exp myc $
d846 1
a846 1

d2594 1
a2594 1
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
d2940 4
@


1.99
log
@Hide points and perception are in.  Natures embrace and concealment
have changed in nature.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.98 2007/09/15 15:36:48 myc Exp myc $
d1239 1
a1239 1
  char *spellname, *targetname, *misc = NULL;
d1258 1
a1258 3
  /* Skip to the first single-quote-delimited token. */
  while (*argument && *argument != '\'')
    ++argument;
d1260 1
a1260 2
  /* No single-quotes were found. */
  if (!*argument) {
d1265 1
a1265 21
  /* Spell name starts right after the first single quote. */
  spellname = ++argument;
  
  /* Skip until we find another single quote. */
  while (*argument && *argument != '\'')
    ++argument;

  if (!*argument) {
    send_to_char("Spell names must be enclosed in the Holy Magic Symbols: '\r\n", ch);
    return;
  }

  /*
   * spellname points to the start of the spell name, and now we're 
   * terminating it where the last single quote was.
   */
  *argument = '\0';
  
  targetname = ++argument;
  
  spellnum = find_spell_num(spellname);
d1291 1
a1291 1
  if (*targetname) {
d1293 3
a1295 3
    skip_spaces(&targetname);
    misc = str_dup(targetname);
    one_argument(strcpy(arg, targetname), targetname);
d1297 1
d1299 1
a1299 1
  target = find_spell_target(spellnum, ch, targetname,
d1303 1
a1303 1
    if (*targetname)
d2940 4
@


1.98
log
@Natures embrace now sets camouflage bit, which lets you be hidden as
long as you are outside, so it can only be cast outside.  Invigorate
is now a group spell.  Farsee is now divination instead of enchantment.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.97 2007/09/15 05:03:46 myc Exp myc $
d212 1
a212 1
  "nature embrace",      /* 150 */ 
d1339 1
a1339 1
        affected_by_spell(ch, SPELL_CONCEALMENT))
d1341 3
a1343 1
    REMOVE_BIT(AFF_FLAGS(ch), AFF_INVISIBLE | AFF_HIDE);
d1729 1
a1729 1
        affected_by_spell(ch, SPELL_CONCEALMENT))
d1731 3
a1733 1
    REMOVE_BIT(AFF_FLAGS(ch), AFF_INVISIBLE | AFF_HIDE);
d2180 1
a2180 1
	 TAR_CHAR_ROOM | TAR_SELF_ONLY | TAR_OUTDOORS, FALSE, MAG_AFFECTS, C1,
d2665 1
a2665 1
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
d2962 5
@


1.97
log
@Made poison spell castable in combat.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.96 2007/09/11 16:34:24 myc Exp myc $
a829 1
    case SPELL_NATURES_EMBRACE:	MANUAL_SPELL(spell_natures_embrace);break;
d2176 1
a2176 1
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
d2184 1
a2184 1
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_POINTS, C1,
d2820 1
a2820 1
	 CAST_SPEED2, 0, SKILL_SPHERE_ENCHANT, 9, FALSE);
d2958 3
@


1.96
log
@Added peck, claw, and electrify skills for use by druid shapechanges.
end_chant will no longer send messages to you when you are in hedit
or writing or whatever.
Changed wall of ice, wall of stone, and minor creation to TAR_STRING
instead of TAR_IGNORE.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.95 2007/09/09 01:20:14 jps Exp myc $
d2685 3
a2687 3
  spello(SPELL_POISON, 50, 20, 3, POS_STANDING,
	 TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_OBJ_INV, TRUE, MAG_AFFECTS |
	 MAG_ALTER_OBJS, C1,
d2959 7
@


1.95
log
@The result of casting a spell is no longer just TRUE or FALSE,
but two possible bits combined: charge and/or improve. If
CAST_RESULT_CHARGE is returned, the spell was used and the caster
will be charged (have the spell erased from memory).  If
CAST_RESULT_IMPROVE is returned, the caster may improve in that
sphere of magic.
At the same time, casters will now correctly be charged for
spells that are cast on objects.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.94 2007/09/07 01:37:47 jps Exp jps $
d394 4
a397 2
  "!UNUSED!", "!UNUSED!",	/* 480 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 485 */
d553 1
a553 1
    if (ch == gch || !AWAKE(gch))
d2065 1
a2065 1
	 TAR_IGNORE, FALSE, MAG_MANUAL, C1,
d2189 1
a2189 1
	 TAR_IGNORE, FALSE, MAG_MANUAL, C1,
d2405 1
a2405 1
	 TAR_IGNORE, FALSE, MAG_MANUAL, C1,
d2952 3
d2959 10
@


1.94
log
@Shorten the casting times for single-target sorcerer attack spells.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.93 2007/09/04 06:49:19 myc Exp jps $
d705 2
d754 1
a754 1
    imp_skill += mag_damage(skill, caster, cvict, spellnum, savetype);
d761 1
a761 1
    imp_skill += mag_affects(skill, caster, cvict, spellnum, savetype);
d764 1
a764 1
    imp_skill += mag_unaffects(skill, caster, cvict, spellnum, savetype);
d767 1
a767 1
    imp_skill += mag_points(skill, caster, cvict, spellnum, savetype);
d770 1
a770 1
    imp_skill += mag_alter_objs(skill, caster, ovict, spellnum, savetype);
d773 1
a773 1
    imp_skill += mag_groups(skill, caster, spellnum, savetype);
d779 1
a779 1
    imp_skill += mag_areas(skill, caster, spellnum, savetype);
d782 1
a782 1
    imp_skill += mag_summons(skill, caster, ovict, spellnum, savetype);
d785 1
a785 1
    imp_skill += mag_creations(skill, caster, spellnum);
d788 1
a788 1
    imp_skill += mag_room(skill, caster, spellnum);
d1149 2
d1157 1
a1157 1
   int sphere;
d1218 2
a1219 1
   if (call_magic(ch, tch, tobj, spellnum, GET_SKILL(ch, sphere), CAST_SPELL)) {
d1221 1
a1221 4
     return 1;
   }

   return 0;
d1634 3
a1636 2
      /* cast_spell returns 1 on success */
      if (cast_spell(ch, ch->casting.tch, ch->casting.obj, ch->casting.spell)) { 
d2954 3
@


1.93
log
@Added new TAR_OUTDOORS, TAR_NIGHT_ONLY, and TAR_DAY_ONLY checks for
spells to limit when and where they may be cast.  This replaces checks
within each spell; the checks are made before the caster's spell memory
is charged.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.92 2007/08/30 08:51:25 jps Exp myc $
a808 1
    case SPELL_DISINTEGRATE:	MANUAL_SPELL(spell_disintegrate); break;
d2041 1
a2041 1
	 CAST_SPEED1, COLD_DAMAGE, SKILL_SPHERE_WATER, 7, FALSE);
d2057 1
a2057 1
	 CAST_SPEED4, COLD_DAMAGE, SKILL_SPHERE_WATER, 25, FALSE);
d2065 1
a2065 1
	 CAST_SPEED7, COLD_DAMAGE, SKILL_SPHERE_WATER, 29, FALSE);
d2093 1
a2093 1
	 CAST_SPEED2, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 9, FALSE);
d2113 1
a2113 1
	 CAST_SPEED4, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 21, FALSE);
d2121 1
a2121 1
	 C1, CAST_SPEED5, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 29, FALSE);
d2129 1
a2129 1
	 CAST_SPEED5, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 25, FALSE);
d2145 1
a2145 1
	 CAST_SPEED6, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 23, FALSE);
d2357 1
a2357 1
	 C1, CAST_SPEED6, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 27, FALSE);
d2451 1
a2451 1
	 CAST_SPEED2, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 5, FALSE);
d2455 1
a2455 1
	 CAST_SPEED4, COLD_DAMAGE, SKILL_SPHERE_WATER, 19, FALSE);
d2459 1
a2459 1
	 CAST_SPEED5, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 25, FALSE);
d2491 1
a2491 1
	 C1, CAST_SPEED2, COLD_DAMAGE, SKILL_SPHERE_WATER, 7, FALSE);
d2625 1
a2625 1
	 CAST_SPEED5, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 21, FALSE);
d2662 1
a2662 1
	 CAST_SPEED3, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 17, FALSE);
d2678 1
a2678 1
	 CAST_SPEED2, GENERIC_DAMAGE, SKILL_SPHERE_GENERIC, 5, FALSE);
d2699 1
a2699 1
	 CAST_SPEED2, SHOCK_DAMAGE, SKILL_SPHERE_AIR, 9, FALSE);
d2951 6
@


1.92
log
@Generalize spell evasion (globe, elemental immunity, immortal) to area spells.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.91 2007/08/27 21:18:00 myc Exp jps $
d42 2
d843 1
a843 1
    case SPELL_MOONBEAM:  MANUAL_SPELL(spell_moonbeam); break;
d941 2
a990 4
                  if (SINFO.targets & TAR_SELF_ONLY && tch != ch) {
                     send_to_char("You can only cast this spell upon yourself.\r\n", ch);
                     return;
                  }
a1001 4
               if (SINFO.targets & TAR_SELF_ONLY) {
                  send_to_char("You can only cast this spell upon yourself.\r\n", ch);
                  return;
               }
d1020 4
d1187 1
a1187 6
   if ((tch != ch) && IS_SET(SINFO.targets, TAR_SELF_ONLY)) {
      send_to_char("You can only cast this spell upon yourself!\r\n", ch);
      return 0;
   }
   if ((tch == ch) && IS_SET(SINFO.targets, TAR_NOT_SELF)) {
      send_to_char("You cannot cast this spell upon yourself!\r\n", ch);
a1188 1
   }
d1376 29
d2149 1
a2149 1
	 TAR_IGNORE, FALSE, MAG_ROOM, C1,
d2169 1
a2169 1
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
d2177 1
a2177 1
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, FALSE, MAG_AFFECTS, C1,
d2201 1
a2201 1
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
d2479 1
a2479 1
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
d2520 1
a2520 1
	 TAR_IGNORE, FALSE, MAG_MANUAL, C1,
d2593 1
a2593 1
	 TAR_IGNORE, TRUE, MAG_AREAS, C1,
d2856 1
a2856 1
         TAR_IGNORE, TRUE, MAG_MANUAL, C1,
d2952 3
@


1.91
log
@You can now queue up commands while casting as well as abort midcast.
Casting commands such as look and abort are caught and interpreted
before the input is normally queued up by the game loop.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.90 2007/08/26 22:50:58 jps Exp myc $
a29 2
#define SINFO spell_info[spellnum]

d45 1
d707 1
a707 1
  int savetype, i, min_spell_level = NUM_SPELL_CIRCLES, imp_skill = 0;
d727 2
a728 63
  /*
   * If the victim has minor or major globe, and this spell cast is 
   * offensive, it might be blocked.
   */
  if (cvict && SINFO.violent &&
      AFF2_FLAGGED(cvict, AFF2_MINOR_GLOBE | AFF2_MAJOR_GLOBE) &&
      spellnum != SPELL_DISPEL_MAGIC) {

    /* Find the minimum spell circle for the spell being cast right now. */
    for (i = 0; i < NUM_CLASSES; ++i)
      if (SINFO.min_circle[i] < 10)
        min_spell_level = MIN(min_spell_level, SINFO.min_circle[i]);

    /* Minor globe blocks circle 3 and below.  Major globe blocks 6 and down. */
    if ((AFF2_FLAGGED(cvict, AFF2_MINOR_GLOBE) && min_spell_level <= 3) ||
        (AFF2_FLAGGED(cvict, AFF2_MAJOR_GLOBE) && min_spell_level <= 6)) {
      act("&1&bThe shimmering globe around your body flares as the spell flows around it.&0", FALSE, caster, 0, cvict, TO_VICT);
      act("&1&bThe shimmering globe around $N&1&b's body flares as your spell flows around it.&0", FALSE, caster, 0, cvict, TO_CHAR);
      act("&1&bThe shimmering globe around $N&1&b's body flares as $n&1&b's spell flows around it.&0", FALSE, caster, 0, cvict, TO_NOTVICT);
      return FALSE;
    }
  }   

  /* Elemental immunity: nothing bad happens to ya */
  /* This is checked here, rather than in mag_damage(), so that immunity will
   * also block effects. For example, !HEAT will prevent you from receiving
   * the strength drain of "chill touch". But mere PROT_HEAT will not. */
  if (cvict && immune_from_spell(cvict, spellnum)) {
    act("&6$n's&6 spell has no effect on $N.&0", FALSE, caster, 0, cvict, TO_NOTVICT);
    act("&6Your spell has no effect on $N!&0", FALSE, caster, 0, cvict, TO_CHAR);
    act("&6$n's&6 spell has no effect on you!&0", FALSE, caster, 0, cvict, TO_VICT);
    return TRUE;
  }

  /* Elemental protection: 5% chance of escaping everything
   * (damage AND side-effects) */
  if (cvict && protected_from_spell(cvict, spellnum) && number(1, 20) == 1) {
    act("&6$n's&6 spell passes over $N harmlessly.&0", FALSE, caster, 0, cvict, TO_NOTVICT);
    act("&6Your spell passes over $N harmlessly!&0", FALSE, caster, 0, cvict, TO_CHAR);
    act("&6$n's&6 spell passes over you harmlessly!&0", FALSE, caster, 0, cvict, TO_VICT);
    return TRUE;
  }

  /* Are you trying to harm or disable an immortal? */
  if (  cvict &&
        (SINFO.violent || IS_SET(SINFO.routines, MAG_DAMAGE)) &&
        !IS_NPC(cvict) &&
        GET_LEVEL(cvict) >= LVL_IMMORT
     ) {
     /* This will cause the "You're trying to silence a god? Ha!" message
      * to be sent */
      if (!skill_message(0, caster, cvict, spellnum)) {
         /* There's no specific message for this spell - send generic
          * messages instead */
         /* to caster */
         act("$N ignores your feeble spell.", FALSE, caster, 0, cvict, TO_CHAR);
         /* to victim */
         act("You ignore $n's feeble spell.", FALSE, caster, 0, cvict, TO_VICT);
         /* to room */
         act("$N ignores $n's feeble spell.", FALSE, caster, 0, cvict, TO_NOTVICT);
     }
     return FALSE;
  }
d2929 5
@


1.90
log
@Fixed crashy bugs.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.89 2007/08/26 21:11:12 jps Exp jps $
d1436 1
a1436 1
  WAIT_STATE(ch, (PULSE_VIOLENCE / 2));
d2991 3
@


1.89
log
@Handle deity immunity right in call_magic, so that they can't get
negative effects from spells.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.88 2007/08/26 01:55:41 myc Exp jps $
d755 1
a755 1
  if (immune_from_spell(cvict, spellnum)) {
d764 1
a764 1
  if (protected_from_spell(cvict, spellnum) && number(1, 20) == 1) {
d772 1
a772 1
  if (
d2991 4
@


1.88
log
@Fire now does real damage.  All fire spells have a chance to catch the
victim on fire.  Mobs attempt to douse themselves.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.87 2007/08/24 17:11:47 myc Exp myc $
d710 2
a711 2
  if (spellnum < 1 || spellnum > TOP_SPELL_DEFINE)
    return FALSE;
d770 21
d2991 4
@


1.87
log
@Changing wording for reciting scrolls at items.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.86 2007/08/23 00:32:24 jps Exp myc $
d252 1
a252 1
  /* languages and breath spells */
d256 6
a261 1
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 205 */
a853 3
    case SPELL_FIRE_BREATH:	MANUAL_SPELL(spell_fire_breath); break;
    case SPELL_FROST_BREATH:	MANUAL_SPELL(spell_frost_breath); break;
    case SPELL_GAS_BREATH:	MANUAL_SPELL(spell_gas_breath); break;
d2339 1
a2339 1
	 TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
d2343 1
a2343 1
	 TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
d2347 1
a2347 1
	 TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
d2970 3
@


1.86
log
@All four elemental immunities are in effect, and neither damage nor
spell effects will reach mobs so protected. With an elemental
resistance (e.g., PROT-AIR) there is a 5% chance the spell will
miss entirely.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.85 2007/08/14 22:43:07 myc Exp jps $
d1119 1
a1119 1
                        act("$n recites $p, placing $s hand on $P.", FALSE, ch, obj, tobj, TO_ROOM);
d2968 6
@


1.85
log
@Adding conceal, corner, shadow, and stealth skills.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.84 2007/08/07 01:31:10 jps Exp myc $
d45 3
d745 20
d2968 3
@


1.84
log
@Changed find_skill_num so that when multiple skills or spells
match the given string, the one earliest in alphabetical order
is returned. Also, you can specify 'spell only' so that skill
names won't be considered.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.83 2007/08/05 20:21:51 myc Exp jps $
d381 5
a385 2
  "!UNUSED!",	/* 475 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 480 */
d2937 4
d2945 6
@


1.83
log
@Added retreat and group retreat skills.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.82 2007/08/04 19:30:49 myc Exp myc $
d629 1
a629 4
/* find_skill_num has problems when, for example 'circle' comes after 
 * 'circle of light'. um...oops. made it continue on an abbreviated match
 * in case there's an exact match later -321, 3/14/00 */
int find_skill_num(char *name)
d638 3
a645 9
     * abbrevmatch > -1 means there was a previous match for an 
     * abbreviation, e.g., circle matched for 'circle of light'.
     * If this is the case, we will only return the first abbreviation,
     * or the exact match, if it comes after.
     */
    if (abbrevmatch > -1)
      continue;

    /*
d647 1
a647 1
     * index immediately, in case we find an exact match later.
d650 4
a653 2
      abbrevmatch = index;
      continue;
d657 1
a657 2
     * Honestly not quite sure what's going on here.  Looks like it's
     * handling multiple word abbreviations?
d669 1
a669 1
    if (ok && !*first2) {
a670 1
      continue;
d677 10
d1305 1
a1305 1
  spellnum = find_skill_num(spellname);
d1307 1
a1307 1
  if (spellnum < 1 || spellnum > MAX_SPELLS) {
d1510 1
a1510 1
    if (ch->casting.spell <= 0 || ch->casting.spell > MAX_SPELLS) {
d1666 1
a1666 1
  if (spellnum < 1 || spellnum > MAX_SPELLS) {
d2938 3
@


1.82
log
@Show 'disarm' instead of 'DISARMUT!' on spell list when disarmed.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.81 2007/08/02 04:19:04 jps Exp myc $
d379 3
a381 1
  "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 475 */
d2931 2
d2937 3
@


1.81
log
@Added "moonbeam" spell for Druids.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.80 2007/08/02 00:23:53 myc Exp jps $
d338 2
a339 2
  "DISARMUT!",
  "DISARMUT!",
d2933 3
@


1.80
log
@Standardized magic check-PK function.  Cut out a LOT of unnecessary magic
code and cleaned up the whole system in general.  Magic casts are now
guaranteed to use sphere skills rather than level.  Almost all magic
functions like mag_damage or even manual spells return a boolean now:
TRUE if the cast deserves a skill improvement, FALSE if it doesn't.
This return value is ignored for object magic (wands, etc.).
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.79 2007/07/31 07:39:31 jps Exp myc $
d265 1
a265 1
  "!UNUSED!", /* 215 */
d851 1
d2842 4
d2933 8
@


1.79
log
@Fix the number of pages required to scribe locate object.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.78 2007/07/04 02:21:58 myc Exp jps $
a520 12
int mag_manacost(struct char_data * ch, int spellnum)
{
  int mana;
  
  mana = MAX(SINFO.mana_max - (SINFO.mana_change *
			       (GET_LEVEL(ch) - SINFO.min_level[(int) GET_CLASS(ch)])),
	     SINFO.mana_min);
  
  return mana;
}


d531 4
a534 1
  /* loop through bystanders in the room and see if they recognize the spell and/or target */
d537 1
a537 1
    if(ch == gch || !AWAKE(gch))
d545 1
a545 1
    if(GET_LEVEL(gch) >= LVL_GOD) {
d547 1
a547 1
    }
d549 2
a550 2
    for(tmp = ch->see_spell; tmp && !found; tmp = tmp->next) {
      if(gch == tmp->sch) {
d552 2
a553 3
      }
    }
    if(!found) {
d558 2
a559 2
      while (*(lbuf + ofs)) {
	for (j = 0; *(syls[j].org); j++) {
d564 2
a565 3
	}
      }
    } else {
a567 1
    }
d569 6
a574 6
    /* caster invis/hidden etc? */
    if(CAN_SEE(gch, ch)) {
      /* Is their a PC/NPC Target? Is it in the room? */
      if(tch && tch->in_room == ch->in_room) {
	if(ch == tch) {
	  /* target is the caster */
d576 2
a577 2
	} else if(tch == gch) {
	  /* Target is the receiver of the message */
d579 9
a587 11
	} else {
	  /* target is someone else in room */
	  if(CAN_SEE(gch, tch)) {
	    sprintf(saybuf, "$n stares at $N and utters the words, '%s'.", spellbuf);
	  } else {
	    sprintf(saybuf, "$n stares off at nothing and utters the words, '%s'.", spellbuf);
	  }
	}
      } else if (tobj && ((tobj->in_room == ch->in_room) || (tobj->carried_by == ch))) {
	/* obj target? is it in the room or on someone */
	if(CAN_SEE_OBJ(gch, tobj)) {
d589 1
a589 1
	} else {
d591 3
a593 3
	}
      } else {
	/* no target */
d595 3
a597 3
      }
    } else {
      /* can't see the caster */
d599 2
a600 2
    }
    /* sending message to bystander/target */
a607 8
  
  if (num <= 0) 
    {
      if (num == -1)
	return "UNUSED";
      else
	return "UNDEFINED";
    }
d609 11
a619 5
  while (num && *spells[i] != '\n') 
    {
      num--;
      i++;
    }
d636 24
a659 12
  while (*spells[++index] != '\n') 
    {
      if (!strcmp(name, spells[index]))
	return index;

      if (abbrevmatch > -1)
	continue;

      if (is_abbrev(name, spells[index])) {
	abbrevmatch = index;
	continue;
      }
d661 18
a678 14
      ok = 1;
      temp = any_one_arg(spells[index], first);
      temp2 = any_one_arg(name, first2);
      while (*first && *first2 && ok) {
	if (!is_abbrev(first2, first))
	  ok = 0;
	temp = any_one_arg(temp, first);
	temp2 = any_one_arg(temp2, first2);
      }
      
      if (ok && !*first2) {
	abbrevmatch = index;
	continue;
      }
d692 1
a692 1
	       struct obj_data * ovict, int spellnum, int level, int casttype)
d694 1
a694 1
  int savetype, i, min_spell_level=NUM_SPELL_CIRCLES;
d697 1
a697 1
    return 0;
d699 6
a704 6
  if (ROOM_FLAGGED(caster->in_room, ROOM_NOMAGIC)) 
    {
      send_to_char("Your magic fizzles out and dies.\r\n", caster);
      act("$n's magic fizzles out and dies.", FALSE, caster, 0, 0, TO_ROOM);
      return 0;
    }
d706 28
a733 20
      (SINFO.violent || IS_SET(SINFO.routines, MAG_DAMAGE))) 
    {
      send_to_char("A flash of white light fills the room, dispelling your "
		   "violent magic!\r\n", caster);
      act("White light from no particular source suddenly fills the room, "
	  "then vanishes.", FALSE, caster, 0, 0, TO_ROOM);
      return 0;
    }
  if (cvict && spell_info[spellnum].violent && IS_AFFECTED2(cvict, AFF2_MINOR_GLOBE | AFF2_MAJOR_GLOBE) && spellnum!=SPELL_DISPEL_MAGIC) {
    for(i=0;i<NUM_CLASSES;i++) 
      {
	if(spell_info[spellnum].min_circle[i] < 10)
	  min_spell_level = MIN(min_spell_level, spell_info[spellnum].min_circle[i]);
      }
    if((IS_AFFECTED2(cvict, AFF2_MINOR_GLOBE) && min_spell_level <= 3) ||
       (IS_AFFECTED2(cvict, AFF2_MAJOR_GLOBE) && min_spell_level <= 6)){
      act("&1&bThe shimmering globe around your body flares as the spell flows around it.&0", FALSE,caster,0,cvict,TO_VICT);
      act("&1&bThe shimmering globe around $N&1&b's body flares as your spell flows around it.&0", FALSE,caster,0,cvict,TO_CHAR);
      act("&1&bThe shimmering globe around $N&1&b's body flares as $n&1&b's spell flows around it.&0", FALSE,caster,0,cvict,TO_NOTVICT);
      return 0;
d738 1
a738 2
  switch (casttype) 
    {
d754 1
a754 1
    }
a755 1
  
d757 1
a757 1
    mag_damage(level, caster, cvict, spellnum, savetype);
d761 1
a761 1
    return 1;
d764 1
a764 1
    mag_affects(level, caster, cvict, spellnum, savetype);
d767 1
a767 1
    mag_unaffects(level, caster, cvict, spellnum, savetype);
d770 1
a770 1
    mag_points(level, caster, cvict, spellnum, savetype);
d773 1
a773 1
    mag_alter_objs(level, caster, ovict, spellnum, savetype);
d776 1
a776 1
    mag_groups(level, caster, spellnum, savetype);
d779 1
a779 1
    mag_masses(level, caster, spellnum, savetype);
d782 1
a782 1
    mag_areas(level, caster, spellnum, savetype);
d785 1
a785 1
    mag_summons(level, caster, ovict, spellnum, savetype);
d788 1
a788 1
    mag_creations(level, caster, spellnum);
d791 1
a791 1
    mag_room(level, caster, spellnum);
d804 3
a806 3
    case SPELL_CREEPING_DOOM:  MANUAL_SPELL(spell_creeping_doom); break;
    case SPELL_MOONWELL:       MANUAL_SPELL(spell_moonwell); break;
    case SPELL_MAJOR_PARALYSIS: MANUAL_SPELL(spell_major_paralysis);break;
a807 1
    case SPELL_INCENDIARY_NEBULA:     MANUAL_SPELL(spell_incendiary_nebula); break;
d809 42
a850 43
    case SPELL_PLANE_SHIFT: MANUAL_SPELL(spell_plane_shift); break;
    case SPELL_DISPEL_MAGIC: MANUAL_SPELL(spell_dispel_magic); break;
    case SPELL_MINOR_CREATION: MANUAL_SPELL(spell_minor_creation); break;
    case SPELL_WIZARD_EYE: MANUAL_SPELL(spell_wizard_eye); break;
    case SPELL_TELEPORT: MANUAL_SPELL(spell_teleport); break;
    case SPELL_DISINTEGRATE: MANUAL_SPELL(spell_disintegrate); break;
    case SPELL_MASS_INVIS: MANUAL_SPELL(spell_mass_invis); break;
    case SPELL_SUMMON_CORPSE: MANUAL_SPELL(spell_summon_corpse); break; 
    case SPELL_SHIFT_CORPSE: MANUAL_SPELL(spell_shift_corpse); break; 
    case SPELL_DEGENERATION: MANUAL_SPELL(spell_degeneration); break;
    case SPELL_RELOCATE: MANUAL_SPELL(spell_relocate); break;
    case SPELL_FIRE_BREATH: MANUAL_SPELL(spell_fire_breath); break;
    case SPELL_FROST_BREATH: MANUAL_SPELL(spell_frost_breath); break;
    case SPELL_GAS_BREATH: MANUAL_SPELL(spell_gas_breath); break;
    case SPELL_ACID_BREATH: MANUAL_SPELL(spell_acid_breath); break;
    case SPELL_COLOR_SPRAY: MANUAL_SPELL(spell_color_spray); break;
    case SPELL_LIGHTNING_BREATH: MANUAL_SPELL(spell_lightning_breath);break;
    case SPELL_LESSER_INVOCATION: MANUAL_SPELL(spell_lesser_invocation);break;
    case SPELL_ENLIGHTENMENT: MANUAL_SPELL(spell_enlightenment);break;
    case SPELL_GREATER_INVOCATION: MANUAL_SPELL(spell_greater_invocation);break;
    case SPELL_BANISH: MANUAL_SPELL(spell_banish);break;
    case SPELL_WORD_OF_COMMAND: MANUAL_SPELL(spell_word_of_command);break;
    case SPELL_DIVINE_ESSENCE: MANUAL_SPELL(spell_divine_essence);break;
    case SPELL_HEAVENS_GATE: MANUAL_SPELL(spell_heavens_gate);break;
    case SPELL_DARK_FEAST: MANUAL_SPELL(spell_dark_feast);break;
    case SPELL_HELLS_GATE: MANUAL_SPELL(spell_hells_gate);break;
    case SPELL_WALL_OF_STONE: MANUAL_SPELL(spell_wall_of_stone);break;
    case SPELL_NATURES_EMBRACE: MANUAL_SPELL(spell_natures_embrace);break;
    case SPELL_WANDERING_WOODS: MANUAL_SPELL(spell_wandering_woods);break;
    case SPELL_ARMOR_OF_GAIA: MANUAL_SPELL(spell_armor_of_gaia);break;
    case SPELL_FIRE_DARTS: MANUAL_SPELL(spell_fire_darts);break;
    case SPELL_MAGIC_MISSILE: MANUAL_SPELL(spell_magic_missile);break;
    case SPELL_FLAME_BLADE: MANUAL_SPELL(spell_flame_blade);break;
    case SPELL_MELT: MANUAL_SPELL(spell_melt);break;
    case SPELL_IMMOLATE: MANUAL_SPELL(spell_immolate);break;
    case SPELL_ICE_DARTS: MANUAL_SPELL(spell_ice_darts);break;
    case SPELL_ICE_DAGGER: MANUAL_SPELL(spell_ice_dagger);break;
    case SPELL_WALL_OF_ICE: MANUAL_SPELL(spell_wall_of_ice);break;
    case SPELL_FLOOD: MANUAL_SPELL(spell_flood);break;
    case SPELL_RAIN: MANUAL_SPELL(spell_rain);break;
    case SPELL_ILLUMINATION: MANUAL_SPELL(spell_illumination);break;
    case SPELL_DARKNESS: MANUAL_SPELL(spell_darkness);break;
    case SPELL_REMOVE_CURSE: MANUAL_SPELL(spell_remove_curse); break;
a852 5
  /* Zero out the spell when done so we don't get bogus info */
  /* when using items that cast spells.  --Gurlaek 10/3/2000 */
  /*
  caster->casting.spell = 0;
  */
d854 1
a854 1
  return 1;
a901 13
/*
#define SKILL_SPHERE_GENERIC        452
#define SKILL_SPHERE_FIRE           453
#define SKILL_SPHERE_WATER          454
#define SKILL_SPHERE_EARTH          455
#define SKILL_SPHERE_AIR            456
#define SKILL_SPHERE_HEALING        457
#define SKILL_SPHERE_PROT           458
#define SKILL_SPHERE_ENCHANT        459
#define SKILL_SPHERE_SUMMON         460
#define SKILL_SPHERE_DEATH          461
#define SKILL_SPHERE_DIVIN          462
*/
d908 4
a911 4
 * staff  - [0]	level	[1] max charges	[2] num charges	[3] spell num
 * wand   - [0]	level	[1] max charges	[2] num charges	[3] spell num
 * scroll - [0]	level	[1] spell num	[2] spell num	[3] spell num
 * potion - [0] level	[1] spell num	[2] spell num	[3] spell num
d1163 2
a1164 1
  
d1192 1
a1192 1
   if (IS_AFFECTED(ch, AFF_CHARM) && (ch->master == tch) && SINFO.violent) {
d1195 1
a1195 1
    }
d1205 1
a1205 1
      send_to_char("You can't cast this spell if you're not in a group!\r\n",ch);
d1208 17
a1224 10
   if(GET_LEVEL(ch) < LVL_IMMORT) {
      if((GET_CLASS(ch) == CLASS_PRIEST || GET_CLASS(ch) == CLASS_PALADIN ||
            GET_CLASS(ch) == CLASS_RANGER) && GET_ALIGNMENT(ch) < 350) {
         send_to_char("Your deity has removed your holy powers!\r\n",ch);
         return 0;
      }
      if((GET_CLASS(ch) == CLASS_DIABOLIST || GET_CLASS(ch) == CLASS_ANTI_PALADIN)
            && GET_ALIGNMENT(ch) > -350) {
        send_to_char("Your deity has removed your unholy powers!\r\n",ch);
        return 0;
a1226 1
   /*send_to_char(OK, ch);*/
d1228 8
a1235 1
   return (call_magic(ch, tch, tobj, spellnum, GET_LEVEL(ch), CAST_SPELL));
d1252 1
a1252 1
  char *s, *t, *misc = NULL;
d1256 4
a1259 7
  /* get: blank, spell name, target name */
  /*s = strtok(argument, "'");*/
  if(AFF2_FLAGGED(ch, AFF2_SILENCE)) 
    {
      send_to_char("Your lips move, but no sound forms.\r\n", ch);
      return;
    }
d1261 19
a1279 4
   if (CASTING(ch)) {
      send_to_char("But you are already casting a spell!\r\n",ch);
      return;
   }
d1281 2
a1282 5
  if(GET_POS1(ch) < POS1_STANDING)
    {
      send_to_char("You are too relaxed..\r\n", ch);
      return;
    }	
d1284 14
a1297 19
  while (*argument != 39 && *argument != '\0')
    argument++;
  if (*argument == '\0')
    {
      send_to_char("Cast what where?\r\n", ch);
      return;
    }
  argument++;
  s=argument;
  
  /*s = strtok(NULL, "'");*/
  while (*argument != 39 && *argument != '\0')
    argument++;
  if (*argument == '\0')
    {
      send_to_char("Spell names must be enclosed in the Holy Magic Symbols: '\r\n", ch);
      return;
    }
  *argument='\0';  /* s points to start of string, we just terminated it where final ' was*/
d1299 1
a1299 2
  /*t = strtok(NULL, "\0");*/
  t=(argument+1);
d1301 1
a1301 2
  /* spellnum = search_block(s, spells, 0); */
  spellnum = find_skill_num(s);
d1303 3
a1305 55
  if ((spellnum < 1) || (spellnum > MAX_SPELLS)) 
    {
      send_to_char("Cast what?!?\r\n", ch);
      return;
    }
  
  if (IS_NPC(ch))
    {
      if (GET_LEVEL(ch) < SINFO.min_level[(int) GET_CLASS(ch)]) 
	{
	  send_to_char("You do not know that spell!\r\n", ch);
	  return;
	}	
  } 
else 
  {
    if (GET_LEVEL(ch) < SINFO.min_level[(int) GET_CLASS(ch)]) 
      {
	send_to_char("You do not know that spell!\r\n", ch);
	return;
	
      }
    /*spheres banyal*/
    /*
     * if (SPHERE(ch, FIRE) < SINFO.fire) 
     *{
     *send_to_char("The message you like to have.\r\n", ch);
     *return;
     *}
     *if (SPHERE(ch, WATER) < SINFO.water) 
     *{
     *send_to_char("The message you like to have.\r\n", ch);
     *return;
     *}
     *if (SPHERE(ch, AIR) < SINFO.air) 
     *{
     *send_to_char("The message you like to have.\r\n", ch);
     *return;
     *}
     *if (SPHERE(ch, EARTH) < SINFO.earth) 
     *{
     *send_to_char("The message you like to have.\r\n", ch);
     *return;
     *}
     *if (SPHERE(ch, GENERIC) < SINFO.generic) 
     *{
     *send_to_char("The message you like to have.\r\n", ch);
     *return;
     *}
     *if (SPHERE(ch, HEALING) < SINFO.healing) 
     *{
     *send_to_char("The message you like to have.\r\n", ch);
     *return;
     *}
     */
d1308 5
a1312 13
  if (GET_SKILL(ch, spellnum) == 0) 
    {
      send_to_char("You are unfamiliar with that spell.\r\n", ch);
      return;
    }	
  
  /* is the spell memorized? PC's only... */
  if((GET_LEVEL(ch) < LVL_IMMORT)&&(!IS_NPC(ch)))
    if(!check_spell_memory(ch, spellnum))
      {
        send_to_char("You do not have that spell memorized!\r\n", ch);
        return;
      }
d1314 4
d1319 7
d1327 1
a1327 1
  if (*t != '\0') {
d1329 3
a1331 3
    skip_spaces(&t);
    misc = str_dup(t);
    one_argument(strcpy(arg, t), t);
d1334 1
a1334 1
  target = find_spell_target(spellnum, ch, t,
d1336 1
a1336 6
  /*
   * if (target && (tch == ch) && SINFO.violent) {
   *send_to_char("You shouldn't cast that on yourself -- could be bad for your health!\r\n", ch);
   *return;
   *}
   */
d1338 9
a1346 9
     if (*t) {
       send_to_char("Cannot find the target of your spell!\r\n", ch);
     } else {
	      sprintf(buf, "Upon %s should the spell be cast?\r\n",
               IS_SET(SINFO.targets, TAR_OBJ_ROOM | TAR_OBJ_INV |
                  TAR_OBJ_WORLD | TAR_STRING) ? "what" : "whom");
	      send_to_char(buf, ch);
     }
     return;
d1349 1
a1349 2
  /* Lets make the basterds pop into view - Banyal*/
  
d1351 2
a1352 3
    if (affected_by_spell(ch, SPELL_INVISIBLE))
      appear(ch);
    if (affected_by_spell(ch, SPELL_CONCEALMENT))
d1356 1
a1356 3
  /* at this point, we found the target, we have the spell memorized, */
  /* lets remove the spell from memory and fry the victim! */
  /*charge_mem(ch, spellnum); let's do this AFTER the spell is cast -Nechtrous*/
d1358 4
a1361 2
  /* set ch to casting and setup the casting structure for complete_spell() */
  SET_BIT(PLR_FLAGS(ch), PLR_CASTING);
d1364 2
d1373 6
a1378 10
  if (number(1,102) < GET_SKILL(ch, SKILL_QUICK_CHANT)) {
    ch->casting.casting_time = (int)(SINFO.cast_time / 2);
    /*sprintf(buf, "PL_Q_CHANT %s:%s %d", 
      GET_NAME(ch), spells[spellnum], ch->casting.casting_time);*/
  } else {
    ch->casting.casting_time = SINFO.cast_time;
    /*sprintf(buf, "PL_CHANT %s:%s %d", 
      GET_NAME(ch),spells[spellnum], ch->casting.casting_time);*/
  }
  /*log(buf);*/
d1380 2
a1381 1
  /* SPELL RECOGNITION yeah --gurlaek 7/16/1999 */
d1383 6
a1388 1
  WAIT_STATE(ch, (PULSE_VIOLENCE / 2) * (ch->casting.casting_time + 1));
d1485 1
a1485 1
/* character is put into CON_CASTING and cycles through here every 1 second */
d1489 1
a1489 1
  struct char_data *ch = character_list;
d1495 80
a1574 83
  for(;ch;ch = ch->next)
    {
      /*I added this to stop lock-ups due to trying to cast a spell
	on ch -1 and ch 0 at start of game wake up Banyal*/
      if (ch != CON_PLAYING && ch->in_room == NOWHERE)
	return;

      if (CASTING(ch)) {
	  /* added to stop player casting loops --gurlaek 7/23/1999 */
	  if((ch->casting.spell) <= 0 || ch->casting.spell > MAX_SPELLS) {
        STOP_CASTING(ch);
	    sprintf(castbuf, "SYSERR: removed casting loop on %s", GET_NAME(ch));
	    log(castbuf);
	    return;
	  }
	  /* check to make sure target is still valid! Nechtrous */
	  if(ch->casting.obj) { /* target is object */
	    switch(ch->casting.target_status) {
	    case TARGET_IN_ROOM:
	      if(ch->casting.obj->in_room != ch->in_room)
		tar_invalid = TRUE;
	      break;
	    case TARGET_IN_WORLD:
	      break;
	    case TARGET_IN_INV:
	      for(obj=ch->carrying;obj;obj=obj->next_content)
		if(ch->casting.obj == obj)
		  found = TRUE;
	      if(!found)
		tar_invalid=TRUE;
	      break;
	    case TARGET_EQUIP:
	      for(i=0;i<NUM_WEARS;i++)
		if(ch->casting.obj == ch->equipment[i])
		  found = TRUE;
	      if(!found)
		tar_invalid=TRUE;
	      break;
	    default:
	      log("SYSERR: Error in update_casting() at obj valid check.");
	    }
	    if(tar_invalid || GET_POS(ch) < POS_STANDING) {
         abort_casting(ch);
	      continue;
	    }	
	  }  
	  if(ch->casting.tch) /* target is a char */
            {
 	      switch(ch->casting.target_status) {
	      case TARGET_IN_ROOM:
		if(ch->casting.tch->in_room != ch->in_room)
		  tar_invalid = TRUE;
		break;
	      case TARGET_IN_WORLD:
		break;
	      case TARGET_FIGHTING:
		if(!FIGHTING(ch) || ch->casting.tch != FIGHTING(ch))
		  tar_invalid = TRUE;
		break;
                /* added case for TARGET_SELF to prevent syserrors */
	      case TARGET_SELF:
		break;                  
	      default:
		log("SYSERR: Error in update_casting() at char valid check.");
	      }
	      if(tar_invalid) {
            abort_casting(ch);
            continue;
	      }
            }
	  
	  
	  /*if(number(1, 100) < GET_SKILL(ch, SKILL_QUICK_CHANT))
	   * ch->casting.casting_time = 0;
	   */
	  /* is ch done casting? */
	  /* gods now instant cast --gurlaek 7/23/1999 */
      if((ch->casting.casting_time) <= 0 || GET_LEVEL(ch) >= LVL_GOD) { 
         STOP_CASTING(ch);
         complete_spell(ch);      
      } else {
	      memset(castbuf, 0x0, 64);
	      sprintf(castbuf, "Casting: %s ", skill_name(ch->casting.spell));
d1576 5
a1580 7
	      for(i = 1; i <= ch->casting.casting_time; i++) {
		strcat(castbuf, "*");
		i++; /* added to compensate for new cast times */
	      }
	      strcat(castbuf, "\r\n");
	      send_to_char(castbuf, ch);
            }
d1582 2
a1583 16
	  /* gonna check quick chant in do_cast  -Nechtrous 
	   *  if(ch->casting.casting_time >= 1) {
	   * numb = number(1, 100);
	   * if (numb - (GET_SKILL(ch, SKILL_QUICK_CHANT)) < -5) {	
	   * ch->casting.casting_time--;
	   * ch->casting.casting_time--;
	   * } 
	   * else if (numb - (GET_SKILL(ch, SKILL_QUICK_CHANT)) < 10) {
	   * ch->casting.casting_time--;
	   * } else
	   * ch->casting.casting_time--;}        
	   */
	  ch->casting.casting_time--;
	  ch->casting.casting_time--; /* added to compensate for new cast times */
	} 
    }
a1586 1
   int circle_cast;
d1589 4
a1592 4
   if (IS_AFFECTED2(ch, AFF2_INSANITY) && !mag_savingthrow(ch, SAVING_PARA)) {
      act("$n babbles a bit as a strand of drool drips down $s chin.",TRUE,ch,0,0,TO_ROOM);
      act("Your mind is not in any condition to cast spells.",FALSE,ch,0,0,TO_CHAR);
      act("&1$n&1 stops chanting abruptly!&0", TRUE, ch, 0, 0, TO_ROOM); 
d1596 5
d1602 2
a1603 3
      circle_cast = 1 + ((int) ((spell_info[ch->casting.spell].min_level[(int) (GET_CLASS(ch))])/5)); 
      /*make sure not 0 or greater then 12*/
      circle_cast = MAX(1, MIN(circle_cast, 12));
d1605 2
a1606 2
      /* You throws the dice and you takes your chances.. 101% is total failure */
      if (number(0, 101) > GET_MSKILL(ch, ch->casting.spell)) {
d1608 1
a1608 25
         if (!ch->casting.tch || !skill_message(0, ch, ch->casting.tch, ch->casting.spell)) {
            send_to_char("You lost your concentration!\r\n", ch);
            act("$n stops chanting abruptly!", TRUE, ch, 0, 0, TO_ROOM); 
         }
         if (circle_cast > 0) {
            if (number(1, 2) == 1)
               SET_MEM_MEMED(ch, circle_cast, MAX(0, (GET_MEM_MEMED(ch, circle_cast) -1)));	
         }
      } else {
         if (GET_MEM_MEMED(ch, circle_cast) > 0) {
         /* cast spell returns 1 on success; subtract mana & set waitstate */
            cast_spell(ch, ch->casting.tch, ch->casting.obj, ch->casting.spell);
            WAIT_STATE(ch, PULSE_VIOLENCE * 2);
            SET_MEM_MEMED(ch, circle_cast, MAX(0, (GET_MEM_MEMED(ch, circle_cast) -1)));	
            if (spell_info[ch->casting.spell].violent && ch->casting.tch && 
                  IS_NPC(ch->casting.tch) && !FIGHTING(ch->casting.tch) &&
                  GET_POS(ch->casting.tch) >= POS_RESTING)
               if (number(0, 4)) {
                  hit(ch->casting.tch, ch, TYPE_UNDEFINED);
                  remember(ch->casting.tch, ch); }
               }
         }
      return;
   } else {
      /* Player */
d1610 5
a1614 7
      /* You throws the dice and you takes your chances.. 101% is total failure */
      if (number(0, 101) > GET_SKILL(ch, ch->casting.spell) && 
            (GET_LEVEL(ch) < spell_info[ch->casting.spell].min_level[(int) GET_CLASS(ch)] + 5)) {
         WAIT_STATE(ch, PULSE_VIOLENCE * 2);
         if (!ch->casting.tch || !skill_message(0, ch, ch->casting.tch, ch->casting.spell)) {
            send_to_char("You lost your concentration!\r\n", ch);
            act("$n stops chanting abruptly!", TRUE, ch, 0, 0, TO_ROOM); 
d1616 5
a1620 3
      } else {
         send_to_char("You complete your spell.\r\n", ch);
         act("$n completes $s spell...", FALSE, ch, 0, 0, TO_ROOM);
d1622 4
a1625 2
         /* cast_spell returns 1 on success */
         if (cast_spell(ch, ch->casting.tch, ch->casting.obj, ch->casting.spell)) { 
d1627 6
a1632 13
            /* pause the caster */
            WAIT_STATE(ch, PULSE_VIOLENCE);
            /* erase memorized spell */
            charge_mem(ch, ch->casting.spell);

            /* A victim attacks back immediately, 80% of the time */
            if (spell_info[ch->casting.spell].violent && ch->casting.tch && 
                  IS_NPC(ch->casting.tch) && !FIGHTING(ch->casting.tch) &&
                  GET_POS(ch->casting.tch) >= POS_RESTING)
               if (number(0, 4)) {
                  hit(ch->casting.tch, ch, TYPE_UNDEFINED);
                  remember(ch->casting.tch, ch);
               }
d1638 4
a1641 3
/* this function is a mirror of do_cast for pc's.  These two could easily */
/* be combined once the target issue is resolved                          */
/* if you change this, please reflect any changes in do_cast              */
a1643 4
  
  struct obj_data *tobj = NULL;
  char *t = '\0';
  int i, target = 0;
d1645 9
a1653 6
  
  if(AFF2_FLAGGED(ch, AFF2_SILENCE)) 
    {
      send_to_char("Your lips move, but no sound forms.\r\n", ch);
      return;
    }
d1656 20
a1675 20
  if(GET_POS1(ch) < POS1_STANDING)
    {
      send_to_char("You are too relaxed..\r\n", ch);
      return;
    }	
  if ((spellnum < 1) || (spellnum > MAX_SPELLS)) 
    {
      send_to_char("Cast what?!?\r\n", ch);
      return;
    }
  if (GET_LEVEL(ch) < SINFO.min_level[(int) GET_CLASS(ch)]) 
    {
      send_to_char("You do not know that spell!\r\n", ch);
      return;
    }	
  if ((GET_SKILL(ch, spellnum)) == 0) 
    { 
      send_to_char("You are unfamiliar with that spell.\r\n", ch);
      return;	
    }	
d1678 17
a1694 61
  
  if (IS_SET(SINFO.targets, TAR_IGNORE)) {
    target = TRUE;
  } else if (tch != NULL) {
    if (!target && (IS_SET(SINFO.targets, TAR_CHAR_ROOM))) {
      target = TRUE;
      target_status = TARGET_IN_ROOM;
    }
    if (!target && IS_SET(SINFO.targets, TAR_CHAR_WORLD)){
      target = TRUE;
      target_status = TARGET_IN_WORLD;
    }
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_INV)){
      if ((tobj = get_obj_in_list_vis(ch, t, ch->carrying)))
	target = TRUE;
      target_status=TARGET_IN_INV;
    }	
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_EQUIP)) {
      for (i = 0; !target && i < NUM_WEARS; i++)
	if (GET_EQ(ch, i) && !str_cmp(t, GET_EQ(ch, i)->name)) {
	  tobj = GET_EQ(ch, i);
	  target = TRUE;
	  target_status = TARGET_EQUIP;
	}
    }
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_ROOM)) 
      if ((tobj = get_obj_in_list_vis(ch, t, world[ch->in_room].contents))){
	target = TRUE;
	target_status = TARGET_IN_ROOM;
      }
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_WORLD))
      if ((tobj = get_obj_vis(ch, t))){
	target = TRUE;
	target_status = TARGET_IN_WORLD;
      }
  } else {			/* if target string is empty */
    if (!target && IS_SET(SINFO.targets, TAR_FIGHT_SELF))
      if (FIGHTING(ch) != NULL) {
	tch = ch;
	target = TRUE;
	target_status = TARGET_SELF;
      }
    if (!target && IS_SET(SINFO.targets, TAR_FIGHT_VICT))
      if (FIGHTING(ch) != NULL) {
	tch = FIGHTING(ch);
	target = TRUE;
	target_status = TARGET_FIGHTING;
      }
    /* if no target specified, and the spell isn't violent, default to self */
    if (!target && IS_SET(SINFO.targets, TAR_CHAR_ROOM) &&
	!SINFO.violent) {
      tch = ch;
      target = TRUE;
      target_status = TARGET_SELF;
    }
    if (!target) {
      sprintf(buf, "Upon %s should the spell be cast?\r\n",
	      IS_SET(SINFO.targets, TAR_OBJ_ROOM | TAR_OBJ_INV | TAR_OBJ_WORLD) ? "what" : "who");
      send_to_char(buf, ch);
      return;
    } 
d1696 10
d1707 4
a1710 13
  if (target && (tch == ch) && SINFO.violent) {
    send_to_char("You shouldn't cast that on yourself -- could be bad for your health!\r\n", ch);
    return;
  }	
  if (!target) {
    send_to_char("Cannot find the target of your spell!\r\n", ch);
    return;
  }
  /* reveal hidden/invis/concealed attackers */
  if (target && SINFO.violent) {
    if (affected_by_spell(ch, SPELL_INVISIBLE))
      appear(ch);
    if (affected_by_spell(ch, SPELL_CONCEALMENT))
d1719 3
a1721 3
  /*ch->casting.obj = tobj;*/
  /* quick chant for mobs --gurlaek 7/13/1999 */
  if (number(1,102) < GET_SKILL(ch, SKILL_QUICK_CHANT)) {
d1723 1
a1723 3
    /*sprintf(buf, "NPC_Q_CHANT %s:%s %d", 
      GET_NAME(ch), spells[spellnum], ch->casting.casting_time);*/
  } else {
d1725 2
a1726 5
    /*sprintf(buf, "NPC_CHANT %s:%s %d", 
      GET_NAME(ch), spells[spellnum], ch->casting.casting_time);*/
  }
  /*log(buf);*/
  /* Spell Recognition --gurlaek 7/16/1999 */
d1728 1
a1728 1
  WAIT_STATE(ch, (PULSE_VIOLENCE / 2) * (ch->casting.casting_time + 1));
d1742 1
a1742 1
  int ofs = 0, j, circle, check1, check2, percent;
d1755 1
a1755 1
  /* randomly garble the letters */
d1758 4
a1761 3
  /* change the syllables of the spoken spell */
  while (*(lbuf + ofs)) {
    for (j = 0; *(syls[j].org); j++) {
a1765 2
    }
  }
d1767 1
a1767 1
  /* loop through bystanders in the room and see if they recognize the spell and/or target */
d1769 3
a1771 1
    if(gch == ch || !AWAKE(gch)) /* either caster or sleeping bystander */
a1776 2
    check1 = 0;
    check2 = 0;
d1779 2
a1780 2
    /* prayers can't recognize memmers spells and vice verca */
    if(check_mem_mode(ch) == check_mem_mode(gch) || GET_LEVEL(gch) >= LVL_GOD) {
d1783 1
a1783 1
      /* find the circle of caster's spell */
d1785 7
a1791 5
      /* see if bystander has that spell circle */
      check1 = spells_of_circle[(int)GET_LEVEL(gch)][circle];
      /* see if bystander has one less than circle */
      if(circle > 1)
	check2 = spells_of_circle[(int)GET_LEVEL(gch)][circle - 1];
d1793 1
a1793 7
      if(!check1) { /* if bystander doesn't have circle: reduce chances by 50% */
	percent = percent/2;
	if(!check2) { /* if bystander is more than one circle down: - no chance */
	  percent = 0;
	}
      }
      if(number(0,1))
d1798 3
a1800 3
    if((number(0, 101) > percent) && (GET_LEVEL(gch) < LVL_GOD)) {
      if(number(0, 100) < 20) {
	/* for really bad rolls, replace the spell with an incorrect one */
d1803 3
a1805 2
      } else {
	/* copy the garbled buffer into the spell */
d1807 3
a1809 3
      }
    } else {
      /* Hey we regognized the spell! */
d1812 9
a1820 16
      /* Create the caster's see_spell list: This is a list of char's who have recognized */
      /* the spell and will see it clearly when it is cast if they are still in the room  */
      if(!ch->see_spell) {
	CREATE(ch->see_spell, struct know_spell, 1);
	ch->see_spell->sch = gch;
	ch->see_spell->next = NULL;
      } else {
	CREATE(tmp, struct know_spell, 1);
	tmp->sch = gch;
	tmp->next = NULL;
	tmp2=ch->see_spell;
	while(tmp2->next) {
	  tmp2=tmp2->next;
	}
	tmp2->next=tmp;
      }
d1822 5
a1826 2
    /* Is their a Target? Is it in the room?  Is it not the caster?*/
    if(ch->casting.tch && ch->casting.tch->in_room == ch->in_room && ch != ch->casting.tch) {
d1828 4
a1831 4
      if(number(0,101) < GET_INT(gch) || 
	 (!strcmp(spellbuf, spells[ch->casting.spell])) || 
	 (bad) || 
	 GET_LEVEL(gch) >= LVL_GOD) {
d1840 5
a1844 2
    /* message to bystander */
    sprintf(buf, "$n starts casting &3&b'%s'&0%s...", spellbuf, namebuf);
d1847 6
a1852 2
  /* message to caster */
  act("You start chanting...", TRUE, ch, 0, 0, TO_CHAR);  
d1855 3
a1857 2
/* display incorrect spell on a very bad KNOW_SPELL roll */
/* gawd i'm a bastard --gurlaek 7/20/1999 */
d1861 13
a1873 3
  if(check_mem_mode(ch) != MEMORIZE) {
    if(spell_info[ch->casting.spell].violent) {
      /* replace it with a non offensive spell */
d1875 1
a1875 2
    } else {
      /* replace it with an offensive spell */
a1876 9
    }
  } else {
    if(spell_info[ch->casting.spell].violent) {
      /* replace it with a non offensive spell */
      return bogus_mage_spells[number(1,10)];
    } else {
      /* replace it with an offensive spell */
      return bogus_mage_spells[number(11,20)];
    }
d1905 5
a1909 6
  if(circle < 1 || circle > NUM_SPELL_CIRCLES)
    {
      sprintf(buf, "SYSERR: assigning '%s' to illegal circle '%d'", skill_name(spell), circle);
      log(buf);
      bad = 1;
    }
d1912 4
a1915 5
  if (!bad)  
    {
      spell_info[spell].min_level[class] = level;
      spell_info[spell].min_circle[class] = circle;
    }
d2243 1
a2243 1
	 TAR_IGNORE, FALSE, MAG_MANUAL, C1,
d2928 3
@


1.78
log
@Renamed douse spell to extinguish.  Made word of command only aggro on
failure.  Sped up dispel poison cast time.  Made degeneration a quest
spell.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.77 2007/06/16 00:15:49 myc Exp myc $
d2798 1
a2798 1
	 CAST_SPEED4, 0, 0, SKILL_SPHERE_DIVIN, FALSE);
d3073 5
@


1.77
log
@Three spells for necromancers: soul tap, rebuke undead,
and degeneration.  One spell for rangers: natures guidance.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.76 2007/05/28 22:13:03 jps Exp myc $
d240 1
a240 1
   "douse", 
d2215 1
a2215 1
  spello(SPELL_DOUSE, 0, 0, 0, POS_FIGHTING,
d2396 1
a2396 1
	 TAR_CHAR_ROOM, TRUE, MAG_MANUAL, C1,
d2713 1
a2713 1
	 CAST_SPEED3, 0, SKILL_SPHERE_DIVIN, 13, FALSE);
d2972 1
a2972 1
         CAST_SPEED4, HEALING_DAMAGE, SKILL_SPHERE_HEALING, 12, FALSE);
d3073 4
@


1.76
log
@Fixed the rcs log at the tail of spell_parser.c.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.75 2007/05/28 18:57:44 jps Exp jps $
d249 1
d261 6
a266 1
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 215 */
d813 1
d2969 16
d3073 3
@


1.75
log
@Use specific messages about scroll targets, and some chosen according to
the sphere of the spell being cast.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.74 2007/05/28 17:39:22 jps Exp jps $
a3047 8








d3049 126
d3232 5
d3319 1
@


1.74
log
@Fix crash bug when casting spell on an object.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.73 2007/05/24 05:37:03 jps Exp jps $
d851 59
d937 1
d1073 2
a1074 2
            if (find_spell_target(spellnum, ch, arg, &target_status, &tch, &tobj)) {

d1086 1
d1088 1
d1090 9
a1098 1
                     else
d1100 1
@


1.73
log
@Stop putting spell effects on someone when they've been killed.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.72 2007/05/11 21:03:12 myc Exp jps $
d748 1
a748 1
  if (GET_POS(cvict) == POS_DEAD)
@


1.72
log
@New rogue skill, eye gouge, allows rogues to gouge out eyes.  A very
complicated skill.  :P  Fixed cure blind's logic, and made it support
eye gouge too.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.71 2007/05/11 20:13:28 myc Exp myc $
d747 4
@


1.71
log
@Vaporform is a new circle 13 spell for cryomancers.  It significantly
increases the caster's chance of dodging a hit.  It is a quest spell.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.70 2007/04/25 06:22:01 jps Exp myc $
d370 4
a373 2
  "!UNUSED!",	/* 470 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 475 */
d2970 1
@


1.70
log
@Prevent the instant hit-back (due to an offensive spell) from being
performed if you've been knocked unconscious.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.69 2007/04/19 07:03:14 myc Exp jps $
d237 1
a237 1
   "greater waterwalk",
a829 1
    case SPELL_GREATER_WATERWALK: MANUAL_SPELL(spell_greater_waterwalk);break;
d2119 3
a2121 3
  spello(SPELL_GREATER_WATERWALK, 0, 0, 0, POS_STANDING,
	 TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_ENCHANT, 35, FALSE);
@


1.69
log
@Implemented demonic mutation as a more powerful version of demonic aspect.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.68 2007/04/19 00:53:54 jps Exp myc $
d1572 74
a1645 37
void complete_spell(struct char_data *ch)
{
  int circle_cast;
  
  if(IS_AFFECTED2(ch, AFF2_INSANITY) && !mag_savingthrow(ch, SAVING_PARA)){
    act("$n babbles a bit as a strand of drool drips down $s chin.",TRUE,ch,0,0,TO_ROOM);
    act("Your mind is not in any condition to cast spells.",FALSE,ch,0,0,TO_CHAR);
    act("&1$n&1 stops chanting abruptly!&0", TRUE, ch, 0, 0, TO_ROOM); 
    return;
  }
  if (IS_NPC(ch)) {
    circle_cast = 1 + ((int) ((spell_info[ch->casting.spell].min_level[(int) (GET_CLASS(ch))])/5)); 
    /*make sure not 0 or greater then 12*/
    circle_cast = MAX(1, MIN(circle_cast, 12));
    
    /* You throws the dice and you takes your chances.. 101% is total failure */
    if (number(0, 101) > GET_MSKILL(ch, ch->casting.spell)) {
      WAIT_STATE(ch, PULSE_VIOLENCE);
      if (!ch->casting.tch || !skill_message(0, ch, ch->casting.tch, ch->casting.spell))
	{
	  send_to_char("You lost your concentration!\r\n", ch);
	  act("$n stops chanting abruptly!", TRUE, ch, 0, 0, TO_ROOM); 
	}
      if (circle_cast > 0) {
	if (number(1, 2) == 1)
	  SET_MEM_MEMED(ch, circle_cast, MAX(0, (GET_MEM_MEMED(ch, circle_cast) -1)));	
      }
    } else { /* cast spell returns 1 on success; subtract mana & set waitstate */
      if (GET_MEM_MEMED(ch, circle_cast) > 0) {
	cast_spell(ch, ch->casting.tch, ch->casting.obj, ch->casting.spell);
	WAIT_STATE(ch, PULSE_VIOLENCE * 2);
	SET_MEM_MEMED(ch, circle_cast, MAX(0, (GET_MEM_MEMED(ch, circle_cast) -1)));	
	if (spell_info[ch->casting.spell].violent && ch->casting.tch && 
	    IS_NPC(ch->casting.tch) && !FIGHTING(ch->casting.tch))   
	  if(number(0, 4)) {
	    hit(ch->casting.tch, ch, TYPE_UNDEFINED);
	    remember(ch->casting.tch, ch); }
d1647 1
a1647 33
    }
    return;
  } else {
    /*pc*/
    /* You throws the dice and you takes your chances.. 101% is total failure */
    if (number(0, 101) > GET_SKILL(ch, ch->casting.spell) && 
	(GET_LEVEL(ch) < spell_info[ch->casting.spell].min_level[(int) GET_CLASS(ch)] + 5) ) 
      {
	WAIT_STATE(ch, PULSE_VIOLENCE * 2);
	if (!ch->casting.tch || !skill_message(0, ch, ch->casting.tch, ch->casting.spell))
	  {
	    send_to_char("You lost your concentration!\r\n", ch);
	    act("$n stops chanting abruptly!", TRUE, ch, 0, 0, TO_ROOM); 
	  }
	/*
	 * if (spell_info[ch->casting.spell].violent && ch->casting.tch 
	 *&& IS_NPC(ch->casting.tch) && !FIGHTING(ch->casting.tch))
	 *hit(ch->casting.tch, ch, TYPE_UNDEFINED);
	 */
      } else { /* cast spell returns 1 on success; subtract mana & set waitstate */
	send_to_char("You complete your spell.\r\n", ch);
	act("$n completes $s spell...", FALSE, ch, 0, 0, TO_ROOM);
	if (cast_spell(ch, ch->casting.tch, ch->casting.obj, ch->casting.spell)) { 
	  WAIT_STATE(ch, PULSE_VIOLENCE);
	  charge_mem(ch, ch->casting.spell);
	  if (spell_info[ch->casting.spell].violent && ch->casting.tch && 
	      IS_NPC(ch->casting.tch) && !FIGHTING(ch->casting.tch))   
	    if(number(0, 4)) {
	      hit(ch->casting.tch, ch, TYPE_UNDEFINED);
	      remember(ch->casting.tch, ch); }
	}
      }
  }
@


1.68
log
@Create macros for stopping spellcasting.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.67 2007/04/17 23:38:03 myc Exp jps $
d2292 1
a2292 1
	 TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
@


1.67
log
@Introducing the new improved color spray!  It's now an area spell that
causes various effects based on caster skill.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.66 2007/03/27 04:27:05 myc Exp myc $
d44 1
d1180 2
a1181 6
  
  if (MOB_FLAGGED(ch, MOB_CASTING))
    return;
  
  if(PLR_FLAGGED(ch, PLR_CASTING))
    {
d1184 2
a1185 1
    }
d1469 1
a1469 2
      if((PLR_FLAGGED(ch, PLR_CASTING)) || (MOB_FLAGGED(ch, MOB_CASTING)))
        {
d1472 1
a1472 3
	    if (IS_NPC(ch))
	      REMOVE_BIT(MOB_FLAGS(ch), MOB_CASTING);
	    REMOVE_BIT(PLR_FLAGS(ch), PLR_CASTING);
d1504 1
a1504 5
	      if (IS_NPC(ch))
		REMOVE_BIT(MOB_FLAGS(ch), MOB_CASTING);
	      REMOVE_BIT(PLR_FLAGS(ch), PLR_CASTING);
	      act("You stop invoking abruptly!", FALSE, ch, 0, 0, TO_CHAR);
	      act("$n stops invoking abruptly!",FALSE, ch, 0, 0, TO_ROOM); 
d1528 2
a1529 6
                if (IS_NPC(ch))
		  REMOVE_BIT(MOB_FLAGS(ch), MOB_CASTING);
		REMOVE_BIT(PLR_FLAGS(ch), PLR_CASTING);
                act("You stop invoking abruptly!", FALSE, ch, 0, 0, TO_CHAR);
                act("$n stops invoking abruptly!",FALSE, ch, 0, 0, TO_ROOM); 
                continue;
d1539 4
a1542 9
	  if((ch->casting.casting_time) <= 0 || GET_LEVEL(ch) >= LVL_GOD)
            { 
	      if (IS_NPC(ch))
		REMOVE_BIT(MOB_FLAGS(ch), MOB_CASTING);
	      REMOVE_BIT(PLR_FLAGS(ch), PLR_CASTING);
	      complete_spell(ch);      
            }            
	  else
            {
@


1.66
log
@Increased casting times for cremate and combust.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.65 2007/03/20 19:43:53 jps Exp myc $
d805 1
d2577 1
a2577 1
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
@


1.65
log
@Allow a-desc to be used with wands targetted on self.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.64 2007/02/20 17:16:27 myc Exp jps $
d2198 1
a2198 1
	 CAST_SPEED6, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 35, FALSE);
d2206 1
a2206 1
	 CAST_SPEED5, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 23, FALSE);
@


1.64
log
@Charm person not castable in combat.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.63 2007/02/14 03:54:53 myc Exp myc $
d914 4
a917 1
                     act("$n points $p at $mself.", FALSE, ch, obj, 0, TO_ROOM);
@


1.63
log
@Added cremate and combust as spells to replace firewalk and greater firewalk.
Harness is cast on self now.  Minor paralysis, entangle, sleep, and charm
person now will now not make the mob attack for successes.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.62 2006/12/19 04:36:53 dce Exp myc $
d2539 1
a2539 1
  spello(SPELL_CHARM, 75, 50, 2, POS_FIGHTING,
@


1.62
log
@Modified Supernova to mimic Ice Shards.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.61 2006/11/20 04:42:36 jps Exp $
d225 1
a225 1
   "greater firewalk",
d227 1
a227 1
   "firewalk",           /* 170 */
a823 2
    case SPELL_FIREWALK: MANUAL_SPELL(spell_firewalk);break;
    case SPELL_GREATER_FIREWALK: MANUAL_SPELL(spell_greater_firewalk);break;
d2193 3
a2195 3
  spello(SPELL_GREATER_FIREWALK, 0, 0, 0, POS_STANDING,
	 TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED6, 0, SKILL_SPHERE_FIRE, 35, FALSE);
d2201 3
a2203 3
  spello(SPELL_FIREWALK, 0, 0, 0, POS_STANDING,
	 TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_FIRE, 23, FALSE);
d2234 1
a2234 1
	 TAR_CHAR_ROOM, TRUE, MAG_AFFECTS, C1,
d2418 2
a2419 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	 CAST_SPEED7, 0, SKILL_SPHERE_GENERIC, 21, FALSE);
d2438 1
a2438 1
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
d2540 1
a2540 1
	 TAR_CHAR_ROOM | TAR_NOT_SELF, TRUE, MAG_MANUAL, C1,
d2760 1
a2760 1
	 TAR_CHAR_ROOM, TRUE, MAG_AFFECTS, C1,
@


1.61
log
@Fix spell-item-checking for things in inventory
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.60 2006/11/20 03:10:59 jps Exp jps $
a823 1
    case SPELL_SUPERNOVA: MANUAL_SPELL(spell_supernova);break;
d2191 3
a2193 3
  spello(SPELL_SUPERNOVA, 0, 0, 0, POS_FIGHTING,
	 TAR_IGNORE, TRUE, MAG_MANUAL, C1,
	 18, FIRE_DAMAGE, SKILL_SPHERE_FIRE, 35, TRUE);
@


1.60
log
@Fix in-room target message for wands
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.59 2006/11/18 21:04:29 jps Exp jps $
d1491 1
a1491 1
	      for(obj=ch->carrying;obj;obj=obj->next)
@


1.59
log
@Make casting items use the same targeting code as regular spellcasting.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.58 2006/11/18 08:17:39 jps Exp jps $
d929 4
a932 2
                     else
                        act("$n points $p at $N.", TRUE, ch, obj, tch, TO_ROOM);
@


1.58
log
@Correct spelling of riposte.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.57 2006/11/18 04:26:32 jps Exp jps $
d42 2
d862 4
d869 162
a1030 109
  int i, k;
  struct char_data *tch = NULL, *next_tch;
  struct obj_data *tobj = NULL;
  
  one_argument(argument, arg);
  
  k = generic_find(arg, FIND_CHAR_ROOM | FIND_OBJ_INV | FIND_OBJ_ROOM |
		   FIND_OBJ_EQUIP, ch, &tch, &tobj);

  switch (GET_OBJ_TYPE(obj)) 
    {
    case ITEM_STAFF:
      act("You tap $p three times on the ground.", FALSE, ch, obj, 0, TO_CHAR);
      if (obj->action_description)
	act(obj->action_description, FALSE, ch, obj, 0, TO_ROOM);
      else
	act("$n taps $p three times on the ground.", FALSE, ch, obj, 0, TO_ROOM);

      if (GET_OBJ_VAL(obj, 2) <= 0) 
	{
	  act("It seems powerless.", FALSE, ch, obj, 0, TO_CHAR);
	  act("Nothing seems to happen.", FALSE, ch, obj, 0, TO_ROOM);
	} 
      else 
	{
	  GET_OBJ_VAL(obj, 2)--;
	  WAIT_STATE(ch, PULSE_VIOLENCE);
	  for (tch = world[ch->in_room].people; tch; tch = next_tch) 
	    {
	      next_tch = tch->next_in_room;
	      if (ch == tch)
		continue;

              ch->casting.spell = 0;
	      if (GET_OBJ_VAL(obj, 0))
		call_magic(ch, tch, NULL, GET_OBJ_VAL(obj, 3),
			   GET_OBJ_VAL(obj, 0), CAST_STAFF);
	      else
		call_magic(ch, tch, NULL, GET_OBJ_VAL(obj, 3),
			   DEFAULT_STAFF_LVL, CAST_STAFF);
	    }
	}
      break;
    case ITEM_WAND:
      if (k == FIND_CHAR_ROOM) 
	{
	  if (tch == ch) 
	    {
	      act("You point $p at yourself.", FALSE, ch, obj, 0, TO_CHAR);
	      act("$n points $p at $mself.", FALSE, ch, obj, 0, TO_ROOM);
	    } 
	  else 
	    {
	      act("You point $p at $N.", FALSE, ch, obj, tch, TO_CHAR);
	      if (obj->action_description != NULL)
		act(obj->action_description, FALSE, ch, obj, tch, TO_ROOM);
	      else
		act("$n points $p at $N.", TRUE, ch, obj, tch, TO_ROOM);
	    }
	} 
      else if (tobj != NULL) 
	{
	  act("You point $p at $P.", FALSE, ch, obj, tobj, TO_CHAR);
	  if (obj->action_description != NULL)
	    act(obj->action_description, FALSE, ch, obj, tobj, TO_ROOM);
	  else
	    act("$n points $p at $P.", TRUE, ch, obj, tobj, TO_ROOM);
	} 
      else 
	{
	  act("At what should $p be pointed?", FALSE, ch, obj, NULL, TO_CHAR);
	  return;
	}
      
      if (GET_OBJ_VAL(obj, 2) <= 0) 
	{
	  act("It seems powerless.", FALSE, ch, obj, 0, TO_CHAR);
	  act("Nothing seems to happen.", FALSE, ch, obj, 0, TO_ROOM);
	  return;
	}
      GET_OBJ_VAL(obj, 2)--;
      WAIT_STATE(ch, PULSE_VIOLENCE);

      ch->casting.spell = 0;
      if (GET_OBJ_VAL(obj, 0))
	call_magic(ch, tch, tobj, GET_OBJ_VAL(obj, 3),
		   GET_OBJ_VAL(obj, 0), CAST_WAND);
      else
	call_magic(ch, tch, tobj, GET_OBJ_VAL(obj, 3),
		   DEFAULT_WAND_LVL, CAST_WAND);
      break;
    case ITEM_SCROLL:
      if (*arg) 
	{
	  if (!k) 
	    {
	      act("There is nothing to here to affect with $p.", FALSE,
		  ch, obj, NULL, TO_CHAR);
	      return;
	    }
	} 
      else
	tch = ch;

      act("You recite $p which dissolves.", TRUE, ch, obj, 0, TO_CHAR);
      if (obj->action_description)
	act(obj->action_description, FALSE, ch, obj, NULL, TO_ROOM);
      else
	act("$n recites $p.", FALSE, ch, obj, NULL, TO_ROOM);
d1032 42
a1073 32
      WAIT_STATE(ch, PULSE_VIOLENCE);
      ch->casting.spell=0;
      for (i = 1; i < 4; i++)
	if (!(call_magic(ch, tch, tobj, GET_OBJ_VAL(obj, i),
			 GET_OBJ_VAL(obj, 0), CAST_SCROLL)))
	  break;

      if (obj != NULL)
	extract_obj(obj);
      break;
    case ITEM_POTION:
      tch = ch;
      act("You quaff $p.", FALSE, ch, obj, NULL, TO_CHAR);
      if (obj->action_description)
	act(obj->action_description, FALSE, ch, obj, NULL, TO_ROOM);
      else
	act("$n quaffs $p.", TRUE, ch, obj, NULL, TO_ROOM);

      WAIT_STATE(ch, PULSE_VIOLENCE);
      ch->casting.spell=0;
      for (i = 1; i < 4; i++)
	if (!(call_magic(ch, ch, NULL, GET_OBJ_VAL(obj, i),
			 GET_OBJ_VAL(obj, 0), CAST_POTION)))
	  break;
      
      if (obj != NULL)
	extract_obj(obj);
      break;
    default:
      log("SYSERR: Unknown object_type in mag_objectmagic");
      break;
    }
d1089 1
a1089 1
  char buf[256];
d1091 1
a1091 2
  if (spellnum < 0 || spellnum > TOP_SPELL_DEFINE) 
    {
d1095 1
a1095 1
    }
d1097 18
a1114 20
  if (GET_POS(ch) < SINFO.min_position) 
    {
      switch (GET_POS(ch)) 
	{
	case POS_SLEEPING:
	  send_to_char("You dream about great magical powers.\r\n", ch);
	  break;
	case POS_RESTING:
	  send_to_char("You cannot concentrate while resting.\r\n", ch);
	  break;
	case POS_SITTING:
	  send_to_char("You can't do this sitting!\r\n", ch);
	  break;
	case POS_FIGHTING:
	  send_to_char("Impossible!  You can't concentrate enough!\r\n", ch);
	  break;
	default:
	  send_to_char("You can't do much of anything like this!\r\n", ch);
	  break;
	}
d1116 3
a1118 3
    }
  if (IS_AFFECTED(ch, AFF_CHARM) && (ch->master == tch) && SINFO.violent) 
    {
d1122 1
a1122 2
  if ((tch != ch) && IS_SET(SINFO.targets, TAR_SELF_ONLY)) 
    {
d1125 2
a1126 3
    }
  if ((tch == ch) && IS_SET(SINFO.targets, TAR_NOT_SELF)) 
    {
d1129 2
a1130 3
    }
  if (IS_SET(SINFO.routines, MAG_GROUPS) && !IS_AFFECTED(ch, AFF_GROUP)) 
    {
d1133 2
a1134 3
    }
  if(GET_LEVEL(ch) < LVL_IMMORT) 
    {
d1136 3
a1138 3
	  GET_CLASS(ch) == CLASS_RANGER) && GET_ALIGNMENT(ch) < 350) {
	send_to_char("Your deity has removed your holy powers!\r\n",ch);
	return 0;
d1141 8
a1148 9
	 && GET_ALIGNMENT(ch) > -350) 
	{
	  send_to_char("Your deity has removed your unholy powers!\r\n",ch);
	  return 0;
	}
    }
  /*send_to_char(OK, ch);*/
  end_chant(ch, tch, tobj, spellnum);
  return (call_magic(ch, tch, tobj, spellnum, GET_LEVEL(ch), CAST_SPELL));
d1166 1
a1166 1
  int spellnum, i, target = 0;
d1296 3
a1298 74
  if (IS_SET(SINFO.targets, TAR_IGNORE)) 
    {
      target = TRUE;
      target_status = TARGET_ALL_ROOM;
    } else if (*t) 
      {
	if (!target && (IS_SET(SINFO.targets, TAR_CHAR_ROOM))) 
	  {
	    if ((tch = get_char_room_vis(ch, t)) != NULL){
	      target = TRUE;
	      target_status = TARGET_IN_ROOM;
	    }
	  }
	if (!target && IS_SET(SINFO.targets, TAR_CHAR_WORLD))
	  if ((tch = get_char_vis(ch, t))) {
	    target = TRUE;
	    target_status = TARGET_IN_WORLD;
	  }
	if (!target && IS_SET(SINFO.targets, TAR_OBJ_INV))
	  if ((tobj = get_obj_in_list_vis(ch, t, ch->carrying))) {
	    target = TRUE;
	    target_status = TARGET_IN_INV;
	  }     
	if (!target && IS_SET(SINFO.targets, TAR_OBJ_EQUIP)) 
	  {
	    for (i = 0; !target && i < NUM_WEARS; i++)
	      if (GET_EQ(ch, i) && !str_cmp(t, GET_EQ(ch, i)->name)) 
		{
		  tobj = GET_EQ(ch, i);
		  target = TRUE;
		  target_status = TARGET_EQUIP;
		}
	  }
	if (!target && IS_SET(SINFO.targets, TAR_OBJ_ROOM))
	  if ((tobj = get_obj_in_list_vis(ch, t, world[ch->in_room].contents))){
	    target = TRUE;
	    target_status = TARGET_IN_ROOM;
	  }
	if (!target && IS_SET(SINFO.targets, TAR_OBJ_WORLD))
	  if ((tobj = get_obj_vis(ch, t))) {
	    target = TRUE;
 	    target_status = TARGET_IN_WORLD;
	  }
	
      } else 
	{			/* if target string is empty */
	  if (!target && IS_SET(SINFO.targets, TAR_FIGHT_SELF))
	    if (FIGHTING(ch) != NULL) 
	      {
		tch = ch;
		target = TRUE;
		target_status = TARGET_SELF;
	      }
	  if (!target && IS_SET(SINFO.targets, TAR_FIGHT_VICT))
	    if (FIGHTING(ch) != NULL) 
	      {
		tch = FIGHTING(ch);
		target = TRUE;
		target_status = TARGET_FIGHTING;
	      }
	  /* if no target specified, and the spell isn't violent, default to self */
	  if (!target && IS_SET(SINFO.targets, TAR_CHAR_ROOM) && !SINFO.violent) 
	    {
	      tch = ch;
	      target = TRUE;
	      target_status = TARGET_SELF;
	    }
	  if (!target) 
	    {
	      sprintf(buf, "Upon %s should the spell be cast?\r\n", IS_SET(SINFO.targets, TAR_OBJ_ROOM | TAR_OBJ_INV | TAR_OBJ_WORLD) ? "what" : "whom");
	      send_to_char(buf, ch);
	      return;
	    }
	}
d1306 9
a1314 2
    send_to_char("Cannot find the target of your spell!\r\n", ch);
    return;
d1357 94
d2724 1
a2724 1
	 TAR_OBJ_WORLD, FALSE, MAG_MANUAL, C1,
@


1.57
log
@Renamed continual light spell to illumination, and it only works on
LIGHT items (still rooms too).
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.56 2006/11/13 19:24:00 jps Exp jps $
d319 1
a319 1
  "ripost",	       	/* 422 */ 
@


1.56
log
@"animate dead" is in sphere of death, and improves.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.55 2006/11/13 18:37:44 jps Exp jps $
d129 1
a129 1
  "continual light", 
d831 1
a831 1
    case SPELL_CONTINUAL_LIGHT: MANUAL_SPELL(spell_continual_light);break;
d2469 1
a2469 1
  spello(SPELL_CONTINUAL_LIGHT, 50, 25, 5, POS_STANDING,
@


1.55
log
@Change name to "sphere of enchantment" - to be consistent with
all our documentation.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.54 2006/11/13 16:55:03 jps Exp jps $
d2699 1
a2699 1
	 CAST_SPEED3, 0, SKILL_SPHERE_ENCHANT, 21, FALSE);
@


1.54
log
@Fix misuse of hide_invisible with act TO_VICT
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.53 2006/11/08 08:07:55 jps Exp jps $
d356 1
a356 1
  "sphere of enchanting", 
@


1.53
log
@Typo SKILL_BREATH -> SKILL_BREATHE
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.52 2006/11/08 07:59:43 jps Exp jps $
d1829 1
a1829 1
    act(buf, TRUE, ch, 0, gch, TO_VICT);
@


1.52
log
@Typo fix spellname "cure critic" -> "cure critical"
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.51 2006/07/20 07:41:49 cjd Exp jps $
d2859 1
a2859 1
  skillo(SKILL_BREATH);
@


1.51
log
@Typo fixes.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.50 2002/12/19 07:41:09 rls Exp $
d70 1
a70 1
  "cure critic",
@


1.50
log
@Updated define for curse to allow for cursing of in_room objects as well as updated
remove curse to look at the spell_remove_curse function (much more handy dandy!)
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.49 2002/10/14 02:16:08 jjl Exp $
d1126 1
a1126 1
      send_to_char("You are to relaxed..\r\n", ch);
d1589 1
a1589 1
      send_to_char("You are to relaxed..\r\n", ch);
@


1.49
log
@An update to turn vitality into a set of 6 spells, lesser endurance,
endurance, greater endurance, vitality, greater vitality, and dragon's
health.  Greater endurance is what vitality was.  The rest are scaled
appropriately.    The higher end may need scaled down, or may not.
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.48 2002/09/29 03:18:31 jjl Exp $
d833 2
d2527 3
a2529 2
	 TAR_CHAR_ROOM | TAR_OBJ_INV, TRUE, MAG_AFFECTS | MAG_ALTER_OBJS, C1,
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2656 1
a2656 1
  
d2658 2
a2659 3
	 TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE, MAG_UNAFFECTS |
	 MAG_ALTER_OBJS, C1,
	 CAST_SPEED4, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
@


1.48
log
@This should fix my previous idiocy.  I had swapped the spell sphere with the
# of pages, thus it took like 100+ pages to scribe summon corpse.  DUH!
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.47 2002/09/15 03:56:46 jjl Exp jjl $
d125 1
a125 1
  "vitality",	/* 70 */
d250 7
a256 1
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 210 */
d2752 12
d2766 5
a2770 1
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 5, FALSE);
d2772 4
@


1.47
log
@Added summon corpse and shift corpse - jjl
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.46 2002/09/13 02:32:10 jjl Exp $
d2629 1
a2629 1
	 CAST_SPEED6, 0, 0, SKILL_SPHERE_SUMMON, FALSE);
d2633 1
a2633 1
	 CAST_SPEED7, 0, 0, SKILL_SPHERE_SUMMON, TRUE);
@


1.46
log
@Updated header comments
@
text
@d2 1
a2 1
 * $Id: spell_parser.c,v 1.45 2002/07/16 23:25:38 rls Exp $
d243 46
a288 43
        "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 190 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 195 */
        "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 200 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 205 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 210 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 215 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 220 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 225 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 230 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 235 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 240 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 245 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 250 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 255 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 260 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 265 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 270 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 275 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 280 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 285 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 290 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 295 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 300 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 305 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 310 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 315 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 320 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 325 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 330 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 335 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 340 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 345 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 350 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 355 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 360 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 365 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 370 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 375 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 380 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 385 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 390 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 395 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 400 */
d790 2
d2626 8
@


1.45
log
@added in necro spell, bone armor
@
text
@d1 3
a3 1
// $Id: spell_parser.c,v 1.44 2002/07/16 23:22:54 rls Exp rls $
d2857 173
a3029 171
// Revision 1.39  2001/01/26 23:53:00  mtp
// fix mages mem bug while allowing warriors to use objects?
//
// Revision 1.38  2000/12/18 15:48:24  rsd
// made creeping doom a quest spell.
//
// Revision 1.37  2000/11/25 02:33:15  rsd
// Altered comment header and added back rlog messages
// from prior to the addition of the $log$ string.
//
// Revision 1.36  2000/11/16 00:17:38  rsd
// made blindness aggressive
//
// Revision 1.35  2000/10/05 03:12:10  rsd
// Gurlaek altered some function, call magic I think, to
// Zero out the spell when done so we don't get bogus info
// when using items that cast spells.
//
// Revision 1.34  2000/04/22 22:41:33  rsd
// fixed the spelling of deity in player output, also made
// wall of freaking ice a quest spell.
//
// Revision 1.33  2000/04/15 23:13:08  rsd
// made some spells that weren't quest before, quest...
//
// Revision 1.32  2000/03/28 06:55:09  cso
// damn off-by-one errors
//
// Revision 1.31  2000/03/26 21:25:24  cso
// find_skill_num: rather than exiting on partial match, made it mark partial
//   matches but continue looking for a complete match, then return the partial
//   at the end only if no complete was found.
//
// Revision 1.30  2000/03/24 23:52:23  rsd
// altered the comment header while I had the file open for examination
//
// Revision 1.29  2000/03/18 06:22:54  rsd
// WHOAAAAH NELLY!
// Ok, since SPELL_SPHERE_X was removed each spello was sed'd
// to replace it with SKILL_SPHERE_X
//
// Revision 1.28  1999/11/29 00:05:28  cso
// cast_spell: pets can now cast nonviolent spells on master (couldn't cast any
//  before)
// do_cast: misc was being initialized to '\0'. shoulda been NULL. also fixed
//  a mem leak every time someone casts a spell with an argument
//
// Revision 1.27  1999/11/23 15:48:23  jimmy
// Fixed the slashing weapon skill.  I had it erroneously as stabbing. Doh.
// Reinstated dual wield.
// Allowed mobs/players to pick up items while fighting.
// Fixed a bug in the damage message that wrongfully indicated a miss
// due to a rounding error in the math.
// This was all done in order to facilitate the chance to sling your
// weapon in combat.  Dex and proficiency checks are now made on any missed
// attact and a failure of both causes the weapon to be slung.
//
// Revision 1.25  1999/11/19 04:29:49  rsd
// Added skillo references to the new sphere skills added
// earlier by jimmy.  Also added the "sphere of X" array to
// output to the players when they type skills.  Changed the
// players output for know spell to "spell knowledge"
//
// Revision 1.24  1999/10/19 18:01:03  jimmy
// Added SPHERE_DIVIN (divination) spell sphere.  Changed spheres of spells
// to fit with future implementation of the spheres as skills.
//
// Revision 1.23  1999/10/08 17:49:54  rsd
// fixed word of recall to check in the room for the target.
//
// Revision 1.22  1999/09/18 16:46:06  dce
// Word oof recall is self only
//
// Revision 1.21  1999/09/05 07:00:39  jimmy
// Added RCS Log and Id strings to each source file
//
// Revision 1.20  1999/08/28 01:06:50  mtp
// rewrote strtok stuff to scan string so must have final quote
//
// Revision 1.19  1999/08/18 19:23:42  mud
// made blur a quest spell
//
// Revision 1.18  1999/07/24 03:16:01  jimmy
// fixed spell recognition so gods always see spells.
// gods now instant cast spells without waiting
// WORD OF RECALL was set to casting time of 1
// as was HOLY/UNHOLY WORD
// --gurlaek
//
// Revision 1.17  1999/07/24 01:28:40  jimmy
// added a check in update_casting to stop players who were saved in the casting state
// just before a crash.  Such players would get into an endless casting loop and crash
// the mud.
// 
// -gurlaek
//
// Revision 1.16  1999/07/22 17:43:59  jimmy
// Added the IDENTIFY spell back in to the castable spells list.
// --gurlaek
//
// Revision 1.15  1999/07/20 19:45:51  jimmy
// This is the spanky New Spell recognition code.
// This code allows mobs/players that have the KNOW_SPELL skill
// to make a skill check to guess the spell.  A good roll will show both
// the spell and the target.  A bad roll will show the spell garbled and
// then an INT check for the target.  If a really bad roll is made, the spell
// will be replaced by an incorrect one.  the heart of this system is
// start_chant(), end_chant, and bad_guess().
// --gurlaek 7/20/1999
//
// Revision 1.14  1999/07/15 03:27:34  jimmy
// Mob casters can not hit while casting.
// Updated spell cast times to be more realistic
// changed combat to 4 seconds per round.
// Removed do_order semantics that told the order to onlookers.
//
// Revision 1.13  1999/07/14 19:24:03  jimmy
// The combat system was enhanced/improved in the following ways:  Mobs
// can no longer flee while bashed or sitting.  Fleeing causes casters to
// stop casting.  You can now flee while flying.  pk checks were added to
// bash, bodyslam, throatcut, etc etc.  Lots of reformatting and little
// fixes. spellcasting for mobs is now very similar to PC spellcasting.
// MObs will now unhide/unconceal/univis/ etc when casting offensive spells.
// Mobs no longer improve skills.  Bash now requires mobs to have a shield
// just like PC's.  It's aT 25% with no shield and 50% with a 2handed weapon.
// --gurlaek
//
// Revision 1.12  1999/05/26 01:55:59  mud
// added skill 450 summon mount also added a skillo
// skillo(SKILL_SUMMON_MOUNT)
//
// Revision 1.11  1999/04/18 20:12:54  dce
// Magic missile works like Fire Dart, Ice Dart works.
//
// Revision 1.10  1999/03/24 23:43:16  jimmy
// Working on quest spells.  Still in progress.  HOwever, spell_info[] array now has a flag
// quest.  If it's true then it's considerd a quest spell.  Also, allowed pyro/cryo's to
// learn from any sorcerer type teacher
// fingon
//
// Revision 1.9  1999/03/10 00:03:37  dce
// Monk semantics for dodge/parry/ripost/attack
//
// Revision 1.8  1999/03/08 23:24:48  dce
// Added Springleap for monks
//
// Revision 1.7  1999/03/08 20:22:35  dce
// Adds the skill safefall for monks.
//
// Revision 1.6  1999/03/07 05:01:09  dce
// Chant finishes and wearoff messages.
//
// Revision 1.5  1999/03/03 20:11:02  jimmy
// Many enhancements to scribe and spellbooks.  Lots of checks added.  Scribe is now a skill.
// Spellbooks now have to be held to scribe as well as a quill in the other hand.
// 
// -fingon
//
// Revision 1.4  1999/02/26 22:30:30  dce
// Monk additions/fixes
//
// Revision 1.3  1999/02/13 19:37:12  dce
// Rewrote Continual Light and Darkness to be manual spells to meet our needs.
//
// Revision 1.2  1999/02/02 21:12:27  mud
// indented entire FILE AAAARRRRGGGGG
// dos2unix
//
// Revision 1.1  1999/01/29 01:23:32  mud
// Initial revision
//
@


1.44
log
@added in new necro spell, bone armor
.c
ci spells.h
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.43 2002/03/30 19:31:02 dce Exp $
a2854 3
// Revision 1.40  2002/02/25 11:01:14  rls
// Changed TAR_NOT_SELF to TAR_FIGHT_VICT in spell_blindness (now aggro)
//
@


1.43
log
@*** empty log message ***
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.42 2002/03/26 04:52:29 rls Exp $
d240 2
a241 1
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 190 */
d2759 4
@


1.42
log
@*** empty log message ***
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.41 2002/03/26 04:25:58 rls Exp rls $
d2385 1
a2385 1
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_FIGHT_VICT, TRUE,
@


1.41
log
@Removed dispel magic, greater_firewalk, firewalk, circle of fire from spell defines
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.40 2002/02/25 11:01:14 rls Exp $
d152 1
a152 1
  /*"dispel magic",*/ 
d218 1
a218 1
  /* "circle of fire", */    /* 165 */
d221 1
a221 1
  /*"greater firewalk",*/
d223 1
a223 1
  /*"firewalk",*/           /* 170 */
d232 1
a232 1
  /*"greater waterwalk",*/
a2849 1
// $Log: spell_parser.c,v $
@


1.40
log
@Changed TAR_NOT_SELF to TAR_FIGHT_VICT in spell_blindness (now aggro)
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.39 2001/01/26 23:53:00 mtp Exp $
d152 1
a152 1
  "dispel magic", 
d218 1
a218 1
   "circle of fire",     /* 165 */
d221 1
a221 1
   "greater firewalk",
d223 1
a223 1
   "firewalk",           /* 170 */
d232 1
a232 1
   "greater waterwalk",
d2851 3
@


1.39
log
@fix mages mem bug while allowing warriors to use objects?
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.38 2000/12/18 15:48:24 rsd Exp $
d2385 1
a2385 1
	 TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_FIGHT_VICT, TRUE,
d2851 3
@


1.38
log
@made creeping doom a quest spell.
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.37 2000/11/25 02:33:15 rsd Exp $
d822 1
d824 1
d879 2
d929 2
d958 1
d976 1
d2851 3
@


1.37
log
@Altered comment header and added back rlog messages
from prior to the addition of the $log$ string.
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.36 2000/11/16 00:17:38 rsd Exp $
d2544 1
a2544 1
	 CAST_SPEED7, EARTH_DAMAGE, SKILL_SPHERE_EARTH, 35, FALSE);
d2843 4
@


1.36
log
@made blindness aggressive
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.35 2000/10/05 03:12:10 rsd Exp $
d2843 3
d2908 95
@


1.35
log
@Gurlaek altered some function, call magic I think, to
Zero out the spell when done so we don't get bogus info
when using items that cast spells.
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.34 2000/04/22 22:41:33 rsd Exp $
d2377 1
a2377 1
	 TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_FIGHT_VICT, FALSE,
d2843 5
@


1.34
log
@fixed the spelling of deity in player output, also made
wall of freaking ice a quest spell.
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.33 2000/04/15 23:13:08 rsd Exp $
d820 3
d2843 4
@


1.33
log
@made some spells that weren't quest before, quest...
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.32 2000/03/28 06:55:09 cso Exp $
d1048 1
a1048 1
	send_to_char("Your diety has removed your holy powers!\r\n",ch);
d1054 1
a1054 1
	  send_to_char("Your diety has removed your unholy powers!\r\n",ch);
d2002 1
a2002 1
	 18, COLD_DAMAGE, SKILL_SPHERE_WATER, 27, FALSE);
d2840 3
@


1.32
log
@damn off-by-one errors
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.31 2000/03/26 21:25:24 cso Exp $
d2010 1
a2010 1
	 18, COLD_DAMAGE, SKILL_SPHERE_WATER, 35, FALSE);
d2424 1
a2424 1
	 CAST_SPEED5, 0, SKILL_SPHERE_ENCHANT, 35, FALSE);
d2840 3
@


1.31
log
@find_skill_num: rather than exiting on partial match, made it mark partial
  matches but continue looking for a complete match, then return the partial
  at the end only if no complete was found.
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.30 2000/03/24 23:52:23 rsd Exp cso $
d625 1
a625 1
  int index = 1, abbrevmatch = -1, ok;
d2840 5
@


1.30
log
@altered the comment header while I had the file open for examination
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.29 2000/03/18 06:22:54 rsd Exp $
d620 3
a622 1
	 
d625 1
a625 1
  int index = 0, ok;
d631 1
a631 1
      if (is_abbrev(name, spells[index]))
d633 8
d652 4
a655 2
      if (ok && !*first2)
	return index;
d658 1
a658 1
  return -1;
a660 2


d2840 3
@


1.29
log
@WHOAAAAH NELLY!
Ok, since SPELL_SPHERE_X was removed each spello was sed'd
to replace it with SKILL_SPHERE_X
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.28 1999/11/29 00:05:28 cso Exp $
d3 1
a3 1
 *   File: spell_parser.c                                Part of CircleMUD *
d8 3
a10 1
 *  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
a13 1

a16 1

d2830 5
@


1.28
log
@cast_spell: pets can now cast nonviolent spells on master (couldn't cast any
 before)
do_cast: misc was being initialized to '\0'. shoulda been NULL. also fixed
 a mem leak every time someone casts a spell with an argument
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.27 1999/11/23 15:48:23 jimmy Exp cso $
d1972 1
a1972 1
	 CAST_SPEED1, COLD_DAMAGE, SPELL_SPHERE_WATER, 7, FALSE);
d1976 1
a1976 1
	 CAST_SPEED3, 0, SPELL_SPHERE_PROT, 13, FALSE);
d1980 1
a1980 1
	 CAST_SPEED3, 0, SPELL_SPHERE_SUMMON, 17, FALSE);
d1984 1
a1984 1
	 CAST_SPEED4, COLD_DAMAGE, SPELL_SPHERE_AIR, 21, FALSE);
d1988 1
a1988 1
	 CAST_SPEED4, COLD_DAMAGE, SPELL_SPHERE_WATER, 25, FALSE);
d1992 1
a1992 1
	 18, COLD_DAMAGE, SPELL_SPHERE_WATER, 27, FALSE);
d1996 1
a1996 1
	 CAST_SPEED7, COLD_DAMAGE, SPELL_SPHERE_WATER, 29, FALSE);
d2000 1
a2000 1
	 18, COLD_DAMAGE, SPELL_SPHERE_WATER, 35, FALSE);
d2004 1
a2004 1
	 CAST_SPEED6, 0, SPELL_SPHERE_ENCHANT, 35, FALSE);
d2008 1
a2008 1
	 CAST_SPEED7, 0, SPELL_SPHERE_PROT, 29, FALSE);
d2012 1
a2012 1
	 CAST_SPEED7, 0, SPELL_SPHERE_WATER, 27, FALSE);
d2016 1
a2016 1
	 CAST_SPEED3, 0, SPELL_SPHERE_WATER, 11, FALSE);
d2020 1
a2020 1
	 CAST_SPEED6, 0, SPELL_SPHERE_WATER, 23, FALSE);
d2024 1
a2024 1
	 CAST_SPEED2, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 9, FALSE);
d2028 1
a2028 1
	 CAST_SPEED3, 0, SPELL_SPHERE_SUMMON, 7, FALSE);
d2032 1
a2032 1
	 CAST_SPEED3, 0, SPELL_SPHERE_FIRE, 11, FALSE);
d2036 1
a2036 1
	 CAST_SPEED4, 0, SPELL_SPHERE_FIRE, 17, FALSE);
d2040 1
a2040 1
	 CAST_SPEED4, 0, SPELL_SPHERE_SUMMON, 19, FALSE);
d2044 1
a2044 1
	 CAST_SPEED4, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 21, FALSE);
d2048 1
a2048 1
	 CAST_SPEED6, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 25, FALSE);
d2052 1
a2052 1
	 C1, CAST_SPEED5, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 29, FALSE);
d2056 1
a2056 1
	 CAST_SPEED6, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 25, FALSE);
d2060 1
a2060 1
	 CAST_SPEED5, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 25, FALSE);
d2064 1
a2064 1
	 18, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 35, TRUE);
d2068 1
a2068 1
	 CAST_SPEED6, 0, SPELL_SPHERE_FIRE, 35, FALSE);
d2072 1
a2072 1
	 CAST_SPEED7, 0, SPELL_SPHERE_PROT, 29, FALSE);
d2076 1
a2076 1
	 CAST_SPEED5, 0, SPELL_SPHERE_FIRE, 23, FALSE);
d2080 1
a2080 1
	 CAST_SPEED6, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2084 1
a2084 1
	 C1, CAST_SPEED6, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, FALSE);
d2088 1
a2088 1
	 CAST_SPEED7, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d2092 1
a2092 1
	 16, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2096 1
a2096 1
	 CAST_SPEED4, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2100 1
a2100 1
	 CAST_SPEED6, 0, SPELL_SPHERE_PROT, 5, FALSE);
d2104 1
a2104 1
	 CAST_SPEED7, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2108 1
a2108 1
	 CAST_SPEED7, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2112 1
a2112 1
	 CAST_SPEED7, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2116 1
a2116 1
	 CAST_SPEED5, 0, SPELL_SPHERE_SUMMON, 25, FALSE);
d2120 1
a2120 1
	 CAST_SPEED3, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d2124 1
a2124 1
	 CAST_SPEED2, 0, SPELL_SPHERE_PROT, 17, FALSE);
d2128 1
a2128 1
	 CAST_SPEED4, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2132 1
a2132 1
	 CAST_SPEED3, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC, 5, FALSE);
d2136 1
a2136 1
	 18, 0, SPELL_SPHERE_SUMMON, 5, TRUE);
d2140 1
a2140 1
	 CAST_SPEED5, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2144 1
a2144 1
	 CAST_SPEED2, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2148 1
a2148 1
	 CAST_SPEED1, 0, SPELL_SPHERE_PROT, 5, FALSE);
d2152 1
a2152 1
	 CAST_SPEED2, 0, SPELL_SPHERE_GENERIC, 5, FALSE);
d2156 1
a2156 1
	 CAST_SPEED2, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, FALSE);
d2160 1
a2160 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2164 1
a2164 1
	 CAST_SPEED5, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2168 1
a2168 1
	 CAST_SPEED4, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2172 1
a2172 1
	 16, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, TRUE);
d2176 1
a2176 1
	 CAST_SPEED4, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, FALSE);
d2180 1
a2180 1
	 CAST_SPEED5, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2184 1
a2184 1
	 CAST_SPEED5, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2188 1
a2188 1
	 CAST_SPEED6, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2192 1
a2192 1
	 16, 0, SPELL_SPHERE_SUMMON, 5, TRUE);
d2196 1
a2196 1
	 CAST_SPEED7, 0, SPELL_SPHERE_GENERIC, 5, TRUE);
d2200 1
a2200 1
	 CAST_SPEED5, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2204 1
a2204 1
	 C1, CAST_SPEED7, 0, SPELL_SPHERE_SUMMON, 5, TRUE);
d2208 1
a2208 1
	 CAST_SPEED5, 0, SPELL_SPHERE_DIVIN, 5, FALSE);
d2212 1
a2212 1
	 CAST_SPEED5, 0, SPELL_SPHERE_DIVIN, 5, FALSE);
d2216 1
a2216 1
	 CAST_SPEED6, 0, SPELL_SPHERE_SUMMON, 5, FALSE); 
d2220 1
a2220 1
	 CAST_SPEED4, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d2224 1
a2224 1
	 18, ALIGN_DAMAGE, SPELL_SPHERE_DEATH, 5, FALSE);
d2228 1
a2228 1
	 CAST_SPEED5, ALIGN_DAMAGE, SPELL_SPHERE_DEATH, 5, FALSE);
d2232 1
a2232 1
	 CAST_SPEED5, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC, 5, FALSE);
d2236 1
a2236 1
	 CAST_SPEED3, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC, 5, FALSE);
d2240 1
a2240 1
	 CAST_SPEED4, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2244 1
a2244 1
	 CAST_SPEED4, 0, SPELL_SPHERE_PROT, 5, FALSE);
d2248 1
a2248 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2252 1
a2252 1
	 CAST_SPEED1, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, FALSE);
d2256 1
a2256 1
	 CAST_SPEED1, AIR_DAMAGE, SPELL_SPHERE_AIR, 5, FALSE);
d2260 1
a2260 1
	 CAST_SPEED1, COLD_DAMAGE, SPELL_SPHERE_WATER, 5, FALSE);
d2264 1
a2264 1
	 CAST_SPEED1, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 5, FALSE);
d2268 1
a2268 1
	 CAST_SPEED1, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, FALSE);
d2272 1
a2272 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2276 1
a2276 1
	 CAST_SPEED5, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 27, FALSE);
d2280 1
a2280 1
	 CAST_SPEED6, 0, SPELL_SPHERE_ENCHANT, 23, FALSE);
d2284 1
a2284 1
	 20, 0, SPELL_SPHERE_SUMMON, 35, TRUE);
d2288 1
a2288 1
	 C1, CAST_SPEED6, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 27, FALSE);
d2292 1
a2292 1
	 CAST_SPEED7, 0, SPELL_SPHERE_GENERIC, 21, FALSE);
d2296 1
a2296 1
	 CAST_SPEED4, 0, SPELL_SPHERE_PROT, 23, FALSE);
d2300 1
a2300 1
	 CAST_SPEED7, 0, SPELL_SPHERE_PROT, 35, TRUE);
d2304 1
a2304 1
	 CAST_SPEED3, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 17, FALSE);
d2308 1
a2308 1
	 CAST_SPEED3, COLD_DAMAGE, SPELL_SPHERE_WATER, 17, FALSE);
d2312 1
a2312 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 21, FALSE);
d2316 1
a2316 1
	 CAST_SPEED3, 0, SPELL_SPHERE_SUMMON, 11, FALSE);
d2320 1
a2320 1
	 CAST_SPEED4, 0, SPELL_SPHERE_ENCHANT, 21, FALSE);
d2324 1
a2324 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 13, FALSE);
d2328 1
a2328 1
	 16, 0, SPELL_SPHERE_DIVIN, 17, TRUE);
d2332 1
a2332 1
	 CAST_SPEED1, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d2337 1
a2337 1
         C1, CAST_SPEED4, 0, SPELL_SPHERE_GENERIC, 15, FALSE);
d2341 1
a2341 1
	 1, ALIGN_DAMAGE, SPELL_SPHERE_DEATH, 5, FALSE);
d2345 1
a2345 1
	 1, ALIGN_DAMAGE, SPELL_SPHERE_DEATH, 5, FALSE);
d2349 1
a2349 1
	 CAST_SPEED2, 0, SPELL_SPHERE_PROT, 5, FALSE);
d2353 1
a2353 1
	 CAST_SPEED7, 0, SPELL_SPHERE_ENCHANT, 29, FALSE);
d2357 1
a2357 1
	 CAST_SPEED7, 0, SPELL_SPHERE_ENCHANT, 29, FALSE);
d2361 1
a2361 1
	 C1, CAST_SPEED2, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2366 1
a2366 1
	 CAST_SPEED4, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2370 1
a2370 1
	 C1, CAST_SPEED5, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2374 1
a2374 1
	 CAST_SPEED3, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, FALSE);
d2378 1
a2378 1
	 CAST_SPEED3, 0, SPELL_SPHERE_DIVIN, 15, FALSE);
d2382 1
a2382 1
	 CAST_SPEED2, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, FALSE);
d2386 1
a2386 1
	 CAST_SPEED4, COLD_DAMAGE, SPELL_SPHERE_WATER, 19, FALSE);
d2390 1
a2390 1
	 CAST_SPEED5, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC, 25, FALSE);
d2394 1
a2394 1
	 CAST_SPEED7, EARTH_DAMAGE, SPELL_SPHERE_EARTH, 37, TRUE);
d2398 1
a2398 1
	 CAST_SPEED5, 0, SPELL_SPHERE_ENCHANT, 29, FALSE);
d2402 1
a2402 1
	 16, COLD_DAMAGE, SPELL_SPHERE_WATER, 31, TRUE);
d2406 1
a2406 1
	 CAST_SPEED5, COLD_DAMAGE, SPELL_SPHERE_WATER, 23, FALSE);
d2410 1
a2410 1
	 CAST_SPEED4, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 5, FALSE);
d2414 1
a2414 1
	 CAST_SPEED5, 0, SPELL_SPHERE_ENCHANT, 35, FALSE);
d2418 1
a2418 1
	 CAST_SPEED6, 0, SPELL_SPHERE_SUMMON, 5, TRUE);
d2422 1
a2422 1
	 C1, CAST_SPEED2, COLD_DAMAGE, SPELL_SPHERE_WATER, 7, FALSE);
d2426 1
a2426 1
	 CAST_SPEED7, 0, SPELL_SPHERE_SUMMON, 35, FALSE);
d2430 1
a2430 1
	 CAST_SPEED5, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2435 1
a2435 1
	 CAST_SPEED5, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2443 1
a2443 1
	 CAST_SPEED6, 0, SPELL_SPHERE_ENCHANT, 35, FALSE);
d2447 1
a2447 1
	 CAST_SPEED5, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC, 21, FALSE);
d2451 1
a2451 1
	 CAST_SPEED4, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2455 1
a2455 1
	 CAST_SPEED1, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d2459 1
a2459 1
	 CAST_SPEED1, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d2463 1
a2463 1
	 CAST_SPEED2, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2467 1
a2467 1
	 CAST_SPEED4, 0, SPELL_SPHERE_HEALING, 15, FALSE);
d2471 1
a2471 1
	 CAST_SPEED3, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2475 1
a2475 1
	 CAST_SPEED2, 0, SPELL_SPHERE_HEALING, 9, FALSE);
d2479 1
a2479 1
	 CAST_SPEED2, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2483 1
a2483 1
	 CAST_SPEED3, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2487 1
a2487 1
	 CAST_SPEED4, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2491 1
a2491 1
	 CAST_SPEED5, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2495 1
a2495 1
	 CAST_SPEED3, 0, SPELL_SPHERE_DIVIN, 9, FALSE);
d2499 1
a2499 1
	 CAST_SPEED3, 0, SPELL_SPHERE_DIVIN, 19, FALSE);
d2503 1
a2503 1
	 CAST_SPEED3, 0, SPELL_SPHERE_DIVIN, 5, FALSE);
d2507 1
a2507 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 17, FALSE);
d2511 1
a2511 1
	 CAST_SPEED3, 0, SPELL_SPHERE_DIVIN, 13, FALSE);
d2515 1
a2515 1
	 CAST_SPEED3, ALIGN_DAMAGE, SPELL_SPHERE_DEATH, 5, FALSE);
d2519 1
a2519 1
	 CAST_SPEED5, ALIGN_DAMAGE, SPELL_SPHERE_DEATH, 5, FALSE);
d2523 1
a2523 1
	 CAST_SPEED5, EARTH_DAMAGE, SPELL_SPHERE_EARTH, 5, FALSE);
d2527 1
a2527 1
	 CAST_SPEED6, EARTH_DAMAGE, SPELL_SPHERE_EARTH, 35, FALSE);
d2531 1
a2531 1
	 CAST_SPEED7, EARTH_DAMAGE, SPELL_SPHERE_EARTH, 35, FALSE);
d2535 1
a2535 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 23, FALSE);
d2539 1
a2539 1
	 CAST_SPEED5, DEATH_DAMAGE, SPELL_SPHERE_DEATH, 19, FALSE);
d2543 1
a2543 1
	 CAST_SPEED1, DEATH_DAMAGE, SPELL_SPHERE_DEATH, 5, FALSE);
d2547 1
a2547 1
	 CAST_SPEED5, 0, SPELL_SPHERE_PROT, 9, TRUE);
d2551 1
a2551 1
	 CAST_SPEED7, 0, SPELL_SPHERE_SUMMON, 5, TRUE);
d2555 1
a2555 1
	 CAST_SPEED5, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 21, FALSE);
d2559 1
a2559 1
	 CAST_SPEED6, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5, FALSE);
d2563 1
a2563 1
	 CAST_SPEED6, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2567 1
a2567 1
	 CAST_SPEED6, 0, SPELL_SPHERE_HEALING, 5, TRUE);
d2571 1
a2571 1
	 CAST_SPEED5, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5, FALSE);
d2575 1
a2575 1
	 CAST_SPEED5, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2579 1
a2579 1
	 CAST_SPEED3, 0, SPELL_SPHERE_DIVIN, 9, FALSE);
d2584 1
a2584 1
	 CAST_SPEED4, 0, SPELL_SPHERE_ENCHANT, 17, FALSE);
d2588 1
a2588 1
	 CAST_SPEED2, 0, SPELL_SPHERE_ENCHANT, 13, FALSE);
d2592 1
a2592 1
	 CAST_SPEED3, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 17, FALSE);
d2596 1
a2596 1
	 CAST_SPEED4, 0, 0, SPELL_SPHERE_DIVIN, FALSE);
d2600 1
a2600 1
	 CAST_SPEED2, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC, 5, FALSE);
d2605 1
a2605 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2609 1
a2609 1
	 CAST_SPEED3, 0, SPELL_SPHERE_PROT, 5, FALSE);
d2614 1
a2614 1
	 CAST_SPEED4, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2618 1
a2618 1
	 CAST_SPEED1, 0, SPELL_SPHERE_PROT, 35, FALSE);
d2622 1
a2622 1
	 CAST_SPEED2, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 9, FALSE);
d2626 1
a2626 1
	 CAST_SPEED4, 0, SPELL_SPHERE_ENCHANT, 19, FALSE);
d2630 1
a2630 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2634 1
a2634 1
	 CAST_SPEED5, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d2638 1
a2638 1
	 26, 0, SPELL_SPHERE_HEALING, 5, TRUE);
d2642 1
a2642 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 11, FALSE);
d2646 1
a2646 1
	 CAST_SPEED3, 0, SPELL_SPHERE_SUMMON, 15, FALSE);
d2650 1
a2650 1
	 20, 0, SPELL_SPHERE_SUMMON, 33, TRUE);
d2654 1
a2654 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 21, FALSE);
d2658 1
a2658 1
	 CAST_SPEED3, 0, SPELL_SPHERE_SUMMON, 19, FALSE);
d2662 1
a2662 1
	 CAST_SPEED5, 0, SPELL_SPHERE_SUMMON, 31, FALSE);
d2666 1
a2666 1
	 CAST_SPEED7, 0, SPELL_SPHERE_SUMMON, 35, FALSE);
d2670 1
a2670 1
	 1, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d2675 1
a2675 1
	 CAST_SPEED3, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2679 1
a2679 1
	 SPELL_SPHERE_FIRE, 35, FALSE);
d2683 1
a2683 1
	 18, 0, SPELL_SPHERE_SUMMON, 5, TRUE);
d2687 1
a2687 1
	 CAST_SPEED3, 0, SPELL_SPHERE_DIVIN, 19, FALSE);
d2691 1
a2691 1
	 CAST_SPEED3, 0, SPELL_SPHERE_PROT, 5, FALSE);
d2695 1
a2695 1
	 CAST_SPEED3, ALIGN_DAMAGE, SPELL_SPHERE_DEATH, 5, FALSE);
d2699 1
a2699 1
	 CAST_SPEED3, 0, SPELL_SPHERE_PROT, 19, FALSE);
d2703 1
a2703 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 19, FALSE);
d2707 1
a2707 1
	 CAST_SPEED6, 0, SPELL_SPHERE_ENCHANT, 25, TRUE);
d2711 1
a2711 1
	 CAST_SPEED5, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2715 1
a2715 1
	 CAST_SPEED5, 0, SPELL_SPHERE_SUMMON, 21, FALSE);
d2719 1
a2719 1
	 CAST_SPEED2, 0, SPELL_SPHERE_ENCHANT, 9, FALSE);
d2723 1
a2723 1
	 CAST_SPEED2, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5, FALSE); 
d2727 1
a2727 1
	 CAST_SPEED3, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5, FALSE); 
d2731 1
a2731 1
	 CAST_SPEED4, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5, FALSE); 
d2735 1
a2735 1
	 CAST_SPEED3, 0, SPELL_SPHERE_DIVIN, 5, FALSE);
d2830 6
@


1.27
log
@Fixed the slashing weapon skill.  I had it erroneously as stabbing. Doh.
Reinstated dual wield.
Allowed mobs/players to pick up items while fighting.
Fixed a bug in the damage message that wrongfully indicated a miss
due to a rounding error in the math.
This was all done in order to facilitate the chance to sling your
weapon in combat.  Dex and proficiency checks are now made on any missed
attact and a failure of both causes the weapon to be slung.
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.25 1999/11/19 04:29:49 rsd Exp $
d1014 1
a1014 1
  if (IS_AFFECTED(ch, AFF_CHARM) && (ch->master == tch)) 
d1067 1
a1067 1
  char *s, *t, *misc= '\0';
a1190 1
  
d1193 2
a1195 1
    skip_spaces(&misc);
a1196 1
    skip_spaces(&t);
d1267 1
a1267 1
	      sprintf(buf, "Upon %s should the spell be cast?\r\n", IS_SET(SINFO.targets, TAR_OBJ_ROOM | TAR_OBJ_INV | TAR_OBJ_WORLD) ? "what" : "who");
d1303 2
d2830 10
@


1.26
log
@Added weapon proficiency skills for stabbing, piercing, bludgeoning and two handed
of each of these, as well as missile weapons.  These were given to all classes
at first level execpt missile weapons which was commented out for now.
@
text
@d350 4
a353 4
  "stabbing weapons",	/* 465 */  
  "two handed bludgoning weapons",
  "two handed piercing weapons",
  "two handed stabbing weapons",
d2813 1
a2813 1
  skillo(SKILL_STABBING);
d2816 1
a2816 1
  skillo(SKILL_2H_STABBING);
@


1.25
log
@Added skillo references to the new sphere skills added
earlier by jimmy.  Also added the "sphere of X" array to
output to the players when they type skills.  Changed the
players output for know spell to "spell knowledge"
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.24 1999/10/19 18:01:03 jimmy Exp $
d347 9
a355 3
  "sphere of divination", 
  "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 465 */  
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 470 */
d2811 7
d2829 6
@


1.24
log
@Added SPHERE_DIVIN (divination) spell sphere.  Changed spheres of spells
to fit with future implementation of the spheres as skills.
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.23 1999/10/08 17:49:54 rsd Exp $
d335 14
a348 5
  "summon mount",   /* 450 */  
  "know spell", 
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 455 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 460 */  
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 465 */  
d2794 11
d2816 4
@


1.23
log
@fixed word of recall to check in the room for the target.
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.22 1999/09/18 16:46:06 dce Exp $
d1988 1
a1988 1
	 CAST_SPEED6, 0, SPELL_SPHERE_GENERIC, 35, FALSE);
d2012 1
a2012 1
	 CAST_SPEED3, 0, SPELL_SPHERE_FIRE, 7, FALSE);
d2024 1
a2024 1
	 CAST_SPEED4, 0, SPELL_SPHERE_FIRE, 19, FALSE);
d2056 1
a2056 1
	 CAST_SPEED7, 0, SPELL_SPHERE_FIRE, 29, FALSE);
d2084 1
a2084 1
	 CAST_SPEED6, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2172 1
a2172 1
	 CAST_SPEED6, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2192 1
a2192 1
	 CAST_SPEED5, 0, SPELL_SPHERE_GENERIC, 5, FALSE);
d2196 1
a2196 1
	 CAST_SPEED5, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2232 1
a2232 1
	 CAST_SPEED3, 0, SPELL_SPHERE_FIRE, 5, FALSE);
d2256 1
a2256 1
	 CAST_SPEED3, 0, SPELL_SPHERE_DEATH, 5, FALSE);
d2268 1
a2268 1
	 20, 0, SPELL_SPHERE_AIR, 35, TRUE);
d2300 1
a2300 1
	 CAST_SPEED3, 0, SPELL_SPHERE_GENERIC, 11, FALSE);
d2312 1
a2312 1
	 16, 0, SPELL_SPHERE_GENERIC, 17, TRUE);
d2325 1
a2325 1
	 1, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC, 5, FALSE);
d2329 1
a2329 1
	 1, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC, 5, FALSE);
d2362 1
a2362 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 15, FALSE);
d2382 1
a2382 1
	 CAST_SPEED5, 0, SPELL_SPHERE_WATER, 29, FALSE);
d2420 1
a2420 1
  
d2479 1
a2479 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 9, FALSE);
d2483 1
a2483 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 19, FALSE);
d2487 1
a2487 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2495 1
a2495 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 13, FALSE);
d2499 1
a2499 1
	 CAST_SPEED3, ALIGN_DAMAGE, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2503 1
a2503 1
	 CAST_SPEED5, ALIGN_DAMAGE, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2563 1
a2563 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 9, FALSE);
d2580 1
a2580 1
	 CAST_SPEED4, 0, 0, 9, FALSE);
d2626 1
a2626 1
	 CAST_SPEED3, 0, SPELL_SPHERE_HEALING, 11, FALSE);
d2630 1
a2630 1
	 CAST_SPEED3, 0, SPELL_SPHERE_AIR, 15, FALSE);
d2638 1
a2638 1
	 CAST_SPEED3, 0, SPELL_SPHERE_SUMMON, 21, FALSE);
d2659 1
a2659 1
	 CAST_SPEED3, 0, 0, 5, FALSE);
d2667 1
a2667 1
	 18, 0, SPELL_SPHERE_EARTH, 5, TRUE);
d2671 1
a2671 1
	 CAST_SPEED3, 0, SPELL_SPHERE_ENCHANT, 19, FALSE);
d2679 1
a2679 1
	 CAST_SPEED3, ALIGN_DAMAGE, SPELL_SPHERE_HEALING, 5, FALSE);
d2719 1
a2719 1
	 CAST_SPEED3, 0, SPELL_SPHERE_GENERIC, 5, FALSE);
d2796 3
@


1.22
log
@Word oof recall is self only
@
text
@d1 1
a1 1
// $Id: spell_parser.c,v 1.21 1999/09/05 07:00:39 jimmy Exp $
d2653 1
a2653 1
	 TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
d2796 3
@


1.21
log
@Added RCS Log and Id strings to each source file
@
text
@d1 1
a1 1
// $Id$
d2653 1
a2653 1
	 TAR_CHAR_ROOM, FALSE, MAG_MANUAL, C1,
d2795 4
a2798 1
// $Log$
@


1.20
log
@rewrote strtok stuff to scan string so must have final quote
@
text
@d1 1
d2795 1
@


1.19
log
@made blur a quest spell
@
text
@d1056 1
a1056 2
  s = strtok(argument, "'");

d1077 3
a1079 1
  if (s == NULL) 
d1084 2
d1087 4
a1090 2
  s = strtok(NULL, "'");
  if (s == NULL) 
d1095 1
d1097 2
a1098 1
  t = strtok(NULL, "\0");
d1177 1
a1177 1
  if (t != NULL) {
d1187 1
a1187 1
    } else if (t != NULL && *t) 
@


1.18
log
@fixed spell recognition so gods always see spells.
gods now instant cast spells without waiting
WORD OF RECALL was set to casting time of 1
as was HOLY/UNHOLY WORD
--gurlaek
@
text
@d2683 1
a2683 1
	 CAST_SPEED6, 0, SPELL_SPHERE_ENCHANT, 25, FALSE);
@


1.17
log
@added a check in update_casting to stop players who were saved in the casting state
just before a crash.  Such players would get into an endless casting loop and crash
the mud.

-gurlaek
@
text
@d514 4
d1396 2
a1397 1
	  if((ch->casting.casting_time) <= 0)
d1699 1
a1699 1
    if(check_mem_mode(ch) == check_mem_mode(gch)) {
d1721 1
a1721 1
    if(number(0, 101) > percent) {
d1754 4
a1757 1
      if(number(0,101) < GET_INT(gch) || (!strcmp(spellbuf, spells[ch->casting.spell])) || (bad)) {
d2317 1
a2317 1
	 CAST_SPEED1, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC, 5, FALSE);
d2321 1
a2321 1
	 CAST_SPEED1, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC, 5, FALSE);
d2646 1
a2646 1
	 CAST_SPEED1, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
@


1.16
log
@Added the IDENTIFY spell back in to the castable spells list.
--gurlaek
@
text
@d1302 1
a1302 1
  char buf[64];
d1307 1
a1307 1
      /*I added this if to stop start up lock-up due to trying to cast a spell
d1311 1
a1311 1
      
d1314 9
d1401 2
a1402 2
	      memset(buf, 0x0, 64);
	      sprintf(buf, "Casting: %s ", skill_name(ch->casting.spell));
d1405 1
a1405 1
		strcat(buf, "*");
d1408 2
a1409 2
	      strcat(buf, "\r\n");
	      send_to_char(buf, ch);
@


1.15
log
@This is the spanky New Spell recognition code.
This code allows mobs/players that have the KNOW_SPELL skill
to make a skill check to guess the spell.  A good roll will show both
the spell and the target.  A bad roll will show the spell garbled and
then an INT check for the target.  If a really bad roll is made, the spell
will be replaced by an incorrect one.  the heart of this system is
start_chant(), end_chant, and bad_guess().
--gurlaek 7/20/1999
@
text
@d238 2
a239 1
        "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 190 */
d381 1
a381 1
  "identify",		       	/* 651 */  
d2692 4
a2696 3
  spello(SPELL_IDENTIFY, 0, 0, 0, 0,
	 TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
	 CAST_SPEED3, 0, 0, 5, FALSE);
@


1.14
log
@Mob casters can not hit while casting.
Updated spell cast times to be more realistic
changed combat to 4 seconds per round.
Removed do_order semantics that told the order to onlookers.
@
text
@d23 1
d36 3
d334 2
a335 1
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 455 */
d390 50
a444 1

d493 4
a496 4
/* say_spell erodes buf, buf1, buf2 */
void say_spell(struct char_data * ch, int spellnum, struct char_data * tch,
	       struct obj_data * tobj)
{
d498 19
a516 16
  
  struct char_data *i;
  int j, ofs = 0;
  if (spellnum == 0)
    return;
  *buf = '\0';
  strcpy(lbuf, spells[spellnum]);
  
  
  /*stop mobs saying this when no one about*/
  j = 0;
  if (IS_NPC(ch))
    for (i = world[ch->in_room].people; i; i = i->next_in_room) 
      {
	if (i != ch)
	  j++;
d518 12
a529 12
  if (!j)
    return;
  
  while (*(lbuf + ofs))
    {
      for (j = 0; *(syls[j].org); j++) 
	{
	  if (!strncmp(syls[j].org, lbuf + ofs, strlen(syls[j].org))) 
	    {
	      strcat(buf, syls[j].new);
	      ofs += strlen(syls[j].org);
	    }
d531 4
d536 33
a568 33
  
  if (tch != NULL && tch->in_room == ch->in_room) 
    {
      if (tch == ch)
	sprintf(lbuf, "$n closes $s eyes and utters the words, '%%s'.");
      else
	sprintf(lbuf, "$n stares at $N and utters the words, '%%s'.");
    } 
  else if (tobj != NULL &&
	   ((tobj->in_room == ch->in_room) || (tobj->carried_by == ch)))
    sprintf(lbuf, "$n stares at $p and utters the words, '%%s'.");
  else
    sprintf(lbuf, "$n utters the words, '%%s'.");
  
  sprintf(buf1, lbuf, spells[spellnum]);
  sprintf(buf2, lbuf, buf);
  
  for (i = world[ch->in_room].people; i; i = i->next_in_room) 
    {
      if (i == ch || i == tch || !i->desc || !AWAKE(i))
	continue;
      if (GET_CLASS(ch) == GET_CLASS(i) || GET_LEVEL(i) >= LVL_IMMORT)
	perform_act(buf1, ch, tobj, tch, i);
      else
	perform_act(buf2, ch, tobj, tch, i);
    }
  
  if (tch != NULL && tch != ch && tch->in_room == ch->in_room) 
    {
      sprintf(buf1, "$n stares at you and utters the words, '%s'.",
	      (GET_CLASS(ch) == GET_CLASS(tch))||GET_LEVEL(tch)>=LVL_IMMORT 
	      ? spells[spellnum] : buf);
      act(buf1, FALSE, ch, NULL, tch, TO_VICT);
d570 3
a574 1

d1028 1
a1028 2
  say_spell(ch, spellnum, tch, tobj);
  
d1289 2
a1290 7
  
  if(spell_info[ch->casting.spell].violent)
    act("$n starts casting an offensive spell...", TRUE, ch, 0, 0, TO_ROOM);
  else
    act("$n starts casting a spell...", TRUE, ch, 0, 0, TO_ROOM);
  
  act("You start chanting...", FALSE, ch, 0, 0, TO_CHAR);  
d1300 1
a1300 1
  int i, tick = 0;
d1394 1
a1394 1
	      for(i =1; i <= ch->casting.casting_time; i++)
d1396 2
a1397 2
	      
	      tick = 1;
d1399 3
a1401 4
	      
	      if(tick)
		send_to_char(buf, ch);
            } 
d1414 2
a1415 1
	  ch->casting.casting_time--;        
d1629 41
a1669 4
  if(spell_info[ch->casting.spell].violent)
    act("$n starts casting an offensive spell...", TRUE, ch, 0, 0, TO_ROOM);
  else
    act("$n starts casting a spell...", TRUE, ch, 0, 0, TO_ROOM);
d1671 84
a1754 2
  act("You start chanting...", FALSE, ch, 0, 0, TO_CHAR);  
} 
d1756 23
d2757 1
d2759 4
@


1.13
log
@The combat system was enhanced/improved in the following ways:  Mobs
can no longer flee while bashed or sitting.  Fleeing causes casters to
stop casting.  You can now flee while flying.  pk checks were added to
bash, bodyslam, throatcut, etc etc.  Lots of reformatting and little
fixes. spellcasting for mobs is now very similar to PC spellcasting.
MObs will now unhide/unconceal/univis/ etc when casting offensive spells.
Mobs no longer improve skills.  Bash now requires mobs to have a shield
just like PC's.  It's aT 25% with no shield and 50% with a 2handed weapon.
--gurlaek
@
text
@d1731 1
a1731 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 7, FALSE);
d1735 1
a1735 1
	 FAST, 0, SPELL_SPHERE_PROT, 13, FALSE);
d1739 1
a1739 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 17, FALSE);
d1743 1
a1743 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_AIR, 21, FALSE);
d1747 1
a1747 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 25, FALSE);
d1751 1
a1751 1
	 SLOW, COLD_DAMAGE, SPELL_SPHERE_WATER, 27, FALSE);
d1755 1
a1755 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 29, FALSE);
d1759 1
a1759 1
	 SLOW, COLD_DAMAGE, SPELL_SPHERE_WATER, 35, FALSE);
d1763 1
a1763 1
	 SLOW, 0, SPELL_SPHERE_GENERIC, 35, FALSE);
d1767 1
a1767 1
	 FAST, 0, SPELL_SPHERE_PROT, 29, FALSE);
d1771 1
a1771 1
	 SLOW, 0, SPELL_SPHERE_WATER, 27, FALSE);
d1775 1
a1775 1
	 FAST, 0, SPELL_SPHERE_WATER, 11, FALSE);
d1779 1
a1779 1
	 SLOW, 0, SPELL_SPHERE_WATER, 23, FALSE);
d1783 1
a1783 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 9, FALSE);
d1787 1
a1787 1
	 FAST, 0, SPELL_SPHERE_FIRE, 7, FALSE);
d1791 1
a1791 1
	 FAST, 0, SPELL_SPHERE_FIRE, 11, FALSE);
d1795 1
a1795 1
	 FAST, 0, SPELL_SPHERE_FIRE, 17, FALSE);
d1799 1
a1799 1
	 FAST, 0, SPELL_SPHERE_FIRE, 19, FALSE);
d1803 1
a1803 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 21, FALSE);
d1807 1
a1807 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 25, FALSE);
d1811 1
a1811 1
	 C1, FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 29, FALSE);
d1815 1
a1815 1
	 SLOW, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 25, FALSE);
d1819 1
a1819 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 25, FALSE);
d1823 1
a1823 1
	 SLOW, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 35, TRUE);
d1827 1
a1827 1
	 SLOW, 0, SPELL_SPHERE_FIRE, 35, FALSE);
d1831 1
a1831 1
	 FAST, 0, SPELL_SPHERE_FIRE, 29, FALSE);
d1835 1
a1835 1
	 FAST, 0, SPELL_SPHERE_FIRE, 23, FALSE);
d1839 1
a1839 1
	 SLOW, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d1843 1
a1843 1
	 C1, FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, FALSE);
d1847 1
a1847 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d1851 1
a1851 1
	 SLOW, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d1855 1
a1855 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d1859 1
a1859 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d1863 1
a1863 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d1867 1
a1867 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d1871 1
a1871 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d1875 1
a1875 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 25, FALSE);
d1879 1
a1879 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d1883 1
a1883 1
	 FAST, 0, SPELL_SPHERE_PROT, 17, FALSE);
d1887 1
a1887 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d1891 1
a1891 1
	 FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC, 5, FALSE);
d1895 1
a1895 1
	 SLOW, 0, SPELL_SPHERE_SUMMON, 5, TRUE);
d1899 1
a1899 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d1903 1
a1903 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d1907 1
a1907 1
	 FAST, 0, SPELL_SPHERE_PROT, 5, FALSE);
d1911 1
a1911 1
	 FAST, 0, SPELL_SPHERE_GENERIC, 5, FALSE);
d1915 1
a1915 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, FALSE);
d1919 1
a1919 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d1923 1
a1923 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d1927 1
a1927 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d1931 1
a1931 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, TRUE);
d1935 1
a1935 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, FALSE);
d1939 1
a1939 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d1943 1
a1943 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d1947 1
a1947 1
	 SLOW, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d1951 1
a1951 1
	 SLOW, 0, SPELL_SPHERE_SUMMON, 5, TRUE);
d1955 1
a1955 1
	 FAST, 0, SPELL_SPHERE_GENERIC, 5, TRUE);
d1959 1
a1959 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d1963 1
a1963 1
	 C1, FAST, 0, SPELL_SPHERE_SUMMON, 5, TRUE);
d1967 1
a1967 1
	 FAST, 0, SPELL_SPHERE_GENERIC, 5, FALSE);
d1971 1
a1971 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d1975 1
a1975 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5, FALSE); 
d1979 1
a1979 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d1983 1
a1983 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_DEATH, 5, FALSE);
d1987 1
a1987 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_DEATH, 5, FALSE);
d1991 1
a1991 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC, 5, FALSE);
d1995 1
a1995 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC, 5, FALSE);
d1999 1
a1999 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2003 1
a2003 1
	 FAST, 0, SPELL_SPHERE_PROT, 5, FALSE);
d2007 1
a2007 1
	 FAST, 0, SPELL_SPHERE_FIRE, 5, FALSE);
d2011 1
a2011 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, FALSE);
d2015 1
a2015 1
	 FAST, AIR_DAMAGE, SPELL_SPHERE_AIR, 5, FALSE);
d2019 1
a2019 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 5, FALSE);
d2023 1
a2023 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 5, FALSE);
d2027 1
a2027 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, FALSE);
d2031 1
a2031 1
	 FAST, 0, SPELL_SPHERE_DEATH, 5, FALSE);
d2035 1
a2035 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 27, FALSE);
d2039 1
a2039 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 23, FALSE);
d2043 1
a2043 1
	 18, 0, SPELL_SPHERE_AIR, 35, TRUE);
d2047 1
a2047 1
	 C1, FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 27, FALSE);
d2051 1
a2051 1
	 FAST, 0, SPELL_SPHERE_GENERIC, 21, FALSE);
d2055 1
a2055 1
	 FAST, 0, SPELL_SPHERE_PROT, 23, FALSE);
d2059 1
a2059 1
	 FAST, 0, SPELL_SPHERE_PROT, 35, TRUE);
d2063 1
a2063 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 17, FALSE);
d2067 1
a2067 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 17, FALSE);
d2071 1
a2071 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 21, FALSE);
d2075 1
a2075 1
	 FAST, 0, SPELL_SPHERE_GENERIC, 11, FALSE);
d2079 1
a2079 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 21, FALSE);
d2083 1
a2083 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 13, FALSE);
d2087 1
a2087 1
	 FAST, 0, SPELL_SPHERE_GENERIC, 17, TRUE);
d2091 1
a2091 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d2096 1
a2096 1
         C1, FAST, 0, SPELL_SPHERE_GENERIC, 15, FALSE);
d2100 1
a2100 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC, 5, FALSE);
d2104 1
a2104 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC, 5, FALSE);
d2108 1
a2108 1
	 FAST, 0, SPELL_SPHERE_PROT, 5, FALSE);
d2112 1
a2112 1
	 SLOW, 0, SPELL_SPHERE_ENCHANT, 29, FALSE);
d2116 1
a2116 1
	 SLOW, 0, SPELL_SPHERE_ENCHANT, 29, FALSE);
d2120 1
a2120 1
	 C1, FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2125 1
a2125 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2129 1
a2129 1
	 C1, FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2133 1
a2133 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, FALSE);
d2137 1
a2137 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 15, FALSE);
d2141 1
a2141 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5, FALSE);
d2145 1
a2145 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 19, FALSE);
d2149 1
a2149 1
	 FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC, 25, FALSE);
d2153 1
a2153 1
	 12, EARTH_DAMAGE, SPELL_SPHERE_EARTH, 37, TRUE);
d2157 1
a2157 1
	 FAST, 0, SPELL_SPHERE_WATER, 29, FALSE);
d2161 1
a2161 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 31, TRUE);
d2165 1
a2165 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 23, FALSE);
d2169 1
a2169 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 5, FALSE);
d2173 1
a2173 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 35, FALSE);
d2177 1
a2177 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5, TRUE);
d2181 1
a2181 1
	 C1, FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 7, FALSE);
d2185 1
a2185 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 35, FALSE);
d2189 1
a2189 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2194 1
a2194 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2198 1
a2198 1
	 FAST, 0, 0, 7, FALSE);
d2202 1
a2202 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 35, FALSE);
d2206 1
a2206 1
	 FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC, 21, FALSE);
d2210 1
a2210 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2214 1
a2214 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d2218 1
a2218 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d2222 1
a2222 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2226 1
a2226 1
	 FAST, 0, SPELL_SPHERE_HEALING, 15, FALSE);
d2230 1
a2230 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2234 1
a2234 1
	 FAST, 0, SPELL_SPHERE_HEALING, 9, FALSE);
d2238 1
a2238 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2242 1
a2242 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2246 1
a2246 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2250 1
a2250 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2254 1
a2254 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 9, FALSE);
d2258 1
a2258 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 19, FALSE);
d2262 1
a2262 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2266 1
a2266 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 17, FALSE);
d2270 1
a2270 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 13, FALSE);
d2274 1
a2274 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2278 1
a2278 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2282 1
a2282 1
	 FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH, 5, FALSE);
d2286 1
a2286 1
	 FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH, 35, FALSE);
d2290 1
a2290 1
	 FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH, 35, FALSE);
d2294 1
a2294 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 23, FALSE);
d2298 1
a2298 1
	 FAST, DEATH_DAMAGE, SPELL_SPHERE_DEATH, 19, FALSE);
d2302 1
a2302 1
	 FAST, DEATH_DAMAGE, SPELL_SPHERE_DEATH, 5, FALSE);
d2306 1
a2306 1
	 FAST, 0, SPELL_SPHERE_PROT, 9, TRUE);
d2310 1
a2310 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5, TRUE);
d2314 1
a2314 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 21, FALSE);
d2318 1
a2318 1
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5, FALSE);
d2322 1
a2322 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2326 1
a2326 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5, TRUE);
d2330 1
a2330 1
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5, FALSE);
d2334 1
a2334 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5, FALSE);
d2338 1
a2338 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 9, FALSE);
d2343 1
a2343 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 17, FALSE);
d2347 1
a2347 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 13, FALSE);
d2351 1
a2351 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 17, FALSE);
d2355 1
a2355 1
	 FAST, 0, 0, 9, FALSE);
d2359 1
a2359 1
	 FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC, 5, FALSE);
d2364 1
a2364 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2368 1
a2368 1
	 FAST, 0, SPELL_SPHERE_PROT, 5, FALSE);
d2373 1
a2373 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2377 1
a2377 1
	 FAST, 0, SPELL_SPHERE_PROT, 35, FALSE);
d2381 1
a2381 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 9, FALSE);
d2385 1
a2385 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 19, FALSE);
d2389 1
a2389 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2393 1
a2393 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d2397 1
a2397 1
	 SLOW, 0, SPELL_SPHERE_HEALING, 5, TRUE);
d2401 1
a2401 1
	 FAST, 0, SPELL_SPHERE_HEALING, 11, FALSE);
d2405 1
a2405 1
	 FAST, 0, SPELL_SPHERE_AIR, 15, FALSE);
d2409 1
a2409 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 33, TRUE);
d2413 1
a2413 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 21, FALSE);
d2417 1
a2417 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 19, FALSE);
d2421 1
a2421 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 31, FALSE);
d2425 1
a2425 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 35, FALSE);
d2429 1
a2429 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5, FALSE);
d2434 1
a2434 1
	 FAST, 0, 0, 5, FALSE);
d2437 1
a2437 1
	 TAR_IGNORE, TRUE, MAG_AREAS, C1, FAST, FIRE_DAMAGE,
d2442 1
a2442 1
	 FAST, 0, SPELL_SPHERE_EARTH, 5, TRUE);
d2446 1
a2446 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 19, FALSE);
d2450 1
a2450 1
	 FAST, 0, SPELL_SPHERE_PROT, 5, FALSE);
d2454 1
a2454 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_HEALING, 5, FALSE);
d2458 1
a2458 1
	 FAST, 0, SPELL_SPHERE_PROT, 19, FALSE);
d2462 1
a2462 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 19, FALSE);
d2466 1
a2466 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 25, FALSE);
d2470 1
a2470 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5, FALSE);
d2474 1
a2474 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 21, FALSE);
d2478 1
a2478 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 9, FALSE);
d2482 1
a2482 1
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5, FALSE); 
d2486 1
a2486 1
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5, FALSE); 
d2490 1
a2490 1
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5, FALSE); 
d2495 1
a2495 1
	 FAST, 0, 0, 5, FALSE);
@


1.12
log
@added skill 450 summon mount also added a skillo
skillo(SKILL_SUMMON_MOUNT)
@
text
@d974 5
a978 2
 * the spell can be cast, checks for sufficient mana and subtracts it, and
 * passes control to cast_spell().
a979 1

d987 1
a987 1
  
d1216 1
a1216 1
  if (number(1,102) < GET_SKILL(ch, SKILL_QUICK_CHANT))
d1218 3
a1220 1
  else
d1222 4
d1282 1
a1282 1
	    if(tar_invalid) {
d1436 3
d1447 5
a1451 5
  
  if(AFF2_FLAGGED(ch, AFF2_SILENCE)) {
    return;
  }
  
d1454 7
a1460 4
  
  
  if (1) {
    if ((spellnum < 1) || (spellnum > MAX_SPELLS)) {
d1464 3
a1466 2
    if (GET_LEVEL(ch) < SINFO.min_level[(int) (GET_CLASS(ch))]) {
      act(buf, TRUE, ch, 0, 0, TO_ROOM);
d1468 6
a1473 9
    }	   
  }		
  
  if (MOB_FLAGGED(ch, MOB_CASTING))
    return;
  if ((GET_SKILL(ch, spellnum)) == 0) { 
    send_to_char("You are unfamiliar with that spell.\r\n", ch);
    return;	
  }	
d1547 9
a1555 1
  
d1560 12
a1571 2
  /*ch->casting.obj = tobj;
   */ch->casting.casting_time = SINFO.cast_time;
a1577 2
  
  
d2042 2
a2043 2
	 TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
	 SLOW, 0, SPELL_SPHERE_AIR, 35, TRUE);
d2152 2
a2153 2
	 TAR_IGNORE, TRUE, MAG_AREAS, C1,
	 FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH, 37, TRUE);
@


1.11
log
@Magic missile works like Fire Dart, Ice Dart works.
@
text
@d329 1
a329 1
  "!UNUSED!",   /* 450 */  
d2529 1
@


1.10
log
@Working on quest spells.  Still in progress.  HOwever, spell_info[] array now has a flag
quest.  If it's true then it's considerd a quest spell.  Also, allowed pyro/cryo's to
learn from any sorcerer type teacher
fingon
l.
@
text
@d710 1
d1700 1
a1700 1
  
d2328 3
a2330 3
  
  spello(SPELL_MAGIC_MISSILE, 25, 10, 3, POS_FIGHTING,
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
@


1.9
log
@Monk semantics for dodge/parry/ripost/attack
@
text
@d1596 1
a1596 1
	    int damage_type, int sphere, int pages)
d1613 2
a1614 1
  
d1640 1
d1643 1
a1643 1
#define skillo(skill) spello(skill, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
d1678 2
d1702 1
a1702 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 7);
d1706 1
a1706 1
	 FAST, 0, SPELL_SPHERE_PROT, 13);
d1710 1
a1710 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 17);
d1714 1
a1714 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_AIR, 21);
d1718 1
a1718 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 25);
d1722 1
a1722 1
	 SLOW, COLD_DAMAGE, SPELL_SPHERE_WATER, 27);
d1726 1
a1726 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 29);
d1730 1
a1730 1
	 SLOW, COLD_DAMAGE, SPELL_SPHERE_WATER, 35);
d1734 1
a1734 1
	 SLOW, 0, SPELL_SPHERE_GENERIC, 35);
d1738 1
a1738 1
	 FAST, 0, SPELL_SPHERE_PROT, 29);
d1742 1
a1742 1
	 SLOW, 0, SPELL_SPHERE_WATER, 27);
d1746 1
a1746 1
	 FAST, 0, SPELL_SPHERE_WATER, 11);
d1750 1
a1750 1
	 SLOW, 0, SPELL_SPHERE_WATER, 23);
d1754 1
a1754 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 9);
d1758 1
a1758 1
	 FAST, 0, SPELL_SPHERE_FIRE, 7);
d1762 1
a1762 1
	 FAST, 0, SPELL_SPHERE_FIRE, 11);
d1766 1
a1766 1
	 FAST, 0, SPELL_SPHERE_FIRE, 17);
d1770 1
a1770 1
	 FAST, 0, SPELL_SPHERE_FIRE, 19);
d1774 1
a1774 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 21);
d1778 1
a1778 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 25);
d1782 1
a1782 1
	 C1, FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 29);
d1786 1
a1786 1
	 SLOW, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 25);
d1790 1
a1790 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 25);
d1794 1
a1794 1
	 SLOW, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 35);
d1798 1
a1798 1
	 SLOW, 0, SPELL_SPHERE_FIRE, 35);
d1802 1
a1802 1
	 FAST, 0, SPELL_SPHERE_FIRE, 29);
d1806 1
a1806 1
	 FAST, 0, SPELL_SPHERE_FIRE, 23);
d1810 1
a1810 1
	 SLOW, 0, SPELL_SPHERE_ENCHANT, 5);
d1814 1
a1814 1
	 C1, FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5);
d1818 1
a1818 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5);
d1822 1
a1822 1
	 SLOW, 0, SPELL_SPHERE_ENCHANT, 5);
d1826 1
a1826 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5);
d1830 1
a1830 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d1834 1
a1834 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d1838 1
a1838 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d1842 1
a1842 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5);
d1846 1
a1846 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 25);
d1850 1
a1850 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5);
d1854 1
a1854 1
	 FAST, 0, SPELL_SPHERE_PROT, 17);
d1858 1
a1858 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d1862 1
a1862 1
	 FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC, 5);
d1866 1
a1866 1
	 SLOW, 0, SPELL_SPHERE_SUMMON, 5);
d1870 1
a1870 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5);
d1874 1
a1874 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d1878 1
a1878 1
	 FAST, 0, SPELL_SPHERE_PROT, 5);
d1882 1
a1882 1
	 FAST, 0, SPELL_SPHERE_GENERIC, 5);
d1886 1
a1886 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5);
d1890 1
a1890 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d1894 1
a1894 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d1898 1
a1898 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d1902 1
a1902 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5);
d1906 1
a1906 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5);
d1910 1
a1910 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d1914 1
a1914 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d1918 1
a1918 1
	 SLOW, 0, SPELL_SPHERE_HEALING, 5);
d1922 1
a1922 1
	 SLOW, 0, SPELL_SPHERE_SUMMON, 5);
d1926 1
a1926 1
	 FAST, 0, SPELL_SPHERE_GENERIC, 5);
d1930 1
a1930 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d1934 1
a1934 1
	 C1, FAST, 0, SPELL_SPHERE_SUMMON, 5);
d1938 1
a1938 1
	 FAST, 0, SPELL_SPHERE_GENERIC, 5);
d1942 1
a1942 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d1946 1
a1946 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5); 
d1950 1
a1950 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5);
d1954 1
a1954 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_DEATH, 5);
d1958 1
a1958 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_DEATH, 5);
d1962 1
a1962 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC, 5);
d1966 1
a1966 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC, 5);
d1970 1
a1970 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d1974 1
a1974 1
	 FAST, 0, SPELL_SPHERE_PROT, 5);
d1978 1
a1978 1
	 FAST, 0, SPELL_SPHERE_FIRE, 5);
d1982 1
a1982 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5);
d1986 1
a1986 1
	 FAST, AIR_DAMAGE, SPELL_SPHERE_AIR, 5);
d1990 1
a1990 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 5);
d1994 1
a1994 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 5);
d1998 1
a1998 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5);
d2002 1
a2002 1
	 FAST, 0, SPELL_SPHERE_DEATH, 5);
d2006 1
a2006 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 27);
d2010 1
a2010 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 23);
d2014 1
a2014 1
	 SLOW, 0, SPELL_SPHERE_AIR, 35);
d2018 1
a2018 1
	 C1, FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 27);
d2022 1
a2022 1
	 FAST, 0, SPELL_SPHERE_GENERIC, 21);
d2026 1
a2026 1
	 FAST, 0, SPELL_SPHERE_PROT, 23);
d2030 1
a2030 1
	 FAST, 0, SPELL_SPHERE_PROT, 35);
d2034 1
a2034 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 17);
d2038 1
a2038 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 17);
d2042 1
a2042 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 21);
d2046 1
a2046 1
	 FAST, 0, SPELL_SPHERE_GENERIC, 11);
d2050 1
a2050 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 21);
d2054 1
a2054 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 13);
d2058 1
a2058 1
	 FAST, 0, SPELL_SPHERE_GENERIC, 17);
d2062 1
a2062 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5);
d2067 1
a2067 1
         C1, FAST, 0, SPELL_SPHERE_GENERIC, 15);
d2071 1
a2071 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC, 5);
d2075 1
a2075 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC, 5);
d2079 1
a2079 1
	 FAST, 0, SPELL_SPHERE_PROT, 5);
d2083 1
a2083 1
	 SLOW, 0, SPELL_SPHERE_ENCHANT, 29);
d2087 1
a2087 1
	 SLOW, 0, SPELL_SPHERE_ENCHANT, 29);
d2091 1
a2091 1
	 C1, FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d2096 1
a2096 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d2100 1
a2100 1
	 C1, FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d2104 1
a2104 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5);
d2108 1
a2108 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 15);
d2112 1
a2112 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 5);
d2116 1
a2116 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 19);
d2120 1
a2120 1
	 FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC, 25);
d2124 1
a2124 1
	 FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH, 37);
d2128 1
a2128 1
	 FAST, 0, SPELL_SPHERE_WATER, 29);
d2132 1
a2132 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 31);
d2136 1
a2136 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 23);
d2140 1
a2140 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 5);
d2144 1
a2144 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 35);
d2148 1
a2148 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5);
d2152 1
a2152 1
	 C1, FAST, COLD_DAMAGE, SPELL_SPHERE_WATER, 7);
d2156 1
a2156 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 35);
d2160 1
a2160 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d2165 1
a2165 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d2169 1
a2169 1
	 FAST, 0, 0, 7);
d2173 1
a2173 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 35);
d2177 1
a2177 1
	 FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC, 21);
d2181 1
a2181 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d2185 1
a2185 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5);
d2189 1
a2189 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5);
d2193 1
a2193 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5);
d2197 1
a2197 1
	 FAST, 0, SPELL_SPHERE_HEALING, 15);
d2201 1
a2201 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5);
d2205 1
a2205 1
	 FAST, 0, SPELL_SPHERE_HEALING, 9);
d2209 1
a2209 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5);
d2213 1
a2213 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5);
d2217 1
a2217 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5);
d2221 1
a2221 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d2225 1
a2225 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 9);
d2229 1
a2229 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 19);
d2233 1
a2233 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d2237 1
a2237 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 17);
d2241 1
a2241 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 13);
d2245 1
a2245 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_ENCHANT, 5);
d2249 1
a2249 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_ENCHANT, 5);
d2253 1
a2253 1
	 FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH, 5);
d2257 1
a2257 1
	 FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH, 35);
d2261 1
a2261 1
	 FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH, 35);
d2265 1
a2265 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 23);
d2269 1
a2269 1
	 FAST, DEATH_DAMAGE, SPELL_SPHERE_DEATH, 19);
d2273 1
a2273 1
	 FAST, DEATH_DAMAGE, SPELL_SPHERE_DEATH, 5);
d2277 1
a2277 1
	 FAST, 0, SPELL_SPHERE_PROT, 9);
d2281 1
a2281 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5);
d2285 1
a2285 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE, 21);
d2289 1
a2289 1
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5);
d2293 1
a2293 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5);
d2297 1
a2297 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5);
d2301 1
a2301 1
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5);
d2305 1
a2305 1
	 FAST, 0, SPELL_SPHERE_HEALING, 5);
d2309 1
a2309 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 9);
d2314 1
a2314 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 17);
d2318 1
a2318 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 13);
d2322 1
a2322 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 17);
d2326 1
a2326 1
	 FAST, 0, 0, 9);
d2330 1
a2330 1
	 FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC, 5);
d2335 1
a2335 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d2339 1
a2339 1
	 FAST, 0, SPELL_SPHERE_PROT, 5);
d2344 1
a2344 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d2348 1
a2348 1
	 FAST, 0, SPELL_SPHERE_PROT, 35);
d2352 1
a2352 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR, 9);
d2356 1
a2356 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 19);
d2360 1
a2360 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d2364 1
a2364 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5);
d2368 1
a2368 1
	 SLOW, 0, SPELL_SPHERE_HEALING, 5);
d2372 1
a2372 1
	 FAST, 0, SPELL_SPHERE_HEALING, 11);
d2376 1
a2376 1
	 FAST, 0, SPELL_SPHERE_AIR, 15);
d2380 1
a2380 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 33);
d2384 1
a2384 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 21);
d2388 1
a2388 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 19);
d2392 1
a2392 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 31);
d2396 1
a2396 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 35);
d2400 1
a2400 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 5);
d2405 1
a2405 1
	 FAST, 0, 0, 5);
d2409 1
a2409 1
	 SPELL_SPHERE_FIRE, 35);
d2413 1
a2413 1
	 FAST, 0, SPELL_SPHERE_EARTH, 5);
d2417 1
a2417 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 19);
d2421 1
a2421 1
	 FAST, 0, SPELL_SPHERE_PROT, 5);
d2425 1
a2425 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_HEALING, 5);
d2429 1
a2429 1
	 FAST, 0, SPELL_SPHERE_PROT, 19);
d2433 1
a2433 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 19);
d2437 1
a2437 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 25);
d2441 1
a2441 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 5);
d2445 1
a2445 1
	 FAST, 0, SPELL_SPHERE_SUMMON, 21);
d2449 1
a2449 1
	 FAST, 0, SPELL_SPHERE_ENCHANT, 9);
d2453 1
a2453 1
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5); 
d2457 1
a2457 1
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5); 
d2461 1
a2461 1
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING, 5); 
d2466 1
a2466 1
	 FAST, 0, 0, 5);
@


1.8
log
@Added Springleap for monks
@
text
@d328 2
a329 1
  "!UNUSED!", "!UNUSED!",   /* 450 */  
d2499 2
@


1.7
log
@Adds the skill safefall for monks.
@
text
@d2519 2
@


1.6
log
@Chant finishes and wearoff messages.
@
text
@d327 2
a328 1
  "!UNUSED!", "!UNUSED!", "!UNUSED!",   /* 450 */  
@


1.5
log
@Many enhancements to scribe and spellbooks.  Lots of checks added.  Scribe is now a skill.
Spellbooks now have to be held to scribe as well as a quill in the other hand.

-fingon
@
text
@d357 2
a358 2
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 600 */
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 605 */
@


1.4
log
@Monk additions/fixes
@
text
@d325 3
a327 2

  "chant", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",   /* 450 */  
d1594 1
a1594 1
	    int damage_type, int sphere)
d1610 1
d1636 1
d1639 1
a1639 1
#define skillo(skill) spello(skill, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
d1672 2
d1696 1
a1696 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);
d1700 1
a1700 1
	 FAST, 0, SPELL_SPHERE_PROT);
d1704 1
a1704 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d1708 1
a1708 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_AIR);
d1712 1
a1712 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);
d1716 1
a1716 1
	 SLOW, COLD_DAMAGE, SPELL_SPHERE_WATER);
d1720 1
a1720 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);
d1724 1
a1724 1
	 SLOW, COLD_DAMAGE, SPELL_SPHERE_WATER);
d1728 1
a1728 1
	 SLOW, 0, SPELL_SPHERE_GENERIC);
d1732 1
a1732 1
	 FAST, 0, SPELL_SPHERE_PROT);
d1736 1
a1736 1
	 SLOW, 0, SPELL_SPHERE_WATER);
d1740 1
a1740 1
	 FAST, 0, SPELL_SPHERE_WATER);
d1744 1
a1744 1
	 SLOW, 0, SPELL_SPHERE_WATER);
d1748 1
a1748 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d1752 1
a1752 1
	 FAST, 0, SPELL_SPHERE_FIRE);
d1756 1
a1756 1
	 FAST, 0, SPELL_SPHERE_FIRE);
d1760 1
a1760 1
	 FAST, 0, SPELL_SPHERE_FIRE);
d1764 1
a1764 1
	 FAST, 0, SPELL_SPHERE_FIRE);
d1768 1
a1768 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d1772 1
a1772 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d1775 2
a1776 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d1780 1
a1780 1
	 SLOW, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d1784 1
a1784 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d1788 1
a1788 1
	 SLOW, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d1792 1
a1792 1
	 SLOW, 0, SPELL_SPHERE_FIRE);
d1796 1
a1796 1
	 FAST, 0, SPELL_SPHERE_FIRE);
d1800 1
a1800 1
	 FAST, 0, SPELL_SPHERE_FIRE);
d1804 1
a1804 1
	 SLOW, 0, SPELL_SPHERE_ENCHANT);
d1807 2
a1808 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_AFFECTS, C1,
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d1812 1
a1812 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d1816 1
a1816 1
	 SLOW, 0, SPELL_SPHERE_ENCHANT);
d1820 1
a1820 1
	 FAST, 0, SPELL_SPHERE_HEALING);
d1824 1
a1824 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d1828 1
a1828 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d1832 1
a1832 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d1836 1
a1836 1
	 FAST, 0, SPELL_SPHERE_HEALING);
d1840 1
a1840 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d1844 1
a1844 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d1848 1
a1848 1
	 FAST, 0, SPELL_SPHERE_PROT);
d1852 1
a1852 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d1856 1
a1856 1
	 FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC);
d1860 1
a1860 1
	 SLOW, 0, SPELL_SPHERE_SUMMON);
d1864 1
a1864 1
	 FAST, 0, SPELL_SPHERE_HEALING);
d1868 1
a1868 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d1872 1
a1872 1
	 FAST, 0, SPELL_SPHERE_PROT);
d1876 1
a1876 1
	 FAST, 0, SPELL_SPHERE_GENERIC);
d1880 1
a1880 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d1884 1
a1884 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d1888 1
a1888 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d1892 1
a1892 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d1896 1
a1896 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d1900 1
a1900 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d1904 1
a1904 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d1908 1
a1908 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d1912 1
a1912 1
	 SLOW, 0, SPELL_SPHERE_HEALING);
d1916 1
a1916 1
	 SLOW, 0, SPELL_SPHERE_SUMMON);
d1920 1
a1920 1
	 FAST, 0, SPELL_SPHERE_GENERIC);
d1924 1
a1924 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d1927 2
a1928 2
	 TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	 FAST, 0, SPELL_SPHERE_SUMMON);
d1932 1
a1932 1
	 FAST, 0, SPELL_SPHERE_GENERIC);
d1936 1
a1936 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d1940 1
a1940 1
	 FAST, 0, SPELL_SPHERE_SUMMON); 
d1944 1
a1944 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d1948 1
a1948 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_DEATH);
d1952 1
a1952 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_DEATH);
d1956 1
a1956 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC);
d1960 1
a1960 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC);
d1964 1
a1964 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d1968 1
a1968 1
	 FAST, 0, SPELL_SPHERE_PROT);
d1972 1
a1972 1
	 FAST, 0, SPELL_SPHERE_FIRE);
d1976 1
a1976 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d1980 1
a1980 1
	 FAST, AIR_DAMAGE, SPELL_SPHERE_AIR);
d1984 1
a1984 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);
d1988 1
a1988 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);
d1992 1
a1992 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d1996 1
a1996 1
	 FAST, 0, SPELL_SPHERE_DEATH);
d2000 1
a2000 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);
d2004 1
a2004 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2008 1
a2008 1
	 SLOW, 0, SPELL_SPHERE_AIR);
d2011 2
a2012 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d2016 1
a2016 1
	 FAST, 0, SPELL_SPHERE_GENERIC);
d2020 1
a2020 1
	 FAST, 0, SPELL_SPHERE_PROT);
d2024 1
a2024 1
	 FAST, 0, SPELL_SPHERE_PROT);
d2028 1
a2028 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d2032 1
a2032 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);
d2036 1
a2036 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2040 1
a2040 1
	 FAST, 0, SPELL_SPHERE_GENERIC);
d2044 1
a2044 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2048 1
a2048 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2052 1
a2052 1
	 FAST, 0, SPELL_SPHERE_GENERIC);
d2056 1
a2056 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d2059 3
a2061 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_OBJ_ROOM | TAR_OBJ_INV, TRUE, MAG_MANUAL,
         C1, FAST, 0, SPELL_SPHERE_GENERIC);
d2065 1
a2065 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC);
d2069 1
a2069 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC);
d2073 1
a2073 1
	 FAST, 0, SPELL_SPHERE_PROT);
d2077 1
a2077 1
	 SLOW, 0, SPELL_SPHERE_ENCHANT);
d2081 1
a2081 1
	 SLOW, 0, SPELL_SPHERE_ENCHANT);
d2084 2
a2085 2
	 TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE, MAG_AFFECTS | MAG_ALTER_OBJS, C1,
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2088 3
a2090 2
	 TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_FIGHT_VICT, FALSE, MAG_AFFECTS, C1,
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2093 2
a2094 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_NOT_SELF, TRUE, MAG_AFFECTS, C1,
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2098 1
a2098 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d2102 1
a2102 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2106 1
a2106 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d2110 1
a2110 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);
d2114 1
a2114 1
	 FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC);
d2118 1
a2118 1
	 FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH);
d2122 1
a2122 1
	 FAST, 0, SPELL_SPHERE_WATER);
d2126 1
a2126 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);
d2130 1
a2130 1
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);
d2134 1
a2134 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);
d2138 1
a2138 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2142 1
a2142 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d2145 2
a2146 2
	 TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_AFFECTS, C1,
	 FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);
d2150 1
a2150 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d2154 1
a2154 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2159 1
a2159 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2163 1
a2163 1
	 FAST, 0, 0);
d2167 1
a2167 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2171 2
a2172 2
	 FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC);
  
d2175 1
a2175 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2179 1
a2179 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d2183 1
a2183 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d2187 1
a2187 1
	 FAST, 0, SPELL_SPHERE_HEALING);
d2191 1
a2191 1
	 FAST, 0, SPELL_SPHERE_HEALING);
d2195 1
a2195 1
	 FAST, 0, SPELL_SPHERE_HEALING);
d2199 1
a2199 1
	 FAST, 0, SPELL_SPHERE_HEALING);
d2203 1
a2203 1
	 FAST, 0, SPELL_SPHERE_HEALING);
d2207 1
a2207 1
	 FAST, 0, SPELL_SPHERE_HEALING);
d2211 1
a2211 1
	 FAST, 0, SPELL_SPHERE_HEALING);
d2215 1
a2215 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2219 1
a2219 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2223 1
a2223 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2227 1
a2227 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2231 1
a2231 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2235 1
a2235 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2239 1
a2239 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_ENCHANT);
d2243 1
a2243 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_ENCHANT);
d2247 1
a2247 1
	 FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH);
d2251 1
a2251 1
	 FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH);
d2255 1
a2255 2
	 FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH);
  
d2259 1
a2259 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2263 1
a2263 1
	 FAST, DEATH_DAMAGE, SPELL_SPHERE_DEATH);
d2267 1
a2267 1
	 FAST, DEATH_DAMAGE, SPELL_SPHERE_DEATH);
d2271 1
a2271 1
	 FAST, 0, SPELL_SPHERE_PROT);
d2275 1
a2275 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d2279 1
a2279 1
	 FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
d2283 1
a2283 1
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING);
d2287 1
a2287 1
	 FAST, 0, SPELL_SPHERE_HEALING);
d2291 1
a2291 1
	 FAST, 0, SPELL_SPHERE_HEALING);
d2295 1
a2295 1
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING);
d2299 1
a2299 1
	 FAST, 0, SPELL_SPHERE_HEALING);
d2303 1
a2303 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2306 3
a2308 2
	 TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_AFFECTS | MAG_ALTER_OBJS, C1,
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2312 1
a2312 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2316 1
a2316 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);
d2320 1
a2320 1
	 FAST, 0, 0);
d2324 1
a2324 1
	 FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC);
d2327 3
a2329 2
	 TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_OBJ_INV, TRUE, MAG_AFFECTS | MAG_ALTER_OBJS, C1,
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2333 1
a2333 1
	 FAST, 0, SPELL_SPHERE_PROT);
d2336 3
a2338 2
	 TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE, MAG_UNAFFECTS | MAG_ALTER_OBJS, C1,
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2342 1
a2342 1
	 FAST, 0, SPELL_SPHERE_PROT);
d2346 1
a2346 1
	 FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);
d2350 1
a2350 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2354 1
a2354 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2358 1
a2358 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d2362 1
a2362 1
	 SLOW, 0, SPELL_SPHERE_HEALING);
d2366 1
a2366 2
	 FAST, 0, SPELL_SPHERE_HEALING);
  
d2370 1
a2370 1
	 FAST, 0, SPELL_SPHERE_AIR);
d2374 1
a2374 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d2378 1
a2378 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d2382 1
a2382 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d2386 1
a2386 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d2390 1
a2390 2
	 FAST, 0, SPELL_SPHERE_SUMMON);
  
d2394 1
a2394 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d2397 4
a2400 2
	 TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_UNAFFECTS | MAG_ALTER_OBJS, C1,
	 FAST, 0, 0);
d2403 1
a2403 2
	 SPELL_SPHERE_FIRE);
  
d2407 1
a2407 1
	 FAST, 0, SPELL_SPHERE_EARTH);
d2411 1
a2411 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2415 1
a2415 1
	 FAST, 0, SPELL_SPHERE_PROT);
d2419 1
a2419 1
	 FAST, ALIGN_DAMAGE, SPELL_SPHERE_HEALING);
d2423 1
a2423 1
	 FAST, 0, SPELL_SPHERE_PROT);
d2427 1
a2427 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2431 1
a2431 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2435 1
a2435 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2439 1
a2439 1
	 FAST, 0, SPELL_SPHERE_SUMMON);
d2443 1
a2443 1
	 FAST, 0, SPELL_SPHERE_ENCHANT);
d2447 1
a2447 1
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING); 
d2451 1
a2451 1
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING); 
d2455 1
a2455 2
	 FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING); 
  
d2460 2
a2461 3
	 FAST, 0, 0);
  
  
d2515 1
a2515 1
  skillo(SKILL_INSTANT_KILL);
@


1.3
log
@Rewrote Continual Light and Darkness to be manual spells to meet our needs.
@
text
@d326 1
a326 1
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",   /* 450 */  
d2490 1
@


1.2
log
@indented entire FILE AAAARRRRGGGGG
dos2unix
@
text
@d719 2
d2146 1
a2146 1
	 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_ROOM, C1,
d2151 1
a2151 1
	 MAG_ROOM | MAG_ALTER_OBJS, C1,
@


1.1
log
@Initial revision
@
text
@d1 9
a9 9
/* ************************************************************************
*   File: spell_parser.c                                Part of CircleMUD *
*  Usage: top-level magic routines; outside points of entry to magic sys. *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */
d129 1
a129 1
 "resurrect",
d153 1
a153 1
  "fireshield",	/* 105 */ 
d158 1
a158 1
  "harness",	/* 110 */
d178 1
a178 1
  "heavens gate",	/* 130 */
d183 1
a183 1
  "disease",/* 135 */
d188 1
a188 1
  "demonic mutation",/* 140 */
d193 1
a193 1
  "night vision",/* 145 */
d198 1
a198 1
  "nature embrace",/* 150 */ 
d203 1
a203 1
  "sunray", /* 155 */
d208 1
a208 1
   "mirage",/* 160 */
d213 1
a213 1
   "circle of fire",/* 165 */
d218 1
a218 1
   "firewalk",/* 170 */
d223 1
a223 1
   "freeze", /* 175 */
d228 1
a228 1
   "negate cold", /* 180 */
d233 2
a234 2
   "enlarge", /* 185 */
"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/* 190 */
d236 7
a242 7
"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/*200 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*205 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*210 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*215 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*220 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*225 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*230 */
d256 7
a262 7
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*300*/
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*305 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*310 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*315 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*320 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*325 */
	"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",/*330 */
a278 26
"backstab",			/* 401 */  
"bash",				/*402 */ 
 "hide",				/* 403 */  
"kick",				/* 404 */
"pick lock",			/* 405 */ 
 "punch",				/* 406 */ 
 "rescue",			/* 407 */  
"sneak",				/* 408 */  
"steal",				/*409 */ 
 "track",				/* 410 */ 
 "dual wield",			/*411 */
  "double attack",		/* 412 */ 
 "berserk",			/* 413 */
"springleap",			/* 414 */
  "mount",				/* 415 */
  "riding",			/* 416*/
  "tame",				/* 417*/  
"throatcut",			/* 418*/
"doorbash",			/* 419*/
  "parry",				/* 420*/ 
 "dodge",			/* 421*/ 
 "ripost",				/* 422*/ 
 "meditate",			/* 423*/
"quick chant",			/* 424*/
  "utility",			/* 425 */
  "circle",			/* 426*/
d280 26
d307 1
a307 1
  "bind",/*428*/
d309 1
a309 1
  "switch",	/* 430 */
d314 1
a314 1
  "breath",	/* 435 */
d318 13
a330 12
 "aware",
 "instant kill",	/* 440 */  
"hitall",
 "hunt",
"bandage",
 "first aid",
 "vampiric touch",	/* 445 */ 
 "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",
"!UNUSED!",	/* 450 */  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 455 */
"!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 460 */  "!UNUSED!", "!UNUSED!",
"!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 465 */  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",
"!UNUSED!",	/* 470 */
d364 2
a365 2
  "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 640 */  "!UNUSED!", "!UNUSED!",
"!UNUSED!", "!UNUSED!", "!UNUSED!",	/* 645 */
d369 1
a369 1

d372 6
a377 5

"identify",				/* 651 */  "fire breath",			/* 652 */
"gas breath",				/* 653 */  "frost breath",			/* 654 */
"acid breath",			/* 655 */  "lightning breath",		/* 656 */
  
d427 1
a427 1

d429 1
a429 1
		    (GET_LEVEL(ch) - SINFO.min_level[(int) GET_CLASS(ch)])),
d431 1
a431 1

d438 1
a438 1
	            struct obj_data * tobj)
d441 1
a441 1

d444 2
a445 2
if (spellnum == 0)
return;
d448 3
a450 3


/*stop mobs saying this when no one about*/
d453 5
a457 5
  for (i = world[ch->in_room].people; i; i = i->next_in_room) 
  {
    if (i != ch)
      j++;
  }
d459 12
a470 8
	  return;

  while (*(lbuf + ofs)) {
    for (j = 0; *(syls[j].org); j++) {
      if (!strncmp(syls[j].org, lbuf + ofs, strlen(syls[j].org))) {
	strcat(buf, syls[j].new);
	ofs += strlen(syls[j].org);
      }
d472 10
a481 9
  }

  if (tch != NULL && tch->in_room == ch->in_room) {
    if (tch == ch)
      sprintf(lbuf, "$n closes $s eyes and utters the words, '%%s'.");
    else
      sprintf(lbuf, "$n stares at $N and utters the words, '%%s'.");
  } else if (tobj != NULL &&
	     ((tobj->in_room == ch->in_room) || (tobj->carried_by == ch)))
d485 1
a485 1

d488 1
a488 1

d490 16
a505 15
  {
    if (i == ch || i == tch || !i->desc || !AWAKE(i))
      continue;
    if (GET_CLASS(ch) == GET_CLASS(i) || GET_LEVEL(i) >= LVL_IMMORT)
      perform_act(buf1, ch, tobj, tch, i);
    else
      perform_act(buf2, ch, tobj, tch, i);
  }

  if (tch != NULL && tch != ch && tch->in_room == ch->in_room) {
    sprintf(buf1, "$n stares at you and utters the words, '%s'.",
	    (GET_CLASS(ch) == GET_CLASS(tch))||GET_LEVEL(tch)>=LVL_IMMORT 
		? spells[spellnum] : buf);
    act(buf1, FALSE, ch, NULL, tch, TO_VICT);
  }
d512 8
d521 6
a526 12
  if (num <= 0) {
    if (num == -1)
      return "UNUSED";
    else
      return "UNDEFINED";
  }

  while (num && *spells[i] != '\n') {
    num--;
    i++;
  }

d539 18
a556 17

  while (*spells[++index] != '\n') {
    if (is_abbrev(name, spells[index]))
      return index;

    ok = 1;
    temp = any_one_arg(spells[index], first);
    temp2 = any_one_arg(name, first2);
    while (*first && *first2 && ok) {
      if (!is_abbrev(first2, first))
	ok = 0;
      temp = any_one_arg(temp, first);
      temp2 = any_one_arg(temp2, first2);
    }

    if (ok && !*first2)
      return index;
d558 1
a558 1

d572 1
a572 1
	     struct obj_data * ovict, int spellnum, int level, int casttype)
d575 1
a575 1

d578 7
a584 6

  if (ROOM_FLAGGED(caster->in_room, ROOM_NOMAGIC)) {
    send_to_char("Your magic fizzles out and dies.\r\n", caster);
    act("$n's magic fizzles out and dies.", FALSE, caster, 0, 0, TO_ROOM);
    return 0;
  }
d586 8
a593 7
      (SINFO.violent || IS_SET(SINFO.routines, MAG_DAMAGE))) {
    send_to_char("A flash of white light fills the room, dispelling your "
		 "violent magic!\r\n", caster);
    act("White light from no particular source suddenly fills the room, "
	"then vanishes.", FALSE, caster, 0, 0, TO_ROOM);
    return 0;
  }
d595 5
a599 4
    for(i=0;i<NUM_CLASSES;i++) {
      if(spell_info[spellnum].min_circle[i] < 10)
        min_spell_level = MIN(min_spell_level, spell_info[spellnum].min_circle[i]);
    }
d608 1
a608 1

d610 18
a627 18
  switch (casttype) {
  case CAST_STAFF:
  case CAST_SCROLL:
  case CAST_POTION:
  case CAST_WAND:
    savetype = SAVING_ROD;
    break;
  case CAST_SPELL:
    savetype = SAVING_SPELL;
    break;
  case CAST_BREATH:
    savetype = SAVING_BREATH;
    break;
  default:
    savetype = SAVING_BREATH;
    break;
  }

d629 1
d632 1
a632 1

d635 1
a635 1

d638 1
a638 1

d641 1
a641 1

d650 1
a650 1

d653 1
a653 1

d656 1
a656 1

d662 1
a662 1

d673 46
a718 46
	case SPELL_DIMENSION_DOOR:  MANUAL_SPELL(spell_dimension_door); break;
	 case SPELL_CREEPING_DOOM:  MANUAL_SPELL(spell_creeping_doom); break;
	 case SPELL_MOONWELL:       MANUAL_SPELL(spell_moonwell); break;
	 case SPELL_MAJOR_PARALYSIS: MANUAL_SPELL(spell_major_paralysis);break;
	case SPELL_RESURRECT:	MANUAL_SPELL(spell_resurrect); break;
	case SPELL_INCENDIARY_NEBULA:     MANUAL_SPELL(spell_incendiary_nebula); break;
	case SPELL_PRESERVE:	MANUAL_SPELL(spell_preserve); break;
        case SPELL_PLANE_SHIFT: MANUAL_SPELL(spell_plane_shift); break;
	case SPELL_DISPEL_MAGIC: MANUAL_SPELL(spell_dispel_magic); break;
	case SPELL_MINOR_CREATION: MANUAL_SPELL(spell_minor_creation); break;
	case SPELL_WIZARD_EYE: MANUAL_SPELL(spell_wizard_eye); break;
	case SPELL_TELEPORT: MANUAL_SPELL(spell_teleport); break;
	case SPELL_DISINTEGRATE: MANUAL_SPELL(spell_disintegrate); break;
	case SPELL_MASS_INVIS: MANUAL_SPELL(spell_mass_invis); break;
	case SPELL_RELOCATE: MANUAL_SPELL(spell_relocate); break;
        case SPELL_FIRE_BREATH: MANUAL_SPELL(spell_fire_breath); break;
        case SPELL_FROST_BREATH: MANUAL_SPELL(spell_frost_breath); break;
        case SPELL_GAS_BREATH: MANUAL_SPELL(spell_gas_breath); break;
        case SPELL_ACID_BREATH: MANUAL_SPELL(spell_acid_breath); break;
        case SPELL_LIGHTNING_BREATH: MANUAL_SPELL(spell_lightning_breath);break;
	case SPELL_LESSER_INVOCATION: MANUAL_SPELL(spell_lesser_invocation);break;
	case SPELL_ENLIGHTENMENT: MANUAL_SPELL(spell_enlightenment);break;
	case SPELL_GREATER_INVOCATION: MANUAL_SPELL(spell_greater_invocation);break;
	case SPELL_BANISH: MANUAL_SPELL(spell_banish);break;
	case SPELL_WORD_OF_COMMAND: MANUAL_SPELL(spell_word_of_command);break;
	case SPELL_DIVINE_ESSENCE: MANUAL_SPELL(spell_divine_essence);break;
	case SPELL_HEAVENS_GATE: MANUAL_SPELL(spell_heavens_gate);break;
	case SPELL_DARK_FEAST: MANUAL_SPELL(spell_dark_feast);break;
        case SPELL_HELLS_GATE: MANUAL_SPELL(spell_hells_gate);break;
	case SPELL_WALL_OF_STONE: MANUAL_SPELL(spell_wall_of_stone);break;
	case SPELL_NATURES_EMBRACE: MANUAL_SPELL(spell_natures_embrace);break;
	case SPELL_WANDERING_WOODS: MANUAL_SPELL(spell_wandering_woods);break;
	case SPELL_ARMOR_OF_GAIA: MANUAL_SPELL(spell_armor_of_gaia);break;
	case SPELL_FIRE_DARTS: MANUAL_SPELL(spell_fire_darts);break;
	case SPELL_FLAME_BLADE: MANUAL_SPELL(spell_flame_blade);break;
	case SPELL_MELT: MANUAL_SPELL(spell_melt);break;
	case SPELL_IMMOLATE: MANUAL_SPELL(spell_immolate);break;
	case SPELL_SUPERNOVA: MANUAL_SPELL(spell_supernova);break;
	case SPELL_FIREWALK: MANUAL_SPELL(spell_firewalk);break;
	case SPELL_GREATER_FIREWALK: MANUAL_SPELL(spell_greater_firewalk);break;
	case SPELL_ICE_DARTS: MANUAL_SPELL(spell_ice_darts);break;
	case SPELL_ICE_DAGGER: MANUAL_SPELL(spell_ice_dagger);break;
	case SPELL_WALL_OF_ICE: MANUAL_SPELL(spell_wall_of_ice);break;
	case SPELL_FLOOD: MANUAL_SPELL(spell_flood);break;
	case SPELL_GREATER_WATERWALK: MANUAL_SPELL(spell_greater_waterwalk);break;
	case SPELL_RAIN: MANUAL_SPELL(spell_rain);break;
d745 1
a745 1

d747 1
a747 1

d751 69
a819 12
  switch (GET_OBJ_TYPE(obj)) {
  case ITEM_STAFF:
    act("You tap $p three times on the ground.", FALSE, ch, obj, 0, TO_CHAR);
    if (obj->action_description)
      act(obj->action_description, FALSE, ch, obj, 0, TO_ROOM);
    else
      act("$n taps $p three times on the ground.", FALSE, ch, obj, 0, TO_ROOM);

    if (GET_OBJ_VAL(obj, 2) <= 0) {
      act("It seems powerless.", FALSE, ch, obj, 0, TO_CHAR);
      act("Nothing seems to happen.", FALSE, ch, obj, 0, TO_ROOM);
    } else {
d822 23
a844 29
      for (tch = world[ch->in_room].people; tch; tch = next_tch) {
	next_tch = tch->next_in_room;
	if (ch == tch)
	  continue;
	if (GET_OBJ_VAL(obj, 0))
	  call_magic(ch, tch, NULL, GET_OBJ_VAL(obj, 3),
		     GET_OBJ_VAL(obj, 0), CAST_STAFF);
	else
	  call_magic(ch, tch, NULL, GET_OBJ_VAL(obj, 3),
		     DEFAULT_STAFF_LVL, CAST_STAFF);
      }
    }
    break;
  case ITEM_WAND:
    if (k == FIND_CHAR_ROOM) {
      if (tch == ch) {
	act("You point $p at yourself.", FALSE, ch, obj, 0, TO_CHAR);
	act("$n points $p at $mself.", FALSE, ch, obj, 0, TO_ROOM);
      } else {
	act("You point $p at $N.", FALSE, ch, obj, tch, TO_CHAR);
	if (obj->action_description != NULL)
	  act(obj->action_description, FALSE, ch, obj, tch, TO_ROOM);
	else
	  act("$n points $p at $N.", TRUE, ch, obj, tch, TO_ROOM);
      }
    } else if (tobj != NULL) {
      act("You point $p at $P.", FALSE, ch, obj, tobj, TO_CHAR);
      if (obj->action_description != NULL)
	act(obj->action_description, FALSE, ch, obj, tobj, TO_ROOM);
d846 7
a852 5
	act("$n points $p at $P.", TRUE, ch, obj, tobj, TO_ROOM);
    } else {
      act("At what should $p be pointed?", FALSE, ch, obj, NULL, TO_CHAR);
      return;
    }
d854 4
a857 22
    if (GET_OBJ_VAL(obj, 2) <= 0) {
      act("It seems powerless.", FALSE, ch, obj, 0, TO_CHAR);
      act("Nothing seems to happen.", FALSE, ch, obj, 0, TO_ROOM);
      return;
    }
    GET_OBJ_VAL(obj, 2)--;
    WAIT_STATE(ch, PULSE_VIOLENCE);
    if (GET_OBJ_VAL(obj, 0))
      call_magic(ch, tch, tobj, GET_OBJ_VAL(obj, 3),
		 GET_OBJ_VAL(obj, 0), CAST_WAND);
    else
      call_magic(ch, tch, tobj, GET_OBJ_VAL(obj, 3),
		 DEFAULT_WAND_LVL, CAST_WAND);
    break;
  case ITEM_SCROLL:
    if (*arg) {
      if (!k) {
	act("There is nothing to here to affect with $p.", FALSE,
	    ch, obj, NULL, TO_CHAR);
	return;
      }
    } else
d859 5
d865 13
a877 36
    act("You recite $p which dissolves.", TRUE, ch, obj, 0, TO_CHAR);
    if (obj->action_description)
      act(obj->action_description, FALSE, ch, obj, NULL, TO_ROOM);
    else
      act("$n recites $p.", FALSE, ch, obj, NULL, TO_ROOM);

    WAIT_STATE(ch, PULSE_VIOLENCE);
    for (i = 1; i < 4; i++)
      if (!(call_magic(ch, tch, tobj, GET_OBJ_VAL(obj, i),
		       GET_OBJ_VAL(obj, 0), CAST_SCROLL)))
	break;

    if (obj != NULL)
      extract_obj(obj);
    break;
  case ITEM_POTION:
    tch = ch;
    act("You quaff $p.", FALSE, ch, obj, NULL, TO_CHAR);
    if (obj->action_description)
      act(obj->action_description, FALSE, ch, obj, NULL, TO_ROOM);
    else
      act("$n quaffs $p.", TRUE, ch, obj, NULL, TO_ROOM);

    WAIT_STATE(ch, PULSE_VIOLENCE);
    for (i = 1; i < 4; i++)
      if (!(call_magic(ch, ch, NULL, GET_OBJ_VAL(obj, i),
		       GET_OBJ_VAL(obj, 0), CAST_POTION)))
	break;

    if (obj != NULL)
      extract_obj(obj);
    break;
  default:
    log("SYSERR: Unknown object_type in mag_objectmagic");
    break;
  }
d891 1
a891 1
	           struct obj_data * tobj, int spellnum)
d894 39
a932 24

  if (spellnum < 0 || spellnum > TOP_SPELL_DEFINE) {
    sprintf(buf, "SYSERR: cast_spell trying to call spellnum %d\n", spellnum);
    log(buf);
    return 0;
  }
    
  if (GET_POS(ch) < SINFO.min_position) {
    switch (GET_POS(ch)) {
      case POS_SLEEPING:
      send_to_char("You dream about great magical powers.\r\n", ch);
      break;
    case POS_RESTING:
      send_to_char("You cannot concentrate while resting.\r\n", ch);
      break;
    case POS_SITTING:
      send_to_char("You can't do this sitting!\r\n", ch);
      break;
    case POS_FIGHTING:
      send_to_char("Impossible!  You can't concentrate enough!\r\n", ch);
      break;
    default:
      send_to_char("You can't do much of anything like this!\r\n", ch);
      break;
d934 3
a936 22
    return 0;
  }
  if (IS_AFFECTED(ch, AFF_CHARM) && (ch->master == tch)) {
    send_to_char("You are afraid you might hurt your master!\r\n", ch);
    return 0;
  }
  if ((tch != ch) && IS_SET(SINFO.targets, TAR_SELF_ONLY)) {
    send_to_char("You can only cast this spell upon yourself!\r\n", ch);
    return 0;
  }
  if ((tch == ch) && IS_SET(SINFO.targets, TAR_NOT_SELF)) {
    send_to_char("You cannot cast this spell upon yourself!\r\n", ch);
    return 0;
  }
  if (IS_SET(SINFO.routines, MAG_GROUPS) && !IS_AFFECTED(ch, AFF_GROUP)) {
    send_to_char("You can't cast this spell if you're not in a group!\r\n",ch);
    return 0;
  }
  if(GET_LEVEL(ch) < LVL_IMMORT) {
    if((GET_CLASS(ch) == CLASS_PRIEST || GET_CLASS(ch) == CLASS_PALADIN ||
      GET_CLASS(ch) == CLASS_RANGER) && GET_ALIGNMENT(ch) < 350) {
      send_to_char("Your diety has removed your holy powers!\r\n",ch);
d939 3
a941 3
    if((GET_CLASS(ch) == CLASS_DIABOLIST || GET_CLASS(ch) == CLASS_ANTI_PALADIN)
       && GET_ALIGNMENT(ch) > -350) {
      send_to_char("Your diety has removed your unholy powers!\r\n",ch);
d944 14
a957 1
  }
d960 1
a960 1

d983 6
a988 5
  if(AFF2_FLAGGED(ch, AFF2_SILENCE)) {
    send_to_char("Your lips move, but no sound forms.\r\n", ch);
    return;
  }
 
d991 1
a991 1

d993 1
a993 1
  {
d996 13
a1008 11
  }
if(GET_POS1(ch) < POS1_STANDING){
send_to_char("You are to relaxed..\r\n", ch);
return;
}	

  if (s == NULL) {
    send_to_char("Cast what where?\r\n", ch);
 	return;
  }

d1010 6
a1015 5
  if (s == NULL) {
    send_to_char("Spell names must be enclosed in the Holy Magic Symbols: '\r\n", ch);
	return;
  }

d1017 1
a1017 1

d1020 1
a1020 1

d1022 5
a1026 5
  {
    send_to_char("Cast what?!?\r\n", ch);
    return;
  }

a1027 2
  {
    if (GET_LEVEL(ch) < SINFO.min_level[(int) GET_CLASS(ch)]) 
d1029 3
a1031 1
      send_to_char("You do not know that spell!\r\n", ch);
d1033 3
a1035 2
    }	
  } else 
d1037 1
a1037 1
      if (GET_LEVEL(ch) < SINFO.min_level[(int) GET_CLASS(ch)]) 
d1039 44
a1082 2
         send_to_char("You do not know that spell!\r\n", ch);
         return;
a1083 36
	  }
	  /*spheres banyal*/
/*
   if (SPHERE(ch, FIRE) < SINFO.fire) {
  send_to_char("The message you like to have.\r\n", ch);
  return;
}
if (SPHERE(ch, WATER) < SINFO.water) {
  send_to_char("The message you like to have.\r\n", ch);
  return;
}
if (SPHERE(ch, AIR) < SINFO.air) {
  send_to_char("The message you like to have.\r\n", ch);
  return;
}
if (SPHERE(ch, EARTH) < SINFO.earth) {
  send_to_char("The message you like to have.\r\n", ch);
  return;
}
if (SPHERE(ch, GENERIC) < SINFO.generic) {
  send_to_char("The message you like to have.\r\n", ch);
  return;
}
if (SPHERE(ch, HEALING) < SINFO.healing) {
  send_to_char("The message you like to have.\r\n", ch);
  return;
}
*/
  }

  if (GET_SKILL(ch, spellnum) == 0) 
  {
    send_to_char("You are unfamiliar with that spell.\r\n", ch);
	return;
  }	

d1085 3
a1087 3
   if((GET_LEVEL(ch) < LVL_IMMORT)&&(!IS_NPC(ch)))
     if(!check_spell_memory(ch, spellnum))
     {
d1090 4
a1093 4
     }



a1101 6
  {
    target = TRUE;
    target_status = TARGET_ALL_ROOM;
  } else if (t != NULL && *t) 
  {
    if (!target && (IS_SET(SINFO.targets, TAR_CHAR_ROOM))) 
d1103 7
a1109 21
      if ((tch = get_char_room_vis(ch, t)) != NULL){
	  target = TRUE;
	  target_status = TARGET_IN_ROOM;
      }
    }
    if (!target && IS_SET(SINFO.targets, TAR_CHAR_WORLD))
      if ((tch = get_char_vis(ch, t))) {
	target = TRUE;
        target_status = TARGET_IN_WORLD;
      }
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_INV))
      if ((tobj = get_obj_in_list_vis(ch, t, ch->carrying))) {
	target = TRUE;
	target_status = TARGET_IN_INV;
      }     
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_EQUIP)) 
    {
      for (i = 0; !target && i < NUM_WEARS; i++)
	    if (GET_EQ(ch, i) && !str_cmp(t, GET_EQ(ch, i)->name)) 
        {
	      tobj = GET_EQ(ch, i);
d1111 10
a1120 10
              target_status = TARGET_EQUIP;
        }
    }
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_ROOM))
      if ((tobj = get_obj_in_list_vis(ch, t, world[ch->in_room].contents))){
	     target = TRUE;
	     target_status = TARGET_IN_ROOM;
      }
    if (!target && IS_SET(SINFO.targets, TAR_OBJ_WORLD))
      if ((tobj = get_obj_vis(ch, t))) {
d1122 14
a1135 9
 	    target_status = TARGET_IN_WORLD;
      }

  } else 
  {			/* if target string is empty */
    if (!target && IS_SET(SINFO.targets, TAR_FIGHT_SELF))
      if (FIGHTING(ch) != NULL) 
      {
	    tch = ch;
d1137 4
a1140 6
	    target_status = TARGET_SELF;
      }
    if (!target && IS_SET(SINFO.targets, TAR_FIGHT_VICT))
      if (FIGHTING(ch) != NULL) 
      {
	    tch = FIGHTING(ch);
d1142 39
a1180 22
            target_status = TARGET_FIGHTING;
      }
    /* if no target specified, and the spell isn't violent, default to self */
    if (!target && IS_SET(SINFO.targets, TAR_CHAR_ROOM) && !SINFO.violent) 
    {
      tch = ch;
      target = TRUE;
      target_status = TARGET_SELF;
    }
    if (!target) 
    {
      sprintf(buf, "Upon %s should the spell be cast?\r\n", IS_SET(SINFO.targets, TAR_OBJ_ROOM | TAR_OBJ_INV | TAR_OBJ_WORLD) ? "what" : "who");
      send_to_char(buf, ch);
	  return;
    }
  }
/*
  if (target && (tch == ch) && SINFO.violent) {
    send_to_char("You shouldn't cast that on yourself -- could be bad for your health!\r\n", ch);
	return;
  }
*/
d1183 1
a1183 1
	return;
d1185 1
a1185 1
 
d1187 7
a1193 7

if (target && SINFO.violent) {
if (affected_by_spell(ch, SPELL_INVISIBLE))
   appear(ch);
 if (affected_by_spell(ch, SPELL_CONCEALMENT))
     appear(ch);
  REMOVE_BIT(AFF_FLAGS(ch), AFF_INVISIBLE | AFF_HIDE);
d1196 19
a1214 19
   /* lets remove the spell from memory and fry the victim! */
   /*charge_mem(ch, spellnum); let's do this AFTER the spell is cast -Nechtrous*/

     /* set ch to casting and setup the casting structure for complete_spell() */
   SET_BIT(PLR_FLAGS(ch), PLR_CASTING);
   if (IS_NPC(ch))
		SET_BIT(MOB_FLAGS(ch), MOB_CASTING);
   ch->casting.spell = spellnum;
   ch->casting.tch = tch;
   ch->casting.obj = tobj;
   ch->casting.misc = misc;   
   ch->casting.target_status = target_status;  
   if (number(1,102) < GET_SKILL(ch, SKILL_QUICK_CHANT))
     ch->casting.casting_time = (int)(SINFO.cast_time / 2);
   else
     ch->casting.casting_time = SINFO.cast_time;
   improve_skill(ch, SKILL_QUICK_CHANT);   

   if(spell_info[ch->casting.spell].violent)
d1216 5
a1220 5
   else
       act("$n starts casting a spell...", TRUE, ch, 0, 0, TO_ROOM);
   
   act("You start chanting...", FALSE, ch, 0, 0, TO_CHAR);  
   WAIT_STATE(ch, (PULSE_VIOLENCE / 2) * (ch->casting.casting_time + 1));
d1226 15
a1240 15
    extern struct char_data *character_list;
    struct char_data *ch = character_list;
    struct obj_data *obj;
    int i, tick = 0;
    char buf[64];
    int tar_invalid = FALSE, found = FALSE;

    for(;ch;ch = ch->next)
    {
/*I added this if to stop start up lock-up due to trying to cast a spell
 on ch -1 and ch 0 at start of game wake up Banyal*/
if (ch != CON_PLAYING && ch->in_room == NOWHERE)
return;
		
if((PLR_FLAGGED(ch, PLR_CASTING)) || (MOB_FLAGGED(ch, MOB_CASTING)))
d1242 36
a1277 36
	/* check to make sure target is still valid! Nechtrous */
            if(ch->casting.obj) { /* target is object */
              switch(ch->casting.target_status) {
		case TARGET_IN_ROOM:
                  if(ch->casting.obj->in_room != ch->in_room)
		    tar_invalid = TRUE;
		  break;
		case TARGET_IN_WORLD:
		  break;
		case TARGET_IN_INV:
		  for(obj=ch->carrying;obj;obj=obj->next)
		    if(ch->casting.obj == obj)
		      found = TRUE;
		  if(!found)
		    tar_invalid=TRUE;
		  break;
		case TARGET_EQUIP:
		  for(i=0;i<NUM_WEARS;i++)
		    if(ch->casting.obj == ch->equipment[i])
		      found = TRUE;
		  if(!found)
		    tar_invalid=TRUE;
		  break;
		default:
		  log("SYSERR: Error in update_casting() at obj valid check.");
	      }
	      if(tar_invalid) {
                  if (IS_NPC(ch))
			REMOVE_BIT(MOB_FLAGS(ch), MOB_CASTING);
			REMOVE_BIT(PLR_FLAGS(ch), PLR_CASTING);
                    act("You stop invoking abruptly!", FALSE, ch, 0, 0, TO_CHAR);
                    act("$n stops invoking abruptly!",FALSE, ch, 0, 0, TO_ROOM); 
                    continue;
	      }	
	    }  
            if(ch->casting.tch) /* target is a char */
d1280 10
a1289 10
		case TARGET_IN_ROOM:
                  if(ch->casting.tch->in_room != ch->in_room)
                    tar_invalid = TRUE;
		  break;
		case TARGET_IN_WORLD:
		  break;
		case TARGET_FIGHTING:
		  if(!FIGHTING(ch) || ch->casting.tch != FIGHTING(ch))
		    tar_invalid = TRUE;
		  break;
d1291 4
a1294 4
                case TARGET_SELF:
		  break;                  
		default:
		  log("SYSERR: Error in update_casting() at char valid check.");
d1305 7
a1311 7

	
	/*if(number(1, 100) < GET_SKILL(ch, SKILL_QUICK_CHANT))
		ch->casting.casting_time = 0;
*/
            /* is ch done casting? */
	if((ch->casting.casting_time) <= 0)
d1313 4
a1316 4
				if (IS_NPC(ch))
					REMOVE_BIT(MOB_FLAGS(ch), MOB_CASTING);
                REMOVE_BIT(PLR_FLAGS(ch), PLR_CASTING);
                complete_spell(ch);      
d1318 1
a1318 1
            else
d1320 11
a1330 11
                memset(buf, 0x0, 64);
                sprintf(buf, "Casting: %s ", skill_name(ch->casting.spell));
                
                for(i =1; i <= ch->casting.casting_time; i++)
                   strcat(buf, "*");
                
                tick = 1;
                strcat(buf, "\r\n");
                
                if(tick)
                    send_to_char(buf, ch);
d1332 15
a1346 15
	/* gonna check quick chant in do_cast  -Nechtrous 
	if(ch->casting.casting_time >= 1) {
	  numb = number(1, 100);
	  if (numb - (GET_SKILL(ch, SKILL_QUICK_CHANT)) < -5) {	
	    ch->casting.casting_time--;
	    ch->casting.casting_time--;
	  } 
          else if (numb - (GET_SKILL(ch, SKILL_QUICK_CHANT)) < 10) {
	    ch->casting.casting_time--;
          } else
	    ch->casting.casting_time--;        
	} */
	ch->casting.casting_time--;        
    } 
  }
d1351 20
a1370 36
int circle_cast;

if(IS_AFFECTED2(ch, AFF2_INSANITY) && !mag_savingthrow(ch, SAVING_PARA)){
  act("$n babbles a bit as a strand of drool drips down $s chin.",TRUE,ch,0,0,TO_ROOM);
  act("Your mind is not in any condition to cast spells.",FALSE,ch,0,0,TO_CHAR);
  act("&1$n&1 stops chanting abruptly!&0", TRUE, ch, 0, 0, TO_ROOM); 
  return;
}
if (IS_NPC(ch)) {
	circle_cast = 1 + ((int) ((spell_info[ch->casting.spell].min_level[(int) (GET_CLASS(ch))])/5)); 
		/*make sure not 0 or greater then 12*/
	circle_cast = MAX(1, MIN(circle_cast, 12));

  /* You throws the dice and you takes your chances.. 101% is total failure */
	if (number(0, 101) > GET_MSKILL(ch, ch->casting.spell)) {
		WAIT_STATE(ch, PULSE_VIOLENCE);
		if (!ch->casting.tch || !skill_message(0, ch, ch->casting.tch, ch->casting.spell))
		{
			send_to_char("You lost your concentration!\r\n", ch);
			act("$n stops chanting abruptly!", TRUE, ch, 0, 0, TO_ROOM); 
		}
		if (circle_cast > 0) {
			if (number(1, 2) == 1)
				SET_MEM_MEMED(ch, circle_cast, MAX(0, (GET_MEM_MEMED(ch, circle_cast) -1)));	
		}
	} else { /* cast spell returns 1 on success; subtract mana & set waitstate */
		if (GET_MEM_MEMED(ch, circle_cast) > 0) {
			cast_spell(ch, ch->casting.tch, ch->casting.obj, ch->casting.spell);
			WAIT_STATE(ch, PULSE_VIOLENCE * 2);
			SET_MEM_MEMED(ch, circle_cast, MAX(0, (GET_MEM_MEMED(ch, circle_cast) -1)));	
         if (spell_info[ch->casting.spell].violent && ch->casting.tch && 
			IS_NPC(ch->casting.tch) && !FIGHTING(ch->casting.tch))   
			if(number(0, 4)) {
                        hit(ch->casting.tch, ch, TYPE_UNDEFINED);
                        remember(ch->casting.tch, ch); }
		}
d1372 45
a1416 30
	return;
} else {
	/*pc*/
	/* You throws the dice and you takes your chances.. 101% is total failure */
	if (number(0, 101) > GET_SKILL(ch, ch->casting.spell) && 
           (GET_LEVEL(ch) < spell_info[ch->casting.spell].min_level[(int) GET_CLASS(ch)] + 5) ) 
	{
		WAIT_STATE(ch, PULSE_VIOLENCE * 2);
		if (!ch->casting.tch || !skill_message(0, ch, ch->casting.tch, ch->casting.spell))
		{
			send_to_char("You lost your concentration!\r\n", ch);
			act("$n stops chanting abruptly!", TRUE, ch, 0, 0, TO_ROOM); 
		}
		/*
		if (spell_info[ch->casting.spell].violent && ch->casting.tch 
			&& IS_NPC(ch->casting.tch) && !FIGHTING(ch->casting.tch))
			hit(ch->casting.tch, ch, TYPE_UNDEFINED);
		*/
	} else { /* cast spell returns 1 on success; subtract mana & set waitstate */
		send_to_char("You complete your spell.\r\n", ch);
		act("$n completes $s spell...", FALSE, ch, 0, 0, TO_ROOM);
		if (cast_spell(ch, ch->casting.tch, ch->casting.obj, ch->casting.spell)) { 
			WAIT_STATE(ch, PULSE_VIOLENCE);
			charge_mem(ch, ch->casting.spell);
                if (spell_info[ch->casting.spell].violent && ch->casting.tch && 
		IS_NPC(ch->casting.tch) && !FIGHTING(ch->casting.tch))   
                      if(number(0, 4)) {
                        hit(ch->casting.tch, ch, TYPE_UNDEFINED);
			remember(ch->casting.tch, ch); }
		}
d1418 2
a1419 1
}
d1425 5
a1429 4
struct obj_data *tobj = NULL;
char *t = '\0';
int i, target = 0;
int target_status = TARGET_NULL;
d1431 1
a1431 2

if(AFF2_FLAGGED(ch, AFF2_SILENCE)) {
d1434 1
a1434 1
 
d1437 14
a1450 5


if (1) {
	if ((spellnum < 1) || (spellnum > MAX_SPELLS)) {
		send_to_char("Cast what?!?\r\n", ch);
d1452 1
a1452 10
	}
	if (GET_LEVEL(ch) < SINFO.min_level[(int) (GET_CLASS(ch))]) {
		act(buf, TRUE, ch, 0, 0, TO_ROOM);
		return;
	}	   
}		
  
	  if (MOB_FLAGGED(ch, MOB_CASTING))
		  return;
if ((GET_SKILL(ch, spellnum)) == 0) { 
d1455 2
a1456 2
}	

d1458 2
a1459 2

if (IS_SET(SINFO.targets, TAR_IGNORE)) {
d1461 1
a1461 1
} else if (tch != NULL) {
d1463 2
a1464 2
		target = TRUE;
		target_status = TARGET_IN_ROOM;
d1467 2
a1468 2
		target = TRUE;
		target_status = TARGET_IN_WORLD;
d1471 3
a1473 3
		if ((tobj = get_obj_in_list_vis(ch, t, ch->carrying)))
			target = TRUE;
			target_status=TARGET_IN_INV;
d1476 5
a1480 6
	for (i = 0; !target && i < NUM_WEARS; i++)
		if (GET_EQ(ch, i) && !str_cmp(t, GET_EQ(ch, i)->name)) {
			tobj = GET_EQ(ch, i);
			target = TRUE;
			target_status = TARGET_EQUIP;
		}
d1482 1
d1484 4
a1487 4
	if ((tobj = get_obj_in_list_vis(ch, t, world[ch->in_room].contents))){
		target = TRUE;
		target_status = TARGET_IN_ROOM;
	}
d1489 17
a1505 17
	if ((tobj = get_obj_vis(ch, t))){
		target = TRUE;
		target_status = TARGET_IN_WORLD;
	}
} else {			/* if target string is empty */
	if (!target && IS_SET(SINFO.targets, TAR_FIGHT_SELF))
		if (FIGHTING(ch) != NULL) {
			tch = ch;
			target = TRUE;
			target_status = TARGET_SELF;
		}
		if (!target && IS_SET(SINFO.targets, TAR_FIGHT_VICT))
			if (FIGHTING(ch) != NULL) {
				tch = FIGHTING(ch);
				target = TRUE;
				target_status = TARGET_FIGHTING;
			}
d1507 15
a1521 15
			if (!target && IS_SET(SINFO.targets, TAR_CHAR_ROOM) &&
				!SINFO.violent) {
				tch = ch;
				target = TRUE;
				target_status = TARGET_SELF;
			}
			if (!target) {
				sprintf(buf, "Upon %s should the spell be cast?\r\n",
					IS_SET(SINFO.targets, TAR_OBJ_ROOM | TAR_OBJ_INV | TAR_OBJ_WORLD) ? "what" : "who");
				send_to_char(buf, ch);
				return;
			} 
}

if (target && (tch == ch) && SINFO.violent) {
d1524 2
a1525 2
}	
if (!target) {
d1528 1
a1528 1
}
d1530 5
a1534 5
   SET_BIT(MOB_FLAGS(ch), MOB_CASTING);
   ch->casting.spell = spellnum;
   ch->casting.tch = tch;
   ch->casting.target_status = target_status;
   /*ch->casting.obj = tobj;
d1536 1
a1536 1
   if(spell_info[ch->casting.spell].violent)
d1538 6
a1543 6
   else
       act("$n starts casting a spell...", TRUE, ch, 0, 0, TO_ROOM);
   
   act("You start chanting...", FALSE, ch, 0, 0, TO_CHAR);  


d1551 1
a1551 1

d1557 1
a1557 1

d1564 1
a1564 1

d1571 1
a1571 1

d1573 1
a1573 1
   {
d1577 3
a1579 3
   }
   

d1581 4
a1584 4
  {
    spell_info[spell].min_level[class] = level;
	spell_info[spell].min_circle[class] = circle;
  }
d1590 2
a1591 2
	         int targets, byte violent, int routines, int mem_time, int cast_time,
			 int damage_type, int sphere)
d1597 1
a1597 1

d1620 1
a1620 1

d1681 1
a1681 1

d1686 1
a1686 1

d1688 3
a1690 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

d1692 3
a1694 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

d1696 3
a1698 3
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

d1700 3
a1702 3
	TAR_IGNORE, TRUE, MAG_AREAS, C1,
	FAST, COLD_DAMAGE, SPELL_SPHERE_AIR);

d1704 3
a1706 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

d1708 3
a1710 3
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	SLOW, COLD_DAMAGE, SPELL_SPHERE_WATER);

d1712 3
a1714 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

d1716 3
a1718 3
	TAR_IGNORE, TRUE, MAG_MANUAL, C1,
	SLOW, COLD_DAMAGE, SPELL_SPHERE_WATER);
 
d1720 3
a1722 3
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_GENERIC);

d1724 3
a1726 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

d1728 3
a1730 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	SLOW, 0, SPELL_SPHERE_WATER);

d1732 3
a1734 3
	TAR_CHAR_ROOM, FALSE, MAG_UNAFFECTS, C1,
	FAST, 0, SPELL_SPHERE_WATER);

d1736 3
a1738 3
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_WATER);

d1740 3
a1742 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d1744 3
a1746 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_FIRE);

d1748 3
a1750 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_FIRE);

d1752 3
a1754 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_FIRE);

d1756 3
a1758 3
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_FIRE);
 
d1760 3
a1762 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d1764 3
a1766 3
	TAR_IGNORE, TRUE, MAG_AREAS, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d1768 3
a1770 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d1772 3
a1774 3
	TAR_IGNORE, TRUE, MAG_ROOM, C1,
	SLOW, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d1776 3
a1778 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d1780 3
a1782 3
	TAR_IGNORE, TRUE, MAG_MANUAL, C1,
	SLOW, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d1784 3
a1786 3
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_FIRE);

d1788 3
a1790 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_FIRE);

d1792 3
a1794 3
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_FIRE);

d1796 3
a1798 3
	TAR_IGNORE, FALSE, MAG_ROOM, C1,
	SLOW, 0, SPELL_SPHERE_ENCHANT);

d1800 3
a1802 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_AFFECTS, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);
 
d1804 3
a1806 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

d1808 3
a1810 3
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_ENCHANT);

d1812 3
a1814 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_POINTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

d1816 3
a1818 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d1820 3
a1822 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d1824 3
a1826 3
	TAR_CHAR_ROOM, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d1828 1
a1828 1
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_POINTS, C1,
d1830 1
a1830 1

d1832 3
a1834 3
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

d1836 3
a1838 3
	TAR_IGNORE, FALSE, MAG_CREATIONS, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

d1840 3
a1842 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

d1844 3
a1846 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d1848 3
a1850 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC);

d1852 3
a1854 3
	TAR_CHAR_WORLD, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_SUMMON);

d1856 3
a1858 3
	TAR_CHAR_ROOM, FALSE, MAG_UNAFFECTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

d1860 3
a1862 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d1864 3
a1866 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

d1868 3
a1870 3
	TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_GENERIC);

d1872 3
a1874 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d1876 3
a1878 3
	TAR_CHAR_ROOM, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d1880 3
a1882 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d1884 3
a1886 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d1888 3
a1890 3
	TAR_IGNORE, FALSE, MAG_AREAS, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d1892 3
a1894 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d1896 3
a1898 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d1900 3
a1902 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d1904 3
a1906 3
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_HEALING);

d1908 3
a1910 3
	TAR_CHAR_WORLD, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_SUMMON);

d1912 3
a1914 3
	TAR_CHAR_ROOM, TRUE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_GENERIC);

d1916 3
a1918 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d1920 3
a1922 3
	TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

d1924 3
a1926 3
	TAR_CHAR_ROOM | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_GENERIC);

d1928 3
a1930 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d1932 3
a1934 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON); 

d1936 3
a1938 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

d1940 3
a1942 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE,C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_DEATH);

d1944 3
a1946 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_DEATH);

d1948 3
a1950 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC);

d1952 3
a1954 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC);

d1956 3
a1958 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d1960 3
a1962 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

d1964 3
a1966 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_FIRE);

d1968 3
a1970 3
	TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d1972 3
a1974 3
	TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, AIR_DAMAGE, SPELL_SPHERE_AIR);
 
d1976 3
a1978 3
	TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

d1980 3
a1982 3
	TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);

d1984 3
a1986 3
	TAR_CHAR_ROOM, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d1988 3
a1990 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_DEATH);

d1992 3
a1994 3
	TAR_IGNORE, TRUE, MAG_AREAS, C1,
	FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);

d1996 3
a1998 3
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2000 3
a2002 3
	TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
	SLOW, 0, SPELL_SPHERE_AIR);

d2004 3
a2006 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d2008 3
a2010 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_GENERIC);

d2012 3
a2014 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

d2016 3
a2018 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

d2020 3
a2022 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d2024 3
a2026 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

d2028 3
a2030 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2032 3
a2034 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_GENERIC);

d2036 3
a2038 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2040 3
a2042 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2044 3
a2046 3
	TAR_CHAR_WORLD, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_GENERIC);

d2048 3
a2050 3
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

d2052 1
a2052 1
   TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_OBJ_ROOM | TAR_OBJ_INV, TRUE, MAG_MANUAL,
d2054 1
a2054 1

d2056 3
a2058 3
	TAR_IGNORE, TRUE, MAG_AREAS, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC);

d2060 3
a2062 3
	TAR_IGNORE, TRUE, MAG_AREAS, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_GENERIC);

d2064 3
a2066 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

d2068 11
a2078 11
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS | MAG_UNAFFECTS, C1,
	SLOW, 0, SPELL_SPHERE_ENCHANT);

 spello(SPELL_ENLARGE, 35, 5, 3, POS_STANDING,
        TAR_CHAR_ROOM, FALSE, MAG_AFFECTS | MAG_UNAFFECTS, C1,
        SLOW, 0, SPELL_SPHERE_ENCHANT);
 
 spello(SPELL_BLESS, 35, 5, 3, POS_STANDING,
        TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE, MAG_AFFECTS | MAG_ALTER_OBJS, C1,
        FAST, 0, SPELL_SPHERE_ENCHANT);

d2080 3
a2082 3
	TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_FIGHT_VICT, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2084 3
a2086 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT | TAR_NOT_SELF, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2088 3
a2090 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d2092 3
a2094 3
	  TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	  FAST, 0, SPELL_SPHERE_ENCHANT);

d2096 3
a2098 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d2100 3
a2102 3
	  TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	  FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

d2104 3
a2106 3
	  TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	  FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC);

d2108 11
a2118 11
	  TAR_IGNORE, TRUE, MAG_AREAS, C1,
	  FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH);

 spello(SPELL_WATERWALK, 35, 5, 3, POS_STANDING,
 	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_WATER);

 spello(SPELL_ICE_SHARDS, 100, 50, 3, POS_FIGHTING,
	  TAR_IGNORE, TRUE, MAG_AREAS, C1,
	  FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

d2120 3
a2122 3
	  TAR_IGNORE, TRUE, MAG_AREAS, C1,
	  FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

d2124 3
a2126 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);

d2128 3
a2130 3
	TAR_CHAR_ROOM | TAR_NOT_SELF, TRUE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2132 3
a2134 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

d2136 3
a2138 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_AFFECTS, C1,
	FAST, COLD_DAMAGE, SPELL_SPHERE_WATER);

d2140 3
a2142 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_SUMMONS, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

d2144 3
a2146 3
		 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_ROOM, C1,
		 FAST, 0, SPELL_SPHERE_ENCHANT);

d2148 4
a2151 4
		 TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE,
                 MAG_ROOM | MAG_ALTER_OBJS, C1,
                 FAST, 0, SPELL_SPHERE_ENCHANT);

d2153 3
a2155 3
	  TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	  FAST, 0, 0);

d2157 3
a2159 3
	  TAR_CHAR_ROOM, TRUE, MAG_MANUAL, C6,
	  FAST, 0, SPELL_SPHERE_ENCHANT);

d2161 3
a2163 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC);

d2165 3
a2167 3
	TAR_IGNORE, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2169 3
a2171 3
	TAR_IGNORE, FALSE, MAG_CREATIONS, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

d2173 3
a2175 3
	TAR_OBJ_INV | TAR_OBJ_EQUIP, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

d2177 3
a2179 3
	TAR_CHAR_ROOM, FALSE, MAG_UNAFFECTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

d2181 3
a2183 3
	TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

d2185 3
a2187 3
	TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

d2189 3
a2191 3
	TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

d2193 3
a2195 3
	TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

d2197 3
a2199 3
	TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

d2201 3
a2203 3
	TAR_CHAR_ROOM, FALSE, MAG_POINTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

d2205 3
a2207 3
	TAR_CHAR_ROOM | TAR_OBJ_INV, TRUE, MAG_AFFECTS | MAG_ALTER_OBJS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2209 3
a2211 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2213 3
a2215 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2217 3
a2219 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2221 3
a2223 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2225 3
a2227 3
	TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2229 3
a2231 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_ENCHANT);

d2233 3
a2235 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_ENCHANT);

d2237 3
a2239 3
	TAR_IGNORE, TRUE, MAG_AREAS, C1,
	FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH);

d2241 3
a2243 3
	TAR_IGNORE, TRUE, MAG_AREAS, C1,
	FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH);

d2245 4
a2248 4
	  TAR_IGNORE, TRUE, MAG_MANUAL, C1,
	  FAST, EARTH_DAMAGE, SPELL_SPHERE_EARTH);


d2250 3
a2252 3
	TAR_OBJ_INV | TAR_OBJ_EQUIP, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2254 3
a2256 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, DEATH_DAMAGE, SPELL_SPHERE_DEATH);

d2258 3
a2260 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE | MAG_MANUAL, C1,
	FAST, DEATH_DAMAGE, SPELL_SPHERE_DEATH);

d2262 3
a2264 3
	TAR_IGNORE, FALSE, MAG_GROUPS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

d2266 3
a2268 3
	TAR_IGNORE, FALSE, MAG_GROUPS, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

d2270 3
a2272 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, FIRE_DAMAGE, SPELL_SPHERE_FIRE);

d2274 3
a2276 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING);

d2278 3
a2280 3
	TAR_CHAR_ROOM, FALSE, MAG_POINTS | MAG_UNAFFECTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

d2282 3
a2284 3
	TAR_IGNORE, FALSE, MAG_GROUPS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

d2286 3
a2288 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING);

d2290 3
a2292 3
	TAR_CHAR_ROOM, FALSE, MAG_POINTS | MAG_UNAFFECTS, C1,
	FAST, 0, SPELL_SPHERE_HEALING);

d2294 3
a2296 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2298 3
a2300 3
	TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_AFFECTS | MAG_ALTER_OBJS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2302 3
a2304 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2306 3
a2308 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);

d2310 3
a2312 3
	TAR_OBJ_WORLD, FALSE, MAG_MANUAL, C1,
	FAST, 0, 0);

d2314 3
a2316 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, GENERIC_DAMAGE, SPELL_SPHERE_GENERIC);

d2318 3
a2320 3
	TAR_CHAR_ROOM | TAR_NOT_SELF | TAR_OBJ_INV, TRUE, MAG_AFFECTS | MAG_ALTER_OBJS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2322 3
a2324 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

d2326 3
a2328 3
	TAR_CHAR_ROOM | TAR_OBJ_INV, FALSE, MAG_UNAFFECTS | MAG_ALTER_OBJS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2330 3
a2332 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

d2334 3
a2336 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, SHOCK_DAMAGE, SPELL_SPHERE_AIR);

d2338 3
a2340 3
	TAR_CHAR_ROOM, TRUE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2342 3
a2344 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2346 3
a2348 3
	TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

d2350 3
a2352 3
        TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
        SLOW, 0, SPELL_SPHERE_HEALING);

d2354 4
a2357 4
	TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_HEALING);


d2359 3
a2361 3
	  TAR_CHAR_WORLD | TAR_NOT_SELF, FALSE, MAG_MANUAL, C1,
	  FAST, 0, SPELL_SPHERE_AIR);

d2363 3
a2365 3
        TAR_OBJ_ROOM, FALSE, MAG_SUMMONS, C1,
		FAST, 0, SPELL_SPHERE_SUMMON);

d2367 3
a2369 3
        TAR_OBJ_ROOM, FALSE, MAG_SUMMONS, C1,
		FAST, 0, SPELL_SPHERE_SUMMON);

d2371 12
a2382 12
        TAR_IGNORE, FALSE, MAG_SUMMONS, C1,
		FAST, 0, SPELL_SPHERE_SUMMON);

   spello(SPELL_SUMMON_DEMON, 100, 75, 3, POS_SITTING, 
        TAR_IGNORE, FALSE, MAG_SUMMONS, C1,
		FAST, 0, SPELL_SPHERE_SUMMON);

   spello(SPELL_SUMMON_GREATER_DEMON, 130, 75, 3, POS_SITTING, 
        TAR_IGNORE, FALSE, MAG_SUMMONS, C1,
		FAST, 0, SPELL_SPHERE_SUMMON);


d2384 3
a2386 3
	TAR_CHAR_ROOM, FALSE, MAG_MANUAL, C1,
	FAST, 0, SPELL_SPHERE_SUMMON);

d2388 6
a2393 5
	TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_UNAFFECTS | MAG_ALTER_OBJS, C1,
	FAST, 0, 0);
spello(SPELL_INCENDIARY_NEBULA, 0, 0, 0, POS_FIGHTING,
	   	TAR_IGNORE, TRUE, MAG_AREAS, C1, FAST, FIRE_DAMAGE,
	SPELL_SPHERE_FIRE);
a2394 1

d2397 2
a2398 2
		 FAST, 0, SPELL_SPHERE_EARTH);

d2400 2
a2401 2
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);
d2404 3
a2406 3
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

d2408 3
a2410 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, ALIGN_DAMAGE, SPELL_SPHERE_HEALING);

d2412 3
a2414 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_PROT);

d2416 3
a2418 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2420 7
a2426 7
	TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

 spello(SPELL_VITALITY, 50, 30, 5, POS_STANDING,
	  TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	  FAST, 0, SPELL_SPHERE_ENCHANT);

d2428 3
a2430 3
		 TAR_CHAR_ROOM | TAR_SELF_ONLY, FALSE, MAG_ROOM, C1,
		 FAST, 0, SPELL_SPHERE_SUMMON);

d2432 3
a2434 3
	TAR_CHAR_ROOM, FALSE, MAG_AFFECTS, C1,
	FAST, 0, SPELL_SPHERE_ENCHANT);

d2436 3
a2438 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING); 

d2440 3
a2442 3
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING); 

d2444 4
a2447 4
	TAR_CHAR_ROOM | TAR_FIGHT_VICT, TRUE, MAG_DAMAGE, C1,
	FAST, HEALING_DAMAGE, SPELL_SPHERE_HEALING); 


d2450 4
a2453 4
	TAR_CHAR_ROOM | TAR_OBJ_INV | TAR_OBJ_ROOM, FALSE, MAG_MANUAL, C1,
	FAST, 0, 0);


d2510 4
@
