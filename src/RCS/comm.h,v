head	1.29;
access;
symbols;
locks; strict;
comment	@ * @;


1.29
date	2009.03.07.22.30.11;	author jps;	state Exp;
branches;
next	1.28;

1.28
date	2008.09.07.20.08.54;	author jps;	state Exp;
branches;
next	1.27;

1.27
date	2008.08.25.02.31.30;	author jps;	state Exp;
branches;
next	1.26;

1.26
date	2008.08.23.14.03.30;	author jps;	state Exp;
branches;
next	1.25;

1.25
date	2008.08.16.23.04.03;	author jps;	state Exp;
branches;
next	1.24;

1.24
date	2008.08.14.23.02.11;	author myc;	state Exp;
branches;
next	1.23;

1.23
date	2008.08.14.09.45.22;	author jps;	state Exp;
branches;
next	1.22;

1.22
date	2008.06.09.23.00.13;	author myc;	state Exp;
branches;
next	1.21;

1.21
date	2008.04.07.03.02.54;	author jps;	state Exp;
branches;
next	1.20;

1.20
date	2008.04.05.05.05.42;	author myc;	state Exp;
branches;
next	1.19;

1.19
date	2008.03.22.03.22.38;	author myc;	state Exp;
branches;
next	1.18;

1.18
date	2008.03.21.15.01.17;	author myc;	state Exp;
branches;
next	1.17;

1.17
date	2008.02.24.17.31.13;	author myc;	state Exp;
branches;
next	1.16;

1.16
date	2008.02.09.07.05.37;	author myc;	state Exp;
branches;
next	1.15;

1.15
date	2008.02.09.03.04.23;	author myc;	state Exp;
branches;
next	1.14;

1.14
date	2008.02.06.21.53.53;	author myc;	state Exp;
branches;
next	1.13;

1.13
date	2008.02.02.19.38.20;	author myc;	state Exp;
branches;
next	1.12;

1.12
date	2008.01.29.21.02.31;	author myc;	state Exp;
branches;
next	1.11;

1.11
date	2008.01.29.16.51.12;	author myc;	state Exp;
branches;
next	1.10;

1.10
date	2007.12.19.20.46.13;	author myc;	state Exp;
branches;
next	1.9;

1.9
date	2007.08.27.21.18.00;	author myc;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.25.00.38.03;	author jps;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.24.23.34.00;	author jps;	state Exp;
branches;
next	1.6;

1.6
date	2006.11.10.21.04.05;	author jps;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.13.02.32.10;	author jjl;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.20.20.05.24;	author rsd;	state Exp;
branches;
next	1.3;

1.3
date	99.09.05.07.00.39;	author jimmy;	state Exp;
branches;
next	1.2;

1.2
date	99.04.23.23.27.10;	author jimmy;	state Exp;
branches;
next	1.1;

1.1
date	99.01.29.01.23.30;	author mud;	state Exp;
branches;
next	;


desc
@/* ************************************************************************
*   File: comm.h                                        Part of CircleMUD *
*  Usage: header file: prototypes of public communication functions       *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */

#define NUM_RESERVED_DESCS	8

/*Uncomment to turn languages on comment out to turn off...Banyal*/
/*#define LANGUAGES	1*/

/* comm.c */
void	send_to_all(char *messg);
void	send_to_char(char *messg, struct char_data *ch);
void	send_to_room(char *messg, int room);
void    send_to_zone(char *messg, int zone_rnum);
void	perform_to_all(char *messg, struct char_data *ch);
void	close_socket(struct descriptor_data *d);


/*char *parse_color(char *txt, struct descriptor_data *t);*/

void	perform_act(char *orig, struct char_data *ch, struct obj_data *obj,
		    void *vict_obj, struct char_data *to);

void	act(char *str, int hide_invisible, struct char_data *ch,
struct obj_data *obj, void *vict_obj, int type);

#define TO_ROOM		1
#define TO_VICT		2
#define TO_NOTVICT	3
#define TO_CHAR		4
#define TO_SLEEP	128	/* to char, even if sleeping */

int	write_to_descriptor(socket_t desc, char *txt);
void	write_to_q(char *txt, struct txt_q *queue, int aliased);
void	write_to_output(char *txt, struct descriptor_data *t);
void	page_string(struct descriptor_data *d, char *str, int keep_internal);

#define SEND_TO_Q(messg, desc)  write_to_output((messg), desc)

int count_chars(char *txt, char character);
#define USING_SMALL(d)	((d)->output == (d)->small_outbuf)

#define USING_LARGE(d)  (!USING_SMALL(d))

typedef RETSIGTYPE sigfunc(int);


/* Function prototypes for brain-dead OS's */

#if defined(__COMM_C__) && defined(__GNUC__)

#ifndef accept
   int accept();
#endif

#ifndef bind
   int bind();
#endif

#ifndef chdir
   int chdir();
#endif

#ifndef close
   int close();
#endif

#ifndef fcntl
   int fcntl();
#endif

#ifndef getpeername
   int getpeername();
#endif

#ifndef getrlimit
   int getrlimit();
#endif

#ifndef getsockname
   int getsockname();
#endif

/*#ifndef htonl
   u_long htonl();
#endif
*/
#ifndef htons
   u_short htons();
#endif

#ifndef listen
   int listen();
#endif

/*#ifndef ntohl
   u_long ntohl();
#endif
*/
#ifndef read
   int read();
#endif

#ifndef select
   int select();
#endif

#ifndef setitimer
   int setitimer();
#endif

#ifndef setrlimit
   int setrlimit();
#endif

#ifndef setsockopt
   int setsockopt();
#endif

#ifndef socket
   int socket();
#endif

#ifndef write
   int write();
#endif

#endif /* __COMM_C__ */
@


1.29
log
@Add act flag TO_VICTROOM which makes the message go to the victim's room.
@
text
@/***************************************************************************
 * $Id: comm.h,v 1.28 2008/09/07 20:08:54 jps Exp jps $
 ***************************************************************************/
/***************************************************************************
 *   File: comm.h                                         Part of FieryMUD *
 *  Usage: header file: prototypes of public communication functions       *
 *                                                                         *
 *  All rights reserved.  See license.doc for complete information.        *
 *                                                                         *
 *  FieryMUD Copyright (C) 1998, 1999, 2000 by the Fiery Consortium        *
 *  FieryMUD is based on CircleMUD Copyright (C) 1993, 94 by the Trustees  *
 *  of the Johns Hopkins University                                        *
 *  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
 ***************************************************************************/

#define NUM_RESERVED_DESCS        8

#define HOTBOOT_FILE "hotboot.dat"

#define CBP_FUNC(name)     int (name)(void *object, void *data)

/* comm.c */
extern void all_printf(const char *messg, ...) __attribute__ ((format (printf, 1, 2)));
extern void all_except_printf(struct char_data *ch, const char *messg, ...)
      __attribute__ ((format (printf, 2, 3)));
extern void char_printf(const struct char_data *ch, const char *messg, ...) __attribute__ ((format (printf, 2, 3)));
extern void room_printf(room_num rrnum, const char *messg, ...) __attribute__ ((format (printf, 2, 3)));
extern void zone_printf(int zone_vnum, int skip_room, int min_stance, const char *messg, ...) __attribute__ ((format (printf, 4, 5)));
extern void callback_printf(CBP_FUNC(callback), void *data, const char *messg, ...) __attribute__ ((format (printf, 3, 4))) ;
extern void close_socket(struct descriptor_data *d);
extern int speech_ok(struct char_data *ch, int quiet);

/* deprecated functions */
extern void send_to_all(const char *messg);
extern void send_to_char(const char *messg, struct char_data *ch);
extern void send_to_room(const char *messg, int room);
extern void send_to_zone(const char *messg, int zone_vnum, int skip_room, int min_stance);
extern void write_to_output(const char *txt, struct descriptor_data *d);

extern void perform_act(const char *orig, struct char_data *ch, struct obj_data *obj,
                 const void *vict_obj, const struct char_data *to);

extern void act(const char *str, int hide_invisible, struct char_data *ch,
         struct obj_data *obj, const void *vict_obj, int type);

/* act() targets */
#define TO_ROOM      1
#define TO_VICT      2
#define TO_NOTVICT   3
#define TO_CHAR      4
#define TO_SLEEP      (1 << 7)  /* sleeping persons can see msg */
#define TO_OLC        (1 << 8)  /* persons doing OLC may see msg */
#define TO_VICTROOM   (1 << 9)  /* destination room will be vict's, not char's */


extern int write_to_descriptor(socket_t desc, char *txt);
extern void write_to_q(char *txt, struct txt_q *queue, int aliased, struct descriptor_data *d);
extern void desc_printf(struct descriptor_data *t, const char *txt, ...) __attribute__ ((format (printf, 2, 3)));
extern void string_to_output(struct descriptor_data *t, const char *txt);

/* Convenience aliases */
#define cprintf char_printf
#define dprintf desc_printf
#define cbprintf callback_printf

typedef RETSIGTYPE sigfunc(int);

#ifndef __COMM_C__
extern struct descriptor_data *descriptor_list;
#endif


/* Function prototypes for brain-dead OS's */

#if defined(__COMM_C__) && defined(__GNUC__)

#ifndef accept
   extern int accept();
#endif

#ifndef bind
   extern int bind();
#endif

#ifndef chdir
   extern int chdir();
#endif

#ifndef close
   extern int close();
#endif
/* removed by Gurlaek
#ifndef fcntl
   extern int fcntl();
#endif
*/
#ifndef getpeername
   extern int getpeername();
#endif

#ifndef getrlimit
   extern int getrlimit();
#endif

#ifndef getsockname
   extern int getsockname();
#endif

/*#ifndef htonl
   extern u_long htonl();
#endif
*/
/* removed by Gurlaek
#ifndef htons
  extern u_short htons();
#endif
*/
#ifndef listen
   extern int listen();
#endif

/*#ifndef ntohl
   extern u_long ntohl();
#endif
*/
#ifndef read
   extern int read();
#endif

#ifndef select
   extern int select();
#endif

#ifndef setitimer
   extern int setitimer();
#endif

#ifndef setrlimit
   extern int setrlimit();
#endif

#ifndef setsockopt
   extern int setsockopt();
#endif

#ifndef socket
   extern int socket();
#endif

#ifndef write
   extern int write();
#endif

#endif /* __COMM_C__ */
/***************************************************************************
 * $Log: comm.h,v $
 * Revision 1.28  2008/09/07 20:08:54  jps
 * Added all_except_printf.
 *
 * Revision 1.27  2008/08/25 02:31:30  jps
 * The logic of the act() targets bits didn't fit well with the way
 * the targets were being used, so I undid the change.
 *
 * Revision 1.26  2008/08/23 14:03:30  jps
 * Changed the way act() messages are targeted. Now there are three basic
 * target flags, which may be or'd together in any combination, plus three
 * modifier flags for sleep, old, and trigger. The old TO_NOTVICT and
 * TO_ROOM targets are defined in terms of the new flags.
 *
 * Revision 1.25  2008/08/16 23:04:03  jps
 * Added speech_ok() to comm.h.
 *
 * Revision 1.24  2008/08/14 23:02:11  myc
 * Added vararg capability to all the standard output functions (like
 * send_to_char and write_to_output).  The old functions are still
 * available.  The new ones follow a *printf naming convention.
 * However, removed the send_to_outdoor functionality, and replaced
 * it with callback_printf.
 *
 * Revision 1.23  2008/08/14 09:45:22  jps
 * Replaced the pager.
 *
 * Revision 1.22  2008/06/09 23:00:13  myc
 * Added 'extern' to all the function declarations.
 *
 * Revision 1.21  2008/04/07 03:02:54  jps
 * Changed the POS/STANCE system so that POS reflects the position
 * of your body, while STANCE describes your condition or activity.
 *
 * Revision 1.20  2008/04/05 05:05:42  myc
 * Removed SEND_TO_Q macro, so call write_to_output directly.
 *
 * Revision 1.19  2008/03/22 03:22:38  myc
 * All invocations of the string editor now go through string_write()
 * instead of messing with the descriptor variables itself.  Also added
 * a toggle, LineNums, to decide whether to do /l or /n when entering
 * the string editor.
 *
 * Revision 1.18  2008/03/21 15:01:17  myc
 * Removed languages.
 *
 * Revision 1.17  2008/02/24 17:31:13  myc
 * Added a TO_OLC flag to act() to allow messages to be sent to people
 * while in OLC if they have OLCComm toggled on.
 *
 * Revision 1.16  2008/02/09 07:05:37  myc
 * Copyover is now renamed to hotboot.
 *
 * Revision 1.15  2008/02/09 03:04:23  myc
 * Adding the 'copyover' command, which allows you to do a hot-boot
 * without disconnecting anybody.
 *
 * Revision 1.14  2008/02/06 21:53:53  myc
 * Make the format arg to act() const.
 *
 * Revision 1.13  2008/02/02 19:38:20  myc
 * Adding the string_write function for putting a descriptor
 * into the string editor.
 *
 * Revision 1.12  2008/01/29 21:02:31  myc
 * Removing a lot of extern declarations from code files and moving
 * them to header files, mostly db.h and constants.h.
 *
 * Revision 1.11  2008/01/29 16:51:12  myc
 * Making the vict_obj of act() const.
 *
 * Revision 1.10  2007/12/19 20:46:13  myc
 * Added const modifiers to the char arguments to write_to_output,
 * send_to_char, send_to_zone, send_to_room, and parse_color, which
 * allows you to output a const string without casting it.  save_char()
 * no longer requires a save room (which wasn't being used anyway).
 *
 * Revision 1.9  2007/08/27 21:18:00  myc
 * You can now queue up commands while casting as well as abort midcast.
 * Casting commands such as look and abort are caught and interpreted
 * before the input is normally queued up by the game loop.
 *
 * Revision 1.8  2007/07/25 00:38:03  jps
 * Give send_to_zone a room to skip, and make it use virtual zone number.
 *
 * Revision 1.7  2007/07/24 23:34:00  jps
 * Add a parameter min_position to send_to_zone()
 *
 * Revision 1.6  2006/11/10 21:04:05  jps
 * Updated perform_act() with new format codes.
 *
 * Revision 1.5  2002/09/13 02:32:10  jjl
 * Updated header comments
 *
 * Revision 1.4  2000/11/20 20:05:24  rsd
 * Fixed comment header and added back rlog messages
 * from prior to the addition of the $log$ string.
 *
 * Revision 1.3  1999/09/05 07:00:39  jimmy
 * Added RCS Log and Id strings to each source file
 *
 * Revision 1.2  1999/04/23 23:27:10  jimmy
 * Fixed warnings/errors associated with the addition of the pendantic compiler flag
 * yeeeeehaaawwww.  --gurlaek
 *
 * Revision 1.1  1999/01/29 01:23:30  mud
 * Initial revision
 *
 ***************************************************************************/
@


1.28
log
@Added all_except_printf.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.27 2008/08/25 02:31:30 jps Exp jps $
d47 7
a53 6
#define TO_ROOM		1
#define TO_VICT		2
#define TO_NOTVICT	3
#define TO_CHAR		4
#define TO_SLEEP	(1 << 7)	/* to char, even if sleeping */
#define TO_OLC		(1 << 8)	/* to char, even if in OLC */
d157 3
@


1.27
log
@The logic of the act() targets bits didn't fit well with the way
the targets were being used, so I undid the change.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.26 2008/08/23 14:03:30 jps Exp jps $
d24 2
d156 4
@


1.26
log
@Changed the way act() messages are targeted. Now there are three basic
target flags, which may be or'd together in any combination, plus three
modifier flags for sleep, old, and trigger. The old TO_NOTVICT and
TO_ROOM targets are defined in terms of the new flags.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.25 2008/08/16 23:04:03 jps Exp jps $
d41 2
a42 2
extern void act(const char *str, bool hide_invisible, struct char_data *ch,
         struct obj_data *obj, const void *vict_obj, int targets);
d45 7
a51 10
#define TO_CHAR     (1 << 0)
#define TO_VICT     (1 << 1)
#define TO_OTHERS   (1 << 2)
#define TO_SLEEP    (1 << 3)
#define TO_OLC      (1 << 4)
/* flag (1 << 6) is DG_NO_TRIG - don't use that one for any flag here */

#define TO_NOTVICT  TO_OTHERS
#define TO_ROOM     (TO_VICT | TO_OTHERS)
#define TO_ALL      (TO_CHAR | TO_VICT | TO_OTHERS)
d154 6
@


1.25
log
@Added speech_ok() to comm.h.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.24 2008/08/14 23:02:11 myc Exp jps $
d16 1
a16 1
#define NUM_RESERVED_DESCS	8
d41 2
a42 2
extern void act(const char *str, int hide_invisible, struct char_data *ch,
         struct obj_data *obj, const void *vict_obj, int type);
d44 11
a54 6
#define TO_ROOM		1
#define TO_VICT		2
#define TO_NOTVICT	3
#define TO_CHAR		4
#define TO_SLEEP	(1 << 7)	/* to char, even if sleeping */
#define TO_OLC		(1 << 8)	/* to char, even if in OLC */
d157 3
@


1.24
log
@Added vararg capability to all the standard output functions (like
send_to_char and write_to_output).  The old functions are still
available.  The new ones follow a *printf naming convention.
However, removed the send_to_outdoor functionality, and replaced
it with callback_printf.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.23 2008/08/14 09:45:22 jps Exp myc $
d29 1
d152 7
@


1.23
log
@Replaced the pager.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.22 2008/06/09 23:00:13 myc Exp jps $
d20 2
d23 8
d35 1
a35 2
extern void perform_to_all(const char *messg, struct char_data *ch);
extern void close_socket(struct descriptor_data *d);
d52 7
a58 1
extern void write_to_output(const char *txt, struct descriptor_data *t);
d151 3
@


1.22
log
@Added 'extern' to all the function declarations.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.21 2008/04/07 03:02:54 jps Exp myc $
a43 3
extern void page_string(struct descriptor_data *d, char *str, int keep_internal);
extern void string_write(struct descriptor_data *d, char **writeto, size_t len);
extern void mail_write(struct descriptor_data *d, char **writeto, size_t len, long recipient);
d136 3
@


1.21
log
@Changed the POS/STANCE system so that POS reflects the position
of your body, while STANCE describes your condition or activity.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.20 2008/04/05 05:05:42 myc Exp jps $
d21 6
a26 6
void send_to_all(const char *messg);
void send_to_char(const char *messg, struct char_data *ch);
void send_to_room(const char *messg, int room);
void send_to_zone(const char *messg, int zone_vnum, int skip_room, int min_stance);
void perform_to_all(const char *messg, struct char_data *ch);
void close_socket(struct descriptor_data *d);
d28 1
a28 1
void perform_act(const char *orig, struct char_data *ch, struct obj_data *obj,
d31 1
a31 1
void act(const char *str, int hide_invisible, struct char_data *ch,
d41 6
a46 6
int write_to_descriptor(socket_t desc, char *txt);
void write_to_q(char *txt, struct txt_q *queue, int aliased, struct descriptor_data *d);
void write_to_output(const char *txt, struct descriptor_data *t);
void page_string(struct descriptor_data *d, char *str, int keep_internal);
void string_write(struct descriptor_data *d, char **writeto, size_t len);
void mail_write(struct descriptor_data *d, char **writeto, size_t len, long recipient);
d60 1
a60 1
   int accept();
d64 1
a64 1
   int bind();
d68 1
a68 1
   int chdir();
d72 1
a72 1
   int close();
d76 1
a76 1
   int fcntl();
d80 1
a80 1
   int getpeername();
d84 1
a84 1
   int getrlimit();
d88 1
a88 1
   int getsockname();
d92 1
a92 1
   u_long htonl();
d97 1
a97 1
   u_short htons();
d101 1
a101 1
   int listen();
d105 1
a105 1
   u_long ntohl();
d109 1
a109 1
   int read();
d113 1
a113 1
   int select();
d117 1
a117 1
   int setitimer();
d121 1
a121 1
   int setrlimit();
d125 1
a125 1
   int setsockopt();
d129 1
a129 1
   int socket();
d133 1
a133 1
   int write();
d139 4
@


1.20
log
@Removed SEND_TO_Q macro, so call write_to_output directly.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.19 2008/03/22 03:22:38 myc Exp myc $
d24 1
a24 1
void send_to_zone(const char *messg, int zone_vnum, int skip_room, int min_position);
d139 3
@


1.19
log
@All invocations of the string editor now go through string_write()
instead of messing with the descriptor variables itself.  Also added
a toggle, LineNums, to decide whether to do /l or /n when entering
the string editor.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.18 2008/03/21 15:01:17 myc Exp myc $
d21 6
a26 8
void	send_to_all(const char *messg);
void	send_to_char(const char *messg, struct char_data *ch);
void	send_to_room(const char *messg, int room);
void	send_to_zone(const char *messg, int zone_vnum, int skip_room, int min_position);
void	perform_to_all(const char *messg, struct char_data *ch);
void	close_socket(struct descriptor_data *d);

/*char *parse_color(char *txt, struct descriptor_data *t);*/
d29 1
a29 1
            const void *vict_obj, const struct char_data *to);
d31 2
a32 2
void	act(const char *str, int hide_invisible, struct char_data *ch,
struct obj_data *obj, const void *vict_obj, int type);
d41 6
a46 13
int	write_to_descriptor(socket_t desc, char *txt);
void	write_to_q(char *txt, struct txt_q *queue, int aliased, struct descriptor_data *d);
void	write_to_output(const char *txt, struct descriptor_data *t);
void	page_string(struct descriptor_data *d, char *str, int keep_internal);
void    string_write(struct descriptor_data *d, char **writeto, size_t len);
void    mail_write(struct descriptor_data *d, char **writeto, size_t len, long recipient);

#define SEND_TO_Q(messg, desc)  write_to_output((messg), desc)

int count_chars(char *txt, char character);
#define USING_SMALL(d)	((d)->output == (d)->small_outbuf)

#define USING_LARGE(d)  (!USING_SMALL(d))
d139 6
@


1.18
log
@Removed languages.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.17 2008/02/24 17:31:13 myc Exp myc $
d47 2
a48 1
void    string_write(struct descriptor_data *d, char **writeto, size_t len, long mailto, char *data);
d148 3
@


1.17
log
@Added a TO_OLC flag to act() to allow messages to be sent to people
while in OLC if they have OLCComm toggled on.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.16 2008/02/09 07:05:37 myc Exp myc $
a19 3
/*Uncomment to turn languages on comment out to turn off...Banyal*/
/*#define LANGUAGES	1*/

d147 4
@


1.16
log
@Copyover is now renamed to hotboot.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.15 2008/02/09 03:04:23 myc Exp myc $
d43 2
a44 1
#define TO_SLEEP	128	/* to char, even if sleeping */
d150 3
@


1.15
log
@Adding the 'copyover' command, which allows you to do a hot-boot
without disconnecting anybody.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.14 2008/02/06 21:53:53 myc Exp myc $
d18 1
a18 1
#define COPYOVER_FILE "copyover.dat"
d149 4
@


1.14
log
@Make the format arg to act() const.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.13 2008/02/02 19:38:20 myc Exp myc $
d18 2
d149 3
@


1.13
log
@Adding the string_write function for putting a descriptor
into the string editor.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.12 2008/01/29 21:02:31 myc Exp myc $
d34 1
a34 1
void	act(char *str, int hide_invisible, struct char_data *ch,
d147 4
@


1.12
log
@Removing a lot of extern declarations from code files and moving
them to header files, mostly db.h and constants.h.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.11 2008/01/29 16:51:12 myc Exp myc $
d47 1
d147 4
@


1.11
log
@Making the vict_obj of act() const.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.10 2007/12/19 20:46:13 myc Exp myc $
d57 4
d146 3
@


1.10
log
@Added const modifiers to the char arguments to write_to_output,
send_to_char, send_to_zone, send_to_room, and parse_color, which
allows you to output a const string without casting it.  save_char()
no longer requires a save room (which wasn't being used anyway).
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.9 2007/08/27 21:18:00 myc Exp myc $
d35 1
a35 1
struct obj_data *obj, void *vict_obj, int type);
d142 6
@


1.9
log
@You can now queue up commands while casting as well as abort midcast.
Casting commands such as look and abort are caught and interpreted
before the input is normally queued up by the game loop.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.8 2007/07/25 00:38:03 jps Exp myc $
d22 5
a26 5
void	send_to_all(char *messg);
void	send_to_char(char *messg, struct char_data *ch);
void	send_to_room(char *messg, int room);
void  send_to_zone(char *messg, int zone_vnum, int skip_room, int min_position);
void	perform_to_all(char *messg, struct char_data *ch);
d45 1
a45 1
void	write_to_output(char *txt, struct descriptor_data *t);
d142 5
@


1.8
log
@Give send_to_zone a room to skip, and make it use virtual zone number.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.7 2007/07/24 23:34:00 jps Exp jps $
d44 1
a44 1
void	write_to_q(char *txt, struct txt_q *queue, int aliased);
d142 3
@


1.7
log
@Add a parameter min_position to send_to_zone()
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.6 2006/11/10 21:04:05 jps Exp jps $
d25 1
a25 1
void  send_to_zone(char *messg, int zone_rnum, int min_position);
d142 3
@


1.6
log
@Updated perform_act() with new format codes.
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.5 2002/09/13 02:32:10 jjl Exp jps $
d25 1
a25 1
void    send_to_zone(char *messg, int zone_rnum);
d142 3
@


1.5
log
@Updated header comments
@
text
@d2 1
a2 1
 * $Id: comm.h,v 1.4 2000/11/20 20:05:24 rsd Exp $
d31 2
a32 2
void	perform_act(char *orig, struct char_data *ch, struct obj_data *obj,
		    void *vict_obj, struct char_data *to);
d142 3
@


1.4
log
@Fixed comment header and added back rlog messages
from prior to the addition of the $log$ string.
@
text
@d1 3
a3 1
// $Id: comm.h,v 1.3 1999/09/05 07:00:39 jimmy Exp $
d140 17
a156 11
// $Log: comm.h,v $
// Revision 1.3  1999/09/05 07:00:39  jimmy
// Added RCS Log and Id strings to each source file
//
// Revision 1.2  1999/04/23 23:27:10  jimmy
// Fixed warnings/errors associated with the addition of the pendantic compiler flag
// yeeeeehaaawwww.  --gurlaek
//
// Revision 1.1  1999/01/29 01:23:30  mud
// Initial revision
//
@


1.3
log
@Added RCS Log and Id strings to each source file
@
text
@d1 12
a12 10
// $Id$
/* ************************************************************************
*   File: comm.h                                        Part of CircleMUD *
*  Usage: header file: prototypes of public communication functions       *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */
a26 1

d138 11
a148 1
// $Log$
@


1.2
log
@Fixed warnings/errors associated with the addition of the pendantic compiler flag
yeeeeehaaawwww.  --gurlaek
@
text
@d1 1
d137 1
@


1.1
log
@Initial revision
@
text
@d73 1
a73 1

d77 1
a77 1

d94 1
d98 1
a98 1

@
