head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2009.06.09.05.48.39;	author myc;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.01.05.29.40;	author myc;	state Exp;
branches;
next	1.5;

1.5
date	2009.03.17.09.01.41;	author jps;	state Exp;
branches;
next	1.4;

1.4
date	2009.03.17.07.59.42;	author jps;	state Exp;
branches;
next	1.3;

1.3
date	2009.03.17.07.55.37;	author jps;	state Exp;
branches;
next	1.2;

1.2
date	2009.03.09.04.41.56;	author jps;	state Exp;
branches;
next	1.1;

1.1
date	2009.03.09.03.33.03;	author myc;	state Exp;
branches;
next	;


desc
@Header file for string functions.
@


1.7
log
@Moving a large number of functions from here to text.c.
@
text
@/***************************************************************************
 * $Id: strings.h,v 1.6 2009/05/01 05:29:40 myc Exp myc $
 ***************************************************************************/
/***************************************************************************
 *   File: strings.h                                      Part of FieryMUD *
 *  Usage: header file: string management functions                        *
 *                                                                         *
 *  All rights reserved.  See license.doc for complete information.        *
 *                                                                         *
 *  FieryMUD Copyright (C) 1998, 1999, 2000 by the Fiery Consortium        *
 *  FieryMUD is based on CircleMUD Copyright (C) 1993, 94 by the Trustees  *
 *  of the Johns Hopkins University                                        *
 *  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
 ***************************************************************************/

#ifndef __FIERY_STRINGS_H
#define __FIERY_STRINGS_H

const void *ellipsis(const char *str, int maxlen, int mode);

#define EOL "\r\n"

#define ELLIPSIS_FMT               "%-*.*s%s"
#define __ELLIPSIS_W1  (1 << 0)
#define __ELLIPSIS_W2  (1 << 1)
#define __ELLIPSIS_E   (1 << 2)
#define ELLIPSIS_STR(str, maxlen) \
    (int) ellipsis((str), (maxlen), __ELLIPSIS_W1), \
    (int) ellipsis((str), (maxlen), __ELLIPSIS_W2), \
    (str), \
    (char *) ellipsis((str), (maxlen), __ELLIPSIS_E)

int         str_cmp (const char *arg1, const char *arg2);
int         strn_cmp(const char *arg1, const char *arg2, int n);
const char *str_str (const char *cs,   const char *ct);
char       *strdupf (const char *fmt,  ...)
                     __attribute__ ((format (printf, 1, 2)));

/* TODO: move result to the first arg for sprintbit/type */
void sprintbit  (long vektor, const char *names[], char *result);
void sprinttype (int type, const char *names[], char *result);
void sprintflag (char *result, flagvector flags[], int num_flags, const char *names[]);
int  sprintascii(char *out, flagvector bits);

typedef struct str_token *str_token;
str_token str_start(char *buf, size_t max_size);
void      str_cat  (char *buf, const char *str);
void      strn_cat (char *buf, const char *str, size_t size);
void      str_catf (char *buf, const char *format, ...)
                    __attribute__ ((format (printf, 2, 3)));
void      strn_catf(char *buf, size_t size, const char *format, ...)
                    __attribute__ ((format (printf, 3, 4)));
char     *str_end  (char *buf);
size_t    str_space(char *buf);

#endif

/***************************************************************************
 * $Log: strings.h,v $
 * Revision 1.6  2009/05/01 05:29:40  myc
 * Added skip_over and skip_chars functions.  Also adding
 * fetch_word which does the same thing as any_one_arg, but
 * with const buffers.
 *
 * Revision 1.5  2009/03/17 09:01:41  jps
 * Add EOL macro and function capitalize()
 *
 * Revision 1.4  2009/03/17 07:59:42  jps
 * Moved str_str to strings.c
 *
 * Revision 1.3  2009/03/17 07:55:37  jps
 * Moved ellipsis string formatting to strings.c.
 *
 * Revision 1.2  2009/03/09 04:41:56  jps
 * Put FORMAT_INDENT definition in strings.h
 *
 * Revision 1.1  2009/03/09 03:33:03  myc
 * Initial revision
 *
 ***************************************************************************/
@


1.6
log
@Added skip_over and skip_chars functions.  Also adding
fetch_word which does the same thing as any_one_arg, but
with const buffers.
@
text
@d2 1
a2 1
 * $Id: strings.h,v 1.5 2009/03/17 09:01:41 jps Exp myc $
d33 11
a43 1
#define FORMAT_INDENT                (1 << 0)
d45 1
a45 25
int str_cmp(const char *arg1, const char *arg2);
int strn_cmp(const char *arg1, const char *arg2, int n);
char *strdupf(const char *fmt, ...) __attribute__ ((format (printf, 1, 2))) ;
void smash_tilde(char *str);
void sprintbit(long vektor, const char *names[], char *result);
void sprinttype(int type, const char *names[], char *result);
void sprintflag(char *result, flagvector flags[], int num_flags, const char *names[]);
int sprintascii(char *out, flagvector bits);
int replace_str(char **string, const char *pattern, const char *replacement, int rep_all, int max_size);
void format_text(char **ptr_string, int mode, struct descriptor_data *d, int maxlen);
char *stripcr(char *dest, const char *src);
char *next_line(char **src);
void cap_by_color(char *s);
char *capitalize(char *s);
bool isplural(char *namelist);
bool startsvowel(const char *s);
char *with_indefinite_article(const char *s);
const char *without_article(const char *s);
const char *pluralize(const char *s);
int levenshtein_distance(const char *s1, const char *s2);
void trim_spaces(char *buffer);
char *strip_chars(char *str, const char *chars);
char *filter_chars(char *buf, register const char *src, const char *chars);

typedef struct str_token * str_token;
d47 8
a54 12
void str_cat(char *buf, const char *str);
void strn_cat(char *buf, const char *str, size_t size);
void str_catf(char *buf, const char *format, ...) __attribute__ ((format (printf, 2, 3)));
void strn_catf(char *buf, size_t size, const char *format, ...) __attribute__ ((format (printf, 3, 4)));
char *str_end(char *buf);
size_t str_space(char *buf);
const char *str_str(const char *cs, const char *ct);

#define WHITESPACE           " \t\n\v\f\r"
const char *skip_over(const char *string, const char *skip);
const char *skip_chars(const char *string, char skip);
const char *fetch_word(const char *string, char *buf, size_t space);
d60 5
@


1.5
log
@Add EOL macro and function capitalize()
@
text
@d2 1
a2 1
 * $Id: strings.h,v 1.4 2009/03/17 07:59:42 jps Exp jps $
d69 5
d78 3
@


1.4
log
@Moved str_str to strings.c
@
text
@d2 1
a2 1
 * $Id: strings.h,v 1.3 2009/03/17 07:55:37 jps Exp jps $
d21 2
d48 1
d73 3
@


1.3
log
@Moved ellipsis string formatting to strings.c.
@
text
@d2 1
a2 1
 * $Id: strings.h,v 1.2 2009/03/09 04:41:56 jps Exp jps $
d64 1
d70 3
@


1.2
log
@Put FORMAT_INDENT definition in strings.h
@
text
@d2 1
a2 1
 * $Id: strings.h,v 1.1 2009/03/09 03:33:03 myc Exp jps $
d19 12
d69 3
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id: strings.h,v $
d19 2
d57 3
@
