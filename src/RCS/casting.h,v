head	1.93;
access;
symbols;
locks; strict;
comment	@ * @;


1.93
date	2009.03.20.06.15.17;	author myc;	state Exp;
branches;
next	1.92;

1.92
date	2009.03.09.03.45.17;	author jps;	state Exp;
branches;
next	1.91;

1.91
date	2009.03.09.03.26.34;	author jps;	state Exp;
branches;
next	1.90;

1.90
date	2009.03.08.23.34.14;	author jps;	state Exp;
branches;
next	1.89;

1.89
date	2008.09.21.21.04.20;	author jps;	state Exp;
branches;
next	1.88;

1.88
date	2008.09.11.02.50.02;	author jps;	state Exp;
branches;
next	1.87;

1.87
date	2008.08.25.00.20.33;	author myc;	state Exp;
branches;
next	1.86;

1.86
date	2008.08.01.05.20.20;	author jps;	state Exp;
branches;
next	1.85;

1.85
date	2008.05.19.05.46.48;	author jps;	state Exp;
branches;
next	1.84;

1.84
date	2008.05.18.02.02.17;	author jps;	state Exp;
branches;
next	1.83;

1.83
date	2008.05.12.03.36.42;	author jps;	state Exp;
branches;
next	1.82;

1.82
date	2008.05.12.02.50.05;	author jps;	state Exp;
branches;
next	1.81;

1.81
date	2008.04.19.21.10.31;	author myc;	state Exp;
branches;
next	1.80;

1.80
date	2008.04.14.08.37.22;	author jps;	state Exp;
branches;
next	1.79;

1.79
date	2008.03.28.17.54.53;	author myc;	state Exp;
branches;
next	1.78;

1.78
date	2008.03.23.18.42.53;	author jps;	state Exp;
branches;
next	1.77;

1.77
date	2008.03.09.08.58.28;	author jps;	state Exp;
branches;
next	1.76;

1.76
date	2008.03.05.03.03.54;	author myc;	state Exp;
branches;
next	1.75;

1.75
date	2008.02.23.01.03.54;	author myc;	state Exp;
branches;
next	1.74;

1.74
date	2008.02.09.21.07.50;	author myc;	state Exp;
branches;
next	1.73;

1.73
date	2008.01.29.16.51.12;	author myc;	state Exp;
branches;
next	1.72;

1.72
date	2008.01.26.23.19.28;	author jps;	state Exp;
branches;
next	1.71;

1.71
date	2008.01.26.14.26.31;	author jps;	state Exp;
branches;
next	1.70;

1.70
date	2008.01.23.14.15.34;	author jps;	state Exp;
branches;
next	1.69;

1.69
date	2008.01.13.23.06.04;	author myc;	state Exp;
branches;
next	1.68;

1.68
date	2008.01.12.23.13.20;	author myc;	state Exp;
branches;
next	1.67;

1.67
date	2008.01.07.10.38.56;	author jps;	state Exp;
branches;
next	1.66;

1.66
date	2008.01.06.23.50.47;	author jps;	state Exp;
branches;
next	1.65;

1.65
date	2008.01.06.20.38.25;	author jps;	state Exp;
branches;
next	1.64;

1.64
date	2008.01.05.21.54.43;	author jps;	state Exp;
branches;
next	1.63;

1.63
date	2008.01.05.05.42.09;	author jps;	state Exp;
branches;
next	1.62;

1.62
date	2008.01.03.12.44.03;	author jps;	state Exp;
branches;
next	1.61;

1.61
date	2008.01.02.07.11.58;	author jps;	state Exp;
branches;
next	1.60;

1.60
date	2008.01.02.01.26.32;	author jps;	state Exp;
branches;
next	1.59;

1.59
date	2007.12.31.02.00.57;	author jps;	state Exp;
branches;
next	1.58;

1.58
date	2007.11.25.00.04.59;	author jps;	state Exp;
branches;
next	1.57;

1.57
date	2007.10.13.20.15.09;	author myc;	state Exp;
branches;
next	1.56;

1.56
date	2007.10.13.05.07.24;	author myc;	state Exp;
branches;
next	1.55;

1.55
date	2007.10.11.20.14.48;	author myc;	state Exp;
branches;
next	1.54;

1.54
date	2007.10.02.02.52.27;	author myc;	state Exp;
branches;
next	1.53;

1.53
date	2007.09.15.15.36.48;	author myc;	state Exp;
branches;
next	1.52;

1.52
date	2007.09.11.16.34.24;	author myc;	state Exp;
branches;
next	1.51;

1.51
date	2007.09.09.01.20.14;	author jps;	state Exp;
branches;
next	1.50;

1.50
date	2007.09.07.01.37.34;	author jps;	state Exp;
branches;
next	1.49;

1.49
date	2007.09.04.06.49.19;	author myc;	state Exp;
branches;
next	1.48;

1.48
date	2007.08.30.08.51.25;	author jps;	state Exp;
branches;
next	1.47;

1.47
date	2007.08.27.21.18.00;	author myc;	state Exp;
branches;
next	1.46;

1.46
date	2007.08.14.22.43.07;	author myc;	state Exp;
branches;
next	1.45;

1.45
date	2007.08.05.20.21.51;	author myc;	state Exp;
branches;
next	1.44;

1.44
date	2007.08.02.04.19.04;	author jps;	state Exp;
branches;
next	1.43;

1.43
date	2007.08.02.00.23.53;	author myc;	state Exp;
branches;
next	1.42;

1.42
date	2007.07.31.07.39.04;	author jps;	state Exp;
branches;
next	1.41;

1.41
date	2007.07.04.02.21.58;	author myc;	state Exp;
branches;
next	1.40;

1.40
date	2007.06.16.00.15.49;	author myc;	state Exp;
branches;
next	1.39;

1.39
date	2007.05.11.21.03.12;	author myc;	state Exp;
branches;
next	1.38;

1.38
date	2007.05.11.20.13.28;	author myc;	state Exp;
branches;
next	1.37;

1.37
date	2007.04.19.00.53.54;	author jps;	state Exp;
branches;
next	1.36;

1.36
date	2007.04.17.23.38.03;	author myc;	state Exp;
branches;
next	1.35;

1.35
date	2007.02.14.03.54.53;	author myc;	state Exp;
branches;
next	1.34;

1.34
date	2006.11.18.21.04.29;	author jps;	state Exp;
branches;
next	1.33;

1.33
date	2006.11.18.04.26.32;	author jps;	state Exp;
branches;
next	1.32;

1.32
date	2006.11.08.07.55.17;	author jps;	state Exp;
branches;
next	1.31;

1.31
date	2003.09.02.03.07.14;	author jjl;	state Exp;
branches;
next	1.30;

1.30
date	2003.06.25.02.21.03;	author jjl;	state Exp;
branches;
next	1.29;

1.29
date	2003.04.16.02.00.22;	author jjl;	state Exp;
branches;
next	1.28;

1.28
date	2002.12.19.07.42.02;	author rls;	state Exp;
branches;
next	1.27;

1.27
date	2002.10.14.02.16.08;	author jjl;	state Exp;
branches;
next	1.26;

1.26
date	2002.09.15.04.17.02;	author jjl;	state Exp;
branches;
next	1.25;

1.25
date	2002.09.15.03.56.46;	author jjl;	state Exp;
branches;
next	1.24;

1.24
date	2002.09.13.02.32.10;	author jjl;	state Exp;
branches;
next	1.23;

1.23
date	2002.07.16.23.25.17;	author rls;	state Exp;
branches;
next	1.22;

1.22
date	2000.11.25.02.33.15;	author rsd;	state Exp;
branches;
next	1.21;

1.21
date	2000.03.18.06.20.12;	author rsd;	state Exp;
branches;
next	1.20;

1.20
date	99.11.23.15.48.23;	author jimmy;	state Exp;
branches;
next	1.19;

1.19
date	99.11.21.00.22.07;	author jimmy;	state Exp;
branches;
next	1.18;

1.18
date	99.11.17.20.42.17;	author jimmy;	state Exp;
branches;
next	1.17;

1.17
date	99.10.19.18.01.03;	author jimmy;	state Exp;
branches;
next	1.16;

1.16
date	99.09.05.07.00.39;	author jimmy;	state Exp;
branches;
next	1.15;

1.15
date	99.08.29.07.06.04;	author jimmy;	state Exp;
branches;
next	1.14;

1.14
date	99.07.22.17.43.59;	author jimmy;	state Exp;
branches;
next	1.13;

1.13
date	99.07.20.19.45.51;	author jimmy;	state Exp;
branches;
next	1.12;

1.12
date	99.07.15.03.15.05;	author mud;	state Exp;
branches;
next	1.11;

1.11
date	99.07.06.19.57.05;	author jimmy;	state Exp;
branches;
next	1.10;

1.10
date	99.05.26.02.00.04;	author mud;	state Exp;
branches;
next	1.9;

1.9
date	99.04.18.20.12.54;	author dce;	state Exp;
branches;
next	1.8;

1.8
date	99.03.24.23.43.16;	author jimmy;	state Exp;
branches;
next	1.7;

1.7
date	99.03.10.00.03.37;	author dce;	state Exp;
branches;
next	1.6;

1.6
date	99.03.08.20.22.35;	author dce;	state Exp;
branches;
next	1.5;

1.5
date	99.03.07.05.01.09;	author dce;	state Exp;
branches;
next	1.4;

1.4
date	99.03.03.20.11.02;	author jimmy;	state Exp;
branches;
next	1.3;

1.3
date	99.02.26.22.30.30;	author dce;	state Exp;
branches;
next	1.2;

1.2
date	99.02.13.19.37.12;	author dce;	state Exp;
branches;
next	1.1;

1.1
date	99.01.29.01.23.32;	author mud;	state Exp;
branches;
next	;


desc
@/* ************************************************************************
*   File: spells.h                                      Part of CircleMUD *
*  Usage: header file: constants and fn prototypes for spell system       *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */

#define DEFAULT_STAFF_LVL	12
#define DEFAULT_WAND_LVL	12

#define CAST_UNDEFINED	-1
#define CAST_SPELL	0
#define CAST_POTION	1
#define CAST_WAND	2
#define CAST_STAFF	3
#define CAST_SCROLL	4
#define CAST_BREATH     5

#define MAG_DAMAGE	(1 << 0)
#define MAG_AFFECTS	(1 << 1)
#define MAG_UNAFFECTS	(1 << 2)
#define MAG_POINTS	(1 << 3)
#define MAG_ALTER_OBJS	(1 << 4)
#define MAG_GROUPS	(1 << 5)
#define MAG_MASSES	(1 << 6)
#define MAG_AREAS	(1 << 7)
#define MAG_SUMMONS	(1 << 8)
#define MAG_CREATIONS	(1 << 9)
#define MAG_MANUAL	(1 << 10)
#define MAG_ROOM     (1 << 11)


#define TYPE_UNDEFINED               -1
#define SPELL_RESERVED_DBC            0  /* SKILL NUMBER ZERO -- RESERVED */

#define SPELL_SPHERE_GENERIC	0
#define SPELL_SPHERE_FIRE	1
#define SPELL_SPHERE_WATER	2
#define SPELL_SPHERE_EARTH	3
#define SPELL_SPHERE_AIR	4
#define SPELL_SPHERE_HEALING	5
#define SPELL_SPHERE_PROT	6
#define SPELL_SPHERE_ENCHANT	7
#define SPELL_SPHERE_SUMMON	8
#define SPELL_SPHERE_DEATH	9

#define MAX_SPELL_SPHERES	10

#define GENERIC_DAMAGE		0
#define FIRE_DAMAGE		1
#define COLD_DAMAGE		2
#define EARTH_DAMAGE		3
#define AIR_DAMAGE		4
#define HEALING_DAMAGE		5
#define SHOCK_DAMAGE		6
#define DEATH_DAMAGE		7
#define ALIGN_DAMAGE		8

#define MAX_DAMAGE_TYPES	9

/* PLAYER SPELLS -- Numbered from 1 to MAX_SPELLS */
/* enumerate the base mem time for each circle. PLEASE feel free to alter based on
 * practicality */
#define C1  30
#define C2  33
#define C3  36
#define C4  39
#define C5  42
#define C6  45
#define C7  48
#define C8  51
#define C9  54
#define C10 57
#define C11 60
#define C12 60
#define C13 60
#define C14 60

/* spell casting time defines , ordinary ints can be used
 *for other values, but should be declared here...
 * NOTE: These integers represent pulses, not seconds. if PULSE_VIOLENCE is used,
 *   then each of the following is (n*2) seconds  */
#define IMMEDIATE   1
#define FAST        2
#define MEDIUM      4
#define SLOW        6





#define SPELL_ARMOR                   1 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_TELEPORT                2 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_BLESS                   3 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_BLINDNESS               4 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_BURNING_HANDS           5 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CALL_LIGHTNING          6 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CHARM                   7 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CHILL_TOUCH             8 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CLONE                   9 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_COLOR_SPRAY            10 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CONTROL_WEATHER        11 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CREATE_FOOD            12 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CREATE_WATER           13 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CURE_BLIND             14 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CURE_CRITIC            15 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CURE_LIGHT             16 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CURSE                  17 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_DETECT_ALIGN           18 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_DETECT_INVIS           19 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_DETECT_MAGIC           20 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_DETECT_POISON          21 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_DISPEL_EVIL            22 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_EARTHQUAKE             23 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_ENCHANT_WEAPON         24 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_ENERGY_DRAIN           25 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_FIREBALL               26 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_HARM                   27 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_HEAL                   28 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_INVISIBLE              29 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_LIGHTNING_BOLT         30 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_LOCATE_OBJECT          31 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_MAGIC_MISSILE          32 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_POISON                 33 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_PROT_FROM_EVIL         34 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_REMOVE_CURSE           35 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_SANCTUARY              36 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_SHOCKING_GRASP         37 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_SLEEP                  38 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_STRENGTH               39 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_SUMMON                 40 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_VENTRILOQUATE          41 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_WORD_OF_RECALL         42 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_REMOVE_POISON          43 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_SENSE_LIFE             44 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_ANIMATE_DEAD	     45 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_DISPEL_GOOD	     46 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_GROUP_ARMOR	     47 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_GROUP_HEAL	     48 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_GROUP_RECALL	     49 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_INFRAVISION	     50 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_WATERWALK		     51 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_STONE_SKIN         52
#define SPELL_FULL_HEAL          53
#define SPELL_FULL_HARM          54
#define SPELL_WALL_OF_FOG        55
#define SPELL_WALL_OF_STONE      56
#define SPELL_FLY                57
#define SPELL_SUMMON_DRACOLICH   58
#define SPELL_SUMMON_ELEMENTAL   59
#define SPELL_SUMMON_DEMON       60
#define SPELL_SUMMON_GREATER_DEMON  61
#define SPELL_DIMENSION_DOOR        62
#define SPELL_CREEPING_DOOM         63
#define SPELL_DOOM                  64
#define SPELL_METEORSWARM           65
#define SPELL_BIGBYS_CLENCHED_FIST  66
#define SPELL_FARSEE				67
#define SPELL_HASTE                 68
#define SPELL_BLUR                  69
#define SPELL_VITALITY              70
#define SPELL_MOONWELL              71
#define SPELL_INN_STRENGTH          72
#define SPELL_DARKNESS              73
#define SPELL_CONTINUAL_LIGHT       74
#define SPELL_COMPREHEND_LANG             75
#define SPELL_CONE_OF_COLD          76
#define SPELL_ICE_STORM             77
#define SPELL_ICE_SHARDS            78
#define SPELL_MAJOR_PARALYSIS              79
#define SPELL_VAMPIRIC_BREATH       80
#define SPELL_RESURRECT 	    81
#define SPELL_INCENDIARY_NEBULA     82
#define SPELL_MINOR_PARALYSIS       83
#define SPELL_CAUSE_LIGHT	    84
#define SPELL_CAUSE_SERIOUS         85
#define SPELL_CAUSE_CRITIC          86
#define SPELL_PRESERVE		    87
#define SPELL_CURE_SERIOUS	    88
#define SPELL_VIGORIZE_LIGHT        89
#define SPELL_VIGORIZE_SERIOUS      90
#define SPELL_VIGORIZE_CRITIC       91
#define SPELL_SOULSHIELD	    92
#define SPELL_DESTROY_UNDEAD	    93
#define SPELL_SILENCE		    94
#define SPELL_FLAMESTRIKE	    95
#define SPELL_UNHOLY_WORD	    96
#define SPELL_HOLY_WORD		    97
#define SPELL_PLANE_SHIFT	    98
#define SPELL_DISPEL_MAGIC	    99
#define SPELL_MINOR_CREATION	    100
#define SPELL_CONCEALMENT	    101
#define SPELL_RAY_OF_ENFEEB	    102
#define SPELL_LEVITATE		    103
#define SPELL_WIZARD_EYE	    104
#define SPELL_FIRESHIELD	    105
#define SPELL_COLDSHIELD	    106
#define SPELL_MINOR_GLOBE	    107
#define SPELL_MAJOR_GLOBE	    108
#define SPELL_DISINTEGRATE	    109
#define SPELL_HARNESS		    110
#define SPELL_CHAIN_LIGHTNING       111
#define SPELL_MASS_INVIS	    112
#define SPELL_RELOCATE		    113
#define SPELL_FEAR		    114
#define SPELL_CIRCLE_OF_LIGHT	    115
#define SPELL_DIVINE_BOLT	    116
#define SPELL_PRAYER		    117
#define SPELL_ELEMENTAL_WARDING	    118
#define SPELL_DIVINE_RAY	    119
#define SPELL_LESSER_EXORCISM       120
#define SPELL_LESSER_INVOCATION     121
#define SPELL_SPEAK_IN_TONGUES	    122
#define SPELL_ENLIGHTENMENT	    123
#define SPELL_EXORCISM		    124
#define SPELL_GREATER_INVOCATION    125
#define SPELL_WINGS_OF_HEAVEN	    126
#define SPELL_BANISH		    127
#define SPELL_WORD_OF_COMMAND	    128
#define SPELL_DIVINE_ESSENCE	    129
#define SPELL_HEAVENS_GATE	    130
#define SPELL_DARK_PRESENCE	    131
#define SPELL_DEMONSKIN		    132
#define SPELL_DARK_FEAST	    133
#define SPELL_HELL_BOLT		    134
#define SPELL_DISEASE		    135
#define SPELL_INSANITY		    136
#define SPELL_DEMONIC_ASPECT	    137
#define SPELL_HELLFIRE_BRIMSTONE    138
#define SPELL_STYGIAN_ERUPTION       139
#define SPELL_DEMONIC_MUTATION	    140
#define SPELL_WINGS_OF_HELL	    141
#define SPELL_SANE_MIND		    142
#define SPELL_HELLS_GATE	    143
#define SPELL_BARKSKIN		    144
#define SPELL_NIGHT_VISION	    145
#define SPELL_WRITHING_WEEDS	    146
#define SPELL_CREATE_SPRING	    147
#define SPELL_NOURISHMENT	    148
#define SPELL_GAIAS_CLOAK	    149
#define SPELL_NATURES_EMBRACE	    150
#define SPELL_ENTANGLE		    151
#define SPELL_INVIGORATE	    152
#define SPELL_WANDERING_WOODS	    153
#define SPELL_URBAN_RENEWAL	    154
#define SPELL_SUNRAY		    155
#define SPELL_ARMOR_OF_GAIA	    156
#define SPELL_FIRE_DARTS	    157
#define SPELL_MAGIC_TORCH	    158
#define SPELL_SMOKE		    159
#define SPELL_MIRAGE		    160
#define SPELL_FLAME_BLADE	    161
#define SPELL_HEATWAVE		    162
#define SPELL_FIRESTORM		    163
#define SPELL_MELT		    164
#define SPELL_CIRCLE_OF_FIRE	    165
#define SPELL_IMMOLATE		    166
#define SPELL_SUPERNOVA		    167
#define SPELL_GREATER_FIREWALK	    168
#define SPELL_NEGATE_HEAT	    169
#define SPELL_FIREWALK		    170
#define SPELL_ICE_DARTS 	    171
#define SPELL_ICE_ARMOR		    172
#define SPELL_ICE_DAGGER	    173
#define SPELL_FREEZING_WIND	    174
#define SPELL_FREEZE		    175
#define SPELL_WALL_OF_ICE	    176
#define SPELL_ICEBALL		    177
#define SPELL_FLOOD		    178
#define SPELL_GREATER_WATERWALK	    179
#define SPELL_NEGATE_COLD	    180
#define SPELL_WATERFORM		    181
#define SPELL_DOUSE		    182
#define SPELL_RAIN		    183
#define SPELL_REDUCE                184
#define SPELL_ENLARGE               185

/* Insert new spells here, up to MAX_SPELLS */
#define MAX_SPELLS		    400

/* PLAYER SKILLS - Numbered from MAX_SPELLS+1 to MAX_SKILLS */
#define SKILL_BACKSTAB              401 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_BASH                  402 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_HIDE		    403 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_KICK                  404 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_PICK_LOCK             405 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_PUNCH                 406 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_RESCUE                407 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_SNEAK                 408 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_STEAL                 409 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_TRACK		    410/* Reserved Skill[] DO NOT CHANGE */
#define SKILL_DUAL_WIELD            411
#define SKILL_DOUBLE_ATTACK         412
#define SKILL_BERSERK               413
#define SKILL_SPRINGLEAP            414
#define SKILL_MOUNT		    415
#define SKILL_RIDING		    416
#define SKILL_TAME		    417
#define SKILL_THROATCUT	            418
#define SKILL_DOORBASH              419
#define SKILL_PARRY                 420
#define SKILL_DODGE                 421
#define SKILL_RIPOST                422
#define SKILL_MEDITATE              423
#define SKILL_QUICK_CHANT           424
#define SKILL_2BACK                 425
#define SKILL_CIRCLE                426
#define SKILL_BODYSLAM		    427
#define SKILL_BIND	            428
#define SKILL_SHAPECHANGE           429
#define SKILL_SWITCH		    430
#define SKILL_DISARM		    431
#define SKILL_DISARM_FUMBLING_WEAP  432
#define SKILL_DISARM_DROPPED_WEAP   433
#define SKILL_GUARD		    434
#define SKILL_BREATH		    435
#define SKILL_SWEEP		    436
#define SKILL_ROAR		    437
#define SKILL_DOUSE		    438
#define SKILL_AWARE		    439
#define SKILL_INSTANT_KILL          440
#define SKILL_HITALL                441
#define SKILL_HUNT				442
#define SKILL_BANDAGE      443
#define SKILL_FIRST_AID             444
#define SKILL_VAMP_TOUCH            445

/* New skills may be added here up to MAX_SKILLS (650) */

#define LANG_BARBARIAN  190
#define LANG_GNOMISH    191
#define LANG_DUERGAR    192
#define LANG_DROW       193
#define LANG_ORCISH     194
#define LANG_OGRE       195
#define LANG_COMMON     196
#define LANG_ELVEN      197
#define LANG_DWARVEN    198
#define LANG_TROLLISH   199
#define LANG_HALFLING   200
#define MAX_LANGUAGE    200
#define MIN_LANGUAGE    190

/*
 *  NON-PLAYER AND OBJECT SPELLS AND SKILLS
 *  The practice levels for the spells and skills below are _not_ recorded
 *  in the playerfile; therefore, the intended use is for spells and skills
 *  associated with objects (such as SPELL_IDENTIFY used with scrolls of
 *  identify) or non-players (such as NPC-only spells).
 */

#define SPELL_IDENTIFY               651
#define SPELL_FIRE_BREATH            652
#define SPELL_GAS_BREATH             653
#define SPELL_FROST_BREATH           654
#define SPELL_ACID_BREATH            655
#define SPELL_LIGHTNING_BREATH       656
#define SPELL_ON_FIRE		     657


#define TOP_SPELL_DEFINE	     750
/* NEW NPC/OBJECT SPELLS can be inserted here up to 299 */


/* WEAPON ATTACK TYPES */

#define TYPE_HIT                     751
#define TYPE_STING                   752
#define TYPE_WHIP                    753
#define TYPE_SLASH                   754
#define TYPE_BITE                    755
#define TYPE_BLUDGEON                756
#define TYPE_CRUSH                   757
#define TYPE_POUND                   758
#define TYPE_CLAW                    759
#define TYPE_MAUL                    760
#define TYPE_THRASH                  761
#define TYPE_PIERCE                  762
#define TYPE_BLAST		     763
#define TYPE_PUNCH		     764
#define TYPE_STAB		     765

/* new attack types can be added here - up to TYPE_SUFFERING */
#define TYPE_SUFFERING		     850



#define SAVING_PARA   0
#define SAVING_ROD    1
#define SAVING_PETRI  2
#define SAVING_BREATH 3
#define SAVING_SPELL  4

/* This is a target status to determine after do_cast what exactly the
   target is supposed to be. This fixes casting abort and crash bugs
   Nechtrous
*/
#define TARGET_NULL	  0
#define TARGET_ALL_ROOM   1
#define TARGET_IN_ROOM    2
#define TARGET_IN_WORLD   3
#define TARGET_IN_INV	  4
#define TARGET_EQUIP      5
#define TARGET_SELF	  6
#define TARGET_FIGHTING   7


#define TAR_IGNORE        1
#define TAR_CHAR_ROOM     2
#define TAR_CHAR_WORLD    4
#define TAR_FIGHT_SELF    8
#define TAR_FIGHT_VICT   16
#define TAR_SELF_ONLY    32 /* Only a check, use with i.e. TAR_CHAR_ROOM */
#define TAR_NOT_SELF     64 /* Only a check, use with i.e. TAR_CHAR_ROOM */
#define TAR_OBJ_INV     128
#define TAR_OBJ_ROOM    256
#define TAR_OBJ_WORLD   512
#define TAR_OBJ_EQUIP  1024

struct spell_info_type {
   byte min_position;	/* Position for caster	 */
   int mana_min;	/* Min amount of mana used by a spell (highest lev) */
   int mana_max;	/* Max amount of mana used by a spell (lowest lev) */
   int mana_change;	/* Change in mana used by spell from lev to lev */
   int min_level[NUM_CLASSES];
   int routines;
   byte violent;
   int targets;         /* See below for use with TAR_XXX  */
   int min_circle[NUM_CLASSES];
   int mem_time;
   int cast_time;
   int damage_type;
   int sphere;
};


/* Possible Targets:

   bit 0 : IGNORE TARGET
   bit 1 : PC/NPC in room
   bit 2 : PC/NPC in world
   bit 3 : Object held
   bit 4 : Object in inventory
   bit 5 : Object in room
   bit 6 : Object in world
   bit 7 : If fighting, and no argument, select tar_char as self
   bit 8 : If fighting, and no argument, select tar_char as victim (fighting)
   bit 9 : If no argument, select self, if argument check that it IS self.

*/

#define SPELL_TYPE_SPELL   0
#define SPELL_TYPE_POTION  1
#define SPELL_TYPE_WAND    2
#define SPELL_TYPE_STAFF   3
#define SPELL_TYPE_SCROLL  4


/* Attacktypes with grammar */

struct attack_hit_type {
   char	*singular;
   char	*plural;
};


#define ASPELL(spellname) \
void	spellname(int level, struct char_data *ch, \
		  struct char_data *victim, struct obj_data *obj, int savetype)

#define MANUAL_SPELL(spellname)	spellname(level, caster, cvict, ovict, savetype);

ASPELL(spell_create_water);
ASPELL(spell_recall);
ASPELL(spell_teleport);
ASPELL(spell_summon);
ASPELL(spell_locate_object);
ASPELL(spell_charm);
ASPELL(spell_information);
ASPELL(spell_identify);
ASPELL(spell_enchant_weapon);
ASPELL(spell_detect_poison);
ASPELL(spell_dimension_door);
ASPELL(spell_creeping_doom);
ASPELL(spell_vitality);
ASPELL(spell_moonwell);
ASPELL(spell_major_paralysis);
ASPELL(spell_resurrect);
ASPELL(spell_incendiary_nebula);
ASPELL(spell_preserve);
ASPELL(spell_plane_shift);
ASPELL(spell_dispel_magic);
ASPELL(spell_minor_creation);
ASPELL(spell_wizard_eye);
ASPELL(spell_disintegrate);
ASPELL(spell_mass_invis);
ASPELL(spell_relocate);
ASPELL(spell_frost_breath);
ASPELL(spell_fire_breath);
ASPELL(spell_acid_breath);
ASPELL(spell_gas_breath);
ASPELL(spell_lightning_breath);
ASPELL(spell_lesser_invocation);
ASPELL(spell_enlightenment);
ASPELL(spell_greater_invocation);
ASPELL(spell_banish);
ASPELL(spell_word_of_command);
ASPELL(spell_divine_essence);
ASPELL(spell_heavens_gate);
ASPELL(spell_dark_feast);
ASPELL(spell_hells_gate);
ASPELL(spell_wall_of_stone);
ASPELL(spell_natures_embrace);
ASPELL(spell_wandering_woods);
ASPELL(spell_armor_of_gaia);
ASPELL(spell_fire_darts);
ASPELL(spell_flame_blade);
ASPELL(spell_melt);
ASPELL(spell_immolate);
ASPELL(spell_greater_firewalk);
ASPELL(spell_supernova);
ASPELL(spell_firewalk);
ASPELL(spell_ice_darts);
ASPELL(spell_ice_dagger);
ASPELL(spell_wall_of_ice);
ASPELL(spell_flood);
ASPELL(spell_greater_waterwalk);
ASPELL(spell_rain);

/* basic magic calling functions */

int find_skill_num(char *name);

void mag_damage(int level, struct char_data *ch, struct char_data *victim,
  int spellnum, int savetype);

void mag_affects(int level, struct char_data *ch, struct char_data *victim,
  int spellnum, int savetype);

void mag_group_switch(int level, struct char_data *ch, struct char_data *tch,
  int spellnum, int savetype);

void mag_groups(int level, struct char_data *ch, int spellnum, int savetype);

void mag_masses(int level, struct char_data *ch, int spellnum, int savetype);

void mag_areas(int level, struct char_data *ch, int spellnum, int savetype);

void mag_summons(int level, struct char_data *ch, struct obj_data *obj,
 int spellnum, int savetype);

void mag_points(int level, struct char_data *ch, struct char_data *victim,
 int spellnum, int savetype);

void mag_unaffects(int level, struct char_data *ch, struct char_data *victim,
  int spellnum, int type);

void mag_alter_objs(int level, struct char_data *ch, struct obj_data *obj,
  int spellnum, int type);

void mag_creations(int level, struct char_data *ch, int spellnum);

int	call_magic(struct char_data *caster, struct char_data *cvict,
  struct obj_data *ovict, int spellnum, int level, int casttype);

void mag_room(int level, struct char_data * ch, int spellnum);

void	mag_objectmagic(struct char_data *ch, struct obj_data *obj,
			char *argument);

int	cast_spell(struct char_data *ch, struct char_data *tch,
  struct obj_data *tobj, int spellnum);


/* other prototypes */
void spell_level(int spell, int class, int level, int circle);
void init_spell_levels(void);
char *skill_name(int num);
@


1.93
log
@Adding a TAR_GROUND cast requirement.  Added detonation,
phosphoric embers, positive field, and acid burst spells.
Removed combust and heatwave.  Made soul tap a manual spell.
@
text
@/***************************************************************************
 * $Id: casting.h,v 1.92 2009/03/09 03:45:17 jps Exp myc $
 ***************************************************************************/
/***************************************************************************
 *   File: casting.h                                      Part of FieryMUD *
 *  Usage: header file: constants and fn prototypes for spell system       *
 *                                                                         *
 *  All rights reserved.  See license.doc for complete information.        *
 *                                                                         *
 *  FieryMUD Copyright (C) 1998, 1999, 2000 by the Fiery Consortium.       *
 *  FieryMUD is based on CircleMUD Copyright (C) 1993, 94 by the Trustees  *
 *  of the Johns Hopkins University.                                       *
 *  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
 ***************************************************************************/

#ifndef __FIERY_CASTING_H
#define __FIERY_CASTING_H

#include "spell_mem.h"

#define DEFAULT_STAFF_LVL  12
#define DEFAULT_WAND_LVL   12

#define CAST_UNDEFINED   -1
#define CAST_SPELL        0
#define CAST_POTION       1
#define CAST_WAND         2
#define CAST_STAFF        3
#define CAST_SCROLL       4
#define CAST_BREATH       5
#define CAST_CHANT        6
#define CAST_SINGN        7

#define CAST_RESULT_CHARGE (1 << 0)
#define CAST_RESULT_IMPROVE (1 << 1)

#define MAG_DAMAGE        (1 << 0)
#define MAG_AFFECT        (1 << 1)
#define MAG_UNAFFECT      (1 << 2)
#define MAG_POINT         (1 << 3)
#define MAG_ALTER_OBJ     (1 << 4)
#define MAG_GROUP         (1 << 5)
#define MAG_MASS          (1 << 6)
#define MAG_AREA          (1 << 7)
#define MAG_SUMMON        (1 << 8)
#define MAG_CREATION      (1 << 9)
#define MAG_MANUAL        (1 << 10)
#define MAG_ROOM          (1 << 11)
#define MAG_BULK_OBJS     (1 << 12)
#define MAG_REPEAT        (1 << 13)
#define NUM_ROUTINE_TYPES 13

#define TYPE_UNDEFINED               -1

/* PLAYER SPELLS -- Numbered from 1 to MAX_SPELLS */
/* enumerate the base mem time for each circle. PLEASE feel free to alter based on
 * practicality */
#define C1  30
#define C2  33
#define C3  36
#define C4  39
#define C5  42
#define C6  45
#define C7  48
#define C8  51
#define C9  54
#define C10 57
#define C11 60
#define C12 60
#define C13 60
#define C14 60

/*
 * spell casting time defines , ordinary ints can be used
 * for other values, but should be declared here...
 * NOTE: These integers represent pulses, not seconds. if PULSE_VIOLENCE is used,
 *       then each of the following is (n*2) seconds.
 */
/* This is based on 4 second rounds. */
#define CAST_SPEED1       6  /* 1.5  rounds */
#define CAST_SPEED2       7  /* 1.75 rounds */
#define CAST_SPEED3       8  /* 2.0  rounds */
#define CAST_SPEED4       9  /* 2.25 rounds */
#define CAST_SPEED5      10  /* 2.5  rounds */
#define CAST_SPEED6      12  /* 3.0  rounds */
#define CAST_SPEED7      14  /* 3.5  rounds */

/* The following casting times are for offensive spells. */

#define CAST_SPEEDA       1
#define CAST_SPEEDB       2
#define CAST_SPEEDC       3
#define CAST_SPEEDD       4
#define CAST_SPEEDE       5
#define CAST_SPEEDF       6
#define CAST_SPEEDG       7
#define CAST_SPEEDH       8
#define CAST_SPEEDI       9
#define CAST_SPEEDJ      10
#define CAST_SPEEDK      11




/* This is a target status to determine after do_cast what exactly the
   target is supposed to be. This fixes casting abort and crash bugs
   Nechtrous
*/
#define TARGET_NULL       0
#define TARGET_ALL_ROOM   1
#define TARGET_IN_ROOM    2
#define TARGET_IN_WORLD   3
#define TARGET_IN_INV     4
#define TARGET_EQUIP      5
#define TARGET_SELF       6
#define TARGET_FIGHTING   7
#define TARGET_STRING     8


/*
 * TAR_SELF_ONLY, TAR_NOT_SELF, TAR_NIGHT_ONLY, TAR_DAY_ONLY,
 * and TAR_OUTDOORS are only checks.  They must be used with one of the
 * other target values to make the cast command actually look for a
 * target.  For instance, TAR_CHAR_ROOM | TAR_NIGHT_ONLY would hit
 * a target in the room, but would only work at night.
 *
 * Possible Targets:
 *
 * bit 0 : IGNORE TARGET
 * bit 1 : PC/NPC in room
 * bit 2 : PC/NPC in world
 * bit 3 : If fighting, and no argument, select tar_char as self
 * bit 4 : If fighting, and no argument, select tar_char as victim (fighting)
 * bit 5 : If no argument, select self, if argument check that it IS self.
 * bit 6 : Don't allow spell to be targeted at caster
 * bit 7 : Object in inventory
 * bit 8 : Object in room
 * bit 9 : Object in world
 * bit 10: Object held / in equipment
 * bit 11: The argument is used as a string (for spells like locate object)
 * bit 12: Only allow casting at night
 * bit 13: Only allow casting during the day
 * bit 14: Only allow casting outdoors
 * bit 15: Only allow casting on ground (no structure/air/water sector)
 * bit 16: Skill or spell is contact-based
 * bit 17: Skill or spell is ranged and requires direct line-of-sight
 */

#define TAR_IGNORE        (1 << 0)
#define TAR_CHAR_ROOM     (1 << 1)
#define TAR_CHAR_WORLD    (1 << 2)
#define TAR_FIGHT_SELF    (1 << 3)
#define TAR_FIGHT_VICT    (1 << 4)
#define TAR_SELF_ONLY     (1 << 5) /* Only a check */
#define TAR_NOT_SELF      (1 << 6) /* Only a check */
#define TAR_OBJ_INV       (1 << 7)
#define TAR_OBJ_ROOM      (1 << 8)
#define TAR_OBJ_WORLD     (1 << 9)
#define TAR_OBJ_EQUIP     (1 << 10)
#define TAR_STRING        (1 << 11)
#define TAR_NIGHT_ONLY    (1 << 12) /* Only a check */
#define TAR_DAY_ONLY      (1 << 13) /* Only a check */
#define TAR_OUTDOORS      (1 << 14) /* Only a check */
#define TAR_GROUND        (1 << 15) /* Only a check */
#define TAR_CONTACT       (1 << 16)
#define TAR_DIRECT        (1 << 17)
#define NUM_TAR_FLAGS     18

/* Keeping track of casters, so destroyed objects can abort spells cast on them.
 * These functions are defined in spell_parser.c. */
void targets_remember_caster(struct char_data *caster);
void obj_forget_caster(struct obj_data *obj, struct char_data *caster);
void char_forget_caster(struct char_data *ch, struct char_data *caster);
void obj_forget_casters(struct obj_data *obj);
void char_forget_casters(struct char_data *ch);

#define MANUAL_SPELL(spellname) \
   imp_skill |= spellname(spellnum, skill, caster, cvict, ovict, savetype);

#define CASTING(ch) (EVENT_FLAGGED(ch, EVENT_CASTING))

#define STOP_CASTING(ch) \
      REMOVE_FLAG(GET_EVENT_FLAGS(ch), EVENT_CASTING); \
      if ((ch)->casting.obj) obj_forget_caster((ch)->casting.obj, ch); \
      if ((ch)->casting.tch) char_forget_caster((ch)->casting.tch, ch); \
      WAIT_STATE(ch, PULSE_VIOLENCE / 2);

int mag_damage(int skill, struct char_data *ch, struct char_data *victim,
  int spellnum, int savetype);

int mag_affect(int skill, struct char_data *ch, struct char_data *victim,
  int spellnum, int savetype, int casttype);

void perform_mag_group(int skill, struct char_data *ch, struct char_data *tch,
  int spellnum, int savetype);

int mag_group(int skill, struct char_data *ch, int spellnum, int savetype);

int mag_mass(int skill, struct char_data *ch, int spellnum, int savetype);

int mag_area(int skill, struct char_data *ch, int spellnum, int savetype);

int mag_summon(int skill, struct char_data *ch, struct char_data *vict,
      struct obj_data *obj, int spellnum, int savetype);

int mag_point(int skill, struct char_data *ch, struct char_data *victim,
 int spellnum, int savetype);

int mag_unaffect(int skill, struct char_data *ch, struct char_data *victim,
  int spellnum, int type);

int mag_alter_obj(int skill, struct char_data *ch, struct obj_data *obj,
  int spellnum, int type);

int mag_bulk_objs(int skill, struct char_data *ch, int spellnum, int type);

int mag_creation(int skill, struct char_data *ch, int spellnum);

int call_magic(struct char_data *caster, struct char_data *cvict,
  struct obj_data *ovict, int spellnum, int skill, int casttype);

int mag_room(int skill, struct char_data * ch, int spellnum);

void mag_objectmagic(struct char_data *ch, struct obj_data *obj,
                        char *argument);

int cast_spell(struct char_data *ch, struct char_data *tch,
  struct obj_data *tobj, int spellnum);

/* other prototypes */
void free_mem_list(struct char_data *ch);
void free_scribe_list(struct char_data *ch);
void init_mem_list(struct char_data *ch);
void save_mem_list(struct char_data *ch);
int add_spell(struct char_data *ch, int spell, int can_cast, int mem_time, bool verbose);

#include "events.h"
EVENTFUNC(delayed_cast_event);
EVENTFUNC(room_undo_event);
struct delayed_cast_event_obj *construct_delayed_cast(struct char_data *ch,
      struct char_data *victim, int spellnum, int routines, int rounds,
      int wait, int skill, int savetype, bool sustained);

extern int spells_of_circle[LVL_IMPL + 1][NUM_SPELL_CIRCLES + 1];
extern const char *targets[NUM_TAR_FLAGS + 1];
extern const char *routines[NUM_ROUTINE_TYPES + 1];

#endif

/***************************************************************************
 * $Log: casting.h,v $
 * Revision 1.92  2009/03/09 03:45:17  jps
 * Extract some spell-mem related stuff from structs.h and put it in spell_mem.h
 *
 * Revision 1.91  2009/03/09 03:26:34  jps
 * Moved individual spell definitions to spell.c and spell.h.
 *
 * Revision 1.90  2009/03/08 23:34:14  jps
 * Renamed spells.[ch] to casting.
 *
 * Revision 1.89  2008/09/21 21:04:20  jps
 * Passing cast type to mag_affect so that potions of bless/dark presence can be quaffed by neutral people.
 *
 * Revision 1.88  2008/09/11 02:50:02  jps
 * Changed skills so you have a minimum position, and fighting_ok fields.
 *
 * Revision 1.87  2008/08/25 00:20:33  myc
 * Changed the way mobs memorize spells.
 *
 * Revision 1.86  2008/08/01 05:20:20  jps
 * Rolled "show spell" into "show skill".
 *
 * Revision 1.85  2008/05/19 05:46:48  jps
 * Remove unused ASPELL def.
 *
 * Revision 1.84  2008/05/18 02:02:17  jps
 * Adding prototype for manual spell for isolation.
 *
 * Revision 1.83  2008/05/12 03:36:42  jps
 * Added valid_cast_stance
 *
 * Revision 1.82  2008/05/12 02:50:05  jps
 * Add do_show_spell and level_to_circle, which help with
 * "show spell <spell>".
 *
 * Revision 1.81  2008/04/19 21:10:31  myc
 * Added a 'show skill' subcommand, which required a list of
 * target flag and routine type strings.
 *
 * Revision 1.80  2008/04/14 08:37:22  jps
 * Replaced calls to spell_wall_of_stone and spell_wall_of_ice
 * with a single ASPELL for spell_magical_wall.  It will also
 * handle illusory wall.  Changed ASPELL and MANUAL_SPELL to
 * include the spell number.
 *
 * Revision 1.79  2008/03/28 17:54:53  myc
 * Now using flagvectors for effect, mob, player, preference, room, and
 * room effect flags.  AFF, AFF2, and AFF3 flags are now just EFF flags.
 *
 * Revision 1.78  2008/03/23 18:42:53  jps
 * Removing obsolete damage types.  Damage types are now defined in chars.h.
 *
 * Revision 1.77  2008/03/09 08:58:28  jps
 * Add definition for manual spell of fear.
 *
 * Revision 1.76  2008/03/05 03:03:54  myc
 * Exporting add_spell function from spell_mem.c
 *
 * Revision 1.75  2008/02/23 01:03:54  myc
 * Renamed and publicizing a bunch of spell memorization functions.
 *
 * Revision 1.74  2008/02/09 21:07:50  myc
 * Casting uses event flags instead of plr/mob flags now.
 *
 * Revision 1.73  2008/01/29 16:51:12  myc
 * Adding the contact and direct (LoS) skills and spells.
 *
 * Revision 1.72  2008/01/26 23:19:28  jps
 * Remove the equipment-destroying manual spell for acid breath.
 *
 * Revision 1.71  2008/01/26 14:26:31  jps
 * Moved a lot of skill-related code into skills.h and skills.c.
 *
 * Revision 1.70  2008/01/23 14:15:34  jps
 * Added the "humanoid" field to skill definitions.
 *
 * Revision 1.69  2008/01/13 23:06:04  myc
 * Changed the spell_info struct to store lowest_level and lowest_circle
 * data for each spell, thus making it unnecessary to calculate the
 * minimum spell level for major globe over and over.
 *
 * Revision 1.68  2008/01/12 23:13:20  myc
 * Declaring spells_of_circle in header file.
 *
 * Revision 1.67  2008/01/07 10:38:56  jps
 * Rename project to phantasm.
 *
 * Revision 1.66  2008/01/06 23:50:47  jps
 * Added spells project and simulacrum, and MOB2_ILLUSORY flag.
 *
 * Revision 1.65  2008/01/06 20:38:25  jps
 * Add function for ventriloquate.
 *
 * Revision 1.64  2008/01/05 21:54:43  jps
 * Saving throw defs moved to chars.h.
 *
 * Revision 1.63  2008/01/05 05:42:09  jps
 * Explicitly exporting update_skills() and spell_info[].
 *
 * Revision 1.62  2008/01/03 12:44:03  jps
 * Created an array of structs for class information. Renamed CLASS_MAGIC_USER
 * to CLASS_SORCERER.
 *
 * Revision 1.61  2008/01/02 07:11:58  jps
 * Using class.h.
 *
 * Revision 1.60  2008/01/02 01:26:32  jps
 * Added defines for the sphere-related skills.
 *
 * Revision 1.59  2007/12/31 02:00:57  jps
 * Made the general term for spells, skills, chants, and songs 'talent'.
 * Fixed mskillset to handle all talents.
 *
 * Revision 1.58  2007/11/25 00:04:59  jps
 * Spell targets will keep close track of whoever's casting a spell
 * at them.  This allows spells to be safely aborted if the target
 * is removed from the game before the spell is completed.
 *
 * Revision 1.57  2007/10/13 20:15:09  myc
 * Added functions to find spell/skill/chant nums to spells.h
 *
 * Revision 1.56  2007/10/13 05:07:24  myc
 * Added new monk chants.
 *
 * Revision 1.55  2007/10/11 20:14:48  myc
 * Changed skill defines to support chants and songs as skills, but
 * slightly distinguished from spells and skills.  TOP_SKILL is the
 * old MAX_SKILLS.  Chants and songs now each have a block of 50
 * defines above the new MAX_SKILLS (550).  This is important
 * because MAX_SKILLS (now TOP_SKILL) is used in the pfile.
 *
 * Revision 1.54  2007/10/02 02:52:27  myc
 * Energy drain is now a manual spell.
 *
 * Revision 1.53  2007/09/15 15:36:48  myc
 * Natures embrace is now in mag_affects instead of a manual spell.
 *
 * Revision 1.52  2007/09/11 16:34:24  myc
 * Added peck, claw, and electrify skills for use by druid shapechanges.
 *
 * Revision 1.51  2007/09/09 01:20:14  jps
 * The result of casting a spell is no longer just TRUE or FALSE,
 * but two possible bits combined: charge and/or improve. If
 * CAST_RESULT_CHARGE is returned, the spell was used and the caster
 * will be charged (have the spell erased from memory).  If
 * CAST_RESULT_IMPROVE is returned, the caster may improve in that
 * sphere of magic.
 * At the same time, casters will now correctly be charged for
 * spells that are cast on objects.
 *
 * Revision 1.50  2007/09/07 01:37:34  jps
 * Add shorter casting times for attack spells.
 *
 * Revision 1.49  2007/09/04 06:49:19  myc
 * Added new TAR_OUTDOORS, TAR_NIGHT_ONLY, and TAR_DAY_ONLY checks for
 * spells to limit when and where they may be cast (like TAR_SELF_ONLY or
 * TAR_NOT_SELF).  This replaces checks within spells, and the checks are
 * made before the caster's spell memory is charged.
 *
 * Revision 1.48  2007/08/30 08:51:25  jps
 * Add define for spell_info.
 *
 * Revision 1.47  2007/08/27 21:18:00  myc
 * You can now queue up commands while casting as well as abort midcast.
 * Casting commands such as look and abort are caught and interpreted
 * before the input is normally queued up by the game loop.
 *
 * Revision 1.46  2007/08/14 22:43:07  myc
 * Adding conceal, corner, shadow, and stealth skills.
 *
 * Revision 1.45  2007/08/05 20:21:51  myc
 * Added retreat and group retreat skills.
 *
 * Revision 1.44  2007/08/02 04:19:04  jps
 * Added "moonbeam" spell for Druids.
 *
 * Revision 1.43  2007/08/02 00:23:53  myc
 * Standardized magic check-PK function.  Cut out a LOT of unnecessary magic
 * code and cleaned up the whole system in general.  Magic casts are now
 * guaranteed to use sphere skills rather than level.  Almost all magic
 * functions like mag_damage or even manual spells return a boolean now:
 * TRUE if the cast deserves a skill improvement, FALSE if it doesn't.
 * This return value is ignored for object magic (wands, etc.).
 *
 * Revision 1.42  2007/07/31 07:39:04  jps
 * Added macros IS_SKILL, IS_SPELL, and IS_LANGUAGE for classifying
 * skill numbers.
 *
 * Revision 1.41  2007/07/04 02:21:58  myc
 * Renamed douse spell to extinguish.
 *
 * Revision 1.40  2007/06/16 00:15:49  myc
 * Three spells for necromancers: soul tap, rebuke undead,
 * and degeneration.  One spell for rangers: natures guidance.
 *
 * Revision 1.39  2007/05/11 21:03:12  myc
 * New rogue skill, eye gouge, allows rogues to gouge out eyes.  A very
 * complicated skill.  :P  Fixed cure blind's logic, and made it support
 * eye gouge too.
 *
 * Revision 1.38  2007/05/11 20:13:28  myc
 * Vaporform is a new circle 13 spell for cryomancers.  It significantly
 * increases the caster's chance of dodging a hit.  It is a quest spell.
 *
 * Revision 1.37  2007/04/19 00:53:54  jps
 * Create macros for stopping spellcasting.
 *
 * Revision 1.36  2007/04/17 23:38:03  myc
 * Introducing the new improved color spray!  It's now an area spell that
 * causes various effects based on caster skill.
 *
 * Revision 1.35  2007/02/14 03:54:53  myc
 * Replaced firewalk and greater firewalk with combust and cremate.
 *
 * Revision 1.34  2006/11/18 21:04:29  jps
 * Make casting items use the same targeting code as regular spellcasting.
 *
 * Revision 1.33  2006/11/18 04:26:32  jps
 * Renamed continual light spell to illumination, and it only works on
 * LIGHT items (still rooms too).
 *
 * Revision 1.32  2006/11/08 07:55:17  jps
 * Change verbal instances of "breath" to "breathe"
 *
 * Revision 1.31  2003/09/02 03:07:14  jjl
 * Fixed On Fire / Lay Hands, which both tried to claim skill ID 470
 *
 * Revision 1.30  2003/06/25 02:21:03  jjl
 * Revised lay hands to not suck.
 *
 * Revision 1.29  2003/04/16 02:00:22  jjl
 * Added skill timers for Zzur.  They don't save to file, so they were a
 * quickie.
 *
 * Revision 1.28  2002/12/19 07:42:02  rls
 * define for spell_remove_curse
 *
 * Revision 1.27  2002/10/14 02:16:08  jjl
 * An update to turn vitality into a set of 6 spells, lesser endurance,
 * endurance, greater endurance, vitality, greater vitality, and dragon's
 * health.  Greater endurance is what vitality was.  The rest are scaled
 * appropriately.    The higher end may need scaled down, or may not.
 *
 * Revision 1.26  2002/09/15 04:17:02  jjl
 * D'oh.  Mistyped the headers. . .  Fixed that.
 *
 * Revision 1.24  2002/09/13 02:32:10  jjl
 * Updated header comments
 *
 * Revision 1.23  2002/07/16 23:25:17  rls
 * added in necro spell, bone armor
 *
 * Revision 1.22  2000/11/25 02:33:15  rsd
 * Altered comment header and added back rlog messages
 * from prior to the addition of the $log$ string.
 *
 * Revision 1.21  2000/03/18 06:20:12  rsd
 * removed the SPELL_SPHERE references since they essentially
 * do the same thing as SKILL_SPHERE_X and it seemed as though
 * it was a nightmare to cross use them. spell parser.c was
 * way changed due to this, check it out.
 *
 * Revision 1.20  1999/11/23 15:48:23  jimmy
 * Fixed the slashing weapon skill.  I had it erroneously as stabbing. Doh.
 * Reinstated dual wield.
 * Allowed mobs/players to pick up items while fighting.
 * Fixed a bug in the damage message that wrongfully indicated a miss
 * due to a rounding error in the math.
 * This was all done in order to facilitate the chance to sling your
 * weapon in combat.  Dex and proficiency checks are now made on any missed
 * attact and a failure of both causes the weapon to be slung.
 *
 * Revision 1.18  1999/11/17 20:42:17  jimmy
 * Added sphere of divination, and sphere skills.
 *
 * Revision 1.16  1999/09/05 07:00:39  jimmy
 * Added RCS Log and Id strings to each source file
 *
 * Revision 1.15  1999/08/29 07:06:04  jimmy
 * Many many small but ver significant bug fixes found using insure.  The
 * code now compiles cleanly and boots cleanly with insure.  The most significant
 * changes were moving all the BREATH's to within normal spell range, and
 * fixing the way socials were allocated.  Too many small fixes to list them
 * all. --gurlaek (now for the runtime debugging :( )
 *
 * Revision 1.14  1999/07/22 17:43:59  jimmy
 * Moved the identify spell back into the normal castable spells range.
 * moved all the breath spells up by one to compensate for moveing identify.
 *
 * Revision 1.13  1999/07/20 19:45:51  jimmy
 * This is the spanky New Spell recognition code.
 * This code allows mobs/players that have the KNOW_SPELL skill
 * to make a skill check to guess the spell.  A good roll will show both
 * the spell and the target.  A bad roll will show the spell garbled and
 * then an INT check for the target.  If a really bad roll is made, the spell
 * will be replaced by an incorrect one.  the heart of this system is
 * start_chant(), end_chant, and bad_guess().
 * --gurlaek 7/20/1999
 *
 * Revision 1.12  1999/07/15 03:15:05  mud
 * change cast speed defines to make more sense and have a
 * wider range of time.. see CAST_SPEEDx
 *
 * Revision 1.11  jimmy
 * This is a Mass check-in of the new skill/spell/language assignment system.
 * This New system combines the assignment of skill/spell/language for
 * both mobs and PCs.  LOts of code was touched and many errors were fixed.
 * MCLASS_VOID was moved from 13 to -1 to match CLASS_UNDEFINED for PC's.
 * MObs now get random skill/spell/language levels baseed on their race/class/level
 * that exactly align with PC's.  PC's no longer have to rent to use skills gained
 * by leveling or when first creating a char.  Languages no longer reset to defaults
 * when a PC levels.  Discovered that languages have been defined right in the middle
 * of the spell area.  This needs to be fixed.  A conversion util neeDs to be run on
 * the mob files to compensate for the 13 to -1 class change.
 * --gurlaek 7/6/1999
 *
 * Revision 1.10  1999/05/26 02:00:04  mud
 * added #define SKILL_SUMMON_MOUNT          450
 *
 * Revision 1.9  1999/04/18 20:12:54  dce
 * Magic missile works like Fire Dart, Ice Dart works.
 *
 * Revision 1.8  1999/03/24 23:43:16  jimmy
 * Working on quest spells.  Still in progress.  HOwever, spell_info[] array now has a flag
 * quest.  If it's true then it's considerd a quest spell.  Also, allowed pyro/cryo's to
 * learn from any sorcerer type teacher
 * fingon
 *
 * Revision 1.7  1999/03/10 00:03:37  dce
 * Monk semantics for dodge/parry/ripost/attack
 *
 * Revision 1.6  1999/03/08 20:22:35  dce
 * Adds the skill safefall for monks.
 *
 * Revision 1.5  1999/03/07 05:01:09  dce
 * Chant finishes and wearoff messages.
 *
 * Revision 1.4  1999/03/03 20:11:02  jimmy
 * Many enhancements to scribe and spellbooks.  Lots of checks added.  Scribe is now a skill.
 * Spellbooks now have to be held to scribe as well as a quill in the other hand.
 *
 * -fingon
 *
 * Revision 1.3  1999/02/26 22:30:30  dce
 * Monk additions/fixes
 *
 * Revision 1.2  1999/02/13 19:37:12  dce
 * Rewrote Continual Light and Darkness to be manual spells to meet our needs.
 *
 * Revision 1.1  1999/01/29 01:23:32  mud
 * Initial revision
 *
 ***************************************************************************/
@


1.92
log
@Extract some spell-mem related stuff from structs.h and put it in spell_mem.h
@
text
@d2 1
a2 1
 * $Id: casting.h,v 1.91 2009/03/09 03:26:34 jps Exp jps $
d50 1
d144 3
a146 2
 * bit 15: Skill or spell is contact-based
 * bit 16: Skill or spell is ranged and requires direct line-of-sight
d164 4
a167 3
#define TAR_CONTACT       (1 << 15)
#define TAR_DIRECT        (1 << 16)
#define NUM_TAR_FLAGS     17
d252 3
@


1.91
log
@Moved individual spell definitions to spell.c and spell.h.
@
text
@d2 1
a2 1
 * $Id: casting.h,v 1.90 2009/03/08 23:34:14 jps Exp jps $
d19 1
a52 2
#define SPELL_RESERVED_DBC            0  /* SKILL NUMBER ZERO -- RESERVED */

d216 1
a216 1
int        call_magic(struct char_data *caster, struct char_data *cvict,
d221 1
a221 1
void        mag_objectmagic(struct char_data *ch, struct obj_data *obj,
d224 1
a224 1
int        cast_spell(struct char_data *ch, struct char_data *tch,
d249 3
@


1.90
log
@Renamed spells.[ch] to casting.
@
text
@d2 1
a2 1
 * $Id: casting.h,v 1.89 2008/09/21 21:04:20 jps Exp jps $
a166 2


d175 2
a176 6

#define ASPELL(spellname) \
int spellname(int spellnum, int skill, struct char_data *ch, \
                  struct char_data *victim, struct obj_data *obj, int savetype)

#define MANUAL_SPELL(spellname)        imp_skill |= spellname(spellnum, skill, caster, cvict, ovict, savetype);
a185 65
ASPELL(spell_armor_of_gaia);
ASPELL(spell_banish);
ASPELL(spell_charm);
ASPELL(spell_color_spray);
ASPELL(spell_control_weather);
ASPELL(spell_create_water);
ASPELL(spell_creeping_doom);
ASPELL(spell_enchant_weapon);
ASPELL(spell_degeneration);
ASPELL(spell_detect_poison);
ASPELL(spell_dark_feast);
ASPELL(spell_darkness);
ASPELL(spell_dimension_door);
ASPELL(spell_dispel_magic);
ASPELL(spell_divine_essence);
ASPELL(spell_energy_drain);
ASPELL(spell_enlightenment);
ASPELL(spell_fear);
ASPELL(spell_fire_breath);
ASPELL(spell_fire_darts);
ASPELL(spell_flame_blade);
ASPELL(spell_flood);
ASPELL(spell_frost_breath);
ASPELL(spell_gas_breath);
ASPELL(spell_greater_invocation);
ASPELL(spell_heavens_gate);
ASPELL(spell_hells_gate);
ASPELL(spell_ice_dagger);
ASPELL(spell_ice_darts);
ASPELL(spell_identify);
ASPELL(spell_illumination);
ASPELL(spell_immolate);
ASPELL(spell_isolation);
ASPELL(spell_lesser_invocation);
ASPELL(spell_lightning_breath);
ASPELL(spell_locate_object);
ASPELL(spell_magical_wall);
ASPELL(spell_magic_missile);
ASPELL(spell_major_paralysis);
ASPELL(spell_melt);
ASPELL(spell_minor_creation);
ASPELL(spell_moonbeam);
ASPELL(spell_moonwell);
ASPELL(spell_plane_shift);
ASPELL(spell_preserve);
ASPELL(spell_rain);
ASPELL(spell_recall);
ASPELL(spell_relocate);
ASPELL(spell_remove_curse);
ASPELL(spell_resurrect);
ASPELL(spell_shift_corpse);
ASPELL(spell_summon);
ASPELL(spell_summon_corpse);
ASPELL(spell_supernova);
ASPELL(spell_teleport);
ASPELL(spell_ventriloquate);
ASPELL(spell_vitality);
ASPELL(spell_wandering_woods);
ASPELL(spell_wizard_eye);
ASPELL(spell_word_of_command);

ASPELL(chant_peace);
ASPELL(chant_ivory_symphony);
ASPELL(chant_apocalyptic_anthem);

d235 7
d250 3
@


1.89
log
@Passing cast type to mag_affect so that potions of bless/dark presence can be quaffed by neutral people.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.88 2008/09/11 02:50:02 jps Exp jps $
d5 1
a5 1
 *   File: spells.h                                       Part of FieryMUD *
d16 2
a17 2
#ifndef __FIERY_SPELLS_H
#define __FIERY_SPELLS_H
d313 4
a316 1
 * $Log: spells.h,v $
@


1.88
log
@Changed skills so you have a minimum position, and fighting_ok fields.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.87 2008/08/25 00:20:33 myc Exp jps $
d261 1
a261 1
  int spellnum, int savetype);
d314 3
@


1.87
log
@Changed the way mobs memorize spells.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.86 2008/08/01 05:20:20 jps Exp myc $
a304 1
bool valid_cast_stance(struct char_data *ch, int spellnum);
d314 3
@


1.86
log
@Rolled "show spell" into "show skill".
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.85 2008/05/19 05:46:48 jps Exp jps $
a304 1
int level_to_circle(int level);
d315 3
@


1.85
log
@Remove unused ASPELL def.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.84 2008/05/18 02:02:17 jps Exp jps $
a304 1
void do_show_spell(struct char_data *ch, char *spellname);
d316 3
@


1.84
log
@Adding prototype for manual spell for isolation.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.83 2008/05/12 03:36:42 jps Exp jps $
a223 1
ASPELL(spell_information); /* What's this? */
d317 3
@


1.83
log
@Added valid_cast_stance
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.82 2008/05/12 02:50:05 jps Exp jps $
d192 5
d198 1
a198 7
ASPELL(spell_recall);
ASPELL(spell_teleport);
ASPELL(spell_summon);
ASPELL(spell_locate_object);
ASPELL(spell_charm);
ASPELL(spell_information);
ASPELL(spell_identify);
d200 1
d202 2
a204 7
ASPELL(spell_creeping_doom);
ASPELL(spell_vitality);
ASPELL(spell_moonwell);
ASPELL(spell_major_paralysis);
ASPELL(spell_resurrect);
ASPELL(spell_preserve);
ASPELL(spell_plane_shift);
d206 8
a213 3
ASPELL(spell_minor_creation);
ASPELL(spell_wizard_eye);
ASPELL(spell_relocate);
a214 1
ASPELL(spell_fire_breath);
a215 3
ASPELL(spell_lightning_breath);
ASPELL(spell_lesser_invocation);
ASPELL(spell_enlightenment);
a216 3
ASPELL(spell_banish);
ASPELL(spell_word_of_command);
ASPELL(spell_divine_essence);
a217 1
ASPELL(spell_dark_feast);
d219 11
a229 3
ASPELL(spell_wandering_woods);
ASPELL(spell_armor_of_gaia);
ASPELL(spell_fire_darts);
d231 1
a231 1
ASPELL(spell_flame_blade);
d233 5
a237 8
ASPELL(spell_immolate);
ASPELL(spell_supernova);
ASPELL(spell_illumination);
ASPELL(spell_darkness);
ASPELL(spell_ice_darts);
ASPELL(spell_ice_dagger);
ASPELL(spell_magical_wall);
ASPELL(spell_flood);
d239 6
d246 2
a247 7
ASPELL(spell_shift_corpse);
ASPELL(spell_remove_curse);
ASPELL(spell_color_spray);
ASPELL(spell_degeneration);
ASPELL(spell_moonbeam);
ASPELL(spell_control_weather);
ASPELL(spell_energy_drain);
d249 5
a253 1
ASPELL(spell_fear);
d318 3
@


1.82
log
@Add do_show_spell and level_to_circle, which help with
"show spell <spell>".
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.81 2008/04/19 21:10:31 myc Exp jps $
d306 1
d316 4
@


1.81
log
@Added a 'show skill' subcommand, which required a list of
target flag and routine type strings.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.80 2008/04/14 08:37:22 jps Exp myc $
d304 2
d315 4
@


1.80
log
@Replaced calls to spell_wall_of_stone and spell_wall_of_ice
with a single ASPELL for spell_magical_wall.  It will also
handle illusory wall.  Changed ASPELL and MANUAL_SPELL to
include the spell number.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.79 2008/03/28 17:54:53 myc Exp jps $
d49 1
d165 2
d306 2
d313 6
@


1.79
log
@Now using flagvectors for effect, mob, player, preference, room, and
room effect flags.  AFF, AFF2, and AFF3 flags are now just EFF flags.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.78 2008/03/23 18:42:53 jps Exp myc $
d176 1
a176 1
int spellname(int skill, struct char_data *ch, \
d179 1
a179 1
#define MANUAL_SPELL(spellname)        imp_skill |= spellname(skill, caster, cvict, ovict, savetype);
a223 1
ASPELL(spell_wall_of_stone);
d236 1
a236 1
ASPELL(spell_wall_of_ice);
d308 4
@


1.78
log
@Removing obsolete damage types.  Damage types are now defined in chars.h.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.77 2008/03/09 08:58:28 jps Exp jps $
d37 9
a45 9
#define MAG_AFFECTS       (1 << 1)
#define MAG_UNAFFECTS     (1 << 2)
#define MAG_POINTS        (1 << 3)
#define MAG_ALTER_OBJS    (1 << 4)
#define MAG_GROUPS        (1 << 5)
#define MAG_MASSES        (1 << 6)
#define MAG_AREAS         (1 << 7)
#define MAG_SUMMONS       (1 << 8)
#define MAG_CREATIONS     (1 << 9)
d257 1
a257 1
int mag_affects(int skill, struct char_data *ch, struct char_data *victim,
d260 1
a260 1
void perform_mag_groups(int skill, struct char_data *ch, struct char_data *tch,
d263 1
a263 1
int mag_groups(int skill, struct char_data *ch, int spellnum, int savetype);
d265 1
a265 1
int mag_masses(int skill, struct char_data *ch, int spellnum, int savetype);
d267 1
a267 1
int mag_areas(int skill, struct char_data *ch, int spellnum, int savetype);
d269 1
a269 1
int mag_summons(int skill, struct char_data *ch, struct char_data *vict,
d272 1
a272 1
int mag_points(int skill, struct char_data *ch, struct char_data *victim,
d275 1
a275 1
int mag_unaffects(int skill, struct char_data *ch, struct char_data *victim,
d278 1
a278 1
int mag_alter_objs(int skill, struct char_data *ch, struct obj_data *obj,
d283 1
a283 1
int mag_creations(int skill, struct char_data *ch, int spellnum);
d309 3
@


1.77
log
@Add definition for manual spell of fear.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.76 2008/03/05 03:03:54 myc Exp jps $
a53 12
#define GENERIC_DAMAGE     0
#define FIRE_DAMAGE        1
#define COLD_DAMAGE        2
#define EARTH_DAMAGE       3
#define AIR_DAMAGE         4
#define HEALING_DAMAGE     5
#define SHOCK_DAMAGE       6
#define DEATH_DAMAGE       7
#define ALIGN_DAMAGE       8

#define MAX_DAMAGE_TYPES   9

d309 3
@


1.76
log
@Exporting add_spell function from spell_mem.c
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.75 2008/02/23 01:03:54 myc Exp myc $
d261 1
d321 3
@


1.75
log
@Renamed and publicizing a bunch of spell memorization functions.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.74 2008/02/09 21:07:50 myc Exp myc $
d312 1
d320 3
@


1.74
log
@Casting uses event flags instead of plr/mob flags now.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.73 2008/01/29 16:51:12 myc Exp myc $
d308 4
a311 1
void spell_level(int spell, int class, int level, int circle);
d319 3
@


1.73
log
@Adding the contact and direct (LoS) skills and spells.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.72 2008/01/26 23:19:28 jps Exp myc $
d193 1
a193 1
#define CASTING(ch) (PLR_FLAGGED((ch), PLR_CASTING) || MOB_FLAGGED((ch), MOB_CASTING))
d195 2
a196 4
#define STOP_CASTING(ch) if (IS_NPC(ch)) \
      REMOVE_BIT(MOB_FLAGS(ch), MOB_CASTING); \
         else \
      REMOVE_BIT(PLR_FLAGS(ch), PLR_CASTING); \
d316 3
@


1.72
log
@Remove the equipment-destroying manual spell for acid breath.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.71 2008/01/26 14:26:31 jps Exp jps $
d155 2
d174 2
d318 3
@


1.71
log
@Moved a lot of skill-related code into skills.h and skills.c.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.70 2008/01/23 14:15:34 jps Exp jps $
a222 1
ASPELL(spell_acid_breath);
d314 3
@


1.70
log
@Added the "humanoid" field to skill definitions.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.69 2008/01/13 23:06:04 myc Exp jps $
d10 1
a10 1
 *  FieryMUD Copyright (C) 1998, 1999, 2000 by the Fiery Consortium.       * 
d13 1
a13 1
 *  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *  
a18 1
#include "class.h"
d20 2
a21 7
/* The general term for the abilities known as spells, skills, chants,
 * and songs is TALENT. */
#define TALENT 0
#define SPELL        1
#define SKILL        2
#define CHANT        3
#define SONG        4
d23 1
a23 4
#define DEFAULT_STAFF_LVL        12
#define DEFAULT_WAND_LVL        12

#define CAST_UNDEFINED        -1
d25 2
a26 2
#define CAST_POTION        1
#define CAST_WAND        2
d28 2
a29 2
#define CAST_SCROLL        4
#define CAST_BREATH     5
d37 2
a38 2
#define MAG_AFFECTS        (1 << 1)
#define MAG_UNAFFECTS        (1 << 2)
d40 1
a40 1
#define MAG_ALTER_OBJS        (1 << 4)
d43 3
a45 3
#define MAG_AREAS        (1 << 7)
#define MAG_SUMMONS        (1 << 8)
#define MAG_CREATIONS        (1 << 9)
d47 2
a48 2
#define MAG_ROOM        (1 << 11)
#define MAG_BULK_OBJS        (1 << 12)
d54 9
a62 9
#define GENERIC_DAMAGE                0
#define FIRE_DAMAGE                1
#define COLD_DAMAGE                2
#define EARTH_DAMAGE                3
#define AIR_DAMAGE                4
#define HEALING_DAMAGE                5
#define SHOCK_DAMAGE                6
#define DEATH_DAMAGE                7
#define ALIGN_DAMAGE                8
d64 1
a64 1
#define MAX_DAMAGE_TYPES        9
d80 2
a81 2
#define C12 60 
#define C13 60 
d85 1
a85 1
 * spell casting time defines , ordinary ints can be used 
d87 1
a87 1
 * NOTE: These integers represent pulses, not seconds. if PULSE_VIOLENCE is used, 
a113 382
#define MIN_LANGUAGE    190
#define MAX_LANGUAGE    200
#define MAX_SPELLS      400
#define MAX_SKILLS      550
#define MAX_SONGS       600
#define MAX_CHANTS      650

#define IS_SKILL(n) ((n) > MAX_SPELLS && (n) <= MAX_SKILLS)
#define IS_SPELL(n) (((n) >= 1 && (n) < MIN_LANGUAGE) || \
      ((n) > MAX_LANGUAGE && (n) <= MAX_SPELLS))
#define IS_LANGUAGE(n) ((n) >= MIN_LANGUAGE && (n) <= MAX_LANGUAGE)
#define IS_CHANT(n) ((n) > MAX_SONGS && (n) <= MAX_CHANTS)
#define IS_SONG(n)  ((n) > MAX_SKILLS && (n) <= MAX_SONGS)

/* If you add another spell sphere, you'll have to modify these defines. */
#define IS_SPHERE_SKILL(n) ((n) >= SKILL_SPHERE_GENERIC && (n) <= SKILL_SPHERE_DIVIN)
#define NUM_SPHERE_SKILLS (SKILL_SPHERE_DIVIN - SKILL_SPHERE_GENERIC + 1)

#define SPELL_ARMOR                   1 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_TELEPORT                2 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_BLESS                   3 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_BLINDNESS               4 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_BURNING_HANDS           5 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CALL_LIGHTNING          6 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CHARM                   7 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CHILL_TOUCH             8 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CLONE                   9 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_COLOR_SPRAY            10 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CONTROL_WEATHER        11 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CREATE_FOOD            12 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CREATE_WATER           13 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CURE_BLIND             14 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CURE_CRITIC            15 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CURE_LIGHT             16 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_CURSE                  17 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_DETECT_ALIGN           18 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_DETECT_INVIS           19 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_DETECT_MAGIC           20 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_DETECT_POISON          21 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_DISPEL_EVIL            22 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_EARTHQUAKE             23 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_ENCHANT_WEAPON         24 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_ENERGY_DRAIN           25 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_FIREBALL               26 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_HARM                   27 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_HEAL                   28 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_INVISIBLE              29 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_LIGHTNING_BOLT         30 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_LOCATE_OBJECT          31 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_MAGIC_MISSILE          32 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_POISON                 33 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_PROT_FROM_EVIL         34 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_REMOVE_CURSE           35 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_SANCTUARY              36 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_SHOCKING_GRASP         37 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_SLEEP                  38 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_STRENGTH               39 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_SUMMON                 40 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_VENTRILOQUATE          41 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_WORD_OF_RECALL         42 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_REMOVE_POISON          43 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_SENSE_LIFE             44 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_ANIMATE_DEAD           45 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_DISPEL_GOOD            46 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_GROUP_ARMOR            47 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_GROUP_HEAL             48 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_GROUP_RECALL           49 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_INFRAVISION            50 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_WATERWALK              51 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_STONE_SKIN             52
#define SPELL_FULL_HEAL              53
#define SPELL_FULL_HARM              54
#define SPELL_WALL_OF_FOG            55
#define SPELL_WALL_OF_STONE          56
#define SPELL_FLY                    57
#define SPELL_SUMMON_DRACOLICH       58
#define SPELL_SUMMON_ELEMENTAL       59
#define SPELL_SUMMON_DEMON           60
#define SPELL_SUMMON_GREATER_DEMON   61
#define SPELL_DIMENSION_DOOR         62
#define SPELL_CREEPING_DOOM          63
#define SPELL_DOOM                   64
#define SPELL_METEORSWARM            65
#define SPELL_BIGBYS_CLENCHED_FIST   66
#define SPELL_FARSEE                 67
#define SPELL_HASTE                  68
#define SPELL_BLUR                   69
#define SPELL_GREATER_ENDURANCE      70
#define SPELL_MOONWELL               71
#define SPELL_INN_STRENGTH           72
#define SPELL_DARKNESS               73
#define SPELL_ILLUMINATION           74
#define SPELL_COMPREHEND_LANG        75
#define SPELL_CONE_OF_COLD           76
#define SPELL_ICE_STORM              77
#define SPELL_ICE_SHARDS             78
#define SPELL_MAJOR_PARALYSIS        79
#define SPELL_VAMPIRIC_BREATH        80
#define SPELL_RESURRECT              81
#define SPELL_INCENDIARY_NEBULA      82
#define SPELL_MINOR_PARALYSIS        83
#define SPELL_CAUSE_LIGHT            84
#define SPELL_CAUSE_SERIOUS          85
#define SPELL_CAUSE_CRITIC           86
#define SPELL_PRESERVE               87
#define SPELL_CURE_SERIOUS           88
#define SPELL_VIGORIZE_LIGHT         89
#define SPELL_VIGORIZE_SERIOUS       90
#define SPELL_VIGORIZE_CRITIC        91
#define SPELL_SOULSHIELD             92
#define SPELL_DESTROY_UNDEAD         93
#define SPELL_SILENCE                94
#define SPELL_FLAMESTRIKE            95
#define SPELL_UNHOLY_WORD            96
#define SPELL_HOLY_WORD              97
#define SPELL_PLANE_SHIFT            98
#define SPELL_DISPEL_MAGIC           99
#define SPELL_MINOR_CREATION        100
#define SPELL_CONCEALMENT           101
#define SPELL_RAY_OF_ENFEEB         102
#define SPELL_LEVITATE              103
#define SPELL_WIZARD_EYE            104
#define SPELL_FIRESHIELD            105
#define SPELL_COLDSHIELD            106
#define SPELL_MINOR_GLOBE           107
#define SPELL_MAJOR_GLOBE           108
#define SPELL_DISINTEGRATE          109
#define SPELL_HARNESS               110
#define SPELL_CHAIN_LIGHTNING       111
#define SPELL_MASS_INVIS            112
#define SPELL_RELOCATE              113
#define SPELL_FEAR                  114
#define SPELL_CIRCLE_OF_LIGHT       115
#define SPELL_DIVINE_BOLT           116
#define SPELL_PRAYER                117
#define SPELL_ELEMENTAL_WARDING     118
#define SPELL_DIVINE_RAY            119
#define SPELL_LESSER_EXORCISM       120
#define SPELL_LESSER_INVOCATION     121
#define SPELL_SPEAK_IN_TONGUES      122
#define SPELL_ENLIGHTENMENT         123
#define SPELL_EXORCISM              124
#define SPELL_GREATER_INVOCATION    125
#define SPELL_WINGS_OF_HEAVEN       126
#define SPELL_BANISH                127
#define SPELL_WORD_OF_COMMAND       128
#define SPELL_DIVINE_ESSENCE        129
#define SPELL_HEAVENS_GATE          130
#define SPELL_DARK_PRESENCE         131
#define SPELL_DEMONSKIN             132
#define SPELL_DARK_FEAST            133
#define SPELL_HELL_BOLT             134
#define SPELL_DISEASE               135
#define SPELL_INSANITY              136
#define SPELL_DEMONIC_ASPECT        137
#define SPELL_HELLFIRE_BRIMSTONE    138
#define SPELL_STYGIAN_ERUPTION      139
#define SPELL_DEMONIC_MUTATION      140
#define SPELL_WINGS_OF_HELL         141
#define SPELL_SANE_MIND             142
#define SPELL_HELLS_GATE            143
#define SPELL_BARKSKIN              144
#define SPELL_NIGHT_VISION          145
#define SPELL_WRITHING_WEEDS        146
#define SPELL_CREATE_SPRING         147
#define SPELL_NOURISHMENT           148
#define SPELL_GAIAS_CLOAK           149
#define SPELL_NATURES_EMBRACE       150
#define SPELL_ENTANGLE              151
#define SPELL_INVIGORATE            152
#define SPELL_WANDERING_WOODS       153
#define SPELL_URBAN_RENEWAL         154
#define SPELL_SUNRAY                155
#define SPELL_ARMOR_OF_GAIA         156
#define SPELL_FIRE_DARTS            157
#define SPELL_MAGIC_TORCH           158
#define SPELL_SMOKE                 159
#define SPELL_MIRAGE                160
#define SPELL_FLAME_BLADE           161
#define SPELL_HEATWAVE              162
#define SPELL_FIRESTORM             163
#define SPELL_MELT                  164
#define SPELL_CIRCLE_OF_FIRE        165
#define SPELL_IMMOLATE              166
#define SPELL_SUPERNOVA             167
#define SPELL_CREMATE               168
#define SPELL_NEGATE_HEAT           169
#define SPELL_COMBUST               170
#define SPELL_ICE_DARTS             171
#define SPELL_ICE_ARMOR             172
#define SPELL_ICE_DAGGER            173
#define SPELL_FREEZING_WIND         174
#define SPELL_FREEZE                175
#define SPELL_WALL_OF_ICE           176
#define SPELL_ICEBALL               177
#define SPELL_FLOOD                 178
#define SPELL_VAPORFORM             179
#define SPELL_NEGATE_COLD           180
#define SPELL_WATERFORM             181
#define SPELL_EXTINGUISH            182
#define SPELL_RAIN                  183
#define SPELL_REDUCE                184
#define SPELL_ENLARGE               185
#define SPELL_IDENTIFY              186
#define SPELL_BONE_ARMOR            187
#define SPELL_SUMMON_CORPSE         188
#define SPELL_SHIFT_CORPSE          189
/* sombody really screwed the pooch and used 190-200 for languages */
/* FUCK!!! --gurlaek 7/5/1999                                      */
#define LANG_BARBARIAN              190
#define LANG_GNOMISH                191
#define LANG_DUERGAR                192
#define LANG_DROW                   193
#define LANG_ORCISH                 194
#define LANG_OGRE                   195
#define LANG_COMMON                 196
#define LANG_ELVEN                  197
#define LANG_DWARVEN                198
#define LANG_TROLLISH               199
#define LANG_HALFLING               200
#define SPELL_FIRE_BREATH           201
#define SPELL_GAS_BREATH            202
#define SPELL_FROST_BREATH          203
#define SPELL_ACID_BREATH           204
#define SPELL_LIGHTNING_BREATH      205


/*  These spells are all variants of vitality */
#define SPELL_LESSER_ENDURANCE      206
#define SPELL_ENDURANCE             207

/* Let's mess with with this.  Vitality has moved.  Otherwise it botches
   the naming scheme. */ 
#define SPELL_VITALITY              208
#define SPELL_GREATER_VITALITY      209
#define SPELL_DRAGONS_HEALTH        210

#define SPELL_REBUKE_UNDEAD         211
#define SPELL_DEGENERATION          212
#define SPELL_SOUL_TAP              213
#define SPELL_NATURES_GUIDANCE      214
#define SPELL_MOONBEAM              215
#define SPELL_PHANTASM              216
#define SPELL_SIMULACRUM            217

/* Insert new spells here, up to MAX_SPELLS */

/* PLAYER SKILLS - Numbered from MAX_SPELLS+1 to MAX_SKILLS */
#define SKILL_BACKSTAB              401 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_BASH                  402 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_HIDE                    403 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_KICK                  404 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_PICK_LOCK             405 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_PUNCH                 406 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_RESCUE                407 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_SNEAK                 408 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_STEAL                 409 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_TRACK                    410 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_DUAL_WIELD            411
#define SKILL_DOUBLE_ATTACK         412
#define SKILL_BERSERK               413
#define SKILL_SPRINGLEAP            414
#define SKILL_MOUNT                    415
#define SKILL_RIDING                    416 
#define SKILL_TAME                    417
#define SKILL_THROATCUT                    418        
#define SKILL_DOORBASH              419
#define SKILL_PARRY                 420
#define SKILL_DODGE                 421
#define SKILL_RIPOST                422
#define SKILL_MEDITATE              423
#define SKILL_QUICK_CHANT           424
#define SKILL_2BACK                 425
#define SKILL_CIRCLE                426
#define SKILL_BODYSLAM                    427
#define SKILL_BIND                    428
#define SKILL_SHAPECHANGE           429
#define SKILL_SWITCH                    430
#define SKILL_DISARM                    431
#define SKILL_DISARM_FUMBLING_WEAP  432
#define SKILL_DISARM_DROPPED_WEAP   433
#define SKILL_GUARD                    434
#define SKILL_BREATHE                    435
#define SKILL_SWEEP                    436
#define SKILL_ROAR                    437
#define SKILL_DOUSE                    438
#define SKILL_AWARE                    439
#define SKILL_INSTANT_KILL          440
#define SKILL_HITALL                441
#define SKILL_HUNT                    442
#define SKILL_BANDAGE               443
#define SKILL_FIRST_AID             444
#define SKILL_VAMP_TOUCH            445
#define SKILL_CHANT                    446
#define SKILL_SCRIBE                447
#define SKILL_SAFEFALL                    448
#define SKILL_BAREHAND                    449
#define SKILL_SUMMON_MOUNT          450
#define SKILL_KNOW_SPELL            451
#define SKILL_SPHERE_GENERIC        452
#define SKILL_SPHERE_FIRE           453
#define SKILL_SPHERE_WATER          454
#define SKILL_SPHERE_EARTH          455
#define SKILL_SPHERE_AIR            456
#define SKILL_SPHERE_HEALING        457
#define SKILL_SPHERE_PROT           458
#define SKILL_SPHERE_ENCHANT        459
#define SKILL_SPHERE_SUMMON         460
#define SKILL_SPHERE_DEATH          461
#define SKILL_SPHERE_DIVIN          462
#define SKILL_BLUDGEONING           463
#define SKILL_PIERCING              464
#define SKILL_SLASHING              465
#define SKILL_2H_BLUDGEONING        466
#define SKILL_2H_PIERCING           467
#define SKILL_2H_SLASHING           468
#define SKILL_MISSILE               469
/* what's this doing here ? */
/* We need a skill define for fire so we can have a damage message in the 
   messages file. */
#define SPELL_ON_FIRE                    470
#define SKILL_LAY_HANDS             471
#define SKILL_EYE_GOUGE             472
#define SKILL_RETREAT               473
#define SKILL_GROUP_RETREAT         474
#define SKILL_CORNER                475
#define SKILL_STEALTH               476
#define SKILL_SHADOW                477
#define SKILL_CONCEAL               478
#define SKILL_PECK                  479
#define SKILL_CLAW                  480
#define SKILL_ELECTRIFY             481

/* IF THIS GETS PASSED 499, update char_data for skill timers! */

/* Bardic songs start at 551 and go to 600 */


/* Monk chants go from 601 to 650 */
#define CHANT_REGENERATION            601
#define CHANT_BATTLE_HYMN            602
#define CHANT_WAR_CRY                    603
#define CHANT_PEACE                 604
#define CHANT_SHADOWS_SORROW_SONG   605
#define CHANT_IVORY_SYMPHONY        606
#define CHANT_ARIA_OF_DISSONANCE    607
#define CHANT_SONATA_OF_MALAISE     608
#define CHANT_APOCALYPTIC_ANTHEM    609
#define CHANT_SEED_OF_DESTRUCTION   610


/* New skills may be added here up to MAX_ABILITIES (650) */
/* Don't add spells/skills/songs/chants that will be saved past 650.  The 
 * pfile won't support it.  However, you can add "npc" or "object" spells,
 * meaning that they may only be used in the game, and cannot be set on
 * players.
 */

#define TOP_SPELL_DEFINE             750
/* NEW NPC/OBJECT SPELLS can be inserted here up to 750 */


/* WEAPON ATTACK TYPES */

#define TYPE_HIT                     751
#define TYPE_STING                   752
#define TYPE_WHIP                    753
#define TYPE_SLASH                   754
#define TYPE_BITE                    755
#define TYPE_BLUDGEON                756
#define TYPE_CRUSH                   757
#define TYPE_POUND                   758
#define TYPE_CLAW                    759
#define TYPE_MAUL                    760
#define TYPE_THRASH                  761
#define TYPE_PIERCE                  762
#define TYPE_BLAST                     763
#define TYPE_PUNCH                     764
#define TYPE_STAB                     765

/* new attack types can be added here - up to TYPE_SUFFERING */
#define TYPE_SUFFERING                     850
d124 1
a124 1
#define TARGET_IN_INV          4
d132 3
a134 3
 * TAR_SELF_ONLY, TAR_NOT_SELF, TAR_NIGHT_ONLY, TAR_DAY_ONLY,  
 * and TAR_OUTDOORS are only checks.  They must be used with one of the 
 * other target values to make the cast command actually look for a 
a173 34
struct spell_info_type {
  byte min_position;          /* Position for caster         */
  int mana_min;                /* Min amount of mana used by a spell (highest lev) */
  int mana_max;                /* Max amount of mana used by a spell (lowest lev) */
  int mana_change;             /* Change in mana used by spell from lev to lev */
  int min_level[NUM_CLASSES];
  int lowest_level;
  bool humanoid;               /* Generally only available to humanoids */
  int routines;
  byte violent;
  int targets;                 /* See below for use with TAR_XXX  */
  int min_circle[NUM_CLASSES];
  int lowest_circle;
  int mem_time;
  int cast_time;
  int damage_type;
  int sphere;
  int pages;                   /* base number of pages for spell in spellbook */
  int quest;                   /* weather the spell is a quest spell or not   */
  char *wearoff;
};


#define SINFO spell_info[spellnum]

/* Attacktypes with grammar */

struct attack_hit_type {
   char        *singular;
   char        *plural;
};

void update_skills(struct char_data *ch);

d251 3
a253 3
ASPELL(spell_summon_corpse); 
ASPELL(spell_shift_corpse); 
ASPELL(spell_remove_curse); 
a263 8
/* basic magic calling functions */

int find_talent_num(char *name, int restrict);
int find_skill_num(char *name);
int find_spell_num(char *name);
int find_chant_num(char *name);
int find_song_num(char *name);

d270 1
a270 1
void perform_mag_groups(int skill, struct char_data *ch, struct char_data *tch, 
a307 2
void init_spell_levels(void);
char *skill_name(int num);
a308 1
extern struct spell_info_type spell_info[];
d315 3
d582 1
a582 1
 * 
d587 1
a587 1
 * 
@


1.69
log
@Changed the spell_info struct to store lowest_level and lowest_circle
data for each spell, thus making it unnecessary to calculate the
minimum spell level for major globe over and over.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.68 2008/01/12 23:13:20 myc Exp myc $
d566 1
a566 1
  byte min_position;        /* Position for caster         */
d569 1
a569 1
  int mana_change;        /* Change in mana used by spell from lev to lev */
d572 1
d575 1
a575 1
  int targets;          /* See below for use with TAR_XXX  */
d582 2
a583 2
  int pages;            /* base number of pages for spell in spellbook */ 
  int quest;            /* weather the spell is a quest spell or not   */
d751 5
@


1.68
log
@Declaring spells_of_circle in header file.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.67 2008/01/07 10:38:56 jps Exp myc $
d571 1
d576 1
d750 3
@


1.67
log
@Rename project to phantasm.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.66 2008/01/06 23:50:47 jps Exp jps $
d742 1
d748 3
@


1.66
log
@Added spells project and simulacrum, and MOB2_ILLUSORY flag.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.65 2008/01/06 20:38:25 jps Exp jps $
d365 1
a365 1
#define SPELL_PROJECT               216
d747 3
@


1.65
log
@Add function for ventriloquate.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.64 2008/01/05 21:54:43 jps Exp jps $
d24 14
a37 14
#define SPELL	1
#define SKILL	2
#define CHANT	3
#define SONG	4

#define DEFAULT_STAFF_LVL	12
#define DEFAULT_WAND_LVL	12

#define CAST_UNDEFINED	-1
#define CAST_SPELL	0
#define CAST_POTION	1
#define CAST_WAND	2
#define CAST_STAFF	3
#define CAST_SCROLL	4
d39 2
a40 2
#define CAST_CHANT	6
#define CAST_SINGN	7
d45 13
a57 13
#define MAG_DAMAGE	(1 << 0)
#define MAG_AFFECTS	(1 << 1)
#define MAG_UNAFFECTS	(1 << 2)
#define MAG_POINTS	(1 << 3)
#define MAG_ALTER_OBJS	(1 << 4)
#define MAG_GROUPS	(1 << 5)
#define MAG_MASSES	(1 << 6)
#define MAG_AREAS	(1 << 7)
#define MAG_SUMMONS	(1 << 8)
#define MAG_CREATIONS	(1 << 9)
#define MAG_MANUAL	(1 << 10)
#define MAG_ROOM	(1 << 11)
#define MAG_BULK_OBJS	(1 << 12)
d63 9
a71 9
#define GENERIC_DAMAGE		0
#define FIRE_DAMAGE		1
#define COLD_DAMAGE		2
#define EARTH_DAMAGE		3
#define AIR_DAMAGE		4
#define HEALING_DAMAGE		5
#define SHOCK_DAMAGE		6
#define DEATH_DAMAGE		7
#define ALIGN_DAMAGE		8
d73 1
a73 1
#define MAX_DAMAGE_TYPES	9
d119 2
a120 2
#define CAST_SPEEDJ       10
#define CAST_SPEEDK       11
d126 3
a128 3
#define MAX_SKILLS	550
#define MAX_SONGS	600
#define MAX_CHANTS	650
d185 66
a250 66
#define SPELL_ANIMATE_DEAD	     45 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_DISPEL_GOOD	     46 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_GROUP_ARMOR	     47 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_GROUP_HEAL	     48 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_GROUP_RECALL	     49 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_INFRAVISION	     50 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_WATERWALK		     51 /* Reserved Skill[] DO NOT CHANGE */
#define SPELL_STONE_SKIN         52
#define SPELL_FULL_HEAL          53
#define SPELL_FULL_HARM          54
#define SPELL_WALL_OF_FOG        55
#define SPELL_WALL_OF_STONE      56
#define SPELL_FLY                57
#define SPELL_SUMMON_DRACOLICH   58
#define SPELL_SUMMON_ELEMENTAL   59
#define SPELL_SUMMON_DEMON       60
#define SPELL_SUMMON_GREATER_DEMON  61
#define SPELL_DIMENSION_DOOR        62
#define SPELL_CREEPING_DOOM         63
#define SPELL_DOOM                  64
#define SPELL_METEORSWARM           65
#define SPELL_BIGBYS_CLENCHED_FIST  66
#define SPELL_FARSEE				67
#define SPELL_HASTE                 68
#define SPELL_BLUR                  69
#define SPELL_GREATER_ENDURANCE     70
#define SPELL_MOONWELL              71
#define SPELL_INN_STRENGTH          72
#define SPELL_DARKNESS              73
#define SPELL_ILLUMINATION          74
#define SPELL_COMPREHEND_LANG             75
#define SPELL_CONE_OF_COLD          76
#define SPELL_ICE_STORM             77
#define SPELL_ICE_SHARDS            78
#define SPELL_MAJOR_PARALYSIS              79
#define SPELL_VAMPIRIC_BREATH       80
#define SPELL_RESURRECT 	    81
#define SPELL_INCENDIARY_NEBULA     82
#define SPELL_MINOR_PARALYSIS       83
#define SPELL_CAUSE_LIGHT	    84
#define SPELL_CAUSE_SERIOUS         85
#define SPELL_CAUSE_CRITIC          86
#define SPELL_PRESERVE		    87
#define SPELL_CURE_SERIOUS	    88
#define SPELL_VIGORIZE_LIGHT        89
#define SPELL_VIGORIZE_SERIOUS      90
#define SPELL_VIGORIZE_CRITIC       91
#define SPELL_SOULSHIELD	    92
#define SPELL_DESTROY_UNDEAD	    93
#define SPELL_SILENCE		    94
#define SPELL_FLAMESTRIKE	    95
#define SPELL_UNHOLY_WORD	    96
#define SPELL_HOLY_WORD		    97
#define SPELL_PLANE_SHIFT	    98
#define SPELL_DISPEL_MAGIC	    99
#define SPELL_MINOR_CREATION	    100
#define SPELL_CONCEALMENT	    101
#define SPELL_RAY_OF_ENFEEB	    102
#define SPELL_LEVITATE		    103
#define SPELL_WIZARD_EYE	    104
#define SPELL_FIRESHIELD	    105
#define SPELL_COLDSHIELD	    106
#define SPELL_MINOR_GLOBE	    107
#define SPELL_MAJOR_GLOBE	    108
#define SPELL_DISINTEGRATE	    109
#define SPELL_HARNESS		    110
d252 8
a259 8
#define SPELL_MASS_INVIS	    112
#define SPELL_RELOCATE		    113
#define SPELL_FEAR		    114
#define SPELL_CIRCLE_OF_LIGHT	    115
#define SPELL_DIVINE_BOLT	    116
#define SPELL_PRAYER		    117
#define SPELL_ELEMENTAL_WARDING	    118
#define SPELL_DIVINE_RAY	    119
d262 3
a264 3
#define SPELL_SPEAK_IN_TONGUES	    122
#define SPELL_ENLIGHTENMENT	    123
#define SPELL_EXORCISM		    124
d266 12
a277 12
#define SPELL_WINGS_OF_HEAVEN	    126
#define SPELL_BANISH		    127
#define SPELL_WORD_OF_COMMAND	    128
#define SPELL_DIVINE_ESSENCE	    129
#define SPELL_HEAVENS_GATE	    130
#define SPELL_DARK_PRESENCE	    131
#define SPELL_DEMONSKIN		    132
#define SPELL_DARK_FEAST	    133
#define SPELL_HELL_BOLT		    134
#define SPELL_DISEASE		    135
#define SPELL_INSANITY		    136
#define SPELL_DEMONIC_ASPECT	    137
d279 45
a323 45
#define SPELL_STYGIAN_ERUPTION       139
#define SPELL_DEMONIC_MUTATION	    140
#define SPELL_WINGS_OF_HELL	    141
#define SPELL_SANE_MIND		    142
#define SPELL_HELLS_GATE	    143
#define SPELL_BARKSKIN		    144
#define SPELL_NIGHT_VISION	    145
#define SPELL_WRITHING_WEEDS	    146
#define SPELL_CREATE_SPRING	    147
#define SPELL_NOURISHMENT	    148
#define SPELL_GAIAS_CLOAK	    149
#define SPELL_NATURES_EMBRACE	    150
#define SPELL_ENTANGLE		    151
#define SPELL_INVIGORATE	    152
#define SPELL_WANDERING_WOODS	    153
#define SPELL_URBAN_RENEWAL	    154
#define SPELL_SUNRAY		    155
#define SPELL_ARMOR_OF_GAIA	    156
#define SPELL_FIRE_DARTS	    157
#define SPELL_MAGIC_TORCH	    158
#define SPELL_SMOKE		    159
#define SPELL_MIRAGE		    160
#define SPELL_FLAME_BLADE	    161
#define SPELL_HEATWAVE		    162
#define SPELL_FIRESTORM		    163
#define SPELL_MELT		    164
#define SPELL_CIRCLE_OF_FIRE	    165
#define SPELL_IMMOLATE		    166
#define SPELL_SUPERNOVA		    167
#define SPELL_CREMATE		    168
#define SPELL_NEGATE_HEAT	    169
#define SPELL_COMBUST		    170
#define SPELL_ICE_DARTS 	    171
#define SPELL_ICE_ARMOR		    172
#define SPELL_ICE_DAGGER	    173
#define SPELL_FREEZING_WIND	    174
#define SPELL_FREEZE		    175
#define SPELL_WALL_OF_ICE	    176
#define SPELL_ICEBALL		    177
#define SPELL_FLOOD		    178
#define SPELL_VAPORFORM		    179
#define SPELL_NEGATE_COLD	    180
#define SPELL_WATERFORM		    181
#define SPELL_EXTINGUISH	    182
#define SPELL_RAIN		    183
d365 2
d373 1
a373 1
#define SKILL_HIDE		    403 /* Reserved Skill[] DO NOT CHANGE */
d380 1
a380 1
#define SKILL_TRACK		    410 /* Reserved Skill[] DO NOT CHANGE */
d385 4
a388 4
#define SKILL_MOUNT		    415
#define SKILL_RIDING		    416 
#define SKILL_TAME		    417
#define SKILL_THROATCUT	            418	
d397 2
a398 2
#define SKILL_BODYSLAM		    427
#define SKILL_BIND	            428
d400 2
a401 2
#define SKILL_SWITCH		    430
#define SKILL_DISARM		    431
d404 6
a409 6
#define SKILL_GUARD		    434
#define SKILL_BREATHE		    435
#define SKILL_SWEEP		    436
#define SKILL_ROAR		    437
#define SKILL_DOUSE		    438
#define SKILL_AWARE		    439
d412 1
a412 1
#define SKILL_HUNT		    442
d416 1
a416 1
#define SKILL_CHANT		    446
d418 2
a419 2
#define SKILL_SAFEFALL		    448
#define SKILL_BAREHAND		    449
d443 1
a443 1
#define SPELL_ON_FIRE		    470
d462 3
a464 3
#define CHANT_REGENERATION	    601
#define CHANT_BATTLE_HYMN	    602
#define CHANT_WAR_CRY		    603
d481 1
a481 1
#define TOP_SPELL_DEFINE	     750
d499 3
a501 3
#define TYPE_BLAST		     763
#define TYPE_PUNCH		     764
#define TYPE_STAB		     765
d504 1
a504 1
#define TYPE_SUFFERING		     850
d515 1
a515 1
#define TARGET_IN_INV	  4
d566 4
a569 4
  byte min_position;	/* Position for caster	 */
  int mana_min;	        /* Min amount of mana used by a spell (highest lev) */
  int mana_max;	        /* Max amount of mana used by a spell (lowest lev) */
  int mana_change;	/* Change in mana used by spell from lev to lev */
d590 2
a591 2
   char	*singular;
   char	*plural;
d607 1
a607 1
		  struct char_data *victim, struct obj_data *obj, int savetype)
d609 1
a609 1
#define MANUAL_SPELL(spellname)	imp_skill |= spellname(skill, caster, cvict, ovict, savetype);
d709 2
a710 2
int mag_summons(int skill, struct char_data *ch, struct obj_data *obj,
 int spellnum, int savetype);
d725 1
a725 1
int	call_magic(struct char_data *caster, struct char_data *cvict,
d730 2
a731 2
void	mag_objectmagic(struct char_data *ch, struct obj_data *obj,
			char *argument);
d733 1
a733 1
int	cast_spell(struct char_data *ch, struct char_data *tch,
d747 3
@


1.64
log
@Saving throw defs moved to chars.h.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.63 2008/01/05 05:42:09 jps Exp jps $
d679 1
d745 3
@


1.63
log
@Explicitly exporting update_skills() and spell_info[].
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.62 2008/01/03 12:44:03 jps Exp jps $
a504 7

#define SAVING_PARA   0
#define SAVING_ROD    1
#define SAVING_PETRI  2
#define SAVING_BREATH 3
#define SAVING_SPELL  4

d744 3
@


1.62
log
@Created an array of structs for class information. Renamed CLASS_MAGIC_USER
to CLASS_SORCERER.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.61 2008/01/02 07:11:58 jps Exp jps $
d16 3
d599 2
d745 4
d751 4
@


1.61
log
@Using class.h.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.60 2008/01/02 01:26:32 jps Exp jps $
a17 3
#define MEMORIZE      0
#define PRAY          1

d742 3
@


1.60
log
@Added defines for the sphere-related skills.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.59 2007/12/31 02:00:57 jps Exp jps $
d16 2
d745 3
@


1.59
log
@Made the general term for spells, skills, chants, and songs 'talent'.
Fixed mskillset to handle all talents.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.58 2007/11/25 00:04:59 jps Exp jps $
d135 4
d743 4
@


1.58
log
@Spell targets will keep close track of whoever's casting a spell
at them.  This allows spells to be safely aborted if the target
is removed from the game before the spell is completed.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.57 2007/10/13 20:15:09 myc Exp jps $
d19 3
d684 1
a684 1
int id_skill_spell(char *name, int restrict);
d739 5
@


1.57
log
@Added functions to find spell/skill/chant nums to spells.h
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.56 2007/10/13 05:07:24 myc Exp myc $
d590 8
d611 2
d736 3
@


1.56
log
@Added new monk chants.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.55 2007/10/11 20:14:48 myc Exp myc $
d671 1
d673 3
d726 3
@


1.55
log
@Changed skill defines to support chants and songs as skills, but
slightly distinguished from spells and skills.  TOP_SKILL is the
old MAX_SKILLS.  Chants and songs now each have a block of 50
defines above the new MAX_SKILLS (550).  This is important
because MAX_SKILLS (now TOP_SKILL) is used in the pfile.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.54 2007/10/02 02:52:27 myc Exp myc $
d51 2
a52 2
#define MAG_ROOM     (1 << 11)

d455 6
a625 1
ASPELL(spell_mass_invis);
d666 2
d684 1
a684 1
void mag_masses(int skill, struct char_data *ch, int spellnum, int savetype);
d700 2
d722 7
@


1.54
log
@Energy drain is now a manual spell.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.53 2007/09/15 15:36:48 myc Exp myc $
d19 5
d34 2
d121 3
d129 2
d444 1
a445 3
#define SONG_REGENERATION	    600
#define SONG_BATTLE_HYMN	    601
#define SONG_WAR_CRY		    602
d447 16
a462 1
/* New skills may be added here up to MAX_SKILLS (650) */
d465 1
a465 1
/* NEW NPC/OBJECT SPELLS can be inserted here up to 299 */
d571 1
a574 6
#define SPELL_TYPE_SPELL   0
#define SPELL_TYPE_POTION  1
#define SPELL_TYPE_WAND    2
#define SPELL_TYPE_STAFF   3
#define SPELL_TYPE_SCROLL  4

d660 1
d713 3
@


1.53
log
@Natures embrace is now in mag_affects instead of a manual spell.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.52 2007/09/11 16:34:24 myc Exp myc $
d639 1
d692 3
@


1.52
log
@Added peck, claw, and electrify skills for use by druid shapechanges.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.51 2007/09/09 01:20:14 jps Exp myc $
a616 1
ASPELL(spell_natures_embrace);
d691 3
@


1.51
log
@The result of casting a spell is no longer just TRUE or FALSE,
but two possible bits combined: charge and/or improve. If
CAST_RESULT_CHARGE is returned, the spell was used and the caster
will be charged (have the spell erased from memory).  If
CAST_RESULT_IMPROVE is returned, the caster may improve in that
sphere of magic.
At the same time, casters will now correctly be charged for
spells that are cast on objects.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.50 2007/09/07 01:37:34 jps Exp jps $
d429 3
d639 1
d692 10
@


1.50
log
@Add shorter casting times for attack spells.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.49 2007/09/04 06:49:19 myc Exp jps $
d30 3
d563 1
a563 1
bool	spellname(int skill, struct char_data *ch, \
d566 1
a566 1
#define MANUAL_SPELL(spellname)	imp_skill += spellname(skill, caster, cvict, ovict, savetype);
d641 1
a641 1
bool mag_damage(int skill, struct char_data *ch, struct char_data *victim,
d644 1
a644 1
bool mag_affects(int skill, struct char_data *ch, struct char_data *victim,
d650 1
a650 1
bool mag_groups(int skill, struct char_data *ch, int spellnum, int savetype);
d654 1
a654 1
bool mag_areas(int skill, struct char_data *ch, int spellnum, int savetype);
d656 1
a656 1
bool mag_summons(int skill, struct char_data *ch, struct obj_data *obj,
d659 1
a659 1
bool mag_points(int skill, struct char_data *ch, struct char_data *victim,
d662 1
a662 1
bool mag_unaffects(int skill, struct char_data *ch, struct char_data *victim,
d665 1
a665 1
bool mag_alter_objs(int skill, struct char_data *ch, struct obj_data *obj,
d668 1
a668 1
bool mag_creations(int skill, struct char_data *ch, int spellnum);
d673 1
a673 1
bool mag_room(int skill, struct char_data * ch, int spellnum);
d688 3
@


1.49
log
@Added new TAR_OUTDOORS, TAR_NIGHT_ONLY, and TAR_DAY_ONLY checks for
spells to limit when and where they may be cast (like TAR_SELF_ONLY or
TAR_NOT_SELF).  This replaces checks within spells, and the checks are
made before the caster's spell memory is charged.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.48 2007/08/30 08:51:25 jps Exp myc $
d93 15
a593 1
ASPELL(spell_disintegrate);
d685 6
@


1.48
log
@Add define for spell_info.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.47 2007/08/27 21:18:00 myc Exp jps $
d466 42
a507 12
#define TAR_IGNORE        1
#define TAR_CHAR_ROOM     2
#define TAR_CHAR_WORLD    4
#define TAR_FIGHT_SELF    8
#define TAR_FIGHT_VICT   16
#define TAR_SELF_ONLY    32 /* Only a check, use with i.e. TAR_CHAR_ROOM */
#define TAR_NOT_SELF     64 /* Only a check, use with i.e. TAR_CHAR_ROOM */
#define TAR_OBJ_INV     128
#define TAR_OBJ_ROOM    256
#define TAR_OBJ_WORLD   512
#define TAR_OBJ_EQUIP  1024
#define TAR_STRING     2048
a527 15
/* Possible Targets:

   bit 0 : IGNORE TARGET
   bit 1 : PC/NPC in room
   bit 2 : PC/NPC in world
   bit 3 : Object held
   bit 4 : Object in inventory
   bit 5 : Object in room
   bit 6 : Object in world
   bit 7 : If fighting, and no argument, select tar_char as self
   bit 8 : If fighting, and no argument, select tar_char as victim (fighting)
   bit 9 : If no argument, select self, if argument check that it IS self.

*/

d671 3
@


1.47
log
@You can now queue up commands while casting as well as abort midcast.
Casting commands such as look and abort are caught and interpreted
before the input is normally queued up by the game loop.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.46 2007/08/14 22:43:07 myc Exp myc $
d519 1
d656 5
@


1.46
log
@Adding conceal, corner, shadow, and stealth skills.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.45 2007/08/05 20:21:51 myc Exp myc $
d539 2
a540 1
      REMOVE_BIT(PLR_FLAGS(ch), PLR_CASTING);
d655 3
@


1.45
log
@Added retreat and group retreat skills.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.44 2007/08/02 04:19:04 jps Exp myc $
d400 2
d407 4
d654 3
@


1.44
log
@Added "moonbeam" spell for Druids.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.43 2007/08/02 00:23:53 myc Exp jps $
d403 2
d648 3
@


1.43
log
@Standardized magic check-PK function.  Cut out a LOT of unnecessary magic
code and cleaned up the whole system in general.  Magic casts are now
guaranteed to use sphere skills rather than level.  Almost all magic
functions like mag_damage or even manual spells return a boolean now:
TRUE if the cast deserves a skill improvement, FALSE if it doesn't.
This return value is ignored for object magic (wands, etc.).
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.42 2007/07/31 07:39:04 jps Exp myc $
d325 1
d593 1
d646 8
@


1.42
log
@Added macros IS_SKILL, IS_SPELL, and IS_LANGUAGE for classifying
skill numbers.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.41 2007/07/04 02:21:58 myc Exp jps $
d520 1
a520 1
void	spellname(int level, struct char_data *ch, \
d523 1
a523 1
#define MANUAL_SPELL(spellname)	spellname(level, caster, cvict, ovict, savetype);
a547 1
ASPELL(spell_incendiary_nebula);
d597 1
a597 1
void mag_damage(int level, struct char_data *ch, struct char_data *victim,
d600 1
a600 1
void mag_affects(int level, struct char_data *ch, struct char_data *victim,
d603 1
a603 1
void mag_group_switch(int level, struct char_data *ch, struct char_data *tch, 
d606 1
a606 1
void mag_groups(int level, struct char_data *ch, int spellnum, int savetype);
d608 1
a608 1
void mag_masses(int level, struct char_data *ch, int spellnum, int savetype);
d610 1
a610 1
void mag_areas(int level, struct char_data *ch, int spellnum, int savetype);
d612 1
a612 1
void mag_summons(int level, struct char_data *ch, struct obj_data *obj,
d615 1
a615 1
void mag_points(int level, struct char_data *ch, struct char_data *victim,
d618 1
a618 1
void mag_unaffects(int level, struct char_data *ch, struct char_data *victim,
d621 1
a621 1
void mag_alter_objs(int level, struct char_data *ch, struct obj_data *obj,
d624 1
a624 1
void mag_creations(int level, struct char_data *ch, int spellnum);
d627 1
a627 1
  struct obj_data *ovict, int spellnum, int level, int casttype);
d629 1
a629 1
void mag_room(int level, struct char_data * ch, int spellnum);
d644 4
@


1.41
log
@Renamed douse spell to extinguish.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.40 2007/06/16 00:15:49 myc Exp myc $
d93 8
a303 2
#define MAX_LANGUAGE                200
#define MIN_LANGUAGE                190
a326 1
#define MAX_SPELLS		    400
d645 3
@


1.40
log
@Three spells for necromancers: soul tap, rebuke undead,
and degeneration.  One spell for rangers: natures guidance.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.39 2007/05/11 21:03:12 myc Exp myc $
d275 1
a275 1
#define SPELL_DOUSE		    182
d640 4
@


1.39
log
@New rogue skill, eye gouge, allows rogues to gouge out eyes.  A very
complicated skill.  :P  Fixed cure blind's logic, and made it support
eye gouge too.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.38 2007/05/11 20:13:28 myc Exp myc $
d315 5
d587 1
d640 5
@


1.38
log
@Vaporform is a new circle 13 spell for cryomancers.  It significantly
increases the caster's chance of dodging a hit.  It is a quest spell.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.37 2007/04/19 00:53:54 jps Exp myc $
d391 1
d634 4
@


1.37
log
@Create macros for stopping spellcasting.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.36 2007/04/17 23:38:03 myc Exp jps $
d272 1
a272 1
#define SPELL_GREATER_WATERWALK	    179
a575 1
ASPELL(spell_greater_waterwalk);
d633 3
@


1.36
log
@Introducing the new improved color spray!  It's now an area spell that
causes various effects based on caster skill.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.35 2007/02/14 03:54:53 myc Exp myc $
d514 7
d634 4
@


1.35
log
@Replaced firewalk and greater firewalk with combust and cremate.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.34 2006/11/18 21:04:29 jps Exp myc $
d574 1
d627 3
@


1.34
log
@Make casting items use the same targeting code as regular spellcasting.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.33 2006/11/18 04:26:32 jps Exp jps $
d261 1
a261 1
#define SPELL_GREATER_FIREWALK	    168
d263 1
a263 1
#define SPELL_FIREWALK		    170
a561 1
ASPELL(spell_greater_firewalk);
a564 1
ASPELL(spell_firewalk);
d626 3
@


1.33
log
@Renamed continual light spell to illumination, and it only works on
LIGHT items (still rooms too).
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.32 2006/11/08 07:55:17 jps Exp jps $
d435 1
a435 1
#define TARGET_NULL	  0
d441 1
a441 1
#define TARGET_SELF	  6
d443 1
d457 1
d628 4
@


1.32
log
@Change verbal instances of "breath" to "breathe"
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.31 2003/09/02 03:07:14 jjl Exp $
d167 1
a167 1
#define SPELL_CONTINUAL_LIGHT       74
d562 1
a562 1
ASPELL(spell_continual_light);
d626 3
@


1.31
log
@Fixed On Fire / Lay Hands, which both tried to claim skill ID 470
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.30 2003/06/25 02:21:03 jjl Exp $
d353 1
a353 1
#define SKILL_BREATH		    435
d626 3
@


1.30
log
@Revised lay hands to not suck.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.29 2003/04/16 02:00:22 jjl Exp $
a387 4
#define SKILL_LAY_HANDS              470

/* IF THIS GETS PASSED 499, update char_data for skill timers! */

d390 2
a391 1

d626 3
@


1.29
log
@Added skill timers for Zzur.  They don't save to file, so they were a
quickie.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.28 2002/12/19 07:42:02 rls Exp $
a314 1

d388 1
a388 1

d629 4
@


1.28
log
@define for spell_remove_curse
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.27 2002/10/14 02:16:08 jjl Exp $
d389 4
d630 3
@


1.27
log
@An update to turn vitality into a set of 6 spells, lesser endurance,
endurance, greater endurance, vitality, greater vitality, and dragon's
health.  Greater endurance is what vitality was.  The rest are scaled
appropriately.    The higher end may need scaled down, or may not.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.26 2002/09/15 04:17:02 jjl Exp $
d573 1
d626 6
@


1.26
log
@D'oh.  Mistyped the headers. . .  Fixed that.
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.24 2002/09/13 02:32:10 jjl Exp $
d163 1
a163 1
#define SPELL_VITALITY              70
d303 13
d625 3
@


1.25
log
@Added summon corpse and shift corpse - jjl
@
text
@d558 2
a559 2
ASPELL(summon_corpse); 
ASPELL(shift_corpse); 
@


1.24
log
@Updated header comments
@
text
@d2 1
a2 1
 * $Id: spells.h,v 1.23 2002/07/16 23:25:17 rls Exp $
d281 2
d558 2
d612 3
@


1.23
log
@added in necro spell, bone armor
@
text
@d1 3
a3 1
// $Id: spells.h,v 1.22 2000/11/25 02:33:15 rsd Exp $
d606 106
a711 101
// $Log: spells.h,v $
// Revision 1.22  2000/11/25 02:33:15  rsd
// Altered comment header and added back rlog messages
// from prior to the addition of the $log$ string.
//
// Revision 1.21  2000/03/18 06:20:12  rsd
// removed the SPELL_SPHERE references since they essentially
// do the same thing as SKILL_SPHERE_X and it seemed as though
// it was a nightmare to cross use them. spell parser.c was
// way changed due to this, check it out.
//
// Revision 1.20  1999/11/23 15:48:23  jimmy
// Fixed the slashing weapon skill.  I had it erroneously as stabbing. Doh.
// Reinstated dual wield.
// Allowed mobs/players to pick up items while fighting.
// Fixed a bug in the damage message that wrongfully indicated a miss
// due to a rounding error in the math.
// This was all done in order to facilitate the chance to sling your
// weapon in combat.  Dex and proficiency checks are now made on any missed
// attact and a failure of both causes the weapon to be slung.
//
// Revision 1.18  1999/11/17 20:42:17  jimmy
// Added sphere of divination, and sphere skills.
//
// Revision 1.16  1999/09/05 07:00:39  jimmy
// Added RCS Log and Id strings to each source file
//
// Revision 1.15  1999/08/29 07:06:04  jimmy
// Many many small but ver significant bug fixes found using insure.  The
// code now compiles cleanly and boots cleanly with insure.  The most significant
// changes were moving all the BREATH's to within normal spell range, and
// fixing the way socials were allocated.  Too many small fixes to list them
// all. --gurlaek (now for the runtime debugging :( )
//
// Revision 1.14  1999/07/22 17:43:59  jimmy
// Moved the identify spell back into the normal castable spells range.
// moved all the breath spells up by one to compensate for moveing identify.
//
// Revision 1.13  1999/07/20 19:45:51  jimmy
// This is the spanky New Spell recognition code.
// This code allows mobs/players that have the KNOW_SPELL skill
// to make a skill check to guess the spell.  A good roll will show both
// the spell and the target.  A bad roll will show the spell garbled and
// then an INT check for the target.  If a really bad roll is made, the spell
// will be replaced by an incorrect one.  the heart of this system is
// start_chant(), end_chant, and bad_guess().
// --gurlaek 7/20/1999
//
// Revision 1.12  1999/07/15 03:15:05  mud
// change cast speed defines to make more sense and have a
// wider range of time.. see CAST_SPEEDx
//
// Revision 1.11  jimmy
// This is a Mass check-in of the new skill/spell/language assignment system.
// This New system combines the assignment of skill/spell/language for
// both mobs and PCs.  LOts of code was touched and many errors were fixed.
// MCLASS_VOID was moved from 13 to -1 to match CLASS_UNDEFINED for PC's.
// MObs now get random skill/spell/language levels baseed on their race/class/level
// that exactly align with PC's.  PC's no longer have to rent to use skills gained
// by leveling or when first creating a char.  Languages no longer reset to defaults
// when a PC levels.  Discovered that languages have been defined right in the middle
// of the spell area.  This needs to be fixed.  A conversion util neeDs to be run on
// the mob files to compensate for the 13 to -1 class change.
// --gurlaek 7/6/1999
//
// Revision 1.10  1999/05/26 02:00:04  mud
// added #define SKILL_SUMMON_MOUNT          450
//
// Revision 1.9  1999/04/18 20:12:54  dce
// Magic missile works like Fire Dart, Ice Dart works.
//
// Revision 1.8  1999/03/24 23:43:16  jimmy
// Working on quest spells.  Still in progress.  HOwever, spell_info[] array now has a flag
// quest.  If it's true then it's considerd a quest spell.  Also, allowed pyro/cryo's to
// learn from any sorcerer type teacher
// fingon
//
// Revision 1.7  1999/03/10 00:03:37  dce
// Monk semantics for dodge/parry/ripost/attack
//
// Revision 1.6  1999/03/08 20:22:35  dce
// Adds the skill safefall for monks.
//
// Revision 1.5  1999/03/07 05:01:09  dce
// Chant finishes and wearoff messages.
//
// Revision 1.4  1999/03/03 20:11:02  jimmy
// Many enhancements to scribe and spellbooks.  Lots of checks added.  Scribe is now a skill.
// Spellbooks now have to be held to scribe as well as a quill in the other hand.
// 
// -fingon
//
// Revision 1.3  1999/02/26 22:30:30  dce
// Monk additions/fixes
// 
// Revision 1.2  1999/02/13 19:37:12  dce
// Rewrote Continual Light and Darkness to be manual spells to meet our needs.
//
// Revision 1.1  1999/01/29 01:23:32  mud
// Initial revision
//
@


1.22
log
@Altered comment header and added back rlog messages
from prior to the addition of the $log$ string.
@
text
@d1 1
a1 1
// $Id: spells.h,v 1.21 2000/03/18 06:20:12 rsd Exp $
d278 1
d605 4
@


1.21
log
@removed the SPELL_SPHERE references since they essentially
do the same thing as SKILL_SPHERE_X and it seemed as though
it was a nightmare to cross use them. spell parser.c was
way changed due to this, check it out.
@
text
@d1 12
a12 10
// $Id: spells.h,v 1.20 1999/11/23 15:48:23 jimmy Exp $
/* ************************************************************************
*   File: spells.h                                      Part of CircleMUD *
*  Usage: header file: constants and fn prototypes for spell system       *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */
a597 1

d602 1
d604 6
d626 74
a699 7







@


1.20
log
@Fixed the slashing weapon skill.  I had it erroneously as stabbing. Doh.
Reinstated dual wield.
Allowed mobs/players to pick up items while fighting.
Fixed a bug in the damage message that wrongfully indicated a miss
due to a rounding error in the math.
This was all done in order to facilitate the chance to sling your
weapon in combat.  Dex and proficiency checks are now made on any missed
attact and a failure of both causes the weapon to be slung.
@
text
@d1 1
a1 1
// $Id: spells.h,v 1.18 1999/11/17 20:42:17 jimmy Exp $
a42 12
#define SPELL_SPHERE_GENERIC	0
#define SPELL_SPHERE_FIRE	1
#define SPELL_SPHERE_WATER	2
#define SPELL_SPHERE_EARTH	3
#define SPELL_SPHERE_AIR	4
#define SPELL_SPHERE_HEALING	5
#define SPELL_SPHERE_PROT	6
#define SPELL_SPHERE_ENCHANT	7
#define SPELL_SPHERE_SUMMON	8
#define SPELL_SPHERE_DEATH	9
#define SPELL_SPHERE_DIVIN      10
#define MAX_SPELL_SPHERES	11
d602 10
@


1.19
log
@Added weapon proficiency skills for stabbing, piercing, bludgeoning and two handed
of each of these, as well as missile weapons.  These were given to all classes
at first level execpt missile weapons which was commented out for now.
@
text
@d376 1
a376 1
#define SKILL_STABBING              465
d379 1
a379 1
#define SKILL_2H_STABBING           468
@


1.18
log
@Added sphere of divination, and sphere skills.
@
text
@d1 1
a1 1
// $Id: spells.h,v 1.16 1999/09/05 07:00:39 jimmy Exp $
d374 8
a381 2


d614 3
@


1.17
log
@Added SPHERE_DIVIN (divination) spell sphere.  Changed spheres of spells
to fit with future implementation of the spheres as skills.
@
text
@d363 14
a376 1
#define SPELL_ON_FIRE		     457
d611 7
@


1.16
log
@Added RCS Log and Id strings to each source file
@
text
@d1 1
a1 1
// $Id$
d53 2
a54 2

#define MAX_SPELL_SPHERES	10
d594 4
a597 1
// $Log$
@


1.15
log
@Many many small but ver significant bug fixes found using insure.  The
code now compiles cleanly and boots cleanly with insure.  The most significant
changes were moving all the BREATH's to within normal spell range, and
fixing the way socials were allocated.  Too many small fixes to list them
all. --gurlaek (now for the runtime debugging :( )
@
text
@d1 1
d594 1
@


1.14
log
@Moved the identify spell back into the normal castable spells range.
moved all the breath spells up by one to compensate for moveing identify.
@
text
@d289 18
a306 13
#define LANG_BARBARIAN  190
#define LANG_GNOMISH    191
#define LANG_DUERGAR    192
#define LANG_DROW       193
#define LANG_ORCISH     194
#define LANG_OGRE       195
#define LANG_COMMON     196
#define LANG_ELVEN      197
#define LANG_DWARVEN    198
#define LANG_TROLLISH   199
#define LANG_HALFLING   200
#define MAX_LANGUAGE    200
#define MIN_LANGUAGE    190
d320 1
a320 1
#define SKILL_TRACK		    410/* Reserved Skill[] DO NOT CHANGE */
d362 1
a368 15

/*
 *  NON-PLAYER AND OBJECT SPELLS AND SKILLS
 *  The practice levels for the spells and skills below are _not_ recorded
 *  in the playerfile; therefore, the intended use is for spells and skills
 *  associated with objects or non-players (such as NPC-only spells).
 */
/* moved identify spell to 186 and subtracted one from all of these --gurlaek 7/22/1999 */
#define SPELL_FIRE_BREATH            651
#define SPELL_GAS_BREATH             652
#define SPELL_FROST_BREATH           653
#define SPELL_ACID_BREATH            654
#define SPELL_LIGHTNING_BREATH       655
#define SPELL_ON_FIRE		     656

@


1.13
log
@This is the spanky New Spell recognition code.
This code allows mobs/players that have the KNOW_SPELL skill
to make a skill check to guess the spell.  A good roll will show both
the spell and the target.  A bad roll will show the spell garbled and
then an INT check for the target.  If a really bad roll is made, the spell
will be replaced by an incorrect one.  the heart of this system is
start_chant(), end_chant, and bad_guess().
--gurlaek 7/20/1999
@
text
@d286 1
d368 1
a368 2
 *  associated with objects (such as SPELL_IDENTIFY used with scrolls of
 *  identify) or non-players (such as NPC-only spells).
d370 7
a376 8

#define SPELL_IDENTIFY               651
#define SPELL_FIRE_BREATH            652
#define SPELL_GAS_BREATH             653
#define SPELL_FROST_BREATH           654
#define SPELL_ACID_BREATH            655
#define SPELL_LIGHTNING_BREATH       656
#define SPELL_ON_FIRE		     657
@


1.12
log
@change cast speed defines to make more sense and have a
wider range of time.. see CAST_SPEEDx
@
text
@d11 3
d355 1
@


1.11
log
@This is a Mass check-in of the new skill/spell/language assignment system.
This New system combines the assignment of skill/spell/language for
both mobs and PCs.  LOts of code was touched and many errors were fixed.
MCLASS_VOID was moved from 13 to -1 to match CLASS_UNDEFINED for PC's.
MObs now get random skill/spell/language levels baseed on their race/class/level
that exactly align with PC's.  PC's no longer have to rent to use skills gained
by leveling or when first creating a char.  Languages no longer reset to defaults
when a PC levels.  Discovered that languages have been defined right in the middle
of the spell area.  This needs to be fixed.  A conversion util neeDs to be run on
the mob files to compensate for the 13 to -1 class change.
--gurlaek 7/6/1999
@
text
@d82 3
a84 2
/* spell casting time defines , ordinary ints can be used 
 *for other values, but should be declared here...
d86 10
a95 8
 *   then each of the following is (n*2) seconds  */
#define IMMEDIATE   1
#define FAST        2
#define MEDIUM      4
#define SLOW        6 



@


1.10
log
@added #define SKILL_SUMMON_MOUNT          450
@
text
@d280 15
a294 1

a354 14

#define LANG_BARBARIAN  190
#define LANG_GNOMISH    191
#define LANG_DUERGAR    192
#define LANG_DROW       193
#define LANG_ORCISH     194
#define LANG_OGRE       195
#define LANG_COMMON     196
#define LANG_ELVEN      197
#define LANG_DWARVEN    198
#define LANG_TROLLISH   199
#define LANG_HALFLING   200
#define MAX_LANGUAGE    200
#define MIN_LANGUAGE    190
@


1.9
log
@Magic missile works like Fire Dart, Ice Dart works.
@
text
@d334 1
@


1.8
log
@Working on quest spells.  Still in progress.  HOwever, spell_info[] array now has a flag
quest.  If it's true then it's considerd a quest spell.  Also, allowed pyro/cryo's to
learn from any sorcerer type teacher
fingon
l.
@
text
@d530 1
@


1.7
log
@Monk semantics for dodge/parry/ripost/attack
@
text
@d446 1
@


1.6
log
@Adds the skill safefall for monks.
@
text
@d333 1
@


1.5
log
@Chant finishes and wearoff messages.
@
text
@d332 1
@


1.4
log
@Many enhancements to scribe and spellbooks.  Lots of checks added.  Scribe is now a skill.
Spellbooks now have to be held to scribe as well as a quill in the other hand.

-fingon
@
text
@d333 4
@


1.3
log
@Monk additions/fixes
@
text
@d326 2
a327 2
#define SKILL_HUNT				442
#define SKILL_BANDAGE      443
d331 1
d426 14
a439 13
   byte min_position;	/* Position for caster	 */
   int mana_min;	/* Min amount of mana used by a spell (highest lev) */
   int mana_max;	/* Max amount of mana used by a spell (lowest lev) */
   int mana_change;	/* Change in mana used by spell from lev to lev */
   int min_level[NUM_CLASSES];
   int routines;
   byte violent;
   int targets;         /* See below for use with TAR_XXX  */
   int min_circle[NUM_CLASSES];
   int mem_time;
   int cast_time;
   int damage_type;
   int sphere;
@


1.2
log
@Rewrote Continual Light and Darkness to be manual spells to meet our needs.
@
text
@d330 1
@


1.1
log
@Initial revision
@
text
@d525 2
@
