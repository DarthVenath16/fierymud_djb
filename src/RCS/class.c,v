head	1.177;
access;
symbols;
locks; strict;
comment	@ * @;


1.177
date	2011.08.06.15.22.51;	author rsd;	state Exp;
branches;
next	1.176;

1.176
date	2009.07.18.01.17.23;	author myc;	state Exp;
branches;
next	1.175;

1.175
date	2009.06.14.18.11.10;	author myc;	state Exp;
branches;
next	1.174;

1.174
date	2009.06.09.21.48.21;	author myc;	state Exp;
branches;
next	1.173;

1.173
date	2009.06.09.19.33.50;	author myc;	state Exp;
branches;
next	1.172;

1.172
date	2009.06.09.05.35.39;	author myc;	state Exp;
branches;
next	1.171;

1.171
date	2009.03.20.16.06.04;	author jps;	state Exp;
branches;
next	1.170;

1.170
date	2009.03.20.06.08.18;	author myc;	state Exp;
branches;
next	1.169;

1.169
date	2009.03.08.23.34.14;	author jps;	state Exp;
branches;
next	1.168;

1.168
date	2009.03.04.08.59.55;	author jps;	state Exp;
branches;
next	1.167;

1.167
date	2008.09.20.17.43.26;	author jps;	state Exp;
branches;
next	1.166;

1.166
date	2008.09.20.08.02.27;	author jps;	state Exp;
branches;
next	1.165;

1.165
date	2008.09.12.20.16.23;	author jps;	state Exp;
branches;
next	1.164;

1.164
date	2008.09.01.22.15.59;	author jps;	state Exp;
branches;
next	1.163;

1.163
date	2008.09.01.00.49.07;	author mud;	state Exp;
branches;
next	1.162;

1.162
date	2008.09.01.00.12.37;	author jps;	state Exp;
branches;
next	1.161;

1.161
date	2008.08.10.06.54.33;	author jps;	state Exp;
branches;
next	1.160;

1.160
date	2008.08.10.01.58.49;	author jps;	state Exp;
branches;
next	1.159;

1.159
date	2008.07.27.05.23.01;	author jps;	state Exp;
branches;
next	1.158;

1.158
date	2008.05.22.15.40.25;	author myc;	state Exp;
branches;
next	1.157;

1.157
date	2008.05.19.05.47.31;	author jps;	state Exp;
branches;
next	1.156;

1.156
date	2008.05.18.22.53.54;	author jps;	state Exp;
branches;
next	1.155;

1.155
date	2008.05.18.17.59.03;	author jps;	state Exp;
branches;
next	1.154;

1.154
date	2008.05.18.02.02.53;	author jps;	state Exp;
branches;
next	1.153;

1.153
date	2008.05.12.00.43.16;	author jps;	state Exp;
branches;
next	1.152;

1.152
date	2008.05.11.05.41.49;	author jps;	state Exp;
branches;
next	1.151;

1.151
date	2008.04.26.23.35.43;	author myc;	state Exp;
branches;
next	1.150;

1.150
date	2008.04.26.18.56.36;	author myc;	state Exp;
branches;
next	1.149;

1.149
date	2008.04.15.04.44.42;	author jps;	state Exp;
branches;
next	1.148;

1.148
date	2008.04.14.08.39.56;	author jps;	state Exp;
branches;
next	1.147;

1.147
date	2008.04.14.02.18.25;	author jps;	state Exp;
branches;
next	1.146;

1.146
date	2008.04.13.18.52.18;	author jps;	state Exp;
branches;
next	1.145;

1.145
date	2008.04.13.18.30.30;	author jps;	state Exp;
branches;
next	1.144;

1.144
date	2008.04.04.06.12.52;	author myc;	state Exp;
branches;
next	1.143;

1.143
date	2008.03.30.15.37.36;	author jps;	state Exp;
branches;
next	1.142;

1.142
date	2008.03.28.17.54.53;	author myc;	state Exp;
branches;
next	1.141;

1.141
date	2008.03.11.19.50.55;	author myc;	state Exp;
branches;
next	1.140;

1.140
date	2008.03.10.18.01.17;	author myc;	state Exp;
branches;
next	1.139;

1.139
date	2008.03.09.18.12.41;	author jps;	state Exp;
branches;
next	1.138;

1.138
date	2008.03.09.09.00.05;	author jps;	state Exp;
branches;
next	1.137;

1.137
date	2008.03.05.03.03.54;	author myc;	state Exp;
branches;
next	1.136;

1.136
date	2008.02.23.01.03.54;	author myc;	state Exp;
branches;
next	1.135;

1.135
date	2008.02.09.04.27.47;	author myc;	state Exp;
branches;
next	1.134;

1.134
date	2008.02.09.03.04.23;	author myc;	state Exp;
branches;
next	1.133;

1.133
date	2008.01.29.21.02.31;	author myc;	state Exp;
branches;
next	1.132;

1.132
date	2008.01.27.21.09.12;	author myc;	state Exp;
branches;
next	1.131;

1.131
date	2008.01.27.12.10.29;	author jps;	state Exp;
branches;
next	1.130;

1.130
date	2008.01.27.11.16.43;	author jps;	state Exp;
branches;
next	1.129;

1.129
date	2008.01.27.09.44.12;	author jps;	state Exp;
branches;
next	1.128;

1.128
date	2008.01.26.14.26.31;	author jps;	state Exp;
branches;
next	1.127;

1.127
date	2008.01.07.11.55.48;	author jps;	state Exp;
branches;
next	1.126;

1.126
date	2008.01.06.23.50.47;	author jps;	state Exp;
branches;
next	1.125;

1.125
date	2008.01.06.20.38.57;	author jps;	state Exp;
branches;
next	1.124;

1.124
date	2008.01.06.17.34.41;	author jps;	state Exp;
branches;
next	1.123;

1.123
date	2008.01.06.05.36.37;	author jps;	state Exp;
branches;
next	1.122;

1.122
date	2008.01.05.23.05.45;	author jps;	state Exp;
branches;
next	1.121;

1.121
date	2008.01.05.21.58.27;	author jps;	state Exp;
branches;
next	1.120;

1.120
date	2008.01.05.20.31.52;	author jps;	state Exp;
branches;
next	1.119;

1.119
date	2008.01.05.05.33.22;	author jps;	state Exp;
branches;
next	1.118;

1.118
date	2008.01.04.01.50.41;	author jps;	state Exp;
branches;
next	1.117;

1.117
date	2008.01.03.12.44.03;	author jps;	state Exp;
branches;
next	1.116;

1.116
date	2008.01.02.01.26.51;	author jps;	state Exp;
branches;
next	1.115;

1.115
date	2007.12.19.20.44.27;	author myc;	state Exp;
branches;
next	1.114;

1.114
date	2007.10.13.05.07.24;	author myc;	state Exp;
branches;
next	1.113;

1.113
date	2007.10.11.20.14.48;	author myc;	state Exp;
branches;
next	1.112;

1.112
date	2007.09.21.08.02.33;	author jps;	state Exp;
branches;
next	1.111;

1.111
date	2007.09.11.16.34.24;	author myc;	state Exp;
branches;
next	1.110;

1.110
date	2007.09.08.06.03.03;	author jps;	state Exp;
branches;
next	1.109;

1.109
date	2007.09.08.05.18.49;	author jps;	state Exp;
branches;
next	1.108;

1.108
date	2007.09.07.18.56.04;	author jps;	state Exp;
branches;
next	1.107;

1.107
date	2007.09.04.06.49.19;	author myc;	state Exp;
branches;
next	1.106;

1.106
date	2007.08.28.20.18.35;	author myc;	state Exp;
branches;
next	1.105;

1.105
date	2007.08.26.21.33.36;	author jps;	state Exp;
branches;
next	1.104;

1.104
date	2007.08.15.06.07.52;	author myc;	state Exp;
branches;
next	1.103;

1.103
date	2007.08.14.22.43.07;	author myc;	state Exp;
branches;
next	1.102;

1.102
date	2007.08.05.22.19.17;	author myc;	state Exp;
branches;
next	1.101;

1.101
date	2007.08.05.20.21.51;	author myc;	state Exp;
branches;
next	1.100;

1.100
date	2007.08.02.04.19.04;	author jps;	state Exp;
branches;
next	1.99;

1.99
date	2007.07.31.07.37.51;	author jps;	state Exp;
branches;
next	1.98;

1.98
date	2007.07.04.02.21.58;	author myc;	state Exp;
branches;
next	1.97;

1.97
date	2007.06.16.00.32.55;	author myc;	state Exp;
branches;
next	1.96;

1.96
date	2007.06.16.00.15.49;	author myc;	state Exp;
branches;
next	1.95;

1.95
date	2007.05.29.20.16.32;	author jps;	state Exp;
branches;
next	1.94;

1.94
date	2007.05.28.22.36.26;	author jps;	state Exp;
branches;
next	1.93;

1.93
date	2007.05.28.06.34.01;	author jps;	state Exp;
branches;
next	1.92;

1.92
date	2007.05.11.21.03.12;	author myc;	state Exp;
branches;
next	1.91;

1.91
date	2007.05.11.20.13.28;	author myc;	state Exp;
branches;
next	1.90;

1.90
date	2007.04.11.22.14.40;	author jps;	state Exp;
branches;
next	1.89;

1.89
date	2007.03.07.23.10.02;	author jps;	state Exp;
branches;
next	1.88;

1.88
date	2007.02.14.03.54.53;	author myc;	state Exp;
branches;
next	1.87;

1.87
date	2007.01.25.17.05.51;	author myc;	state Exp;
branches;
next	1.86;

1.86
date	2006.11.26.08.31.17;	author jps;	state Exp;
branches;
next	1.85;

1.85
date	2006.11.18.04.26.32;	author jps;	state Exp;
branches;
next	1.84;

1.84
date	2006.11.08.09.16.04;	author jps;	state Exp;
branches;
next	1.83;

1.83
date	2006.11.08.07.55.17;	author jps;	state Exp;
branches;
next	1.82;

1.82
date	2006.10.12.01.35.47;	author dce;	state Exp;
branches;
next	1.81;

1.81
date	2006.10.07.02.07.07;	author dce;	state Exp;
branches;
next	1.80;

1.80
date	2006.05.30.01.25.13;	author rls;	state Exp;
branches;
next	1.79;

1.79
date	2005.06.15.17.21.43;	author cjd;	state Exp;
branches;
next	1.78;

1.78
date	2004.11.11.23.24.06;	author rsd;	state Exp;
branches;
next	1.77;

1.77
date	2003.06.21.01.01.08;	author jjl;	state Exp;
branches;
next	1.76;

1.76
date	2003.01.26.22.08.54;	author jjl;	state Exp;
branches;
next	1.75;

1.75
date	2002.10.14.02.16.08;	author jjl;	state Exp;
branches;
next	1.74;

1.74
date	2002.09.21.03.15.32;	author jjl;	state Exp;
branches;
next	1.73;

1.73
date	2002.09.15.03.55.51;	author jjl;	state Exp;
branches;
next	1.72;

1.72
date	2002.09.13.02.32.10;	author jjl;	state Exp;
branches;
next	1.71;

1.71
date	2002.07.16.23.21.53;	author rls;	state Exp;
branches;
next	1.70;

1.70
date	2002.06.06.00.36.09;	author rls;	state Exp;
branches;
next	1.69;

1.69
date	2002.06.04.02.24.30;	author dce;	state Exp;
branches;
next	1.68;

1.68
date	2002.05.23.00.20.26;	author rls;	state Exp;
branches;
next	1.67;

1.67
date	2001.12.16.20.07.53;	author dce;	state Exp;
branches;
next	1.66;

1.66
date	2001.12.07.15.42.30;	author dce;	state Exp;
branches;
next	1.65;

1.65
date	2001.03.31.19.58.34;	author dce;	state Exp;
branches;
next	1.64;

1.64
date	2001.02.02.00.34.21;	author mtp;	state Exp;
branches;
next	1.63;

1.63
date	2001.01.16.00.33.56;	author mtp;	state Exp;
branches;
next	1.62;

1.62
date	2001.01.08.00.39.18;	author rsd;	state Exp;
branches;
next	1.61;

1.61
date	2001.01.04.22.49.24;	author mtp;	state Exp;
branches;
next	1.60;

1.60
date	2000.12.15.02.18.46;	author rsd;	state Exp;
branches;
next	1.59;

1.59
date	2000.11.29.00.19.24;	author mtp;	state Exp;
branches;
next	1.58;

1.58
date	2000.11.21.04.31.04;	author rsd;	state Exp;
branches;
next	1.57;

1.57
date	2000.11.20.19.17.22;	author rsd;	state Exp;
branches;
next	1.56;

1.56
date	2000.11.14.20.24.24;	author rsd;	state Exp;
branches;
next	1.55;

1.55
date	2000.11.13.23.46.45;	author rsd;	state Exp;
branches;
next	1.54;

1.54
date	2000.11.12.23.53.35;	author rsd;	state Exp;
branches;
next	1.53;

1.53
date	2000.11.12.08.04.53;	author rsd;	state Exp;
branches;
next	1.52;

1.52
date	2000.11.12.07.28.57;	author rsd;	state Exp;
branches;
next	1.51;

1.51
date	2000.11.07.01.32.05;	author mtp;	state Exp;
branches;
next	1.50;

1.50
date	2000.09.15.17.03.00;	author jimmy;	state Exp;
branches;
next	1.49;

1.49
date	2000.09.04.19.58.35;	author rsd;	state Exp;
branches;
next	1.48;

1.48
date	2000.05.14.05.21.49;	author rsd;	state Exp;
branches;
next	1.47;

1.47
date	2000.04.23.08.38.32;	author rsd;	state Exp;
branches;
next	1.46;

1.46
date	2000.04.23.03.23.48;	author rsd;	state Exp;
branches;
next	1.45;

1.45
date	2000.04.22.22.34.01;	author rsd;	state Exp;
branches;
next	1.44;

1.44
date	2000.04.15.23.11.33;	author rsd;	state Exp;
branches;
next	1.43;

1.43
date	2000.04.05.06.31.31;	author rsd;	state Exp;
branches;
next	1.42;

1.42
date	2000.02.14.05.12.44;	author cso;	state Exp;
branches;
next	1.41;

1.41
date	2000.01.31.00.35.20;	author rsd;	state Exp;
branches;
next	1.40;

1.40
date	99.11.28.22.53.27;	author cso;	state Exp;
branches;
next	1.39;

1.39
date	99.11.23.17.56.25;	author rsd;	state Exp;
branches;
next	1.38;

1.38
date	99.11.23.16.09.19;	author rsd;	state Exp;
branches;
next	1.37;

1.37
date	99.11.23.15.48.23;	author jimmy;	state Exp;
branches;
next	1.36;

1.36
date	99.11.21.00.22.07;	author jimmy;	state Exp;
branches;
next	1.35;

1.35
date	99.11.19.05.12.55;	author cso;	state Exp;
branches;
next	1.34;

1.34
date	99.11.19.04.32.51;	author rsd;	state Exp;
branches;
next	1.33;

1.33
date	99.11.17.20.03.20;	author jimmy;	state Exp;
branches;
next	1.32;

1.32
date	99.09.05.07.00.39;	author jimmy;	state Exp;
branches;
next	1.31;

1.31
date	99.08.20.15.58.42;	author mud;	state Exp;
branches;
next	1.30;

1.30
date	99.08.18.18.57.16;	author mud;	state Exp;
branches;
next	1.29;

1.29
date	99.08.15.19.42.04;	author mud;	state Exp;
branches;
next	1.28;

1.28
date	99.08.15.19.21.39;	author mud;	state Exp;
branches;
next	1.27;

1.27
date	99.08.12.20.42.01;	author dce;	state Exp;
branches;
next	1.26;

1.26
date	99.07.30.05.08.34;	author mud;	state Exp;
branches;
next	1.25;

1.25
date	99.07.22.17.43.59;	author jimmy;	state Exp;
branches;
next	1.24;

1.24
date	99.07.20.19.45.51;	author jimmy;	state Exp;
branches;
next	1.23;

1.23
date	99.07.06.19.57.05;	author jimmy;	state Exp;
branches;
next	1.22;

1.22
date	99.06.30.18.25.04;	author jimmy;	state Exp;
branches;
next	1.21;

1.21
date	99.06.10.16.56.28;	author mud;	state Exp;
branches;
next	1.20;

1.20
date	99.05.26.02.11.22;	author mud;	state Exp;
branches;
next	1.19;

1.19
date	99.04.29.19.00.02;	author mud;	state Exp;
branches;
next	1.18;

1.18
date	99.04.21.04.11.02;	author jimmy;	state Exp;
branches;
next	1.17;

1.17
date	99.04.16.00.50.23;	author mud;	state Exp;
branches;
next	1.16;

1.16
date	99.03.24.23.30.59;	author mud;	state Exp;
branches;
next	1.15;

1.15
date	99.03.21.16.36.55;	author mud;	state Exp;
branches;
next	1.14;

1.14
date	99.03.20.18.54.39;	author tph;	state Exp;
branches;
next	1.13;

1.13
date	99.03.15.04.44.42;	author mud;	state Exp;
branches;
next	1.12;

1.12
date	99.03.14.00.53.03;	author mud;	state Exp;
branches;
next	1.11;

1.11
date	99.03.11.23.37.12;	author mud;	state Exp;
branches;
next	1.10;

1.10
date	99.03.10.00.03.37;	author dce;	state Exp;
branches;
next	1.9;

1.9
date	99.03.09.22.26.35;	author mud;	state Exp;
branches;
next	1.8;

1.8
date	99.03.08.23.24.48;	author dce;	state Exp;
branches;
next	1.7;

1.7
date	99.03.08.20.29.34;	author dce;	state Exp;
branches;
next	1.6;

1.6
date	99.03.03.20.11.02;	author jimmy;	state Exp;
branches;
next	1.5;

1.5
date	99.02.26.22.30.30;	author dce;	state Exp;
branches;
next	1.4;

1.4
date	99.02.03.18.14.16;	author jimmy;	state Exp;
branches;
next	1.3;

1.3
date	99.02.02.20.16.54;	author jimmy;	state Exp;
branches;
next	1.2;

1.2
date	99.01.30.04.16.40;	author mud;	state Exp;
branches;
next	1.1;

1.1
date	99.01.29.01.23.30;	author mud;	state Exp;
branches;
next	;


desc
@/*
************************************************************************
*   File: class.c                                       Part of CircleMUD *
*  Usage: Source file for class-specific code                             *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */

/*
 * This file attempts to concentrate most of the code which must be changed
 * in order for new classes to be added.  If you're adding a new class,
 * you should go through this entire file from beginning to end and add
 * the appropriate new special cases for your new class.
 */



#include "conf.h"
#include "sysdep.h"

#include "structs.h"
#include "db.h"
#include "utils.h"
#include "spells.h"
#include "interpreter.h"
#include "handler.h"

extern struct spell_info_type spell_info[];

const char *subclass_descrip =
"                     &1&b [ Hubis Class System ]&0\r\n"
"&6&bHubis offers a wide range of character classes and abilities all of\r\n"
"which originate from five basic classes. Each of the basic classes\r\n"
"have extraordinary growth potential throughout gameplay. As you begin\r\n"
"your journey, you are limited to only these five classes. As you play\r\n"
"on and experience new areas and experience levels you are faced with\r\n"
"a decision to either specialize in a subclass, or retain your original\r\n"
"class. If you choose to specialize, your abilities and powers will\r\n"
"expand accordingly, leading the way to very powerful characters. However,\r\n"
"you may wish to remain a basic class, and possibly gain the ability to\r\n"
"multiclass at the higher levels. Explore the possibilities and GOOD LUCK!\r\n"
"&bNOTE: Shamans are temporarily disabled.  New, improved shamans will be\r\n"
"added in about 2 weeks!&0\r\n";



char *class_display[NUM_CLASSES] = {
  "a) &5&bSorcerer&0",
  "b) &6Cleric&0",
  "c) &1&bThief&0",
  "d) &4&bWarrior&0",
  "e) &7Paladin&0",
  "f) &1&bAnti-&9Paladin&0",
  "g) &2&bRanger&0",
  "h) &2Druid&0",
  "i) &6&bShaman&0",
  "j) &1Assassin&0",
  "k) &3Mercenary&0",
  "l) &5Necromancer&0",
  "m) &3&bConjurer&0",
  "n) &9&bM&0&7on&9&bk&0",
  "o) &9&bBer&1ser&9ker&0",
  "p) &6&bPr&7ie&6st&0",
  "q) &5Dia&9&bbol&0&5ist&0",
  "r) &7&bM&0&7ys&9&bti&7c&0",
  "s) &9&bRogue&0",
  "t) &4B&9&bar&0&4d&0",
  "u) &1P&byr&0&1o&9&bma&0&7nc&9&ber&0",
  "v) &4C&bry&0&4o&7ma&9&bnc&0&7er&0",
  "w) &4I&5l&4l&5u&4s&5i&4o&5n&4i&5s&4t&0",
  "x) &9&bHun&0&2te&9&br&0"
};


int warrior_subclasses[WARRIOR_SUBCLASSES] =
	{ CLASS_PALADIN, CLASS_ANTI_PALADIN, CLASS_RANGER,
	  CLASS_BERSERKER, CLASS_MONK, CLASS_MERCENARY};

int cleric_subclasses[CLERIC_SUBCLASSES] =
	{ CLASS_PRIEST, CLASS_DIABOLIST, CLASS_DRUID, CLASS_MYSTIC };

int rogue_subclasses[ROGUE_SUBCLASSES] =
	{ CLASS_ASSASSIN, CLASS_THIEF, CLASS_BARD,
	  CLASS_HUNTER };

int mage_subclasses[MAGE_SUBCLASSES] =
	{ CLASS_PYROMANCER, CLASS_CRYOMANCER, CLASS_ILLUSIONIST,
	  CLASS_NECROMANCER, CLASS_CONJURER };


const char *stats_display =
	"&0&7&b[s]&0 Strength	&0&7&b[i]&0 Intelligence\r\n"
	"&0&7&b[w]&0 Wisdom	&0&7&b[c]&0 Constitution\r\n"
	"&0&7&b[d]&0 Dexterity	&0&7&b[m]&0 Charisma\r\n\r\n"
;



/* Names first */

const char *class_abbrevs[] = {
  "&5&bSorc   &0",
  "&6Cleric &0",
  "&1&bThief  &0",
  "&4&bWarrior&0",
  "&7Paladin&0",
  "&1&bAnti-&9Pa&0",
  "&2&bRanger &0",
  "&2Druid  &0",
  "&6&bShaman &0",
  "&1Ass    &0",
  "&3Merc   &0",
  "&5Necro  &0",
  "&3&bConj   &0",
  "&9&bMonk   &0",
  "&9&bBe&1rs   &0",
  "&6&bPr&7ie   &0",
  "&5Di&9&bab   &0",
  "&7&bM&0&7ys  &0",
  "&9&bRogue  &0",
  "&4B&9&bar    &0",
  "&1P&byr    &0",
  "&4C&bry    &0",
  "&4I&5l     &0",
  "&9&bHun    &0",
  "\n"
};


/* Needs 12 non-ansi spaces */
const char *pc_class_types[] = {
  "&5&bSorceror&0    ",
  "&6Cleric&0      ",
  "&1&bThief&0       ",
  "&4&bWarrior&0     ",
  "&7Paladin&0     ",
  "&1&bAnti-&9Paladin&0",
  "&2&d&bRanger&0      ",
  "&2Druid&0       ",
  "&6&bShaman&0      ",
  "&1Assassin&0    ",
  "&3Mercenary&0   ",
  "&5Necromancer&0 ",
  "&3&bConjurer&0    ",
  "&9&bM&0&7on&9&bk&0        ",
  "&9&bBer&1ser&9ker&0   ",
  "&6&bPr&7ie&6st&0      ",
  "&5Dia&9&bbol&0&5ist&0   ",
  "&7&bM&0&7ys&9&bti&7c&0      ",
  "&9&bRogue&0       ",
  "&4B&9&bar&0&4d&0        ",
  "&1P&byr&0&1o&9&bma&0&7nc&9&ber&0  ",
  "&4C&bry&0&4o&7ma&9&bnc&0&7er&0  ",
  "&4I&5l&4l&5u&4s&5i&4o&5n&4i&5s&4t&0 ",
  "&9&bHun&0&2te&9&br&0      ",
  "\n"
};

#define Y   TRUE
#define N   FALSE

int class_ok_race[NUM_RACES][NUM_CLASSES] = {
  /*            S, C, T, W, P, A, R, D, Sh,As,M, N, Co, Mo, Be, Pr, Di, My, Ro, Ba, Py, Cr, Il, Hu*/
  /* Human */ { Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y,  Y,  N,  Y,  Y,  Y,  Y,  Y,  Y,  Y,  Y,  N},
  /* Elf   */ { Y, Y, Y, N, N, N, Y, Y, N, N, N, N, Y,  N,  N,  Y,  Y,  Y,  Y,  Y,  Y,  Y,  Y,  N},
  /* Gnome */ { Y, Y, N, N, N, N, N, N, Y, N, N, N, Y,  N,  N,  Y,  Y,  N,  N,  N,  Y,  Y,  Y,  N},
  /* Dwarf */ { N, Y, Y, Y, N, N, N, N, N, N, Y, N, Y,  N,  Y,  Y,  Y,  N,  Y,  Y,  N,  N,  N,  N},
  /* troll */ { N, N, N, Y, N, N, N, N, Y, N, Y, N, N,  N,  Y,  N,  N,  N,  Y,  N,  N,  N,  N,  Y},
  /* DROW  */ { Y, Y, N, Y, N, Y, N, N, Y, Y, Y, Y, Y,  N,  N,  N,  Y,  N,  Y,  N,  Y,  Y,  Y,  Y},
  /* DUER  */ { N, Y, Y, Y, N, N, N, N, N, Y, Y, N, N,  N,  Y,  N,  Y,  N,  Y,  N,  N,  N,  N,  Y},
  /* OGRE  */ { N, N, N, Y, N, N, N, N, Y, N, Y, N, N,  N,  Y,  N,  N,  N,  Y,  N,  N,  N,  N,  Y},
  /* ORC   */ { Y, Y, Y, Y, N, Y, N, N, Y, Y, Y, Y, Y,  N,  Y,  N,  Y,  N,  Y,  N,  Y,  Y,  Y,  Y},
  /* H-E   */ { Y, Y, N, Y, N, N, Y, Y, N, N, N, N, Y,  Y,  N,  N,  N,  N,  Y,  Y,  Y,  Y,  Y,  N},
  /* BARB  */ { N, N, N, Y, N, N, N, N, Y, N, Y, N, N,  N,  Y,  N,  N,  N,  Y,  N,  N,  N,  N,  N},
  /* HALFL */ { Y, Y, Y, Y, N, N, N, N, N, N, N, N, Y,  N,  N,  Y,  N,  N,  Y,  Y,  Y,  Y,  Y,  N}
};

/* The menu for choosing a class in interpreter.c: */
const char *class_menu =
"\r\n"
"Select a class:\r\n"
"  [C]leric\r\n"
"  [T]hief\r\n"
"  [W]arrior\r\n"
"  [M]age\r\n";

int parse_class(struct char_data *ch, char arg) {
  int class = CLASS_UNDEFINED;

  switch (LOWER(arg)) {
  case 'a': class = CLASS_MAGIC_USER; break;
  case 'b': class = CLASS_CLERIC    ; break;
  case 'c': class = CLASS_THIEF	    ; break;
  case 'd': class = CLASS_WARRIOR   ; break;
  case 'e': class = CLASS_PALADIN   ; break;
  case 'f': class = CLASS_ANTI_PALADIN; break;
  case 'g': class = CLASS_RANGER    ; break;
  case 'h': class = CLASS_DRUID     ; break;
  case 'i': class = CLASS_SHAMAN    ; break;
  case 'j': class = CLASS_ASSASSIN  ; break;
  case 'k': class = CLASS_MERCENARY ; break;
  case 'l': class = CLASS_NECROMANCER; break;
  case 'm': class = CLASS_CONJURER  ; break;
  case 'n': class = CLASS_MONK      ; break;
  case 'o': class = CLASS_BERSERKER ; break;
  case 'p': class = CLASS_PRIEST    ; break;
  case 'q': class = CLASS_DIABOLIST ; break;
  case 'r': class = CLASS_MYSTIC    ; break;
  case 's': class = CLASS_ROGUE     ; break;
  case 't': class = CLASS_BARD      ; break;
  case 'u': class = CLASS_PYROMANCER; break;
  case 'v': class = CLASS_CRYOMANCER; break;
  case 'w': class = CLASS_ILLUSIONIST; break;
  case 'x': class = CLASS_HUNTER     ; break;
  default : class = CLASS_UNDEFINED ; break;
  }

  if (class >= 0 && class < NUM_CLASSES)
    if (ch && !class_ok_race[(int)GET_RACE(ch)][class])
      class = CLASS_UNDEFINED;

  return (class);
}

/* These are the new base save numbers courtesy of Nechtrous */

int get_base_saves(struct char_data *ch, int type)
{
  int rod = 0, para = 0, petr = 0, bre = 0, spe = 0;

  switch(GET_CLASS(ch)) {
    case CLASS_BERSERKER:
    case CLASS_ANTI_PALADIN:
    case CLASS_HUNTER:
    case CLASS_RANGER:
    case CLASS_MONK:
    case CLASS_WARRIOR:
        para = 70-(int)(GET_LEVEL(ch)*11/14);
	rod  = 80-(int)(GET_LEVEL(ch)*11/14);
	petr = 75-(int)(GET_LEVEL(ch)*11/14);
	bre  = 85-(int)(GET_LEVEL(ch)*13/14);
	spe  = 85-(int)(GET_LEVEL(ch)*11/14);
        break;
    case CLASS_MAGIC_USER:
    case CLASS_CRYOMANCER:
    case CLASS_PYROMANCER:
    case CLASS_ILLUSIONIST:
    case CLASS_NECROMANCER:
    case CLASS_CONJURER:
        para = 70-(int)(GET_LEVEL(ch)*3/7);
	rod  = 55-(int)(GET_LEVEL(ch)*4/7);
	petr = 65-(int)(GET_LEVEL(ch)*4/7);
	bre  = 75-(int)(GET_LEVEL(ch)*4/7);
	spe  = 60-(int)(GET_LEVEL(ch)*4/7);
	break;
    case CLASS_ROGUE:
    case CLASS_ASSASSIN:
    case CLASS_THIEF:
    case CLASS_MERCENARY:
    case CLASS_BARD:
        para = 65-(int)(GET_LEVEL(ch)*5/14);
	rod  = 70-(int)(GET_LEVEL(ch)*5/7);
	petr = 60-(int)(GET_LEVEL(ch)*5/14);
	bre  = 80-(int)(GET_LEVEL(ch)*5/14);
	spe  = 75-(int)(GET_LEVEL(ch)*5/7);
	break;
    case CLASS_CLERIC:
    case CLASS_PRIEST:
    case CLASS_MYSTIC:
    case CLASS_DIABOLIST:
    case CLASS_DRUID:
        para = 65-(int)(GET_LEVEL(ch)*4/7);
	rod  = 70-(int)(GET_LEVEL(ch)*4/7);
	petr = 65-(int)(GET_LEVEL(ch)*4/7);
	bre  = 80-(int)(GET_LEVEL(ch)*4/7);
	spe  = 75-(int)(GET_LEVEL(ch)*4/7);
	break;
    default:
        para = 65-(int)(GET_LEVEL(ch)*4/7);
	rod  = 70-(int)(GET_LEVEL(ch)*4/7);
	petr = 65-(int)(GET_LEVEL(ch)*4/7);
	bre  = 80-(int)(GET_LEVEL(ch)*4/7);
	spe  = 75-(int)(GET_LEVEL(ch)*4/7);
	break;
  }

  switch(GET_RACE(ch)) {
    case RACE_DUERGAR:
    case RACE_DWARF:
	para -= (int)(0.125 * GET_CON_VAFF(ch));
	rod  -= (int)(0.1 * GET_CON_VAFF(ch));
        spe  -= (int)(0.1 * GET_CON_VAFF(ch));
	break;
    case RACE_GNOME:
	rod  -= (int)(0.1 * GET_CON_VAFF(ch));
        spe  -= (int)(0.1 * GET_CON_VAFF(ch));
	break;
    case RACE_HALFLING:
        para -= (int)(0.1 * GET_CON_VAFF(ch));
        rod  -= (int)(0.1 * GET_CON_VAFF(ch));
        spe  -= (int)(0.1 * GET_CON_VAFF(ch));
        break;
    default:
        break;
  }
  para -= (int)(0.5 * (GET_CON_VAFF(ch) - 90));
  spe  -= (int)(0.5 * (GET_WIS_VAFF(ch) - 90));
  rod  -= (int)(0.5 * (GET_DEX_VAFF(ch) - 90));
  bre  -= (int)(0.5 * (GET_DEX_VAFF(ch) - 90));
  switch(type) {
    case SAVING_SPELL:
	return MAX(5, spe);
    case SAVING_BREATH:
	return  MAX(5, bre);
    case SAVING_ROD:
	return  MAX(5, rod);
    case SAVING_PETRI:
	return  MAX(5, petr);
    case SAVING_PARA:
	return  MAX(5, para);
    default:
        log("SYSERR: Invalid save_type passed to get_base_saves");
  }
  return 100; /* fail save if get to here */
}

/*
 * bitvectors (i.e., powers of two) for each class, mainly for use in
 * do_who and do_users.  Add new classes at the end so that all classes
 * use sequential powers of two (1 << 0, 1 << 1, 1 << 2, 1 << 3, 1 << 4,
 * 1 << 5, etc.
 */

long find_class_bitvector(char arg)
{
  arg = LOWER(arg);

  switch (arg) {
    case 'a':
      return (1 << 0);
      break;
    case 'b':
      return (1 << 1);
      break;
    case 'c':
      return (1 << 2);
      break;
    case 'd':
      return (1 << 3);
	  break;
	case 'e':
	  return (1 << 4);
      break;
	case 'f':
	  return (1 << 5);
	  break;
	case 'g':
	  return (1 << 6);
	  break;
	case 'h':
	  return (1 << 7);
	  break;
	case 'i':
	  return (1 << 8);
	  break;
	case 'j':
	  return (1 << 9);
	  break;
	case 'k':
	  return (1 << 10);
	  break;
	case 'l':
	  return (1 << 11);
	  break;
	case 'm':
	  return (1 << 12);
	  break;
	case 'n':
	  return (1 << 13);
	  break;
	case 'o':
	  return (1 << 14);
	  break;
	case 'p':
	  return (1 << 15);
	  break;
	case 'q':
	  return (1 << 16);
	  break;
	case 'r':
	  return (1 << 17);
	  break;
	case 's':
	  return (1 << 18);
	  break;
	case 't':
	  return (1 << 19);
	  break;
	case 'u':
	  return (1 << 20);
	  break;
	case 'v':
	  return (1 << 21);
	  break;
	case 'w':
	  return (1 << 22);
	  break;
	case 'x':
	  return (1 << 23);
	  break;
    default:
      return 0;
      break;
  }
}


/*
 * These are definitions which control the guildmasters for each class.
 *
 * The first field (top line) controls the highest percentage skill level
 * a character of the class is allowed to attain in any skill.  (After
 * this level, attempts to practice will say "You are already learned in
 * this area."
 *
 * The second line controls the maximum percent gain in learnedness a
 * character is allowed per practice -- in other words, if the random
 * die throw comes out higher than this number, the gain will only be
 * this number instead.
 *
 * The third line controls the minimu percent gain in learnedness a
 * character is allowed per practice -- in other words, if the random
 * die throw comes out below this number, the gain will be set up to
 * this number.
 *
 * The fourth line simply sets whether the character knows 'spells'
 * or 'skills'.  This does not affect anything except the message given
 * to the character when trying to practice (i.e. "You know of the
 * following spells" vs. "You know of the following skills"
 */

#define SPELL	0
#define SKILL	1



int prac_params[4][NUM_CLASSES] = {
  /* MAG	CLE	THE	WAR PAL ANTP RAN DRU SHA ASS MER NECR CONJ MONK, BERS, PRIE, DIAB, MYST, ROG, BARD, PYRO, CRYO, ILLU, HUNTER*/
  {95,		95,	95,	95, 85, 85, 85, 95, 95, 95, 80, 95, 95, 95, 95, 95, 95, 95, 95, 95, 85, 85, 85, 95},
  {100,		100,	12,	12, 10, 10, 10, 100, 100, 10, 10, 100, 100, 10, 10, 100, 100, 100, 10, 10, 100, 100, 100, 10},
  {25,		25,	1,	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
  {SPELL,	SPELL,	SKILL,	SKILL, SKILL, SKILL, SKILL, SPELL, SPELL, SKILL, SKILL, SPELL, SPELL, SKILL, SKILL, SPELL, SPELL, SPELL, SKILL, SKILL, SPELL, SPELL, SPELL, SKILL}
};


/*
 * ...And the appropriate rooms for each guildmaster/guildguard; controls
 * which types of people the various guildguards let through.  i.e., the
 * first line shows that from room 3017, only MAGIC_USERS are allowed
 * to go south.
 */
int guild_info[][3] = {


/* this must go last -- add new guards above! */
{-1, -1, -1}};




/* THAC0 for classes and levels.  (To Hit Armor Class 0) */

/* David Endre 1/16/99 Added dummy numbers to allow for 105 classes
   will be adjusted once class balancing takes place */

/* [class], [level] (all) */
const int thaco[NUM_CLASSES][LVL_IMPL + 1] = {

/* SORC */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15,
  15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9,
  /*      20                  25                  30		        35  */
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
/*        40             45             50             55             60*/
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*           65             70                   77*/

/* CLERIC */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 18, 18, 18, 16, 16, 16, 14, 14, 14, 12, 12, 12, 10, 10,
  10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3,
  /*    20             25             30			  35 	         40 */
  3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
/*        45             50             55             60             65*/
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
  /*       70             75    77*/


/* THIEF */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14, 13, 13, 12, 12,
  11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 3, 3, 3, 3, 3,
  /*      20              25             30				35             40 */
  3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*           45             50             55             60*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*66          70             75    77*/
/* WARRIOR */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3,
  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  /* 20             25             30			 35             40	    */
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55             60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*   70             75    77*/
/* PALADIN */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 11, 11, 10, 10, 9, 9, 9, 9,
  9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
  /* 20             25             30			 35             40	    */
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55    57       60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*   70             75    77*/
/* ANTI-PALADIN */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 11, 11, 10, 10, 9, 9, 9, 9,
  9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
  /* 20             25             30			 35             40	    */
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55    57       60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*   70             75    77*/
/* RANGER */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 11, 11, 10, 10, 9, 9, 9, 9,
  9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
  /* 20             25             30			 35             40	    */
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55    57       60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*   70             75     77*/
/* DRUID */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 18, 18, 18, 16, 16, 16, 14, 14, 14, 12, 12, 12, 10, 10,
  10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  /*    20             25             30			  35 	         40 */
  3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*        45             50          55       57       60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*         70             75     77*/
/* SHAMAN */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 18, 18, 18, 16, 16, 16, 14, 14, 14, 12, 12, 12, 10, 10,
  10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  /*    20             25             30			  35 	         40 */
  3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*        45             50          55       57       60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7 ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*         70             75    77*/
/* ASSASSIN */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14, 13, 13, 12, 12,
  11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 3, 3, 3, 3, 3,
  /*      20              25             30				35             40 */
  3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*           45             50             55    57       60           */
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*66          70             75    77*/
/* MERCENARY */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3,
  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  /* 20             25             30			 35             40	    */
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55    57       60             65     */
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*   70             75    77*/
/* NECRO */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15,
  15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9,
  /*      20                  25                  30		        35  */
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
/*        40             45             50             55    57       60*/
5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*         65             70             75    77*/
/* CONJ */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15,
  15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9,
  /*      20                  25                  30		        35  */
  9, 9, 9, 9, 9, 9, 9, 9, 8, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
/*        40             45             50             55    57       60*/
5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7 ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*         65             70             75     77*/
/* MONK */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3,
  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  /* 20             25             30			 35             40	    */
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55             60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*   70             75    77*/
/* BERSERKER */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3,
  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  /* 20             25             30			 35             40	    */
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55             60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*   70             75    77*/
/* PRIEST */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 18, 18, 18, 16, 16, 16, 14, 14, 14, 12, 12, 12, 10, 10,
  10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3,
  /*    20             25             30			  35 	         40 */
  3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
/*        45             50             55             60             65*/
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
  /*       70             75    77*/

/* DIABOLIST */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 18, 18, 18, 16, 16, 16, 14, 14, 14, 12, 12, 12, 10, 10,
  10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3,
  /*    20             25             30			  35 	         40 */
  3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
/*        45             50             55             60             65*/
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7 ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
  /*       70             75    77*/

/* MYSTIC */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 18, 18, 18, 16, 16, 16, 14, 14, 14, 12, 12, 12, 10, 10,
  10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3,
  /*    20             25             30			  35 	         40 */
  3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
/*        45             50             55             60             65*/
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
  /*       70             75    77*/

/* ROGUE */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14, 13, 13, 12, 12,
  11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 3, 3, 3, 3, 3,
  /*      20              25             30				35             40 */
  3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*           45             50             55             60*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*66          70             75    77*/
/* BARD */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14, 13, 13, 12, 12,
  11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 3, 3, 3, 3, 3,
  /*      20              25             30				35             40 */
  3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*           45             50             55             60*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7 ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*66          70             75    77*/
/* PYROMANCER */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15,
  15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9,
  /*      20                  25                  30		        35  */
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
/*        40             45             50             55             60*/
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*           65             70                   77*/
/* CRYOMANCER */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15,
  15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9,
  /*      20                  25                  30		        35  */
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
/*        40             45             50             55             60*/
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*           65             70                   77*/
/* ILLUSIONIST */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15,
  15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9,
  /*      20                  25                  30		        35  */
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
/*        40             45             50             55             60*/
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*           65             70                   77*/
/* HUNTER */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3,
  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  /* 20             25             30			 35             40	    */
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55             60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7}
/*   70             75    77*/

};


/*
 * Roll the 6 stats for a character... each stat is made of the sum of
 * the best 3 out of 4 rolls of a 6-sided die.  Each class then decides
 * which priority will be given for the best to worst stats.
 */


void roll_view_abils(struct char_data *ch, int choice_table[])
{

  int i, j, k, temp;
 /* int stats[6];*/
  ubyte table[6];
  ubyte rolls[6];

  for (i = 0; i < 6; i++)
    table[i] = 0;

  for (i = 0; i < 6; i++) {

    for (j = 0; j < 6; j++)
      rolls[j] = number(3, 10);

    temp = rolls[0] + rolls[1] + rolls[2] + rolls[3] + rolls[4] +
rolls[5] -
      MIN(rolls[0], MIN(rolls[1], MIN(rolls[2], MIN(rolls[3],
MIN(rolls[4], rolls[5])))));
    temp = temp*2;
    for (k = 0; k < 6; k++)
      if (table[k] < temp) {
	temp ^= table[k];
	table[k] ^= temp;
	temp ^= table[k];
	  }
  }


  /*Give all a boost*/
	i = 0;
	for (j=0;j<6;j++)
		i = i + (int)table[j];
	/*ok lets say average = 450 (75 per) if LESS then this then bonus stats*/
/*
***METHOD 1 even spread of upping stats***
  while (i <= 450)
	{
		for (j=0;j<6;j++)
			if ((int)table[j] < 100)
			{
				table[j] = (ubyte)((int)table[j] + 1);
				i++;
			}
	}
*/
	/*METHOD 2 random spread of bonus 5 stat points***/
	while(i<=450)
	{
		j = number(0, 5);
		if ((int)table[j] < 100)
			{
				table[j] = (ubyte)((int)table[j] + 5);
				i = i + 5;
			}
	}

 ch->view_abils.str_add = 0;

  SET_BIT(PLR_FLAGS(ch), PLR_LOADROOM);
  SET_BIT(PRF_FLAGS(ch), PRF_AUTOEXIT);

  if (!GET_ROLL(ch, 0))
  {/*if baiscally NOT going through interpreter*/
  switch (GET_CLASS(ch)) {
  case CLASS_MAGIC_USER:
    ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
    break;
  case CLASS_CLERIC:
    ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
  case CLASS_THIEF:
    ch->view_abils.dex = table[0];
	ch->view_abils.str = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.intel = table[3];
	ch->view_abils.wis = table[4];
	ch->view_abils.cha = table[5];
    break;
  case CLASS_WARRIOR:
    ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
	ch->view_abils.con = table[2];
    ch->view_abils.wis = table[3];
    ch->view_abils.intel = table[4];
    ch->view_abils.cha = table[5];
	if (ch->view_abils.str == 100)
      ch->view_abils.str_add = number(0, 100);
	break;
	case CLASS_PALADIN:
    ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.wis = table[3];
	ch->view_abils.intel = table[4];
	ch->view_abils.cha = table[5];
	if (ch->view_abils.str == 100)
      ch->view_abils.str_add = number(0, 100);
	break;
	case CLASS_ANTI_PALADIN:
    ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.wis = table[3];
	ch->view_abils.intel = table[4];
	ch->view_abils.cha = table[5];
	if (ch->view_abils.str == 100)
      ch->view_abils.str_add = number(0, 100);
	break;
	case CLASS_RANGER:
    ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
    ch->view_abils.con = table[2];
	ch->view_abils.intel = table[3];
	ch->view_abils.wis = table[4];
	ch->view_abils.cha = table[5];
	if (ch->real_abils.str == 18)
      ch->real_abils.str_add = number(0, 100);
      ch->view_abils.str_add = ch->real_abils.str_add;
	break;
	case CLASS_DRUID:
    ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
	case CLASS_SHAMAN:
    ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
    break;
    case CLASS_ASSASSIN:
    ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
    break;
    case CLASS_MERCENARY:
    ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
       ch->view_abils.con = table[2];
	ch->view_abils.intel = table[3];
	ch->view_abils.wis = table[4];
	ch->view_abils.cha = table[5];
	if (ch->view_abils.str == 100)
      ch->view_abils.str_add = number(0, 100);
    break;
	case CLASS_NECROMANCER:
    ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
    break;
	case CLASS_CONJURER:
    ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
    break;
  case CLASS_BERSERKER:
    ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
	ch->view_abils.con = table[2];
    ch->view_abils.wis = table[3];
    ch->view_abils.intel = table[4];
    ch->view_abils.cha = table[5];
	if (ch->view_abils.str == 100)
      ch->view_abils.str_add = number(0, 100);
	break;
  case CLASS_MONK:
    ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
	ch->view_abils.con = table[2];
    ch->view_abils.wis = table[3];
    ch->view_abils.intel = table[4];
    ch->view_abils.cha = table[5];
	if (ch->view_abils.str == 100)
      ch->view_abils.str_add = number(0, 100);
	break;
  case CLASS_PRIEST:
    ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
  case CLASS_DIABOLIST:
    ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
  case CLASS_MYSTIC:
    ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
  case CLASS_ROGUE:
    ch->view_abils.dex = table[0];
	ch->view_abils.str = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.intel = table[3];
	ch->view_abils.wis = table[4];
	ch->view_abils.cha = table[5];
    break;
  case CLASS_BARD:
    ch->view_abils.dex = table[0];
	ch->view_abils.str = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.intel = table[3];
	ch->view_abils.wis = table[4];
	ch->view_abils.cha = table[5];
    break;
  case CLASS_PYROMANCER:
    ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
    break;
  case CLASS_CRYOMANCER:
    ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
    break;
  case CLASS_ILLUSIONIST:
    ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
    break;
  case CLASS_HUNTER:
    ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
	ch->view_abils.con = table[2];
    ch->view_abils.wis = table[3];
    ch->view_abils.intel = table[4];
    ch->view_abils.cha = table[5];
	if (ch->view_abils.str == 100)
      ch->view_abils.str_add = number(0, 100);
	break;

}



}else
{/*through interpreter*/
	ch->view_abils.con = table[((int)GET_ROLL(ch, 0) - 1)];
    ch->view_abils.str = table[((int)GET_ROLL(ch, 1) - 1)];
	ch->view_abils.dex = table[((int)GET_ROLL(ch, 2) - 1)];
    ch->view_abils.wis = table[((int)GET_ROLL(ch, 3) - 1)];
    ch->view_abils.intel = table[((int)GET_ROLL(ch, 4) - 1)];
    ch->view_abils.cha = table[((int)GET_ROLL(ch, 5) - 1)];
	for (i=0;i<WARRIOR_SUBCLASSES;i++)
	{
		if (GET_CLASS(ch) == warrior_subclasses[i])
		{
			if (ch->view_abils.str == 100)
				ch->view_abils.str_add = number(0, 100);
			break;
		}
	}

}

ch->vaff_abils = ch->view_abils;

}


 /*
    calling this function wipes out every skill a player has. It
    also clears off all their affects so as not to corrupt any numbers.
 */
 void clear_skills(struct char_data *ch)
  {
   int i;

   /* unaffect ch */
   if(ch->affected) {
     while (ch->affected)
       affect_remove(ch, ch->affected);
     check_regen_rates(ch);
   }
   /* clear skills */
   for (i=0;i < MAX_SKILLS+1;i++)
     SET_SKILL(ch, i, 0);

 }

/*this function is used to limit the skill a players class can get
 *the defult is full skill 1000 so dont use it if it is that
 *It actually limits skill accross the levels, ie:
 MAX SKILL = 600/50 * lvl.  eg if 1000 was max 1000/50 = 20 *lvl
 *Proky.
 */

int return_max_skill(struct char_data *ch, int skill)
{
   int max_skill = 1000;

   switch(GET_RACE(ch))
   {
     case RACE_OGRE:
       switch(skill)
	{
	  case SKILL_PARRY:
          case SKILL_RIPOST:
	 max_skill = 750;break;
	}
     case RACE_TROLL:
       	switch(skill)
        {
        case SKILL_DODGE:
        case SKILL_PARRY:
         max_skill = 700;break;
        }
}
   switch(GET_CLASS(ch))
   {
      case CLASS_RANGER:
         switch(skill)
         {
            case SKILL_HUNT:max_skill = 750;break;
         }
         break;
      case CLASS_PRIEST:
         switch(skill)
         {
            case SKILL_DOUBLE_ATTACK:max_skill = 500;break;
         }
         break;
      case CLASS_HUNTER:
         switch(skill)
         {

         }
         break;
      case CLASS_WARRIOR:
         switch(skill)
         {
            case SKILL_TRACK:max_skill = 600;break;
         }
         break;
      case CLASS_MERCENARY:
         switch(skill)
         {
            case SKILL_TRACK:max_skill = 850;break;
         }
         break;
      case CLASS_ASSASSIN:
         switch(skill)
         {
            case SKILL_TRACK:max_skill = 750;break;
         }
         break;
      case CLASS_THIEF:
         switch(skill)
         {
            case SKILL_TRACK:max_skill = 600;break;
         }
         break;
      case CLASS_ROGUE:
         switch(skill)
         {
            case SKILL_TRACK:max_skill = 650;break;
         }
         break;
   }
   return (MIN(max_skill, (GET_LEVEL(ch) * (int)(max_skill/50))));
}




 /*
    This function was spliced from do_start. This can be called
    when player race or class changes. Be sure to call clear_skills
    before calling this. This is the magicfunction to cut out guildmasters
    set a players skill and spell_level will give it  at proper level
    where the player hits that level. All spells must be ste to 1000
    and skills set from 50 to 200. This is also used to set innate   skills
    -Banyal
 */
 void set_skills(struct char_data *ch)
 {

  /* Skills that everyone should have */
  SET_SKILL(ch, SKILL_DOUSE,50);
  SET_SKILL(ch, SKILL_FIRST_AID, 50);

  switch (GET_CLASS(ch)) {
  case CLASS_NECROMANCER:
	  SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
	  SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
	  SET_SKILL(ch, SPELL_FARSEE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
	  SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
	  SET_SKILL(ch, SPELL_INFRAVISION, 1000);
	  SET_SKILL(ch, SPELL_INVISIBLE, 1000);
	  SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
	  SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
	  SET_SKILL(ch, SPELL_STRENGTH, 1000);
	  SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
	  SET_SKILL(ch, SPELL_SLEEP, 1000);
	  SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_ENERGY_DRAIN, 1000);
	  SET_SKILL(ch, SPELL_ANIMATE_DEAD, 1000);
	  SET_SKILL(ch, SPELL_SUMMON_DRACOLICH, 1000);
	  SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	   SET_SKILL(ch, SPELL_FARSEE, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
      SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
 break;

  case CLASS_CONJURER:
	  SET_SKILL(ch, SPELL_WALL_OF_STONE, 1000);
	  SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
	  SET_SKILL(ch, SPELL_FARSEE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
	  SET_SKILL(ch, SPELL_INFRAVISION, 1000);
	  SET_SKILL(ch, SPELL_INVISIBLE, 1000);
	  SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
	  SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
	  SET_SKILL(ch, SPELL_STRENGTH, 1000);
	  SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
	  SET_SKILL(ch, SPELL_SLEEP, 1000);
	  SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_COLOR_SPRAY, 1000);
	  SET_SKILL(ch, SPELL_FIREBALL, 1000);
	  SET_SKILL(ch, SPELL_ENCHANT_WEAPON, 1000);
	  SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
	  SET_SKILL(ch, SPELL_WALL_OF_FOG, 1000);
	  SET_SKILL(ch, SPELL_FLY, 1000);
	  SET_SKILL(ch, SPELL_SUMMON_ELEMENTAL, 1000);
	  SET_SKILL(ch, SPELL_SUMMON_DEMON, 1000);
	  SET_SKILL(ch, SPELL_SUMMON_GREATER_DEMON, 1000);
	  SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
      SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
	   break;
  case CLASS_MAGIC_USER:
          SET_SKILL(ch, SPELL_REDUCE, 1000);
          SET_SKILL(ch, SPELL_ENLARGE, 1000);
	  SET_SKILL(ch, SPELL_MASS_INVIS, 1000);
 	  SET_SKILL(ch, SPELL_CHAIN_LIGHTNING, 1000);
 	  SET_SKILL(ch, SPELL_RELOCATE, 1000);
	  SET_SKILL(ch, SPELL_DISINTEGRATE, 1000);
 	  SET_SKILL(ch, SPELL_HARNESS, 1000);
	  SET_SKILL(ch, SPELL_MINOR_GLOBE, 1000);
	  SET_SKILL(ch, SPELL_MAJOR_GLOBE, 1000);
	  SET_SKILL(ch, SPELL_FIRESHIELD, 1000);
	  SET_SKILL(ch, SPELL_COLDSHIELD, 1000);
	  SET_SKILL(ch, SPELL_TELEPORT, 1000);
	  SET_SKILL(ch, SPELL_MINOR_PARALYSIS, 1000);
	  SET_SKILL(ch, SPELL_LEVITATE, 1000);
	  SET_SKILL(ch, SPELL_WIZARD_EYE, 1000);
	  SET_SKILL(ch, SPELL_RAY_OF_ENFEEB, 1000);
	  SET_SKILL(ch, SPELL_CONCEALMENT, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
	  SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
	  SET_SKILL(ch, SPELL_FARSEE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
	  SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
	  SET_SKILL(ch, SPELL_INFRAVISION, 1000);
	  SET_SKILL(ch, SPELL_INVISIBLE, 1000);
	  SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
	  SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
	  SET_SKILL(ch, SPELL_STRENGTH, 1000);
	  SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
	  SET_SKILL(ch, SPELL_SLEEP, 1000);
	  SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
	  SET_SKILL(ch, SPELL_COLOR_SPRAY, 1000);
	  SET_SKILL(ch, SPELL_FIREBALL, 1000);
//	  SET_SKILL(ch, SPELL_CHARM, 1000);
	  SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
	  SET_SKILL(ch, SPELL_FLY, 1000);
	  SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SPELL_METEORSWARM, 1000);
	  SET_SKILL(ch, SPELL_BIGBYS_CLENCHED_FIST, 1000);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
      SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
	  SET_SKILL(ch, SPELL_ICE_STORM, 1000);
	 SET_SKILL(ch, SPELL_INCENDIARY_NEBULA, 1000);
     SET_SKILL(ch, SKILL_BANDAGE, 50);
	  break;

  case CLASS_PYROMANCER:
	  SET_SKILL(ch, SPELL_FIRE_DARTS, 1000);
	  SET_SKILL(ch, SPELL_MAGIC_TORCH, 1000);
	  SET_SKILL(ch, SPELL_SMOKE, 1000);
	  SET_SKILL(ch, SPELL_MIRAGE, 1000);
	  SET_SKILL(ch, SPELL_FLAME_BLADE, 1000);
	  SET_SKILL(ch, SPELL_HEATWAVE, 1000);
	  SET_SKILL(ch, SPELL_FIRESTORM, 1000);
	  SET_SKILL(ch, SPELL_MELT, 1000);
	  SET_SKILL(ch, SPELL_CIRCLE_OF_FIRE, 1000);
	  SET_SKILL(ch, SPELL_IMMOLATE, 1000);
	  SET_SKILL(ch, SPELL_SUPERNOVA, 1000);
	  SET_SKILL(ch, SPELL_GREATER_FIREWALK, 1000);
	  SET_SKILL(ch, SPELL_NEGATE_HEAT, 1000);
	  SET_SKILL(ch, SPELL_FIREWALK, 1000);
	  SET_SKILL(ch, SPELL_MASS_INVIS, 1000);
 	  SET_SKILL(ch, SPELL_RELOCATE, 1000);
 	  SET_SKILL(ch, SPELL_HARNESS, 1000);
	  SET_SKILL(ch, SPELL_MINOR_GLOBE, 1000);
	  SET_SKILL(ch, SPELL_MAJOR_GLOBE, 1000);
	  SET_SKILL(ch, SPELL_FIRESHIELD, 1000);
	  SET_SKILL(ch, SPELL_TELEPORT, 1000);
	  SET_SKILL(ch, SPELL_MINOR_PARALYSIS, 1000);
	  SET_SKILL(ch, SPELL_LEVITATE, 1000);
	  SET_SKILL(ch, SPELL_WIZARD_EYE, 1000);
	  SET_SKILL(ch, SPELL_RAY_OF_ENFEEB, 1000);
	  SET_SKILL(ch, SPELL_CONCEALMENT, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
	  SET_SKILL(ch, SPELL_FARSEE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
	  SET_SKILL(ch, SPELL_INFRAVISION, 1000);
	  SET_SKILL(ch, SPELL_INVISIBLE, 1000);
	  SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
	  SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
	  SET_SKILL(ch, SPELL_STRENGTH, 1000);
	  SET_SKILL(ch, SPELL_SLEEP, 1000);
	  SET_SKILL(ch, SPELL_COLOR_SPRAY, 1000);
	  SET_SKILL(ch, SPELL_FIREBALL, 1000);
//	  SET_SKILL(ch, SPELL_CHARM, 1000);
	  SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
	  SET_SKILL(ch, SPELL_FLY, 1000);
	  SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SPELL_METEORSWARM, 1000);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_INCENDIARY_NEBULA, 1000);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
	  break;

  case CLASS_CRYOMANCER:
	  SET_SKILL(ch, SPELL_ICE_DARTS, 1000);
	  SET_SKILL(ch, SPELL_ICE_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_ICE_DAGGER, 1000);
	  SET_SKILL(ch, SPELL_FREEZING_WIND, 1000);
	  SET_SKILL(ch, SPELL_FREEZE, 1000);
	  SET_SKILL(ch, SPELL_WALL_OF_ICE, 1000);
	  SET_SKILL(ch, SPELL_ICEBALL, 1000);
	  SET_SKILL(ch, SPELL_FLOOD, 1000);
	  SET_SKILL(ch, SPELL_GREATER_WATERWALK, 1000);
	  SET_SKILL(ch, SPELL_NEGATE_COLD, 1000);
	  SET_SKILL(ch, SPELL_WATERFORM, 1000);
	  SET_SKILL(ch, SPELL_DOUSE, 1000);
	  SET_SKILL(ch, SPELL_RAIN, 1000);
	  SET_SKILL(ch, SPELL_MASS_INVIS, 1000);
 	  SET_SKILL(ch, SPELL_CHAIN_LIGHTNING, 1000);
 	  SET_SKILL(ch, SPELL_RELOCATE, 1000);
 	  SET_SKILL(ch, SPELL_HARNESS, 1000);
	  SET_SKILL(ch, SPELL_MINOR_GLOBE, 1000);
	  SET_SKILL(ch, SPELL_MAJOR_GLOBE, 1000);
	  SET_SKILL(ch, SPELL_COLDSHIELD, 1000);
	  SET_SKILL(ch, SPELL_TELEPORT, 1000);
	  SET_SKILL(ch, SPELL_MINOR_PARALYSIS, 1000);
	  SET_SKILL(ch, SPELL_LEVITATE, 1000);
	  SET_SKILL(ch, SPELL_WIZARD_EYE, 1000);
	  SET_SKILL(ch, SPELL_RAY_OF_ENFEEB, 1000);
	  SET_SKILL(ch, SPELL_CONCEALMENT, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
	  SET_SKILL(ch, SPELL_FARSEE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
	  SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
	  SET_SKILL(ch, SPELL_INVISIBLE, 1000);
	  SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
	  SET_SKILL(ch, SPELL_STRENGTH, 1000);
	  SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
	  SET_SKILL(ch, SPELL_SLEEP, 1000);
	  SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
//	  SET_SKILL(ch, SPELL_CHARM, 1000);
	  SET_SKILL(ch, SPELL_FLY, 1000);
	  SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
	  SET_SKILL(ch, SPELL_ICE_STORM, 1000);
	  SET_SKILL(ch, SPELL_ICE_SHARDS, 1000);
          SET_SKILL(ch, SKILL_BANDAGE, 50);
	  break;

  case CLASS_ILLUSIONIST:
	  SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
	  SET_SKILL(ch, SPELL_FARSEE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
	  SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
	  SET_SKILL(ch, SPELL_INFRAVISION, 1000);
	  SET_SKILL(ch, SPELL_INVISIBLE, 1000);
	  SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
	  SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
	  SET_SKILL(ch, SPELL_STRENGTH, 1000);
	  SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
	  SET_SKILL(ch, SPELL_SLEEP, 1000);
	  SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_COLOR_SPRAY, 1000);
	  SET_SKILL(ch, SPELL_FIREBALL, 1000);
//	  SET_SKILL(ch, SPELL_CHARM, 1000);
	  SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
	  SET_SKILL(ch, SPELL_FLY, 1000);
	  SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SPELL_METEORSWARM, 1000);
	  SET_SKILL(ch, SPELL_BIGBYS_CLENCHED_FIST, 1000);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
      SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
	  SET_SKILL(ch, SPELL_ICE_STORM, 1000);
	  SET_SKILL(ch, SPELL_ICE_SHARDS, 1000);
	 SET_SKILL(ch, SPELL_INCENDIARY_NEBULA, 1000);
	 SET_SKILL(ch, SKILL_BANDAGE, 50);
     break;

  case CLASS_CLERIC:
	  SET_SKILL(ch, SPELL_PLANE_SHIFT, 1000);
	  SET_SKILL(ch, SPELL_UNHOLY_WORD, 1000);
	  SET_SKILL(ch, SPELL_HOLY_WORD, 1000);
	  SET_SKILL(ch, SPELL_WATERWALK, 1000);
	  SET_SKILL(ch, SPELL_CONTINUAL_LIGHT, 1000);
          SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
	  SET_SKILL(ch, SPELL_SILENCE, 1000);
	  SET_SKILL(ch, SPELL_FLAMESTRIKE, 1000);
	  SET_SKILL(ch, SPELL_DESTROY_UNDEAD, 1000);
          SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
	  SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_PRESERVE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
	  SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_BLINDNESS, 1000);
	  SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
	  SET_SKILL(ch, SPELL_GROUP_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_SUMMON, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
	  SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
	  SET_SKILL(ch, SPELL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_HARM, 1000);
	  SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
	  SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
	  SET_SKILL(ch, SPELL_FULL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_FULL_HARM, 1000);
	  SET_SKILL(ch, SPELL_VITALITY, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SPELL_DARKNESS, 1000);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_RESURRECT, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SKILL_BANDAGE, 50);
      break;

  case CLASS_PRIEST:
	  SET_SKILL(ch, SPELL_SANE_MIND, 1000);
          SET_SKILL(ch, SPELL_DIVINE_ESSENCE,1000);
	  SET_SKILL(ch, SPELL_HEAVENS_GATE, 1000);
	  SET_SKILL(ch, SPELL_SPEAK_IN_TONGUES, 1000);
	  SET_SKILL(ch, SPELL_ENLIGHTENMENT, 1000);
	  SET_SKILL(ch, SPELL_EXORCISM, 1000);
	  SET_SKILL(ch, SPELL_GREATER_INVOCATION, 1000);
	  SET_SKILL(ch, SPELL_WINGS_OF_HEAVEN, 1000);
	  SET_SKILL(ch, SPELL_BANISH, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_COMMAND, 1000);
	  SET_SKILL(ch, SPELL_LESSER_INVOCATION, 1000);
	  SET_SKILL(ch, SPELL_LESSER_EXORCISM, 1000);
	  SET_SKILL(ch, SPELL_DIVINE_RAY, 1000);
	  SET_SKILL(ch, SPELL_DIVINE_BOLT, 1000);
	  SET_SKILL(ch, SPELL_PRAYER, 1000);
	  SET_SKILL(ch, SPELL_ELEMENTAL_WARDING, 1000);
	  SET_SKILL(ch, SPELL_CIRCLE_OF_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_PLANE_SHIFT, 1000);
	  SET_SKILL(ch, SPELL_HOLY_WORD, 1000);
	  SET_SKILL(ch, SPELL_WATERWALK, 1000);
	  SET_SKILL(ch, SPELL_CONTINUAL_LIGHT, 1000);
          SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
	  SET_SKILL(ch, SPELL_SILENCE, 1000);
	  SET_SKILL(ch, SPELL_DESTROY_UNDEAD, 1000);
          SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
	  SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_PRESERVE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
	  SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_BLINDNESS, 1000);
	  SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
	  SET_SKILL(ch, SPELL_GROUP_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_SUMMON, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
	  SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
	  SET_SKILL(ch, SPELL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
	  SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
	  SET_SKILL(ch, SPELL_FULL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_FULL_HARM, 1000);
	  SET_SKILL(ch, SPELL_VITALITY, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_RESURRECT, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	 SET_SKILL(ch, SKILL_BANDAGE, 50);
      break;

  case CLASS_DIABOLIST:
	  SET_SKILL(ch, SPELL_HELLS_GATE, 1000);
	  SET_SKILL(ch, SPELL_DARK_PRESENCE, 1000);
	  SET_SKILL(ch, SPELL_DEMONSKIN, 1000);
	  SET_SKILL(ch, SPELL_DARK_FEAST, 1000);
	  SET_SKILL(ch, SPELL_HELL_BOLT, 1000);
	  SET_SKILL(ch, SPELL_DISEASE, 1000);
	  SET_SKILL(ch, SPELL_INSANITY, 1000);
	  SET_SKILL(ch, SPELL_SANE_MIND, 1000);
	  SET_SKILL(ch, SPELL_DEMONIC_ASPECT, 1000);
	  SET_SKILL(ch, SPELL_HELLFIRE_BRIMSTONE, 1000);
	  SET_SKILL(ch, SPELL_STYGIAN_ERUPTION, 1000);
	  SET_SKILL(ch, SPELL_DEMONIC_MUTATION, 1000);
	  SET_SKILL(ch, SPELL_SPEAK_IN_TONGUES, 1000);
	  SET_SKILL(ch, SPELL_GREATER_INVOCATION, 1000);
	  SET_SKILL(ch, SPELL_WINGS_OF_HELL, 1000);
	  SET_SKILL(ch, SPELL_BANISH, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_COMMAND, 1000);
	  SET_SKILL(ch, SPELL_LESSER_INVOCATION, 1000);
	  SET_SKILL(ch, SPELL_ELEMENTAL_WARDING, 1000);
	  SET_SKILL(ch, SPELL_PLANE_SHIFT, 1000);
	  SET_SKILL(ch, SPELL_UNHOLY_WORD, 1000);
	  SET_SKILL(ch, SPELL_WATERWALK, 1000);
	  SET_SKILL(ch, SPELL_DARKNESS, 1000);
          SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
	  SET_SKILL(ch, SPELL_SILENCE, 1000);
	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_PRESERVE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
	  SET_SKILL(ch, SPELL_BLINDNESS, 1000);
	  SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_SUMMON, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
	  SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
	  SET_SKILL(ch, SPELL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
	  SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
	  SET_SKILL(ch, SPELL_FULL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_FULL_HARM, 1000);
	  SET_SKILL(ch, SPELL_VITALITY, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_RESURRECT, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SKILL_BANDAGE, 50);
      break;

  case CLASS_MYSTIC:
      SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
	  SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_BLINDNESS, 1000);
	  SET_SKILL(ch, SPELL_INFRAVISION, 1000);
	  SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
	  SET_SKILL(ch, SPELL_GROUP_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_SUMMON, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
	  SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
	  SET_SKILL(ch, SPELL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_HARM, 1000);
	  SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
	  SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
	  SET_SKILL(ch, SPELL_FULL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_FULL_HARM, 1000);
	  SET_SKILL(ch, SPELL_VITALITY, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SPELL_DARKNESS, 1000);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
      SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SKILL_BANDAGE, 50);
      break;

  case CLASS_THIEF:
        SET_SKILL(ch, SKILL_SNEAK, 100);
        SET_SKILL(ch, SKILL_HIDE, 50);
        SET_SKILL(ch, SKILL_STEAL, 150);
        SET_SKILL(ch, SKILL_BACKSTAB, 100);
        SET_SKILL(ch, SKILL_PICK_LOCK, 100);
        SET_SKILL(ch, SKILL_TRACK, 100);
	SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	SET_SKILL(ch, SKILL_DODGE, 50);
	SET_SKILL(ch, SKILL_PARRY, 50);
	SET_SKILL(ch, SKILL_RIDING, 50);
	SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
    break;

  case CLASS_ROGUE:
        SET_SKILL(ch, SKILL_SNEAK, 100);
        SET_SKILL(ch, SKILL_HIDE, 50);
        SET_SKILL(ch, SKILL_BACKSTAB, 100);
        SET_SKILL(ch, SKILL_PICK_LOCK, 100);
        SET_SKILL(ch, SKILL_TRACK, 100);
	SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	SET_SKILL(ch, SKILL_DODGE, 50);
	SET_SKILL(ch, SKILL_PARRY, 50);
	SET_SKILL(ch, SKILL_RIDING, 50);
	SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
    break;

  case CLASS_BARD:
        SET_SKILL(ch, SKILL_SNEAK, 100);
        SET_SKILL(ch, SKILL_HIDE, 50);
        SET_SKILL(ch, SKILL_STEAL, 150);
        SET_SKILL(ch, SKILL_BACKSTAB, 100);
        SET_SKILL(ch, SKILL_PICK_LOCK, 100);
        SET_SKILL(ch, SKILL_TRACK, 100);
	SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	SET_SKILL(ch, SKILL_DODGE, 50);
	SET_SKILL(ch, SKILL_PARRY, 50);
	SET_SKILL(ch, SKILL_RIDING, 50);
	SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
    break;

  case CLASS_WARRIOR:
          SET_SKILL(ch, SKILL_DISARM, 100);
          SET_SKILL(ch, SKILL_HITALL, 50);
	  SET_SKILL(ch, SKILL_GUARD, 50);
	  SET_SKILL(ch, SKILL_SWITCH, 50);
	  SET_SKILL(ch, SKILL_TRACK, 50);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	  SET_SKILL(ch, SKILL_BASH, 50);
	  SET_SKILL(ch, SKILL_KICK, 50);
	  SET_SKILL(ch, SKILL_RESCUE, 50);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_PARRY, 50);
	  SET_SKILL(ch, SKILL_RIPOST, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
    break;

  case CLASS_MONK:
	  SET_SKILL(ch, SKILL_SWITCH, 50);
          SET_SKILL(ch, SKILL_GUARD, 50);
	  SET_SKILL(ch, SKILL_TRACK, 50);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	  SET_SKILL(ch, SKILL_BASH, 50);
	  SET_SKILL(ch, SKILL_KICK, 50);
	  SET_SKILL(ch, SKILL_RESCUE, 50);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_PARRY, 50);
	  SET_SKILL(ch, SKILL_RIPOST, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
    break;

  case CLASS_BERSERKER:
          SET_SKILL(ch, SKILL_GUARD, 50);
	  SET_SKILL(ch, SKILL_SWITCH, 50);
   	  SET_SKILL(ch, SKILL_HITALL, 50);
	  SET_SKILL(ch, SKILL_TRACK, 50);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	  SET_SKILL(ch, SKILL_BASH, 50);
	  SET_SKILL(ch, SKILL_KICK, 50);
	  SET_SKILL(ch, SKILL_RESCUE, 50);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_PARRY, 50);
	  SET_SKILL(ch, SKILL_RIPOST, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
    break;

  case CLASS_HUNTER:
	  SET_SKILL(ch, SKILL_TRACK, 50);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	  SET_SKILL(ch, SKILL_BASH, 50);
	  SET_SKILL(ch, SKILL_KICK, 50);
	  SET_SKILL(ch, SKILL_RESCUE, 50);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_PARRY, 50);
	  SET_SKILL(ch, SKILL_RIPOST, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
      SET_SKILL(ch, SKILL_HUNT, 50);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
    break;

	  case CLASS_ASSASSIN:
        SET_SKILL(ch, SKILL_SNEAK, 150);
        SET_SKILL(ch, SKILL_INSTANT_KILL, 50);
        SET_SKILL(ch, SKILL_HIDE, 50);
        SET_SKILL(ch, SKILL_BACKSTAB, 150);
	SET_SKILL(ch, SKILL_CIRCLE, 100);
        SET_SKILL(ch, SKILL_TRACK, 150);
	SET_SKILL(ch, SKILL_THROATCUT, 50);
	SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	SET_SKILL(ch, SKILL_DODGE, 50);
	SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	SET_SKILL(ch, SKILL_PARRY, 50);
	SET_SKILL(ch, SKILL_RIDING, 50);
	SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
    break;
  case CLASS_MERCENARY:
	  SET_SKILL(ch, SKILL_DISARM, 100);
          SET_SKILL(ch, SKILL_GUARD, 50);
	  SET_SKILL(ch, SKILL_SWITCH, 50);
	  SET_SKILL(ch, SKILL_HIDE, 50);
	  SET_SKILL(ch, SKILL_BIND, 50);
	  SET_SKILL(ch, SKILL_BACKSTAB, 100);
	  SET_SKILL(ch, SKILL_TRACK, 150);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	  SET_SKILL(ch, SKILL_BASH, 50);
	  SET_SKILL(ch, SKILL_KICK, 50);
	  SET_SKILL(ch, SKILL_RESCUE, 50);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_PARRY, 50);
	  SET_SKILL(ch, SKILL_RIPOST, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
      break;
  case CLASS_PALADIN:
          SET_SKILL(ch, SKILL_GUARD, 150);
	  SET_SKILL(ch, SKILL_SWITCH, 100);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 200);
	  SET_SKILL(ch, SKILL_BASH, 200);
	  SET_SKILL(ch, SKILL_KICK, 200);
	  SET_SKILL(ch, SKILL_RESCUE, 200);
	  SET_SKILL(ch, SKILL_TAME, 50);

          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
          SET_SKILL(ch, SKILL_DISARM, 100);
          SET_SKILL(ch, SKILL_HITALL, 100);
          SET_SKILL(ch, SPELL_HOLY_WORD, 1000);
          SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);

	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
	  SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
	  SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
      SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
	  SET_SKILL(ch, SPELL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_BLUR, 1000);
          SET_SKILL(ch, SPELL_SOULSHIELD, 1000);

	  SET_SKILL(ch, SKILL_DODGE, 250);
	  SET_SKILL(ch, SKILL_PARRY, 250);
	  SET_SKILL(ch, SKILL_RIPOST, 250);
	  SET_SKILL(ch, SKILL_RIDING, 250);
	  SET_SKILL(ch, SKILL_MOUNT, 250);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
      SET_SKILL(ch, SKILL_BANDAGE, 200);
	  break;
	  case CLASS_ANTI_PALADIN:
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 200);
          SET_SKILL(ch, SKILL_VAMP_TOUCH, 200);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 200);
	  SET_SKILL(ch, SKILL_BASH, 200);
	  SET_SKILL(ch, SKILL_KICK, 200);
	  SET_SKILL(ch, SKILL_RESCUE,200);
	  SET_SKILL(ch, SKILL_TAME, 50);

          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
          SET_SKILL(ch, SKILL_DISARM, 100);
          SET_SKILL(ch, SKILL_HITALL, 100);
          SET_SKILL(ch, SPELL_UNHOLY_WORD, 1000);
          SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
          SET_SKILL(ch, SPELL_CURSE, 1000);
          SET_SKILL(ch, SPELL_POISON, 1000);
 	  SET_SKILL(ch, SPELL_VAMPIRIC_BREATH, 1000);

	  SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_DEMONSKIN, 1000);
	  SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
	  SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_BLINDNESS, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
          SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
	  SET_SKILL(ch, SPELL_HARM, 1000);

	  SET_SKILL(ch, SKILL_DODGE,200);
	  SET_SKILL(ch, SKILL_PARRY, 200);
	  SET_SKILL(ch, SKILL_RIDING, 150);
	  SET_SKILL(ch, SKILL_MOUNT, 150);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
	  SET_SKILL(ch, SKILL_RIPOST, 250);
      SET_SKILL(ch, SKILL_BANDAGE, 150);
	  break;
  case CLASS_RANGER:
	  SET_SKILL(ch, SKILL_SWITCH, 50);
          SET_SKILL(ch, SKILL_GUARD, 50);
	  SET_SKILL(ch, SKILL_KICK, 200);
	  SET_SKILL(ch, SKILL_RESCUE, 200);
	  SET_SKILL(ch, SKILL_TRACK, 150);
	  SET_SKILL(ch, SKILL_BASH, 200);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 200);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 200);
	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
	  SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
	  SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
	  SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
	  SET_SKILL(ch, SKILL_SPRINGLEAP, 50);
          SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	  SET_SKILL(ch, SPELL_BLUR, 1000);
	  SET_SKILL(ch, SPELL_BARKSKIN, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 150);
	  SET_SKILL(ch, SKILL_PARRY, 150);
	  SET_SKILL(ch, SKILL_RIPOST, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
	  break;
  case CLASS_DRUID:
	  SET_SKILL(ch, SPELL_WANDERING_WOODS, 1000);
	  SET_SKILL(ch, SPELL_SUNRAY, 1000);
	  SET_SKILL(ch, SPELL_URBAN_RENEWAL, 1000);
	  SET_SKILL(ch, SPELL_ARMOR_OF_GAIA, 1000);
	  SET_SKILL(ch, SPELL_CONTINUAL_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_PLANE_SHIFT, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_NOURISHMENT, 1000);
	  SET_SKILL(ch, SPELL_GAIAS_CLOAK, 1000);
	  SET_SKILL(ch, SPELL_NATURES_EMBRACE, 1000);
	  SET_SKILL(ch, SPELL_ENTANGLE, 1000);
	  SET_SKILL(ch, SPELL_INVIGORATE, 1000);
	  SET_SKILL(ch, SPELL_CREATE_SPRING, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_CURE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_BARKSKIN, 1000);
	  SET_SKILL(ch, SPELL_NIGHT_VISION, 1000);
	  SET_SKILL(ch, SPELL_WRITHING_WEEDS, 1000);
	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
	  SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
	  SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
	  SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_SUMMON, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
	  SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
	  SET_SKILL(ch, SPELL_CALL_LIGHTNING, 1000);
	  SET_SKILL(ch, SPELL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_CONTROL_WEATHER, 1000);
	  SET_SKILL(ch, SPELL_HARM, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
	  SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
	  SET_SKILL(ch, SPELL_WATERWALK, 1000);
	  SET_SKILL(ch, SPELL_VITALITY, 1000);
	  SET_SKILL(ch, SPELL_CREEPING_DOOM, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SPELL_DARKNESS, 1000);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_MOONWELL, 1000);
          SET_SKILL(ch, SKILL_SHAPECHANGE, 50);
          SET_SKILL(ch, SKILL_BANDAGE, 50);
	  break;
  case CLASS_SHAMAN:
	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
	  SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
	  SET_SKILL(ch, SPELL_BLINDNESS, 1000);
	  SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
	  SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_SUMMON, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
	  SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
	  SET_SKILL(ch, SPELL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_HARM, 1000);
	  SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
	  SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
	  SET_SKILL(ch, SPELL_FIREBALL, 1000);
	  SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	  SET_SKILL(ch, SPELL_VITALITY, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SPELL_DARKNESS, 1000);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
      SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
	  break;

  }

  switch (GET_RACE(ch)) {

  case RACE_DROW_ELF:
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, LANG_DUERGAR, 300);
	  SET_SKILL(ch, LANG_DROW, 1000);
	  SET_SKILL(ch, LANG_OGRE, 300);
	  SPEAKING(ch) = LANG_DROW;
          if (GET_LEVEL(ch) == 1){
	  GET_DAMROLL(ch) = 2;
	  GET_HITROLL(ch) = 3;
          }
	  GET_ALIGNMENT(ch) = -1000;
    break;
case RACE_ELF:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_ELVEN, 1000);
	  SET_SKILL(ch, LANG_COMMON, 200);
	  SET_SKILL(ch, LANG_HALFLING, 200);
	  SET_SKILL(ch, LANG_GNOMISH, 200);
	  SPEAKING(ch) = LANG_ELVEN;
          if (GET_LEVEL(ch) == 1){
	  GET_DAMROLL(ch) = 2;
	  GET_HITROLL(ch) = 3;
          }
	  GET_ALIGNMENT(ch) = 1000;
    break;
case RACE_DWARF:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_DWARVEN, 1000);
	  SET_SKILL(ch, LANG_COMMON, 100);
	  SET_SKILL(ch, LANG_GNOMISH, 200);
	  SET_SKILL(ch, LANG_HALFLING, 200);
	  SPEAKING(ch) = LANG_DWARVEN;
          if (GET_LEVEL(ch) == 1){
	  GET_DAMROLL(ch) = 4;
	  GET_HITROLL(ch) = 5;
          }
	  GET_ALIGNMENT(ch) = 1000;
    break;
case RACE_DUERGAR:
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, LANG_DUERGAR, 1000);
	  SET_SKILL(ch, LANG_DROW, 100);
	  SET_SKILL(ch, LANG_OGRE, 200);
	  SPEAKING(ch) = LANG_DUERGAR;
          if (GET_LEVEL(ch) == 1){
	  GET_DAMROLL(ch) = 4;
	  GET_HITROLL(ch) = 5;
          }
	  GET_ALIGNMENT(ch) = -1000;
    break;
case RACE_HALFLING:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_BIT(AFF_FLAGS(ch), AFF_SENSE_LIFE);
	  SET_SKILL(ch, LANG_HALFLING, 1000);
	  SET_SKILL(ch, LANG_COMMON, 400);
	  SET_SKILL(ch, LANG_ELVEN, 200);
	  SET_SKILL(ch, LANG_DWARVEN, 400);
	  SET_SKILL(ch, LANG_GNOMISH, 200);
	  SPEAKING(ch) = LANG_HALFLING;
          if (GET_LEVEL(ch) == 1){
	  GET_DAMROLL(ch) = 3;
	  GET_HITROLL(ch) = 6;
	  }
	  GET_ALIGNMENT(ch) = 1000;
    break;
case RACE_TROLL:
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, SKILL_DOORBASH, 1000);
	  SET_SKILL(ch, LANG_TROLLISH, 1000);
	  SET_SKILL(ch, LANG_DROW, 50);
	  SPEAKING(ch) = LANG_TROLLISH;
          if (GET_LEVEL(ch) == 1){
	  GET_DAMROLL(ch) = 5;
	  GET_HITROLL(ch) = 4;
	  }
	  GET_ALIGNMENT(ch) = -1000;
    break;
case RACE_OGRE:
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, SKILL_DOORBASH, 1000);
	  SET_SKILL(ch, LANG_OGRE, 1000);
	  SET_SKILL(ch, LANG_TROLLISH, 50);
	  SPEAKING(ch) = LANG_OGRE;
          if (GET_LEVEL(ch) == 1){
	  GET_DAMROLL(ch) = 5;
	  GET_HITROLL(ch) = 4;
	  }
	  GET_ALIGNMENT(ch) = -1000;
    break;
case RACE_HALF_ELF:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_COMMON, 1000);
	  SET_SKILL(ch, LANG_ELVEN, 1000);
	  SET_SKILL(ch, LANG_DWARVEN, 200);
	  SET_SKILL(ch, LANG_HALFLING, 200);
	  SPEAKING(ch) = LANG_ELVEN;
          if (GET_LEVEL(ch) == 1){
	  GET_HITROLL(ch) = 3;
	  GET_DAMROLL(ch) = 3;
	  }
	  GET_ALIGNMENT(ch) = 1000;
    break;
case RACE_GNOME:
	  TOGGLE_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_COMMON, 200);
	  SET_SKILL(ch, LANG_ELVEN, 200);
	  SET_SKILL(ch, LANG_GNOMISH, 1000);
	  SET_SKILL(ch, LANG_HALFLING, 200);
	  SPEAKING(ch) = LANG_GNOMISH;
          if (GET_LEVEL(ch) == 1){
	  GET_HITROLL(ch) = 4;
	  GET_DAMROLL(ch) = 2;
	  }
	  GET_ALIGNMENT(ch) = 1000;
	  break;
case RACE_BARBARIAN:
	SET_SKILL(ch, SKILL_DOORBASH, 1000);
	SET_SKILL(ch, LANG_COMMON, 200);
	SET_SKILL(ch, LANG_BARBARIAN, 1000);
	SPEAKING(ch) = LANG_BARBARIAN;
        if (GET_LEVEL(ch) == 1){
	GET_DAMROLL(ch) = 5;
	GET_HITROLL(ch) = 4;
 	}
        break;
case RACE_HUMAN:
	SET_SKILL(ch, LANG_COMMON, 1000);
	SET_SKILL(ch, LANG_ELVEN, 200);
	SET_SKILL(ch, LANG_HALFLING, 200);
	SET_SKILL(ch, LANG_DWARVEN, 200);
	SET_SKILL(ch, LANG_GNOMISH, 200);
	SET_SKILL(ch, LANG_HALFLING, 200);
	SPEAKING(ch) = LANG_COMMON;
        if (GET_LEVEL(ch) == 1){
	GET_HITROLL(ch) = 3;
	GET_DAMROLL(ch) = 3;
	}
	break;
case RACE_ORC:
	SET_SKILL(ch, LANG_DROW, 200);
	SET_SKILL(ch, LANG_DUERGAR, 200);
	SET_SKILL(ch, LANG_OGRE, 100);
	SET_SKILL(ch, LANG_ORCISH, 1000);
	SET_SKILL(ch, LANG_TROLLISH, 200);
	SPEAKING(ch) = LANG_ORCISH;
          if (GET_LEVEL(ch) == 1){
	GET_HITROLL(ch) = 3;
	GET_DAMROLL(ch) = 3;
	}
	GET_ALIGNMENT(ch) = -1000;
		break;
  }

  if (GET_LEVEL(ch) == 1)
    GET_DIETY(ch) = -1;

}

/*std hp table*/          /*MU|CL|TH|WA|PL|AP|RA|DR|SH*/
const int std_hp_table[] = { 5, 8, 8,12,10,10,10, 8, 8,
/*AS|MC|NE|CO|MO|BE|PR|DI|MY|RO|BA|PY|CR|IL|HU*/
   8,11, 5, 5,10,12, 8, 8, 8, 8, 9, 5, 5, 5, 10
};
const int race_reduce[] =
/*HU|EL|GN|DW|TR|DE|DU|OG|OR|HE|BA|HA*/
{  0,-1,-1, 1, 1,-1, 1, 2, 0, 0, 1,-1} ;

/* Some initializations for characters, including initial skills */
void do_start(struct char_data * ch)
{
    void advance_level(struct char_data * ch, int);
    void set_innate(struct char_data * ch, char *arg);


  GET_LEVEL(ch) = 1;
  GET_EXP(ch) = 1;

  set_title(ch, "\0");
  ch->points.max_hit = 15;
  GET_NATHPS(ch) = 15;
  set_skills(ch);


  advance_level(ch, TRUE);

  GET_HIT(ch) = GET_MAX_HIT(ch);
  GET_MANA(ch) = GET_MAX_MANA(ch);
  GET_MOVE(ch) = GET_MAX_MOVE(ch);

  GET_COND(ch, THIRST) = 24;
  GET_COND(ch, FULL) = 24;
  GET_COND(ch, DRUNK) = 0;

  ch->player.time.played = 0;
  ch->player.time.logon = time(0);
}



/*
 * This function controls the change to maxmove, maxmana, and maxhp for
 * each class every time they gain a level.
 */
/*modified by proky so if loose level uses GET_LASTLEVEL(ch)*/

void advance_level(struct char_data * ch, int state)
{
  int add_hp = 0, add_move = 0, i;
  int dice, sub;
  extern struct wis_app_type wis_app[];
//  extern struct con_app_type con_app[];

  /*add_hp = con_app[GET_CON(ch)].hitp;*/
  if (number(0, 4))
       sub = 0;
  else
      sub = 1;
  switch (GET_CLASS(ch)) {

  case CLASS_MAGIC_USER:
	  if (state) {
            dice = number(3, 8);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
		add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= (GET_LASTLEVEL(ch) + sub);
          else
		add_hp -= 8;
		add_move = -number(0, 2);
		}
		break;

  case CLASS_CLERIC:
      if (state) {
          dice = number(5, 10);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   add_hp -= 10;
    add_move = -number(0, 2);
	  }
	  break;

  case CLASS_THIEF:
      if (state) {
	  dice = number(7, 13);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   	  add_hp -= 13;
    add_move = -number(1, 3);
	  }
	break;

  case CLASS_WARRIOR:
   	  if (state) {
	  dice = number(10, 15);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	add_hp -= 14;
    add_move = -number(1, 3);
	  }
    break;

  case CLASS_PALADIN:
      if (state) {
	 dice = number(9, 14);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 32);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   	  add_hp -=  14;
    add_move = -number(1, 2);
	  }
    break;

  case CLASS_ANTI_PALADIN:
    if (state) {
	  dice = number(9, 14);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 2);
	  } else {
        if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   	  add_hp -=  14;
    add_move = -number(1, 2);
	  }
    break;

	case CLASS_RANGER:
     if (state) {
	 dice = number(9, 13);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
         if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   	  add_hp -= 13;
    add_move = -number(1, 3);
	  }
    break;


	case CLASS_DRUID:
		if (state) {
		dice = number(5, 11);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(0, 2);
		} else {
            if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
		 	add_hp -= 11;
    add_move = -number(0, 2);
		}
    SET_SKILL(ch, SKILL_SHAPECHANGE, MIN(1000,(int)(1000*GET_LEVEL(ch)/50)));
    break;

	case CLASS_SHAMAN:
		if (state) {
		dice = number(5, 10);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(0, 2);
		} else {
            if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
		 	add_hp -= 10;
    add_move = -number(0, 2);
		}
    break;

	case CLASS_ASSASSIN:
		if (state) {
	dice = number(7, 12);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
		} else {
            if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
			add_hp -= 12;
    add_move = -number(1, 3);
		}
    break;

	 case CLASS_MERCENARY:
		 if (state) {
dice = number(7, 14);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
		} else {
             if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
			add_hp -= 14;
    add_move = -number(1, 3);
		}

	 case CLASS_NECROMANCER:
     if (state) {
dice = number(3, 8);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
		add_move = number(0, 2);
	 } else {
         if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
		add_hp -= 8;
		add_move = -number(0, 2);
		}
		break;


	 case CLASS_CONJURER:
    if (state) {
		dice = number(3, 8);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
		add_move = number(0, 2);
	} else {
        if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
		add_hp -= 8;
		add_move = -number(0, 2);
		}
		break;
  case CLASS_MONK:
   	  if (state) {
dice = number(10, 15);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	add_hp -= 14;
    add_move = -number(1, 3);
	  }
    break;
  case CLASS_BERSERKER:
   	  if (state) {
dice = number(10, 15);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	add_hp -= 14;
    add_move = -number(1, 3);
	  }
    break;
  case CLASS_HUNTER:
   	  if (state) {
dice = number(10, 15);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	add_hp -= 14;
    add_move = -number(1, 3);
	  }
    break;
  case CLASS_PRIEST:
      if (state) {
	  dice = number(5, 10);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   add_hp -= 10;
    add_move = -number(0, 2);
	  }
	  break;

  case CLASS_DIABOLIST:
      if (state) {
	  dice = number(5, 10);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   add_hp -= 10;
    add_move = -number(0, 2);
	  }
	  break;

  case CLASS_MYSTIC:
      if (state) {
	 dice = number(5, 10);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   add_hp -= 10;
    add_move = -number(0, 2);
	  }
	  break;
  case CLASS_ROGUE:
      if (state) {
dice = number(7, 13);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   	  add_hp -= 13;
    add_move = -number(1, 3);
	  }
	break;
  case CLASS_BARD:
      if (state) {
	dice = number(7, 13);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   	  add_hp -= 13;
    add_move = -number(1, 3);
	  }
	break;
  case CLASS_PYROMANCER:
	  if (state) {
		dice = number(3, 8);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
		add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
		add_hp -= 8;
		add_move = -number(0, 2);
		}
		break;
  case CLASS_CRYOMANCER:
	  if (state) {
		dice = number(3, 8);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
		add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
		add_hp -= 8;
		add_move = -number(0, 2);
		}
		break;
  case CLASS_ILLUSIONIST:
	  if (state) {
		dice = number(3, 8);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
		add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
		add_hp -= 8;
		add_move = -number(0, 2);
		}
		break;



  }



/*if over level 25 use constants for hps*/
    if (GET_LEVEL(ch) > 30)
        if (state)
			add_hp = std_hp_table[(int)GET_CLASS(ch)];
		else
			add_hp = 0 - std_hp_table[(int)GET_CLASS(ch)];

/*race reduce*/
/*color out if dont want it in*/
 /*   add_hp = add_hp + race_reduce[(int)GET_RACE(ch)];
*/
  ch->points.max_hit +=  add_hp;
  GET_NATHPS(ch) += add_hp;
  affect_total(ch);
  ch->points.max_move +=  add_move;
  /*con_aff(ch);*/
  if (GET_LEVEL(ch) > 10)
    ch->points.max_mana = (GET_LEVEL(ch)^2)/10;
  else
    ch->points.max_mana = 0;

  if (GET_CLASS(ch) == CLASS_MAGIC_USER || GET_CLASS(ch) == CLASS_CLERIC) {
      if (state)
	  GET_PRACTICES(ch) += MAX(2, wis_app[GET_WIS(ch)].bonus);
  	  else
	  ;} else {
      if (state)
	  GET_PRACTICES(ch) += MIN(2, MAX(1, wis_app[GET_WIS(ch)].bonus));
	  else
	  ;  }
  if (GET_LEVEL(ch) >= LVL_IMMORT) {
    for (i = 0; i < 3; i++)
      GET_COND(ch, i) = (char) -1;
    SET_BIT(PRF_FLAGS(ch), PRF_HOLYLIGHT);
  }

  check_regen_rates(ch);	/* start regening new points */

  save_char(ch, NOWHERE);
  if (state) {
  sprintf(buf, "%s advanced to level %d", GET_NAME(ch), GET_LEVEL(ch));
  mudlog(buf, BRF, MAX(LVL_IMMORT, GET_INVIS_LEV(ch)), TRUE);
  } else {
   sprintf(buf, "%s lost level %d", GET_NAME(ch), GET_LEVEL(ch)+1);
  mudlog(buf, BRF, MAX(LVL_IMMORT, GET_INVIS_LEV(ch)), TRUE);
  }

  }

/*
 * This simply calculates the backstab multiplier based on a character's
 * level.  This used to be an array, but was changed to be a function so
 * that it would be easier to add more levels to your MUD.  This doesn't
 * really create a big performance hit because it's not used very often.
 */
int backstab_mult(int level)
{
  if (level <= 0)
    return 1;	  /* level 0 */
  else if (level <= 7)
    return 2;	  /* level 1 - 7 */
  else if (level <= 13)
    return 3;	  /* level 8 - 13 */
  else if (level <= 20)
    return 4;	  /* level 14 - 20 */
  else if (level <= 28)
    return 5;	  /* level 21 - 28 */
  else if (level <= 38)
    return 6;
  else if (level <= 48)
    return 7;
  else if (level < LVL_IMMORT)
    return 8;	  /* all remaining mortal levels */
  else
    return 20;	  /* immortals */
}


/*
 * invalid_class is used by handler.c to determine if a piece of equipment is
 * usable by a particular class, based on the ITEM_ANTI_{class} bitvectors.
 */

int invalid_class(struct char_data *ch, struct obj_data *obj) {
  if ((IS_OBJ_STAT(obj, ITEM_ANTI_MAGIC_USER) && IS_MAGIC_USER(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_CLERIC) && IS_CLERIC(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_WARRIOR) && IS_WARRIOR(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_THIEF) && IS_THIEF(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_PALADIN) && IS_PALADIN(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_ANTI_PALADIN) && IS_ANTI_PALADIN(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_RANGER) && IS_RANGER(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_DRUID) && IS_DRUID(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_SHAMAN) && IS_SHAMAN(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_ASSASSIN) && IS_ASSASSIN(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_MERCENARY) && IS_MERCENARY(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_NECROMANCER) && IS_NECROMANCER(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_CONJURER) && IS_CONJURER(ch)))
	return 1;
  else
	return 0;
}




/*
 * SPELLS AND SKILLS.  This area defines which spells are assigned to
 * which classes, and the minimum level the character must be to use
 * the spell or skill.
 */
/*void init_spell_levels(void)
{*/
void init_spell_levels(void) {
   int i, j;
   int cls_mage = (1 << CLASS_MAGIC_USER);
   int cls_cleric = (1 << CLASS_CLERIC);
   int cls_thief = (1 << CLASS_THIEF);
   int cls_warrior = (1 << CLASS_WARRIOR);
   int cls_paladin = (1 << CLASS_PALADIN);
   int cls_antipaladin = (1 << CLASS_ANTI_PALADIN);
   int cls_ranger = (1 << CLASS_RANGER);
   int cls_druid = (1 << CLASS_DRUID);
   int cls_shaman = (1 << CLASS_SHAMAN);
   int cls_assassin = (1 << CLASS_ASSASSIN);
   int cls_mercenary = (1 << CLASS_MERCENARY);
   int cls_necro = (1 << CLASS_NECROMANCER);
   int cls_conj = (1 << CLASS_CONJURER);
   int cls_monk = (1 << CLASS_MONK);
   int cls_bers = (1 << CLASS_BERSERKER);
   int cls_priest = (1 << CLASS_PRIEST);
   int cls_diab = (1 << CLASS_DIABOLIST);
   int cls_mystic = (1 << CLASS_MYSTIC);
   int cls_rogue = (1 << CLASS_ROGUE);
   int cls_bard = (1 << CLASS_BARD);
   int cls_pyro = (1 << CLASS_PYROMANCER);
   int cls_cryo = (1 << CLASS_CRYOMANCER);
   int cls_illu = (1 << CLASS_ILLUSIONIST);
   int cls_hunter = (1 << CLASS_HUNTER);


   /* Assign a spell/skill to a a whole group of classes (0 is all)
    For instance, { SKILL_SECOND_ATTACK, cls_mage | cls_cleric, 14 },
    will give mages and clerics the SECOND_ATTACK skill at level 14.
    More convenient than individual spell_level()s.  Use 0 to give
    a skill to all the classes.
      -dkoepke */
   int base_skl[][3] = {
     { SKILL_MOUNT , 0, 1 },
     { SKILL_RIDING, 0, 1 },

     { -1, -1 } /* THIS MUST END THE LIST*/
   };

   /* give all the base_skl[]'s*/
   for (j = 0; base_skl[j][0] != -1; j++)
     for (i = 0; i < NUM_CLASSES; i++)
       if (!base_skl[j][1] || IS_SET(base_skl[j][1], (1 << i)))
         spell_level(base_skl[j][0], i, base_skl[j][2], 2);

   /* in my base patch, cls_mage, etc. are unused and that leads to
    annyoing warnings, so here I'll use them...*/
   j = (cls_mage-cls_mage)+(cls_cleric-cls_cleric)+(cls_thief-cls_thief)+
       (cls_warrior-cls_warrior)+(cls_paladin-cls_paladin)+
	   (cls_antipaladin-cls_antipaladin)+(cls_ranger-cls_ranger)+
	   (cls_druid-cls_druid)+(cls_shaman-cls_shaman)+
	   (cls_assassin-cls_assassin)+(cls_mercenary-cls_mercenary)+
	   (cls_necro-cls_necro)+(cls_conj-cls_conj) + cls_hunter + cls_illu +
  cls_cryo + cls_pyro + cls_bard + cls_rogue + cls_mystic + cls_diab +
cls_priest + cls_bers + cls_monk;

  /* MAGES */
  spell_level(SKILL_DOUSE, CLASS_MAGIC_USER, 1, 2);
  spell_level(SPELL_REDUCE, CLASS_MAGIC_USER, CIRCLE_11, 11);
  spell_level(SPELL_ENLARGE, CLASS_MAGIC_USER, CIRCLE_11, 11);
  spell_level(SKILL_FIRST_AID, CLASS_MAGIC_USER, 1, 2);
  spell_level(SPELL_CHAIN_LIGHTNING, CLASS_MAGIC_USER, CIRCLE_8, 8);
  spell_level(SPELL_RELOCATE, CLASS_MAGIC_USER, CIRCLE_9, 9);
  spell_level(SPELL_MASS_INVIS, CLASS_MAGIC_USER, CIRCLE_9, 9);
  spell_level(SPELL_DISINTEGRATE, CLASS_MAGIC_USER, CIRCLE_9, 9);
  spell_level(SPELL_HARNESS, CLASS_MAGIC_USER, CIRCLE_8, 8);
  spell_level(SPELL_MINOR_GLOBE, CLASS_MAGIC_USER, CIRCLE_6, 6);
  spell_level(SPELL_MAJOR_GLOBE, CLASS_MAGIC_USER, CIRCLE_8, 8);
  spell_level(SPELL_FIRESHIELD, CLASS_MAGIC_USER, CIRCLE_5, 5);
  spell_level(SPELL_COLDSHIELD, CLASS_MAGIC_USER, CIRCLE_6, 6);
  spell_level(SPELL_TELEPORT, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_MINOR_PARALYSIS, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_WIZARD_EYE, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_RAY_OF_ENFEEB, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_LEVITATE, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_CONCEALMENT, CLASS_MAGIC_USER, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_MAGIC_USER, CIRCLE_3, 3);
  spell_level(SPELL_MINOR_CREATION, CLASS_MAGIC_USER, CIRCLE_1, 1);
  spell_level(SPELL_FARSEE, CLASS_MAGIC_USER, CIRCLE_5, 5);
  spell_level(SPELL_MAGIC_MISSILE, CLASS_MAGIC_USER, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_INVIS, CLASS_MAGIC_USER, CIRCLE_8, 8);
  spell_level(SPELL_DETECT_MAGIC, CLASS_MAGIC_USER, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_MAGIC_USER, CIRCLE_2, 2);
  spell_level(SPELL_INFRAVISION, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_INVISIBLE, CLASS_MAGIC_USER, CIRCLE_7, 7);
  spell_level(SPELL_BURNING_HANDS, CLASS_MAGIC_USER, CIRCLE_1, 1);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_MAGIC_USER, CIRCLE_3, 3);
  spell_level(SPELL_STRENGTH, CLASS_MAGIC_USER, CIRCLE_2, 2);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_MAGIC_USER, CIRCLE_3, 3);
  spell_level(SPELL_SLEEP, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_COLOR_SPRAY, CLASS_MAGIC_USER, CIRCLE_5, 5);
  spell_level(SPELL_FIREBALL, CLASS_MAGIC_USER, CIRCLE_6, 6);
//  spell_level(SPELL_CHARM, CLASS_MAGIC_USER, 31, 2);
  spell_level(SPELL_STONE_SKIN, CLASS_MAGIC_USER, CIRCLE_9, 9);
  spell_level(SPELL_FLY, CLASS_MAGIC_USER, CIRCLE_8, 8);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_MAGIC_USER, CIRCLE_5, 5);
  spell_level(SPELL_HASTE, CLASS_MAGIC_USER, CIRCLE_6, 6);
  spell_level(SKILL_DODGE, CLASS_MAGIC_USER, 1, 2);
  spell_level(SPELL_METEORSWARM, CLASS_MAGIC_USER, CIRCLE_10, 10);
  spell_level(SPELL_BIGBYS_CLENCHED_FIST, CLASS_MAGIC_USER, CIRCLE_7, 7);
  spell_level(SKILL_RIDING, CLASS_MAGIC_USER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_MAGIC_USER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_MAGIC_USER, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_MAGIC_USER, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_MAGIC_USER, CIRCLE_7, 7);
  spell_level(SPELL_CONE_OF_COLD, CLASS_MAGIC_USER, CIRCLE_5, 5);
  spell_level(SPELL_ICE_STORM, CLASS_MAGIC_USER, CIRCLE_6, 6);
  spell_level(SKILL_BANDAGE, CLASS_MAGIC_USER, 1, 2);

  /* PYROMANCER */
  spell_level(SKILL_FIRST_AID, CLASS_PYROMANCER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_PYROMANCER, 1, 2);
  spell_level(SPELL_RELOCATE, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_FIRE_DARTS, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_MAGIC_TORCH, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_SMOKE, CLASS_PYROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_MIRAGE, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_FLAME_BLADE, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_HEATWAVE, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_FIRESTORM, CLASS_PYROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_MELT, CLASS_PYROMANCER, CIRCLE_7, 7);
  spell_level(SPELL_CIRCLE_OF_FIRE, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_IMMOLATE, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_SUPERNOVA, CLASS_PYROMANCER, CIRCLE_11, 11);
  spell_level(SPELL_GREATER_FIREWALK, CLASS_PYROMANCER, CIRCLE_10, 10);
  spell_level(SPELL_NEGATE_HEAT, CLASS_PYROMANCER, CIRCLE_10, 10);
  spell_level(SPELL_FIREWALK, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_MASS_INVIS, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_HARNESS, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_MINOR_GLOBE, CLASS_PYROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_MAJOR_GLOBE, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_FIRESHIELD, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_TELEPORT, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_MINOR_PARALYSIS, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_WIZARD_EYE, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_RAY_OF_ENFEEB, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_LEVITATE, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_CONCEALMENT, CLASS_PYROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_PYROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_MINOR_CREATION, CLASS_PYROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_FARSEE, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_DETECT_INVIS, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_DETECT_MAGIC, CLASS_PYROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_INFRAVISION, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_INVISIBLE, CLASS_PYROMANCER, CIRCLE_7, 7);
  spell_level(SPELL_BURNING_HANDS, CLASS_PYROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_PYROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_STRENGTH, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_SLEEP, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_COLOR_SPRAY, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_FIREBALL, CLASS_PYROMANCER, CIRCLE_4, 4);
//  spell_level(SPELL_CHARM, CLASS_PYROMANCER, 31, 2);
  spell_level(SPELL_STONE_SKIN, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_FLY, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_HASTE, CLASS_PYROMANCER, CIRCLE_6, 6);
  spell_level(SKILL_DODGE, CLASS_PYROMANCER, 1, 2);
  spell_level(SPELL_METEORSWARM, CLASS_PYROMANCER, CIRCLE_10, 10);
  spell_level(SKILL_RIDING, CLASS_PYROMANCER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_PYROMANCER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_PYROMANCER, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_PYROMANCER, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_PYROMANCER, CIRCLE_7, 7);
spell_level(SKILL_BANDAGE, CLASS_PYROMANCER, 1, 2);

  /* CRYOMANCER */
  spell_level(SKILL_FIRST_AID, CLASS_CRYOMANCER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_CRYOMANCER, 1, 2);
  spell_level(SPELL_ICE_DARTS, CLASS_CRYOMANCER, CIRCLE_1, 1);
  spell_level(SPELL_ICE_ARMOR, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_ICE_DAGGER, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_FREEZING_WIND, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_FREEZE, CLASS_CRYOMANCER, CIRCLE_7, 7);
  spell_level(SPELL_WALL_OF_ICE, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_ICEBALL, CLASS_CRYOMANCER, CIRCLE_9, 9);
  spell_level(SPELL_FLOOD, CLASS_CRYOMANCER, CIRCLE_11, 11);
  spell_level(SPELL_GREATER_WATERWALK, CLASS_CRYOMANCER, CIRCLE_9, 9);
  spell_level(SPELL_NEGATE_COLD, CLASS_CRYOMANCER, CIRCLE_10, 10);
  spell_level(SPELL_WATERFORM, CLASS_CRYOMANCER, CIRCLE_10, 10);
  spell_level(SPELL_DOUSE, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_RAIN, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_WALL_OF_FOG, CLASS_CRYOMANCER, CIRCLE_7, 7);
  spell_level(SPELL_CHAIN_LIGHTNING, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_RELOCATE, CLASS_CRYOMANCER, CIRCLE_9, 9);
  spell_level(SPELL_MASS_INVIS, CLASS_CRYOMANCER, CIRCLE_9, 9);
  spell_level(SPELL_HARNESS, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_MINOR_GLOBE, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_MAJOR_GLOBE, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_COLDSHIELD, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_TELEPORT, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_MINOR_PARALYSIS, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_WIZARD_EYE, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_RAY_OF_ENFEEB, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_LEVITATE, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_CONCEALMENT, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_MINOR_CREATION, CLASS_CRYOMANCER, CIRCLE_1, 1);
  spell_level(SPELL_FARSEE, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_DETECT_INVIS, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_DETECT_MAGIC, CLASS_CRYOMANCER, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_CRYOMANCER, CIRCLE_2, 2);
  spell_level(SPELL_INVISIBLE, CLASS_CRYOMANCER, CIRCLE_7, 7);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_STRENGTH, CLASS_CRYOMANCER, CIRCLE_2, 2);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_SLEEP, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_CRYOMANCER, CIRCLE_4, 4);
//  spell_level(SPELL_CHARM, CLASS_MAGIC_USER, 31, 2);
  spell_level(SPELL_FLY, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_HASTE, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SKILL_DODGE, CLASS_CRYOMANCER, 1, 2);
  spell_level(SKILL_RIDING, CLASS_CRYOMANCER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_CRYOMANCER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_CRYOMANCER, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_CRYOMANCER, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_CRYOMANCER, CIRCLE_7, 7);
  spell_level(SPELL_CONE_OF_COLD, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_ICE_STORM, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_ICE_SHARDS, CLASS_CRYOMANCER, CIRCLE_11, 11);
  spell_level(SKILL_BANDAGE, CLASS_CRYOMANCER, 1, 2);

  /* ILLUSIONIST */
  spell_level(SKILL_FIRST_AID, CLASS_ILLUSIONIST, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_ILLUSIONIST, 1, 2);
  spell_level(SPELL_INCENDIARY_NEBULA, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_FARSEE, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_MAGIC_MISSILE, CLASS_ILLUSIONIST, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_INVIS, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_DETECT_MAGIC, CLASS_ILLUSIONIST, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_ILLUSIONIST, CIRCLE_2, 2);
  spell_level(SPELL_INFRAVISION, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_INVISIBLE, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_BURNING_HANDS, CLASS_ILLUSIONIST, CIRCLE_1, 1);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_ILLUSIONIST, CIRCLE_2, 2);
  spell_level(SPELL_STRENGTH, CLASS_ILLUSIONIST, CIRCLE_2, 2);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_ILLUSIONIST, CIRCLE_3, 3);
  spell_level(SPELL_SLEEP, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_ILLUSIONIST, CIRCLE_4, 4);
  spell_level(SPELL_DETECT_POISON, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_COLOR_SPRAY, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_FIREBALL, CLASS_ILLUSIONIST, CIRCLE_6, 6);
//  spell_level(SPELL_CHARM, CLASS_ILLUSIONIST, 31, 2);
  spell_level(SPELL_STONE_SKIN, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_FLY, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_HASTE, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SKILL_DODGE, CLASS_ILLUSIONIST, 1, 2);
  spell_level(SPELL_METEORSWARM, CLASS_ILLUSIONIST, CIRCLE_10, 10);
  spell_level(SPELL_BIGBYS_CLENCHED_FIST, CLASS_ILLUSIONIST, CIRCLE_8, 8);
  spell_level(SKILL_RIDING, CLASS_ILLUSIONIST, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_ILLUSIONIST, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_ILLUSIONIST, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_ILLUSIONIST, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_CONE_OF_COLD, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_ICE_STORM, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_ICE_SHARDS, CLASS_ILLUSIONIST, CIRCLE_11, 11);
spell_level(SKILL_BANDAGE, CLASS_ILLUSIONIST, 1, 2);

  /* CLERICS */
  spell_level(SKILL_FIRST_AID, CLASS_CLERIC, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_CLERIC, 1, 2);
  spell_level(SPELL_DETECT_MAGIC, CLASS_CLERIC, CIRCLE_1, 1);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_CLERIC, CIRCLE_8, 8);
  spell_level(SPELL_PLANE_SHIFT, CLASS_CLERIC, CIRCLE_9, 9);
  spell_level(SPELL_UNHOLY_WORD, CLASS_CLERIC, CIRCLE_9, 9);
  spell_level(SPELL_HOLY_WORD, CLASS_CLERIC, CIRCLE_9, 9);
  spell_level(SPELL_WATERWALK, CLASS_CLERIC, CIRCLE_7, 7);
  spell_level(SPELL_CONTINUAL_LIGHT, CLASS_CLERIC, CIRCLE_6, 6);
  spell_level(SPELL_SOULSHIELD, CLASS_CLERIC, CIRCLE_5, 5);
  spell_level(SPELL_SILENCE, CLASS_CLERIC, CIRCLE_6, 6);
  spell_level(SPELL_FLAMESTRIKE, CLASS_CLERIC, CIRCLE_6, 6);
  spell_level(SPELL_DESTROY_UNDEAD, CLASS_CLERIC, CIRCLE_5, 5);
  spell_level(SPELL_CURE_LIGHT, CLASS_CLERIC, CIRCLE_1, 1);
  spell_level(SPELL_ARMOR, CLASS_CLERIC, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_FOOD, CLASS_CLERIC, CIRCLE_1, 1);
  spell_level(SPELL_CAUSE_LIGHT, CLASS_CLERIC, CIRCLE_1, 1);
  spell_level(SPELL_CURE_SERIOUS, CLASS_CLERIC, CIRCLE_2, 2);
  spell_level(SPELL_VIGORIZE_LIGHT, CLASS_CLERIC, CIRCLE_2, 2);
  spell_level(SPELL_VIGORIZE_SERIOUS, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_VIGORIZE_CRITIC, CLASS_CLERIC, CIRCLE_4, 4);
  spell_level(SPELL_PRESERVE, CLASS_CLERIC, CIRCLE_2, 2);
  spell_level(SPELL_CAUSE_SERIOUS, CLASS_CLERIC, CIRCLE_2, 2);
  spell_level(SPELL_CAUSE_CRITIC, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_CREATE_WATER, CLASS_CLERIC, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_POISON, CLASS_CLERIC, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_CLERIC, CIRCLE_2, 2);
  spell_level(SPELL_CURE_BLIND, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_BLESS, CLASS_CLERIC, CIRCLE_2, 2);
  spell_level(SPELL_BLINDNESS, CLASS_CLERIC, CIRCLE_4, 4);
  spell_level(SPELL_PROT_FROM_EVIL, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_GROUP_ARMOR, CLASS_CLERIC, CIRCLE_10, 10);
  spell_level(SPELL_CURE_CRITIC, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_SUMMON, CLASS_CLERIC, CIRCLE_4, 4);
  spell_level(SPELL_REMOVE_POISON, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_CLERIC, CIRCLE_6, 6);
  spell_level(SPELL_EARTHQUAKE, CLASS_CLERIC, CIRCLE_5, 5);
  spell_level(SPELL_DISPEL_EVIL, CLASS_CLERIC, CIRCLE_4, 4);
  spell_level(SPELL_DISPEL_GOOD, CLASS_CLERIC, CIRCLE_4, 4);
  spell_level(SPELL_HEAL, CLASS_CLERIC, CIRCLE_5, 5);
  spell_level(SPELL_HARM, CLASS_CLERIC, CIRCLE_5, 5);
  spell_level(SPELL_GROUP_HEAL, CLASS_CLERIC, CIRCLE_8, 8);
  spell_level(SPELL_REMOVE_CURSE, CLASS_CLERIC, CIRCLE_5, 5);
  spell_level(SPELL_SENSE_LIFE, CLASS_CLERIC, CIRCLE_4, 4);
  spell_level(SPELL_FULL_HEAL, CLASS_CLERIC, CIRCLE_7, 7);
  spell_level(SPELL_FULL_HARM, CLASS_CLERIC, CIRCLE_10, 10);
  spell_level(SPELL_VITALITY, CLASS_CLERIC, CIRCLE_5, 5);
  spell_level(SKILL_DODGE, CLASS_CLERIC, 1, 2);
  spell_level(SPELL_DARKNESS, CLASS_CLERIC, CIRCLE_6, 6);
  spell_level(SKILL_RIDING, CLASS_CLERIC, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_CLERIC, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_CLERIC, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_CLERIC, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_CLERIC, CIRCLE_4, 4);
  spell_level(SPELL_RESURRECT, CLASS_CLERIC, CIRCLE_10, 10);
spell_level(SKILL_BANDAGE, CLASS_CLERIC, 1, 2);

  /* PRIEST */
  spell_level(SKILL_FIRST_AID, CLASS_PRIEST, 1, 2);
  spell_level(SPELL_DIVINE_ESSENCE, CLASS_PRIEST, CIRCLE_10, 10);
  spell_level(SPELL_HEAVENS_GATE, CLASS_PRIEST, CIRCLE_11, 11);
  spell_level(SPELL_SPEAK_IN_TONGUES, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_ENLIGHTENMENT, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_EXORCISM, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_GREATER_INVOCATION, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_WINGS_OF_HEAVEN, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_BANISH, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_WORD_OF_COMMAND, CLASS_PRIEST, CIRCLE_10, 10);
  spell_level(SPELL_LESSER_EXORCISM, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_LESSER_INVOCATION, CLASS_PRIEST, CIRCLE_7, 7);
  spell_level(SPELL_DIVINE_RAY, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_DIVINE_BOLT, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_PRAYER, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_ELEMENTAL_WARDING, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_CIRCLE_OF_LIGHT, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SKILL_DOUSE, CLASS_PRIEST, 1, 2);
  spell_level(SPELL_DETECT_MAGIC, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_PLANE_SHIFT, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_HOLY_WORD, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_WATERWALK, CLASS_PRIEST, CIRCLE_7, 7);
  spell_level(SPELL_CONTINUAL_LIGHT, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_SOULSHIELD, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_SILENCE, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_DESTROY_UNDEAD, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_CURE_LIGHT, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_ARMOR, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_FOOD, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_CAUSE_LIGHT, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_CURE_SERIOUS, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_VIGORIZE_LIGHT, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_VIGORIZE_SERIOUS, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_VIGORIZE_CRITIC, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_PRESERVE, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_CAUSE_SERIOUS, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_CAUSE_CRITIC, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_CREATE_WATER, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_POISON, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_CURE_BLIND, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_BLESS, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_BLINDNESS, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_PROT_FROM_EVIL, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_GROUP_ARMOR, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_CURE_CRITIC, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_SUMMON, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_REMOVE_POISON, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_EARTHQUAKE, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_DISPEL_EVIL, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_HEAL, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_SANE_MIND, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_GROUP_HEAL, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_REMOVE_CURSE, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_SENSE_LIFE, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_FULL_HEAL, CLASS_PRIEST, CIRCLE_7, 7);
  spell_level(SPELL_FULL_HARM, CLASS_PRIEST, CIRCLE_10, 10);
  spell_level(SPELL_VITALITY, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SKILL_DODGE, CLASS_PRIEST, 1, 2);
  spell_level(SKILL_RIDING, CLASS_PRIEST, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_PRIEST, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_PRIEST, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_PRIEST, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_RESURRECT, CLASS_PRIEST, CIRCLE_10, 10);
spell_level(SKILL_BANDAGE, CLASS_PRIEST, 1, 2);

  /* DIABOLIST */
  spell_level(SPELL_HELLS_GATE, CLASS_DIABOLIST, CIRCLE_11, 11);
  spell_level(SPELL_DARK_PRESENCE, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_DEMONSKIN, CLASS_DIABOLIST, CIRCLE_1, 1);
  spell_level(SPELL_DARK_FEAST, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_HELL_BOLT, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_DISEASE, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_INSANITY, CLASS_DIABOLIST, CIRCLE_7, 7);
  spell_level(SPELL_SANE_MIND, CLASS_DIABOLIST, CIRCLE_6, 6);
  spell_level(SPELL_DEMONIC_ASPECT, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_HELLFIRE_BRIMSTONE, CLASS_DIABOLIST, CIRCLE_8, 8);
  spell_level(SPELL_STYGIAN_ERUPTION, CLASS_DIABOLIST, CIRCLE_6, 6);
  spell_level(SPELL_DEMONIC_MUTATION, CLASS_DIABOLIST, CIRCLE_7, 7);
  spell_level(SPELL_SPEAK_IN_TONGUES, CLASS_DIABOLIST, CIRCLE_8, 8);
  spell_level(SPELL_GREATER_INVOCATION, CLASS_DIABOLIST, CIRCLE_9, 9);
  spell_level(SPELL_WINGS_OF_HELL, CLASS_DIABOLIST, CIRCLE_9, 9);
  spell_level(SPELL_BANISH, CLASS_DIABOLIST, CIRCLE_9, 9);
  spell_level(SPELL_WORD_OF_COMMAND, CLASS_DIABOLIST, CIRCLE_10, 10);
  spell_level(SPELL_LESSER_INVOCATION, CLASS_DIABOLIST, CIRCLE_7, 7);
  spell_level(SPELL_ELEMENTAL_WARDING, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SKILL_DOUSE, CLASS_DIABOLIST, 1, 2);
  spell_level(SPELL_DETECT_MAGIC, CLASS_DIABOLIST, CIRCLE_1, 1);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_DIABOLIST, CIRCLE_8, 8);
  spell_level(SPELL_PLANE_SHIFT, CLASS_DIABOLIST, CIRCLE_9, 9);
  spell_level(SPELL_UNHOLY_WORD, CLASS_DIABOLIST, CIRCLE_9, 9);
  spell_level(SPELL_WATERWALK, CLASS_DIABOLIST, CIRCLE_7, 7);
  spell_level(SPELL_DARKNESS, CLASS_DIABOLIST, CIRCLE_6, 6);
  spell_level(SPELL_SOULSHIELD, CLASS_DIABOLIST, CIRCLE_5, 5);
  spell_level(SPELL_SILENCE, CLASS_DIABOLIST, CIRCLE_6, 6);
  spell_level(SPELL_CURE_LIGHT, CLASS_DIABOLIST, CIRCLE_1, 1);
  spell_level(SPELL_CAUSE_LIGHT, CLASS_DIABOLIST, CIRCLE_1, 1);
  spell_level(SPELL_CURE_SERIOUS, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_VIGORIZE_LIGHT, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_VIGORIZE_SERIOUS, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_VIGORIZE_CRITIC, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_PRESERVE, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_CAUSE_SERIOUS, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_CAUSE_CRITIC, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_DETECT_POISON, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_CURE_BLIND, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_BLINDNESS, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_CURE_CRITIC, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_SUMMON, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_REMOVE_POISON, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_DIABOLIST, CIRCLE_6, 6);
  spell_level(SPELL_EARTHQUAKE, CLASS_DIABOLIST, CIRCLE_5, 5);
  spell_level(SPELL_DISPEL_GOOD, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_HEAL, CLASS_DIABOLIST, CIRCLE_5, 5);
  spell_level(SPELL_GROUP_HEAL, CLASS_DIABOLIST, CIRCLE_8, 8);
  spell_level(SPELL_REMOVE_CURSE, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_SENSE_LIFE, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_FULL_HEAL, CLASS_DIABOLIST, CIRCLE_7, 7);
  spell_level(SPELL_FULL_HARM, CLASS_DIABOLIST, CIRCLE_10, 10);
  spell_level(SPELL_VITALITY, CLASS_DIABOLIST, CIRCLE_5, 5);
  spell_level(SKILL_DODGE, CLASS_DIABOLIST, 1, 2);
  spell_level(SKILL_RIDING, CLASS_DIABOLIST, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_DIABOLIST, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_DIABOLIST, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_DIABOLIST, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_RESURRECT, CLASS_DIABOLIST, CIRCLE_10, 10);
spell_level(SKILL_BANDAGE, CLASS_DIABOLIST, 1, 2);

  /* MYSTICS */
  spell_level(SKILL_FIRST_AID, CLASS_MYSTIC, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_MYSTIC, 1, 2);
  spell_level(SPELL_CURE_LIGHT, CLASS_MYSTIC, CIRCLE_1, 1);
  spell_level(SPELL_ARMOR, CLASS_MYSTIC, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_FOOD, CLASS_MYSTIC, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_WATER, CLASS_MYSTIC, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_POISON, CLASS_MYSTIC, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_MYSTIC, CIRCLE_2, 2);
  spell_level(SPELL_CURE_BLIND, CLASS_MYSTIC, CIRCLE_2, 2);
  spell_level(SPELL_BLESS, CLASS_MYSTIC, CIRCLE_1, 1);
  /*spell_level(SPELL_DETECT_INVIS, CLASS_MYSTIC, 6);*/
  spell_level(SPELL_BLINDNESS, CLASS_MYSTIC, CIRCLE_4, 4);
  spell_level(SPELL_INFRAVISION, CLASS_MYSTIC, CIRCLE_9, 9);
  spell_level(SPELL_PROT_FROM_EVIL, CLASS_MYSTIC, CIRCLE_3, 3);
  spell_level(SPELL_GROUP_ARMOR, CLASS_MYSTIC, CIRCLE_10, 10);
  spell_level(SPELL_CURE_CRITIC, CLASS_MYSTIC, CIRCLE_2, 2);
  spell_level(SPELL_SUMMON, CLASS_MYSTIC, CIRCLE_3, 3);
  spell_level(SPELL_REMOVE_POISON, CLASS_MYSTIC, CIRCLE_3, 3);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_MYSTIC, CIRCLE_6, 6);
  spell_level(SPELL_EARTHQUAKE, CLASS_MYSTIC, CIRCLE_5, 5);
  spell_level(SPELL_DISPEL_EVIL, CLASS_MYSTIC, CIRCLE_4, 4);
  spell_level(SPELL_DISPEL_GOOD, CLASS_MYSTIC, CIRCLE_4, 4);
  /*spell_level(SPELL_SANCTUARY, CLASS_MYSTIC, 49);*/
 /* spell_level(SPELL_CALL_LIGHTNING, CLASS_MYSTIC, 15);*/
  spell_level(SPELL_HEAL, CLASS_MYSTIC, CIRCLE_5, 5);
 /* spell_level(SPELL_CONTROL_WEATHER, CLASS_MYSTIC, 17);*/
  spell_level(SPELL_HARM, CLASS_MYSTIC, CIRCLE_5, 5);
  spell_level(SPELL_GROUP_HEAL, CLASS_MYSTIC, CIRCLE_8, 8);
  spell_level(SPELL_REMOVE_CURSE, CLASS_MYSTIC, CIRCLE_5, 5);
  spell_level(SPELL_SENSE_LIFE, CLASS_MYSTIC, CIRCLE_4, 4);
  spell_level(SPELL_FULL_HEAL, CLASS_MYSTIC, CIRCLE_7, 7);
  spell_level(SPELL_FULL_HARM, CLASS_MYSTIC, CIRCLE_9, 9);
  spell_level(SPELL_VITALITY, CLASS_MYSTIC, CIRCLE_5, 5);
  spell_level(SKILL_DODGE, CLASS_MYSTIC, 1, 2);
  spell_level(SPELL_DARKNESS, CLASS_MYSTIC, CIRCLE_6, 6);
  spell_level(SKILL_RIDING, CLASS_MYSTIC, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_MYSTIC, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_MYSTIC, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_MYSTIC, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_MYSTIC, CIRCLE_5, 5);
spell_level(SKILL_BANDAGE, CLASS_MYSTIC, 1, 2);

  /* THIEVES */
  spell_level(SKILL_FIRST_AID, CLASS_THIEF, 1, 2);

  spell_level(SKILL_DOUSE, CLASS_THIEF, 1, 2);
  spell_level(SKILL_SNEAK, CLASS_THIEF, 1, 2);
  spell_level(SKILL_PICK_LOCK, CLASS_THIEF, 6, 2);
  spell_level(SKILL_BACKSTAB, CLASS_THIEF, 1, 2);
  spell_level(SKILL_STEAL, CLASS_THIEF, 6, 2);
  spell_level(SKILL_HIDE, CLASS_THIEF, 1, 2);
  spell_level(SKILL_TRACK, CLASS_THIEF, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_THIEF, 10, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_THIEF, 15, 2);
  spell_level(SKILL_DODGE, CLASS_THIEF, 1, 2);
  spell_level(SKILL_PARRY, CLASS_THIEF, 1, 2);
  spell_level(SKILL_RIDING, CLASS_THIEF, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_THIEF, 1, 2);
spell_level(SKILL_BANDAGE, CLASS_THIEF, 1, 2);

  /* ROGUES */
  spell_level(SKILL_FIRST_AID, CLASS_ROGUE, 1, 2);

  spell_level(SKILL_DOUSE, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_SNEAK, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_PICK_LOCK, CLASS_ROGUE, 6, 2);
  spell_level(SKILL_BACKSTAB, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_HIDE, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_TRACK, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_ROGUE, 10, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_ROGUE, 15, 2);
  spell_level(SKILL_DODGE, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_PARRY, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_RIDING, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_ROGUE, 1, 2);
spell_level(SKILL_BANDAGE, CLASS_ROGUE, 1, 2);

  /* BARDS */
  spell_level(SKILL_FIRST_AID, CLASS_BARD, 1, 2);

  spell_level(SKILL_DOUSE, CLASS_BARD, 1, 2);
  spell_level(SKILL_SNEAK, CLASS_BARD, 1, 2);
  spell_level(SKILL_PICK_LOCK, CLASS_BARD, 6, 2);
  spell_level(SKILL_BACKSTAB, CLASS_BARD, 1, 2);
  spell_level(SKILL_STEAL, CLASS_BARD, 6, 2);
  spell_level(SKILL_HIDE, CLASS_BARD, 1, 2);
  spell_level(SKILL_TRACK, CLASS_BARD, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_BARD, 10, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_BARD, 15, 2);
  spell_level(SKILL_DODGE, CLASS_BARD, 1, 2);
  spell_level(SKILL_PARRY, CLASS_BARD, 1, 2);
  spell_level(SKILL_RIDING, CLASS_BARD, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_BARD, 1, 2);
spell_level(SKILL_BANDAGE, CLASS_BARD, 1, 2);

  /* WARRIORS */
  spell_level(SKILL_FIRST_AID, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_DISARM, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_GUARD, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_HITALL, CLASS_WARRIOR, 15, 2);
  spell_level(SKILL_KICK, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_TAME, CLASS_WARRIOR, 7, 2);
  spell_level(SKILL_TRACK, CLASS_WARRIOR, 36, 2);
  spell_level(SKILL_BASH, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_DODGE, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_PARRY, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_RIDING, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_WARRIOR, 1, 2);
spell_level(SKILL_BANDAGE, CLASS_WARRIOR, 1, 2);

  /* MONKS */
  spell_level(SKILL_FIRST_AID, CLASS_MONK, 1, 2);

  spell_level(SKILL_DOUSE, CLASS_MONK, 1, 2);
  spell_level(SKILL_GUARD, CLASS_MONK, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_MONK, 1, 2);
  spell_level(SKILL_KICK, CLASS_MONK, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_MONK, 1, 2);
  spell_level(SKILL_TAME, CLASS_MONK, 7, 2);
  spell_level(SKILL_TRACK, CLASS_MONK, 36, 2);
  spell_level(SKILL_BASH, CLASS_MONK, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_MONK, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_MONK, 1, 2);
  spell_level(SKILL_DODGE, CLASS_MONK, 1, 2);
  spell_level(SKILL_PARRY, CLASS_MONK, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_MONK, 1, 2);
  spell_level(SKILL_RIDING, CLASS_MONK, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_MONK, 1, 2);
spell_level(SKILL_BANDAGE, CLASS_MONK, 1, 2);

  /* BERSERKER */
  spell_level(SKILL_FIRST_AID, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_HITALL, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_GUARD, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_KICK, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_TAME, CLASS_BERSERKER, 7, 2);
  spell_level(SKILL_TRACK, CLASS_BERSERKER, 36, 2);
  spell_level(SKILL_BASH, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_DODGE, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_PARRY, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_RIDING, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_BERSERKER, 1, 2);
spell_level(SKILL_BANDAGE, CLASS_BERSERKER, 1, 2);

  /* HUNTERS */
  spell_level(SKILL_FIRST_AID, CLASS_HUNTER, 1, 2);

  spell_level(SKILL_DOUSE, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_GUARD, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_KICK, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_TAME, CLASS_HUNTER, 7, 2);
  spell_level(SKILL_TRACK, CLASS_HUNTER, 36, 2);
  spell_level(SKILL_BASH, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_DODGE, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_PARRY, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_RIDING, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_HUNT, CLASS_HUNTER, 41, 2);
spell_level(SKILL_BANDAGE, CLASS_HUNTER, 1, 2);


  /* PALADIN */
  spell_level(SKILL_FIRST_AID, CLASS_PALADIN, 1, 2);

  spell_level(SKILL_DOUSE, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_GUARD, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_KICK, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_BASH, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_TAME, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_DODGE, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_PARRY, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_RIDING, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_PALADIN, 1, 2);

  spell_level(SKILL_HITALL, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_DISARM, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_PALADIN, 1, 2);

  spell_level(SPELL_CURE_LIGHT, CLASS_PALADIN, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_ALIGN, CLASS_PALADIN, CIRCLE_1, 1);
  spell_level(SPELL_BLESS, CLASS_PALADIN, CIRCLE_1, 1);

  spell_level(SPELL_ARMOR, CLASS_PALADIN, CIRCLE_2, 2);

  spell_level(SPELL_CREATE_FOOD, CLASS_PALADIN, CIRCLE_3, 3);
  spell_level(SPELL_CREATE_WATER, CLASS_PALADIN, CIRCLE_3, 3);

  spell_level(SPELL_PROT_FROM_EVIL, CLASS_PALADIN, CIRCLE_4, 4);
  spell_level(SPELL_CURE_SERIOUS, CLASS_PALADIN, CIRCLE_4, 4);

  spell_level(SPELL_DETECT_POISON, CLASS_PALADIN, CIRCLE_5, 5);
  spell_level(SPELL_DISPEL_EVIL, CLASS_PALADIN, CIRCLE_5, 5);

  spell_level(SPELL_CURE_BLIND, CLASS_PALADIN, CIRCLE_6, 6);
  spell_level(SPELL_CURE_CRITIC, CLASS_PALADIN, CIRCLE_6, 6);

  spell_level(SPELL_DISPEL_MAGIC, CLASS_PALADIN, CIRCLE_7, 7);

  spell_level(SPELL_SOULSHIELD, CLASS_PALADIN, CIRCLE_8, 8);

  spell_level(SPELL_HEAL, CLASS_PALADIN, CIRCLE_9, 9);

  spell_level(SPELL_HOLY_WORD, CLASS_PALADIN, CIRCLE_10, 10);


  /* ANTI_PALADIN */
  spell_level(SKILL_DOUSE, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_VAMP_TOUCH, CLASS_ANTI_PALADIN, 45, 2);
  spell_level(SKILL_KICK, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_BASH, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_FIRST_AID, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_TAME, CLASS_ANTI_PALADIN, 7, 2);
  spell_level(SKILL_DODGE, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_PARRY, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_RIDING, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_HITALL, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_DISARM, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_ANTI_PALADIN, 1, 2);

  spell_level(SPELL_CAUSE_LIGHT, CLASS_ANTI_PALADIN, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_ALIGN, CLASS_ANTI_PALADIN, CIRCLE_1, 1);
  spell_level(SPELL_VAMPIRIC_BREATH, CLASS_ANTI_PALADIN, CIRCLE_10, 10);
  spell_level(SPELL_DEMONSKIN, CLASS_ANTI_PALADIN, CIRCLE_2, 2);

  spell_level(SPELL_CREATE_FOOD, CLASS_ANTI_PALADIN, CIRCLE_3, 3);
  spell_level(SPELL_CREATE_WATER, CLASS_ANTI_PALADIN, CIRCLE_3, 3);
  spell_level(SPELL_CAUSE_SERIOUS, CLASS_ANTI_PALADIN, CIRCLE_3, 3);

  spell_level(SPELL_CURSE, CLASS_ANTI_PALADIN, CIRCLE_4, 4);

  spell_level(SPELL_CAUSE_CRITIC, CLASS_ANTI_PALADIN, CIRCLE_5, 5);
  spell_level(SPELL_DISPEL_GOOD, CLASS_ANTI_PALADIN, CIRCLE_5, 5);
  spell_level(SPELL_POISON, CLASS_ANTI_PALADIN, CIRCLE_5, 5);

  spell_level(SPELL_CURE_BLIND, CLASS_ANTI_PALADIN, CIRCLE_6, 6);
  spell_level(SPELL_BLINDNESS, CLASS_ANTI_PALADIN, CIRCLE_6, 6);

  spell_level(SPELL_DISPEL_MAGIC, CLASS_ANTI_PALADIN, CIRCLE_7, 7);

  spell_level(SPELL_SOULSHIELD, CLASS_ANTI_PALADIN, CIRCLE_8, 8);

  spell_level(SPELL_HARM, CLASS_ANTI_PALADIN, CIRCLE_9, 9);

  spell_level(SPELL_UNHOLY_WORD, CLASS_ANTI_PALADIN, CIRCLE_11, 11);


  /* RANGER */
  spell_level(SKILL_FIRST_AID, CLASS_RANGER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_RANGER, 1, 2);
  spell_level(SKILL_KICK, CLASS_RANGER, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_RANGER, 1, 2);
  spell_level(SKILL_TRACK, CLASS_RANGER, 1, 2);
  spell_level(SKILL_BASH, CLASS_RANGER, 1, 2);
  spell_level(SKILL_TAME, CLASS_RANGER, 7, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_RANGER, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_RANGER, 1, 2);
  spell_level(SPELL_CURE_LIGHT, CLASS_RANGER, CIRCLE_2, 2);
  spell_level(SPELL_ARMOR, CLASS_RANGER, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_RANGER, CIRCLE_1, 1);
  spell_level(SPELL_CURE_CRITIC, CLASS_RANGER, CIRCLE_6, 6);
  spell_level(SPELL_MAGIC_MISSILE, CLASS_RANGER, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_RANGER, CIRCLE_3, 3);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_RANGER, CIRCLE_5, 5);
  spell_level(SPELL_SENSE_LIFE, CLASS_RANGER, CIRCLE_7, 7);
  spell_level(SKILL_SPRINGLEAP, CLASS_RANGER, 10, 2);
  spell_level(SPELL_STONE_SKIN, CLASS_RANGER, CIRCLE_10, 10);
  spell_level(SPELL_HASTE, CLASS_RANGER, 41, 2);
  spell_level(SPELL_BLUR, CLASS_RANGER, CIRCLE_11, 11);
  spell_level(SPELL_BARKSKIN, CLASS_RANGER, CIRCLE_8, 8);
  spell_level(SKILL_DODGE, CLASS_RANGER, 1, 2);
  spell_level(SKILL_PARRY, CLASS_RANGER, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_RANGER, 1, 2);
  spell_level(SKILL_RIDING, CLASS_RANGER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_RANGER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_RANGER, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_RANGER, CIRCLE_7, 7);
	spell_level(SKILL_BANDAGE, CLASS_RANGER, 1, 2);


  /* DRUID */
  spell_level(SKILL_FIRST_AID, CLASS_DRUID, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_DRUID, 1, 2);
  spell_level(SKILL_SHAPECHANGE, CLASS_DRUID, 1, 2);
  spell_level(SPELL_WANDERING_WOODS, CLASS_DRUID, CIRCLE_10, 10);
  spell_level(SPELL_SUNRAY, CLASS_DRUID, CIRCLE_9, 9);
  spell_level(SPELL_ARMOR_OF_GAIA, CLASS_DRUID, CIRCLE_9, 9);
  spell_level(SPELL_URBAN_RENEWAL, CLASS_DRUID, CIRCLE_8, 8);
  spell_level(SPELL_CONTINUAL_LIGHT, CLASS_DRUID, CIRCLE_7, 7);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_DRUID, CIRCLE_8, 8);
  spell_level(SPELL_PLANE_SHIFT, CLASS_DRUID, CIRCLE_9, 9);
  spell_level(SPELL_NOURISHMENT, CLASS_DRUID, CIRCLE_5, 5);
  spell_level(SPELL_GAIAS_CLOAK, CLASS_DRUID, CIRCLE_7, 7);
  spell_level(SPELL_NATURES_EMBRACE, CLASS_DRUID, CIRCLE_8, 8);
  spell_level(SPELL_ENTANGLE, CLASS_DRUID, CIRCLE_8, 8);
  spell_level(SPELL_INVIGORATE, CLASS_DRUID, CIRCLE_9, 9);
  spell_level(SPELL_CREATE_SPRING, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_DETECT_MAGIC, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_VIGORIZE_LIGHT, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_VIGORIZE_SERIOUS, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_VIGORIZE_CRITIC, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_CURE_SERIOUS, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_NIGHT_VISION, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_BARKSKIN, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_WRITHING_WEEDS, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_CURE_LIGHT, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_CREATE_FOOD, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_WATER, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SKILL_TAME, CLASS_DRUID, 1, 2);
  spell_level(SPELL_DETECT_POISON, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_CURE_BLIND, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_BLESS, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_PROT_FROM_EVIL, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_CURE_CRITIC, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_SUMMON, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_REMOVE_POISON, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_DRUID, CIRCLE_6, 6);
  spell_level(SPELL_EARTHQUAKE, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_DISPEL_EVIL, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_GOOD, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_CALL_LIGHTNING, CLASS_DRUID, CIRCLE_7, 7);
  spell_level(SPELL_HEAL, CLASS_DRUID, CIRCLE_6, 6);
  spell_level(SPELL_CONTROL_WEATHER, CLASS_DRUID, CIRCLE_5, 5);
  spell_level(SPELL_HARM, CLASS_DRUID, CIRCLE_5, 5);
  spell_level(SPELL_REMOVE_CURSE, CLASS_DRUID, CIRCLE_5, 5);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_DRUID, CIRCLE_6, 6);
  spell_level(SPELL_WATERWALK, CLASS_DRUID, CIRCLE_6, 6);
  spell_level(SPELL_VITALITY, CLASS_DRUID, CIRCLE_6, 6);
  spell_level(SKILL_DODGE, CLASS_DRUID, 1, 2);
  spell_level(SPELL_CREEPING_DOOM, CLASS_DRUID, CIRCLE_10, 10);
  spell_level(SPELL_DARKNESS, CLASS_DRUID, CIRCLE_6, 6);
  spell_level(SKILL_RIDING, CLASS_DRUID, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_DRUID, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_DRUID, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_DRUID, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_MOONWELL, CLASS_DRUID, CIRCLE_10, 10);
spell_level(SKILL_BANDAGE, CLASS_DRUID, 1, 2);



  /* SHAMAN */
  spell_level(SKILL_FIRST_AID, CLASS_SHAMAN, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_SHAMAN, 1, 2);
  spell_level(SPELL_CURE_LIGHT, CLASS_SHAMAN, CIRCLE_1, 1);
  spell_level(SPELL_ARMOR, CLASS_SHAMAN, CIRCLE_2, 2);
  spell_level(SPELL_CREATE_FOOD, CLASS_SHAMAN, CIRCLE_1, 1);
  spell_level(SKILL_TAME, CLASS_SHAMAN, 7, 2);
  spell_level(SPELL_CREATE_WATER, CLASS_SHAMAN, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_POISON, CLASS_SHAMAN, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_ALIGN, CLASS_SHAMAN, CIRCLE_2, 2);
  spell_level(SPELL_CURE_BLIND, CLASS_SHAMAN, CIRCLE_4, 4);
  spell_level(SPELL_BLESS, CLASS_SHAMAN, CIRCLE_2, 2);
  spell_level(SPELL_BLINDNESS, CLASS_SHAMAN, CIRCLE_6, 6);
  spell_level(SPELL_PROT_FROM_EVIL, CLASS_SHAMAN, 16, 2);
  spell_level(SPELL_CURE_CRITIC, CLASS_SHAMAN, CIRCLE_3, 3);
  spell_level(SPELL_SUMMON, CLASS_SHAMAN, CIRCLE_5, 5);
  spell_level(SPELL_REMOVE_POISON, CLASS_SHAMAN, CIRCLE_3, 3);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_SHAMAN, CIRCLE_6, 6);
  spell_level(SPELL_EARTHQUAKE, CLASS_SHAMAN, CIRCLE_6, 6);
  spell_level(SPELL_DISPEL_EVIL, CLASS_SHAMAN, CIRCLE_4, 4);
  spell_level(SPELL_DISPEL_GOOD, CLASS_SHAMAN, CIRCLE_4, 4);
  spell_level(SPELL_HEAL, CLASS_SHAMAN, CIRCLE_6, 6);
  spell_level(SPELL_HARM, CLASS_SHAMAN, CIRCLE_5, 5);
  spell_level(SPELL_GROUP_HEAL, CLASS_SHAMAN, CIRCLE_10, 10);
  spell_level(SPELL_REMOVE_CURSE, CLASS_SHAMAN, CIRCLE_5, 5);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_SHAMAN, CIRCLE_7, 7);
  spell_level(SPELL_FIREBALL, CLASS_SHAMAN, CIRCLE_8, 8);
  spell_level(SPELL_DETECT_INVIS, CLASS_SHAMAN, CIRCLE_7, 7);
  spell_level(SPELL_HASTE, CLASS_SHAMAN, CIRCLE_7, 7);
  spell_level(SPELL_VITALITY, CLASS_SHAMAN, CIRCLE_6, 6);
  spell_level(SKILL_DODGE, CLASS_SHAMAN, 1, 2);
  spell_level(SPELL_DARKNESS, CLASS_SHAMAN, CIRCLE_6, 6);
  spell_level(SKILL_RIDING, CLASS_SHAMAN, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_SHAMAN, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_SHAMAN, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_SHAMAN, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_SHAMAN, CIRCLE_5, 5);
spell_level(SKILL_BANDAGE, CLASS_SHAMAN, 1, 2);



  /* ASSASSIN */
  spell_level(SKILL_FIRST_AID, CLASS_ASSASSIN, 1, 2);

  spell_level(SKILL_DOUSE, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_INSTANT_KILL, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_THROATCUT, CLASS_ASSASSIN, 31, 2);
  spell_level(SKILL_SNEAK, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_PICK_LOCK, CLASS_ASSASSIN, 6, 2);
  spell_level(SKILL_BACKSTAB, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_CIRCLE, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_KICK, CLASS_ASSASSIN, 36, 2);
  spell_level(SKILL_HIDE, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_TRACK, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_ASSASSIN, 10, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_ASSASSIN, 15, 2);
  spell_level(SKILL_DODGE, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_PARRY, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_RIDING, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_ASSASSIN, 1, 2);
spell_level(SKILL_BANDAGE, CLASS_ASSASSIN, 1, 2);

  /* MERCENARY */
  spell_level(SKILL_FIRST_AID, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_DISARM, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_GUARD, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_BACKSTAB, CLASS_MERCENARY, 11, 2);
  spell_level(SKILL_BIND, CLASS_MERCENARY, 16, 2);
  spell_level(SKILL_HIDE, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_TAME, CLASS_MERCENARY, 7, 2);
  spell_level(SKILL_TRACK, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_KICK, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_BASH, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_MERCENARY, 11, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_MERCENARY, 6, 2);
  spell_level(SKILL_DODGE, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_PARRY, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_RIDING, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_MERCENARY, 1, 2);
spell_level(SKILL_BANDAGE, CLASS_MERCENARY, 1, 2);


  /* NECRO */
  spell_level(SKILL_FIRST_AID, CLASS_NECROMANCER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_NECROMANCER, 1, 2);
  spell_level(SPELL_MAGIC_MISSILE, CLASS_NECROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_MINOR_CREATION, CLASS_NECROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_INVIS, CLASS_NECROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_DETECT_MAGIC, CLASS_NECROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_NECROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_INFRAVISION, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_INVISIBLE, CLASS_NECROMANCER, CIRCLE_7, 7);
 /* spell_level(SPELL_ARMOR, CLASS_MAGIC_USER, 1);*/
  spell_level(SPELL_BURNING_HANDS, CLASS_NECROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_STRENGTH, CLASS_NECROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_NECROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_SLEEP, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_NECROMANCER, CIRCLE_4, 4);
 /* spell_level(SPELL_BLINDNESS, CLASS_MAGIC_USER, 16);*/
  spell_level(SPELL_DETECT_POISON, CLASS_NECROMANCER, CIRCLE_6, 6);
 /* spell_level(SPELL_COLOR_SPRAY, CLASS_MAGIC_USER, 19);*/
  spell_level(SPELL_ENERGY_DRAIN, CLASS_NECROMANCER, CIRCLE_5, 5);
/*  spell_level(SPELL_CURSE, CLASS_MAGIC_USER, 16);*/
 /* spell_level(SPELL_FIREBALL, CLASS_MAGIC_USER, 26);
//  spell_level(SPELL_CHARM, CLASS_MAGIC_USER, 31);*/
  /*spell_level(SPELL_ENCHANT_WEAPON, CLASS_MAGIC_USER, 41);*/
  spell_level(SPELL_ANIMATE_DEAD, CLASS_NECROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_SUMMON_DRACOLICH, CLASS_NECROMANCER, CIRCLE_10, 10);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_NECROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_HASTE, CLASS_NECROMANCER, CIRCLE_7, 7);
  spell_level(SKILL_DODGE, CLASS_NECROMANCER, 1, 2);
  spell_level(SPELL_FARSEE, CLASS_NECROMANCER, CIRCLE_7, 7);
  spell_level(SKILL_RIDING, CLASS_NECROMANCER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_NECROMANCER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_NECROMANCER, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_NECROMANCER, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_NECROMANCER, CIRCLE_7, 7);
  spell_level(SPELL_CONE_OF_COLD, CLASS_NECROMANCER, CIRCLE_5, 5);
spell_level(SKILL_BANDAGE, CLASS_NECROMANCER, 1, 2);




  /* conj */
  spell_level(SKILL_FIRST_AID, CLASS_CONJURER, 1, 2);
  spell_level(SPELL_WALL_OF_STONE, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SKILL_DOUSE, CLASS_CONJURER, 1, 2);
  spell_level(SPELL_MAGIC_MISSILE, CLASS_CONJURER, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_INVIS, CLASS_CONJURER, CIRCLE_6, 6);
  spell_level(SPELL_DETECT_MAGIC, CLASS_CONJURER, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_CONJURER, CIRCLE_2, 2);
  spell_level(SPELL_INFRAVISION, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_INVISIBLE, CLASS_CONJURER, CIRCLE_7, 7);
 /* spell_level(SPELL_ARMOR, CLASS_MAGIC_USER, 1);*/
  spell_level(SPELL_BURNING_HANDS, CLASS_CONJURER, CIRCLE_2, 2);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_STRENGTH, CLASS_CONJURER, CIRCLE_2, 2);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_CONJURER, CIRCLE_3, 3);
  spell_level(SPELL_SLEEP, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_CONJURER, CIRCLE_4, 4);
 /* spell_level(SPELL_BLINDNESS, CLASS_MAGIC_USER, 16);*/
  spell_level(SPELL_DETECT_POISON, CLASS_CONJURER, CIRCLE_6, 6);
  spell_level(SPELL_COLOR_SPRAY, CLASS_CONJURER, CIRCLE_5, 5);
  /*spell_level(SPELL_ENERGY_DRAIN, CLASS_MAGIC_USER, 21);*/
/*  spell_level(SPELL_CURSE, CLASS_MAGIC_USER, 16);*/
  spell_level(SPELL_FIREBALL, CLASS_CONJURER, CIRCLE_6, 6);
  /*spell_level(SPELL_CHARM, CLASS_MAGIC_USER, 31);*/
  spell_level(SPELL_ENCHANT_WEAPON, CLASS_CONJURER, CIRCLE_9, 9);
  spell_level(SPELL_STONE_SKIN, CLASS_CONJURER, CIRCLE_6, 6);
  spell_level(SPELL_WALL_OF_FOG, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_FLY, CLASS_CONJURER, CIRCLE_6, 6);
  spell_level(SPELL_SUMMON_ELEMENTAL, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_SUMMON_DEMON, CLASS_CONJURER, CIRCLE_10, 10);
  spell_level(SPELL_SUMMON_GREATER_DEMON, CLASS_CONJURER, CIRCLE_11, 11);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_CONJURER, CIRCLE_8, 8);
  spell_level(SPELL_HASTE, CLASS_CONJURER, CIRCLE_7, 7);
  spell_level(SKILL_DODGE, CLASS_CONJURER, 1, 2);
  spell_level(SPELL_FARSEE, CLASS_CONJURER, CIRCLE_7, 7);
  spell_level(SKILL_RIDING, CLASS_CONJURER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_CONJURER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_CONJURER, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_CONJURER, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_CONJURER, CIRCLE_7, 7);
  spell_level(SPELL_CONE_OF_COLD, CLASS_CONJURER, CIRCLE_5, 5);
spell_level(SKILL_BANDAGE, CLASS_CONJURER, 1, 2);

}

/* reset skills to include new class skills for classes */
void update_skills(struct char_data *ch)
{
  int skill = 0;
//  int skill_level = 0;

  for (skill = 0; skill < MAX_SKILLS + 1; skill++)
  {
    if (spell_info[skill].min_level[(int)GET_CLASS(ch)] <= GET_LEVEL(ch) )
    {
      if(skill == SPELL_LOCATE_OBJECT)
      {
         SET_SKILL(ch, skill, 0);
         continue;
      }
      if (GET_SKILL(ch, skill) <= 0)
      {
        /* this isn't guaranteed in the future to be correct, very generic..pelase
           feel free to update as needed.. fingh 11/28/98
           Set spells to 1000, all others to 100
        */
        if (skill <= MAX_SPELLS)
          SET_SKILL(ch, skill, 1000)
        else
          SET_SKILL(ch, skill, 150)
      } /* end if (get_skill) */
    } /* end if( spell_info...) */
   // the following tweaks innates...fix it. Fingh 12/9/98
    else
      SET_SKILL(ch, skill, 0);

  } /* end for loop */
    switch (GET_RACE(ch)) {

  case RACE_DROW_ELF:
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, LANG_DROW, 1000);
	  SET_SKILL(ch, LANG_DUERGAR, 200);
	  SET_SKILL(ch, LANG_OGRE, 100);
	  SET_SKILL(ch, LANG_ORCISH, 200);
	  SPEAKING(ch) = LANG_DROW;
    break;
case RACE_ELF:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_ELVEN, 1000);
	  SET_SKILL(ch, LANG_COMMON, 200);
	  SET_SKILL(ch, LANG_HALFLING, 200);
	  SET_SKILL(ch, LANG_GNOMISH, 200);
    break;
case RACE_DWARF:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_DWARVEN, 1000);
	  SET_SKILL(ch, LANG_COMMON, 100);
	  SET_SKILL(ch, LANG_GNOMISH, 200);
	  SET_SKILL(ch, LANG_HALFLING, 200);
    break;
case RACE_DUERGAR:
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, LANG_DUERGAR, 1000);
	  SET_SKILL(ch, LANG_DROW, 100);
	  SET_SKILL(ch, LANG_OGRE, 200);
    break;
case RACE_HALFLING:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_BIT(AFF_FLAGS(ch), AFF_SENSE_LIFE);
	  SET_SKILL(ch, LANG_HALFLING, 1000);
	  SET_SKILL(ch, LANG_COMMON, 400);
	  SET_SKILL(ch, LANG_ELVEN, 200);
	  SET_SKILL(ch, LANG_DWARVEN, 400);
	  SET_SKILL(ch, LANG_GNOMISH, 200);
    break;
case RACE_TROLL:
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, SKILL_DOORBASH, 1000);
	  SET_SKILL(ch, LANG_TROLLISH, 1000);
	  SET_SKILL(ch, LANG_DROW, 50);
    break;
case RACE_OGRE:
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, SKILL_DOORBASH, 1000);
	  SET_SKILL(ch, LANG_OGRE, 1000);
	  SET_SKILL(ch, LANG_TROLLISH, 50);
          break;
case RACE_HALF_ELF:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_COMMON, 1000);
	  SET_SKILL(ch, LANG_ELVEN, 1000);
	  SET_SKILL(ch, LANG_DWARVEN, 200);
	  SET_SKILL(ch, LANG_HALFLING, 200);
          break;
case RACE_GNOME:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_COMMON, 200);
	  SET_SKILL(ch, LANG_ELVEN, 200);
	  SET_SKILL(ch, LANG_GNOMISH, 1000);
	  SET_SKILL(ch, LANG_HALFLING, 200);
	  break;
case RACE_BARBARIAN:
	SET_SKILL(ch, SKILL_DOORBASH, 1000);
	SET_SKILL(ch, LANG_COMMON, 200);
	SET_SKILL(ch, LANG_BARBARIAN, 1000);
        break;
case RACE_HUMAN:
	SET_SKILL(ch, LANG_COMMON, 1000);
	SET_SKILL(ch, LANG_ELVEN, 200);
	SET_SKILL(ch, LANG_HALFLING, 200);
	SET_SKILL(ch, LANG_DWARVEN, 200);
	SET_SKILL(ch, LANG_GNOMISH, 200);
	SET_SKILL(ch, LANG_HALFLING, 200);
	break;
case RACE_ORC:
	SET_SKILL(ch, LANG_DROW, 200);
	SET_SKILL(ch, LANG_DUERGAR, 200);
	SET_SKILL(ch, LANG_OGRE, 100);
	SET_SKILL(ch, LANG_ORCISH, 1000);
	SET_SKILL(ch, LANG_TROLLISH, 200);
	break;
  }


} /* end update_skills */
@


1.177
log
@Fixed log(buf) to log(%s buf)
@
text
@/***************************************************************************
 * $Id: class.c,v 1.176 2009/07/18 01:17:23 myc Exp $
 ***************************************************************************/
/***************************************************************************
 *  File: class.c                                        Part of FieryMUD  *
 *  Usage: Source file for class-specific code                             *
 *                                                                         *
 *  All rights reserved.  See license.doc for complete information.        *
 *                                                                         *
 *  FieryMUD Copyright (C) 1998, 1999, 2000 by the Fiery Consortium        *
 *  FieryMUD is based on CircleMUD Copyright (C) 1993, 94 by the Trustees  *
 *  of the Johns Hopkins University                                        *
 *  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
 ***************************************************************************/

/*
 * This file attempts to concentrate most of the code which must be changed
 * in order for new classes to be added.  If you're adding a new class,
 * you should go through this entire file from beginning to end and add
 * the appropriate new special cases for your new class.
 */

#include "conf.h"
#include "sysdep.h"
#include "structs.h"
#include "db.h"
#include "utils.h"
#include "casting.h"
#include "interpreter.h"
#include "handler.h"
#include "clan.h"
#include "class.h"
#include "comm.h"
#include "races.h"
#include "skills.h"
#include "math.h"
#include "players.h"
#include "regen.h"
#include "pfiles.h"

const char *subclass_descrip =
"\r\n"
"                    &1&bF&0&3&bi&0&1&be&0&3&br&0&1&by&0&3&bMUD Class System&0\r\n"
"&1&bF&0&3&bi&0&1&be&0&3&br&0&1&by&0&7&bMUD &0has many various and complex classes for you to play.  All players\r\n"
"originate from four basic classes. Each of the basic classes\r\n"
"posses unknown growth potential throughout gameplay. As you explore \r\n"
"and the realm and advance your experience you may learn of ways to\r\n"
"specialize your skills and spells into a new subclass.  If you manage\r\n";

const char *subclass_descrip2 =
"to learn of these ways your new class will posses new and different\r\n"
"skills and spells thus altering your power within the realm.  Some\r\n"
"classes will also be required to choose a deity in the future as well.&0\r\n";

/* The newbie equipment
 *
 * 18     a small leather bag           All
 * 19     some iron rations             All
 * 20     a leather water skin          All
 * 21     a pair of leather leggings    warrior, rogue, cleric
 * 22     a pair of leather sleeves     warrior, rogue, cleric
 * 23     a wooden torch                All
 * 24     a steel-studded helmet        warrior
 * 25     steel-toed boots              warrior
 * 26     a pair of leather sandals     rogue, cleric
 * 27     a small leather cap           rogue, cleric
 * 28     a steel mace                  cleric
 * 29     a steel longsword             warrior
 * 30     a steel dagger                rogue, mage
 * 38     black linen leggings          mage
 * 1029   a spellbook                   mage
 * 1154   a feather quill               mage
 * 3090   a small map of mielikki       All
 */

const int common_newbie_eq[] = {
   18,
   19,
   20,
   23,
   3090,
   -1
};

/* classes[]
 *
 * The individual members of these struct definitions have been arranged
 * in a regular fashion, so that they can easily be located.  Please maintain
 * this arrangement:
 *
 *   name, altname, displayname, plainname,
 *   fmtname, abbrev, stars,
 *   magical, mem_mode, active, is_subclass, subclass_of, max_subclass_level, homeroom
 *   statorder
 *   saves
 *   hp_lev, thac0, nowear_flag, hit_regen_factor, mana_regen_factor, mv_regen_factor, exp_gain_factor,
 *   exp_factor, hit_factor, hd_factor, dice_factor, copper_factor, ac_factor,
 *   newbie_eq[]
 *
 * The is_subclass value of inactive classes (such as mystic) should be taken
 * with a grain of salt.  If/when an inactive class is made active, its
 * subclass status should be reevaluated.
 */

struct classdef classes[NUM_CLASSES] = {

   /* SORCERER */
   { "sorcerer", "", "&5&bSorcerer&0", "Sorcerer",
      "&5&bSorcerer&0    ", "&5&bSor&0", "&5&b**&0",
      TRUE, MEMORIZE, TRUE, FALSE, CLASS_UNDEFINED, 45, 3046,
      {STAT_INT, STAT_WIS, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA},
      { 90, 85, 95, 105, 80 },
      5, 6, ITEM_ANTI_SORCERER, 80, 100, 100, 1.2,
      120, 80, 80, 60, 100, 75,
      { 1029, 1154, 38, 27, 26, 30, -1 }
   },

   /* CLERIC */
   { "cleric", "", "&6Cleric&0", "Cleric",
      "&6Cleric&0      ", "&6Cle&0", "&6**&0",
      TRUE, PRAY, TRUE, FALSE, CLASS_UNDEFINED, 45, 3003,
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA},
      { 85, 110, 85, 115, 90 },
      8, 4, ITEM_ANTI_CLERIC, 80, 100, 100, 1,
      100, 80, 80, 70, 100, 100,
      { 21, 22, 27, 26, 28, -1 }
   },

   /* THIEF */
   { "thief", "", "&1&bThief&0", "Thief",
      "&1&bThief&0       ", "&1&bThi&0", "&1&b**&0",
      FALSE, MEM_NONE, TRUE, TRUE, CLASS_ROGUE, -1, 3038,
      {STAT_DEX, STAT_STR, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA},
      { 95, 90, 100, 110, 110 },
      8, 1, ITEM_ANTI_ROGUE, 100, 100, 100, 1,
      100, 90, 100, 100, 100, 80,
      { 21, 22, 27, 26, 30, -1 }
   },

   /* WARRIOR */
   { "warrior", "", "&4&bWarrior&0", "Warrior",
      "&4&bWarrior&0     ", "&4&bWar&0", "&4&b**&0",
      FALSE, MEM_NONE, TRUE, FALSE, CLASS_UNDEFINED, 25, 3022,
      {STAT_STR, STAT_DEX, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA},
      { 105, 115, 100, 100, 110 },
      12, -5, ITEM_ANTI_WARRIOR, 100, 0, 100, 1.1,
      100, 120, 120, 120, 100, 120,
      { 21, 22, 24, 25, 29, -1 }
   },

   /* PALADIN */
   { "paladin", "", "&8Paladin&0", "Paladin",
      "&8Paladin&0     ", "&8Pal&0", "&8**&0",
      TRUE, PRAY, TRUE, TRUE, CLASS_WARRIOR, -1, 3022,
      {STAT_STR, STAT_DEX, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA},
      { 95, 115, 100, 105, 90 },
      10, -4, ITEM_ANTI_PALADIN, 100, 50, 100, 1,
      100, 120, 120, 120, 100, 120,
      { 21, 22, 24, 25, 29, -1 }
   },

   /* ANTI_PALADIN */
   { "anti-paladin", "antipaladin", "&1&bAnti-&9Paladin&0", "Anti-Paladin",
      "&1&bAnti-&9Paladin&0", "&1&bAnt&0", "&1&b**&0",
      TRUE, PRAY, TRUE, TRUE, CLASS_WARRIOR, -1, 3022,
      {STAT_STR, STAT_DEX, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA},
      { 95, 115, 100, 105, 90 },
      10, -4, ITEM_ANTI_ANTI_PALADIN, 100, 50, 100, 1,
      100, 120, 120, 120, 100, 120,
      { 21, 22, 24, 25, 29, -1 }
   },

   /* RANGER */
   { "ranger", "", "&2&bRanger&0", "Ranger",
      "&2&d&bRanger&0      ", "&2&bRan&0", "&2&b**&0",
      TRUE, MEMORIZE, TRUE, TRUE, CLASS_WARRIOR, -1, 3022,
      {STAT_STR, STAT_DEX, STAT_CON, STAT_INT, STAT_WIS, STAT_CHA},
      { 95, 115, 100, 105, 90 },
      10, -4, ITEM_ANTI_RANGER, 100, 50, 100, 1.15,
      100, 120, 120, 120, 100, 120,
      { 21, 22, 24, 25, 29, -1 }
   },

   /* DRUID */
   { "druid", "", "&2Druid&0", "Druid",
      "&2Druid&0       ", "&2Dru&0", "&2**&0",
      TRUE, PRAY, TRUE, TRUE, CLASS_CLERIC, -1, 3003,
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA},
      { 85, 110, 85, 115, 90 },
      8, 5, ITEM_ANTI_DRUID, 85, 100, 100, 1,
      100, 80, 80, 70, 100, 100,
      { 21, 22, 27, 26, 28, -1 }
   },

   /* SHAMAN */
   { "shaman", "", "&6&bShaman&0", "Shaman",
      "&6&bShaman&0      ", "&6&bSha&0", "&6&b**&0",
      TRUE, MEM_NONE, FALSE, FALSE, CLASS_UNDEFINED, -1, 3001,
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA},
      { 105, 115, 105, 110, 110 },
      8, 6, ITEM_ANTI_SHAMAN, 80, 100, 100, 1,
      100, 100, 100, 100, 100, 100,
      { 21, 22, 27, 26, 28, -1 }
   },

   /* ASSASSIN */
   { "assassin", "", "&1Assassin&0", "Assassin",
      "&1Assassin&0    ", "&1Ass&0", "&1**&0",
      FALSE, MEM_NONE, TRUE, TRUE, CLASS_ROGUE, -1, 3038,
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA},
      { 95, 90, 100, 110, 110 },
      8, 2, ITEM_ANTI_ASSASSIN, 100, 0, 100, 1,
      100, 90, 100, 100, 100, 80,
      { 21, 22, 27, 26, 30, -1 }
   },

   /* MERCENARY */
   { "mercenary", "", "&3Mercenary&0", "Mercenary",
      "&3Mercenary&0   ", "&3Mer&0", "&3**&0",
      FALSE, MEM_NONE, TRUE, TRUE, CLASS_ROGUE, -1, 3038,
      {STAT_STR, STAT_DEX, STAT_CON, STAT_INT, STAT_WIS, STAT_CHA},
      { 95, 90, 100, 110, 110 },
      11, 2, ITEM_ANTI_MERCENARY, 100, 0, 100, 1,
      100, 90, 100, 100, 100, 80,
      { 21, 22, 24, 25, 30, 29, -1 }
   },

   /* NECROMANCER */
   { "necromancer", "", "&5Necromancer&0", "Necromancer",
      "&5Necromancer&0 ", "&5Nec&0", "&5**&0",
      TRUE, MEMORIZE, TRUE, TRUE, CLASS_SORCERER, -1, 3046,
      {STAT_INT, STAT_WIS, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA},
      { 90, 85, 95, 105, 80 },
      5, 7, ITEM_ANTI_NECROMANCER, 80, 100, 100, 1.3,
      120, 80, 80, 60, 100, 75,
      { 1029, 1154, 38, 27, 26, 30, -1 }
   },

   /* CONJURER */
   { "conjurer", "", "&3&bConjurer&0", "Conjurer",
      "&3&bConjurer&0    ", "&3&bCon&0", "&3&b**&0",
      TRUE, MEMORIZE, FALSE, TRUE, CLASS_SORCERER, -1, 3046,
      {STAT_INT, STAT_WIS, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA},
      { 90, 85, 95, 105, 80 },
      5, 7, ITEM_ANTI_CONJURER, 80, 100, 100, 1,
      120, 80, 80, 60, 100, 75,
      { 1029, 1154, 38, 27, 26, 30, -1 }
   },

   /* MONK */
   { "monk", "", "&9&bM&0&7on&9&bk&0", "Monk",
      "&9&bM&0&7on&9&bk&0        ", "&9&bMon&0", "&9&b**&0",
      FALSE, MEM_NONE, TRUE, TRUE, CLASS_WARRIOR, -1, 3022,
      {STAT_CON, STAT_STR, STAT_DEX, STAT_WIS, STAT_INT, STAT_CHA},
      { 105, 115, 100, 100, 110 },
      10, -4, 0, 100, 0, 200, 1.5,
      100, 120, 120, 120, 100, 120,
      { 21, 22, 26, 27, -1 }
   },

   /* BERSERKER */
   { "berserker", "", "&9&bBer&1ser&9ker&0", "Berserker",
      "&9&bBer&1ser&9ker&0   ", "&9&bBe&1r&0", "&9&b**&0",
      FALSE, MEM_NONE, FALSE, TRUE, CLASS_WARRIOR, -1, 3022,
      {STAT_STR, STAT_DEX, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA},
      { 105, 115, 100, 100, 110 },
      12, -4, 0, 100, 0, 100, 1,
      100, 120, 120, 120, 100, 120,
      { 21, 22, 24, 25, 29, -1 }
   },

   /* PRIEST */
   { "priest", "", "&6&bPr&7ie&6st&0", "Priest",
      "&6&bPr&7ie&6st&0      ", "&6&bPr&7i&0", "&6&b**&0",
      TRUE, PRAY, TRUE, TRUE, CLASS_CLERIC, -1, 3003,
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA},
      { 85, 110, 85, 115, 90 },
      8, 5, ITEM_ANTI_CLERIC, 80, 100, 100, 1,
      100, 80, 80, 70, 100, 100,
      { 21, 22, 27, 26, 28, -1 }
   },

   /* DIABOLIST */
   { "diabolist", "", "&5Dia&9&bbol&0&5ist&0", "Diabolist",
      "&5Dia&9&bbol&0&5ist&0   ", "&5Di&9&ba&0", "&5**&0",
      TRUE, PRAY, TRUE, TRUE, CLASS_CLERIC, -1, 3003,
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA},
      { 85, 110, 85, 115, 90 },
      8, 5, ITEM_ANTI_CLERIC, 80, 100, 100, 1,
      100, 80, 80, 70, 100, 100,
      { 21, 22, 27, 26, 28, -1 }
   },

   /* MYSTIC */
   { "mystic", "", "&7&bM&0&7ys&9&bti&7c&0", "Mystic",
      "&7&bM&0&7ys&9&bti&7c&0      ", "&7&bM&0&7ys&0", "&7&b**&0",
      TRUE, PRAY, FALSE, TRUE, CLASS_CLERIC, -1, 3003,
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA},
      { 85, 110, 85, 115, 90 },
      8, 7, ITEM_ANTI_CLERIC, 80, 100, 100, 1,
      100, 80, 80, 70, 100, 100,
      { 21, 22, 27, 26, 28, -1 }
   },

   /* ROGUE */
   { "rogue", "", "&9&bRogue&0", "Rogue",
      "&9&bRogue&0       ", "&9&bRog&0", "&9&b**&0",
      FALSE, MEM_NONE, TRUE, FALSE, CLASS_UNDEFINED, 25, 3038,
      {STAT_DEX, STAT_STR, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA},
      { 95, 90, 100, 110, 110 },
      8, 2, ITEM_ANTI_ROGUE, 100, 0, 100, 1,
      100, 90, 100, 100, 100, 80,
      { 21, 22, 27, 26, 30, -1 }
   },

   /* BARD */
   { "bard", "", "&4B&9&bar&0&4d&0", "Bard",
      "&4B&9&bar&0&4d&0        ", "&4B&9&bar&0", "&4**&0",
      FALSE, MEM_NONE, FALSE, TRUE, CLASS_ROGUE, -1, 3038,
      {STAT_DEX, STAT_STR, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA},
      { 95, 90, 100, 110, 110 },
      9, 2, 0, 100, 0, 100, 1,
      100, 90, 100, 100, 100, 80,
      { 21, 22, 27, 26, 30, -1 }
   },

   /* PYROMANCER */
   { "pyromancer", "", "&1P&byr&0&1o&9&bma&0&7nc&9&ber&0", "Pyromancer",
      "&1P&byr&0&1o&9&bma&0&7nc&9&ber&0  ", "&1P&byr&0", "&1**&0",
      TRUE, MEMORIZE, TRUE, TRUE, CLASS_SORCERER, -1, 3046,
      {STAT_INT, STAT_WIS, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA},
      { 90, 85, 95, 105, 80 },
      5, 7, ITEM_ANTI_SORCERER, 80, 100, 100, 1,
      120, 80, 80, 60, 100, 75,
      { 1029, 1154, 38, 27, 26, 30, -1 }
   },

   /* CRYOMANCER */
   { "cryomancer", "", "&4C&bry&0&4o&7ma&9&bnc&0&7er&0", "Cryomancer",
      "&4C&bry&0&4o&7ma&9&bnc&0&7er&0  ", "&4C&bry&0", "&4**&0",
      TRUE, MEMORIZE, TRUE, TRUE, CLASS_SORCERER, -1, 3046,
      {STAT_INT, STAT_WIS, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA},
      { 90, 85, 95, 105, 80 },
      5, 7, ITEM_ANTI_SORCERER, 80, 100, 100, 1,
      120, 80, 80, 60, 100, 75,
      { 1029, 1154, 38, 27, 26, 30, -1 }
   },

   /* ILLUSIONIST */
   { "illusionist", "", "&4I&5l&4l&5u&4s&5i&4o&5n&4i&5s&4t&0", "Illusionist",
      "&4I&5l&4l&5u&4s&5i&4o&5n&4i&5s&4t&0 ", "&4I&5ll&0", "&4**&0",
      TRUE, MEMORIZE, FALSE, TRUE, CLASS_SORCERER, -1, 3046,
      {STAT_INT, STAT_WIS, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA},
      { 90, 85, 95, 105, 80 },
      5, 7, ITEM_ANTI_SORCERER, 80, 100, 100, 1,
      120, 80, 80, 60, 100, 75,
      { 1029, 1154, 38, 27, 26, 30, -1 }
   },

   /* HUNTER */
   { "hunter", "", "&9&bHun&0&2te&9&br&0", "Hunter",
      "&9&bHun&0&2te&9&br&0      ", "&9&bHun&0", "&9&b**&0",
      FALSE, MEM_NONE, FALSE, TRUE, CLASS_ROGUE, -1, 3038,
      {STAT_STR, STAT_DEX, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA},
      { 105, 115, 100, 100, 110 },
      10, -4, 0, 100, 0, 100, 1,
      100, 90, 100, 100, 100, 80,
      { 21, 22, 27, 26, 30, -1 }
   },

   /* LAYMAN */
   { "layman", "", "Layman", "Layman",
     "Layman      ", "Lay", "**",
     FALSE, MEM_NONE, FALSE, FALSE, CLASS_UNDEFINED, -1, 3001,
      {STAT_CHA, STAT_CON, STAT_DEX, STAT_STR, STAT_WIS, STAT_INT},
      { 100, 100, 100, 100, 100 },
      7, 0, 0, 100, 0, 100, 1,
      80, 100, 130, 100, 75, 105,
      { 26, 27, 30, 38, -1 }
   }
};


static flagvector class_effects_mask[FLAGVECTOR_SIZE(NUM_EFF_FLAGS)];
void init_classes(void)
{
  #define PERM_EFF(c, f) SET_FLAG(classes[(c)].effect_flags, (f))

  PERM_EFF(CLASS_PRIEST,       EFF_DETECT_ALIGN);
  PERM_EFF(CLASS_DIABOLIST,    EFF_DETECT_ALIGN);
  PERM_EFF(CLASS_PALADIN,      EFF_DETECT_ALIGN);
  PERM_EFF(CLASS_PALADIN,      EFF_PROTECT_EVIL);
  PERM_EFF(CLASS_ANTI_PALADIN, EFF_DETECT_ALIGN);
  PERM_EFF(CLASS_ANTI_PALADIN, EFF_PROTECT_GOOD);
  PERM_EFF(CLASS_RANGER,       EFF_FARSEE);

  #undef PERM_EFF
}


/* parse_class
 *
 * Identifies a class from a string.  Will do partial matches.
 *
 * Code is present to prohibit a player from being set to the wrong
 * class, but it's disabled.  If it were enabled, it would only take
 * effect if "vict" were not null.
 *
 * ch is someone who's trying to change vict's class (e.g., a wizard
 * manually setting someone to a class due to a quest).
 *
 * If CLASS_UNDEFINED is returned, this function will already have provided
 * feedback to ch (if specified) as to the reason for the failure.  Otherwise,
 * it does not provide feedback.
 */
int parse_class(struct char_data *ch, struct char_data *vict, char *arg) {
   int i, class = CLASS_UNDEFINED, best = CLASS_UNDEFINED;

   if (!*arg) {
      if (ch)
         send_to_char("What class?\r\n", ch);
      return CLASS_UNDEFINED;
   }

   for (i = 0; i < NUM_CLASSES; i++) {
      if (!strncasecmp(arg, classes[i].name, strlen(arg))) {
         if (!strcasecmp(arg, classes[i].name)) {
            class = i;
            break;
         }
         if (best == CLASS_UNDEFINED)
            best = i;
      } else if (!strncasecmp(arg, classes[i].altname, strlen(arg))) {
         if (!strcasecmp(arg, classes[i].altname)) {
            class = i;
            break;
         }
         if (best == CLASS_UNDEFINED)
            best = i;
      }
   }

   if (class == CLASS_UNDEFINED) class = best;

   if (class == CLASS_UNDEFINED) {
      if (ch)
         send_to_char("There is no such class.\r\n", ch);
   }

   /* There are no validity checks. */
   return class;

   /* The following code could be used to prevent deities from assigning
    * a class classe to a player if:
    *
    *  - The class is not "active"
    *  - The player's race does not allow the class
    *
    * It's currently not used. */

   /* Bypass validity checks for immortal victims (or no specified victim). */
   if (!vict || GET_LEVEL(vict) > LVL_MAX_MORT)
      return class;

   /* The class has been identified, and there is a mortal victim.
    * Make sure this class is available to the victim. */

   if (!classes[class].active) {
      if (ch) {
         sprintf(buf, "The %s class is not available to mortals.\r\n",
               classes[class].name);
         send_to_char(buf, ch);
      }
      return CLASS_UNDEFINED;
   }

   if (!class_ok_race[(int)GET_RACE(vict)][class]) {
      if (ch) {
         sprintf(buf, "As %s, $n can't become %s.",
               with_indefinite_article(races[(int)GET_RACE(vict)].displayname),
               with_indefinite_article(classes[class].name));
         act(buf, FALSE, vict, 0, ch, TO_VICT);
       }
       return CLASS_UNDEFINED;
   }

   return class;
}

void give_newbie_eq(struct char_data *ch)
{
   struct obj_data *obj;
   int i;

   if (!VALID_CLASS(ch)) {
      sprintf(buf,
            "SYSERR: give_newbie_eq() called for char with invalid class of %d",
            GET_CLASS(ch));
      log("%s",buf);
      return;
   }

   if (GET_LEVEL(ch) > 4) return;

   for (i = 0; common_newbie_eq[i] >= 0; i++) {
      obj = read_object(common_newbie_eq[i], VIRTUAL);
      obj_to_char(obj, ch);
   }

   for (i = 0; classes[(int)GET_CLASS(ch)].newbie_eq[i] >= 0; i++) {
      obj = read_object(classes[(int)GET_CLASS(ch)].newbie_eq[i], VIRTUAL);
      obj_to_char(obj, ch);
   }
}

/* GUILD GUARDS
 *
 * When a mob with the guild guard specproc is placed in a room, it will
 * by default do no blocking at all.
 *
 * When a guild guard is instructed to allow a class to go in a particular
 * direction, that direction becomes restricted.  The guard will now block
 * all other classes from passing that way.
 *
 * More than one class may be permitted to go in a particular direction.
 * This is useful in the case of base-class guildmasters, such as the
 * warrior guildmaster beyond room 3021.  All warrior classes should be
 * permitted to go there.  They must all be mentioned specifically,
 * however.
 */
int guild_info[][3] = {

  /* Mielikki */     /* Room    Direction */
  {CLASS_SORCERER,      3045,   SCMD_EAST},
  {CLASS_PYROMANCER,    3045,   SCMD_EAST},
  {CLASS_CRYOMANCER,    3045,   SCMD_EAST},
  {CLASS_NECROMANCER,   3045,   SCMD_EAST},
  {CLASS_ILLUSIONIST,   3045,   SCMD_EAST},
  {CLASS_PYROMANCER,    3045,   SCMD_UP},
  {CLASS_CRYOMANCER,    3045,   SCMD_DOWN},
  {CLASS_ILLUSIONIST,   3207,   SCMD_SOUTH},
  {CLASS_NECROMANCER,   16950,  SCMD_UP},  /* Haunted House */

  {CLASS_CLERIC,        3004,   SCMD_NORTH},
  {CLASS_DIABOLIST,     3004,   SCMD_NORTH},
  {CLASS_DRUID,         3004,   SCMD_NORTH},
  {CLASS_PRIEST,        3004,   SCMD_NORTH},
  {CLASS_DRUID,         3004,   SCMD_WEST},
  {CLASS_PRIEST,        3004,   SCMD_UP},

  {CLASS_ROGUE,         3037,   SCMD_DOWN},
  {CLASS_ASSASSIN,      3037,   SCMD_DOWN},
  {CLASS_THIEF,         3037,   SCMD_DOWN},
  {CLASS_MERCENARY,     3037,   SCMD_DOWN},

  {CLASS_WARRIOR,       3021,   SCMD_NORTH},
  {CLASS_ANTI_PALADIN,  3021,   SCMD_NORTH},
  {CLASS_RANGER,        3021,   SCMD_NORTH},
  {CLASS_MONK,          3021,   SCMD_NORTH},
  {CLASS_PALADIN,       3021,   SCMD_NORTH},
  {CLASS_BERSERKER,     3021,   SCMD_NORTH},
  {CLASS_RANGER,        3549,   SCMD_WEST},  /* Light Forest */
  {CLASS_MONK,          5307,   SCMD_EAST},  /* Grey Castle */
  {CLASS_PALADIN,       5305,   SCMD_EAST},  /* Grey Castle */

  /* Ogakh */        /* Room    Direction */
  {CLASS_SORCERER,      30072,  SCMD_WEST},
  {CLASS_PYROMANCER,    30072,  SCMD_WEST},
  {CLASS_CRYOMANCER,    30072,  SCMD_WEST},
  {CLASS_NECROMANCER,   30072,  SCMD_WEST},
  {CLASS_ILLUSIONIST,   30072,  SCMD_WEST},
  {CLASS_PYROMANCER,    30102,  SCMD_NORTH},
  {CLASS_CRYOMANCER,    30102,  SCMD_WEST},
  {CLASS_NECROMANCER,   30112,  SCMD_UP},
  {CLASS_ILLUSIONIST,   30120,  SCMD_UP},

  {CLASS_CLERIC,        30069,  SCMD_WEST},
  {CLASS_DIABOLIST,     30069,  SCMD_WEST},
  {CLASS_DRUID,         30069,  SCMD_WEST},
  {CLASS_PRIEST,        30069,  SCMD_WEST},
  {CLASS_DIABOLIST,     30107,  SCMD_SOUTH},

  {CLASS_ROGUE,         30018,  SCMD_EAST},
  {CLASS_ASSASSIN,      30018,  SCMD_EAST},
  {CLASS_THIEF,         30018,  SCMD_EAST},
  {CLASS_MERCENARY,     30018,  SCMD_EAST},

  {CLASS_WARRIOR,       30029,  SCMD_WEST},
  {CLASS_ANTI_PALADIN,  30029,  SCMD_WEST},
  {CLASS_RANGER,        30029,  SCMD_WEST},
  {CLASS_MONK,          30029,  SCMD_WEST},
  {CLASS_PALADIN,       30029,  SCMD_WEST},
  {CLASS_BERSERKER,     30029,  SCMD_WEST},
  {CLASS_ANTI_PALADIN,  30107,  SCMD_NORTH},

  /* Anduin */
  {CLASS_ANTI_PALADIN,  6079,   SCMD_EAST},

  {CLASS_WARRIOR,       6148,   SCMD_SOUTH},
  {CLASS_MONK,          6148,   SCMD_SOUTH},
  {CLASS_PALADIN,       6148,   SCMD_SOUTH},
  {CLASS_RANGER,        6148,   SCMD_SOUTH},
  {CLASS_BERSERKER,     6148,   SCMD_SOUTH},

  {CLASS_ROGUE,         6067,   SCMD_NORTH},
  {CLASS_THIEF,         6067,   SCMD_NORTH},
  {CLASS_MERCENARY,     6106,   SCMD_UP},
  {CLASS_ASSASSIN,      6083,   SCMD_NORTH},

  {CLASS_CLERIC,        6217,   SCMD_EAST},
  {CLASS_PRIEST,        6217,   SCMD_EAST},
  {CLASS_DIABOLIST,     6075,   SCMD_SOUTH},
  {CLASS_DRUID,         6217,   SCMD_UP},

  {CLASS_SORCERER,      6219,   SCMD_UP},
  {CLASS_NECROMANCER,   6219,   SCMD_DOWN},
  {CLASS_PYROMANCER,    6219,   SCMD_NORTH},
  {CLASS_CRYOMANCER,    6219,   SCMD_SOUTH},
  {CLASS_ILLUSIONIST,   6233,   SCMD_SOUTH},

  /* Ickle */
  {CLASS_ROGUE,         10047,   SCMD_EAST},
  {CLASS_MERCENARY,     10047,   SCMD_EAST},
  {CLASS_ASSASSIN,      10047,   SCMD_EAST},
  {CLASS_THIEF,         10047,   SCMD_EAST},

  {CLASS_WARRIOR,       10014,   SCMD_WEST},
  {CLASS_ANTI_PALADIN,  10014,   SCMD_WEST},
  {CLASS_PALADIN,       10014,   SCMD_WEST},
  {CLASS_MONK,          10014,   SCMD_WEST},
  {CLASS_RANGER,        10014,   SCMD_WEST},
  {CLASS_BERSERKER,     10014,   SCMD_WEST},

  {CLASS_CLERIC,        10004,   SCMD_WEST},
  {CLASS_PRIEST,        10004,   SCMD_WEST},
  {CLASS_DIABOLIST,     10004,   SCMD_WEST},
  {CLASS_DRUID,         10004,   SCMD_WEST},

  {CLASS_SORCERER,      10036,   SCMD_NORTH},
  {CLASS_NECROMANCER,   10036,   SCMD_NORTH},
  {CLASS_PYROMANCER,    10036,   SCMD_NORTH},
  {CLASS_CRYOMANCER,    10036,   SCMD_NORTH},
  {CLASS_ILLUSIONIST,   10036,   SCMD_NORTH},

  /* Timun's Citadel of testing guards */
  {-999,               17200,   SCMD_WEST},

/* Example to block everyone:
  {-999<--all  ,     5065,   SCMD_WEST},
*/

  /* this must go last -- add new guards above! */
  {-1, -1, -1}};


/* This function is used to limit the skill a players class can get.
 * The defult is full skill 1000, so dont use it if it is that.
 * It actually limits skill accross the levels, ie:

 MAX SKILL = 600/50 * lvl.  eg if 1000 was max 1000/50 = 20 *lvl

 */

int level_max_skill(struct char_data *ch, int level, int skill) {
  int max_skill = 1000;

  /* The proficiency of individual spells comes from their related skills,
   * not the skill level of the spell itself.  Spells are set to a so-called
   * "proficiency" of 1000 when a quest spell is awarded. */
  if (IS_SPELL(skill))
     return 1000;

  switch(GET_RACE(ch)) {
  case RACE_OGRE:
    switch(skill) {
    case SKILL_PARRY:
    case SKILL_RIPOSTE:
      max_skill = 750;
      break;
    }
  case RACE_TROLL:
    switch(skill) {
    case SKILL_DODGE:
    case SKILL_PARRY:
      max_skill = 700;
      break;
    }
  }
  switch(GET_CLASS(ch)) {
  case CLASS_RANGER:
    switch(skill) {
    case SKILL_HUNT:
      max_skill = 750;
      break;
    }
    break;
  case CLASS_PRIEST:
    switch(skill) {
    case SKILL_DOUBLE_ATTACK:
      max_skill = 500;
      break;
    }
    break;
  case CLASS_HUNTER:
    switch(skill) {

    }
    break;
  case CLASS_WARRIOR:
    switch(skill) {
    case SKILL_TRACK:
      max_skill = 600;
      break;
    }
    break;
  case CLASS_MERCENARY:
    switch(skill) {
    case SKILL_TRACK:
      max_skill = 850;
      break;
    }
    break;
  case CLASS_ASSASSIN:
    switch(skill) {
    case SKILL_TRACK:
      max_skill = 750;
      break;
    }
    break;
  case CLASS_THIEF:
    switch(skill) {
    case SKILL_TRACK:
      max_skill = 600;
      break;
    }
    break;
  case CLASS_ROGUE:
    switch(skill) {
    case SKILL_TRACK:
      max_skill = 650;
      break;
    }
    break;
  case CLASS_ILLUSIONIST:
    switch(skill) {
    case SKILL_HIDE:
      max_skill = 500;
      break;
    }
    break;
  }
  return (MIN((10 * level) + 50, max_skill));
}

int return_max_skill(struct char_data *ch, int skill) {
   return level_max_skill(ch, GET_LEVEL(ch), skill);
}

void init_char_class(struct char_data *ch)
{
   /* Nothing much to do here. */
}

void update_char_class(struct char_data *ch)
{
   if (!VALID_CLASS(ch)) {
     char buf[500];
     sprintf(buf, "update_char_class: %s doesn't have a valid class (%d).",
             GET_NAME(ch), GET_CLASS(ch));
     log("%s",buf);
     return;
   }

   /* Any bits that might get set below should be cleared here first. */
   REMOVE_FLAGS(EFF_FLAGS(ch), class_effects_mask, NUM_EFF_FLAGS);

   /* Reset effect flags for this race */
   SET_FLAGS(EFF_FLAGS(ch), classes[(int) GET_CLASS(ch)].effect_flags, NUM_EFF_FLAGS);
}

/*
 * This function controls the change to maxmove, maxmana, and maxhp whenever
 * someone gains or loses a level. */

/*modified by proky so if lose level uses GET_LASTLEVEL(ch)*/

void advance_level(struct char_data * ch, enum level_action action)
{
   int add_hp = 0, c = GET_CLASS(ch);

   /*
    * First determine how much hp the player should gain based on their
    * class under normal circumstances.
    */
   switch (c) {
   case CLASS_SORCERER:
   case CLASS_CRYOMANCER:
   case CLASS_ILLUSIONIST:
   case CLASS_PYROMANCER:
   case CLASS_NECROMANCER:
   case CLASS_CONJURER:
      if (action == LEVEL_GAIN)
         add_hp += number(3, 8);
      else
         add_hp -= 8;
      break;

   case CLASS_CLERIC:
   case CLASS_SHAMAN:
   case CLASS_PRIEST:
   case CLASS_DIABOLIST:
   case CLASS_MYSTIC:
      if (action == LEVEL_GAIN)
         add_hp += number(5, 10);
      else
         add_hp -= 10;
      break;

   case CLASS_DRUID:
      if (action == LEVEL_GAIN)
         add_hp += number(5, 11);
      else
         add_hp -= 11;
      break;

   case CLASS_ASSASSIN:
      if (action == LEVEL_GAIN)
         add_hp += number(7, 12);
      else
         add_hp -= 12;
      break;

   case CLASS_THIEF:
   case CLASS_ROGUE:
   case CLASS_BARD:
      if (action == LEVEL_GAIN)
         add_hp += number(7, 13);
      else
         add_hp -= 13;
      break;

   case CLASS_MERCENARY:
      if (action == LEVEL_GAIN)
         add_hp += number(7, 14);
      else
         add_hp -= 14;
      break;

   case CLASS_RANGER:
      if (action == LEVEL_GAIN)
         add_hp += number(9, 13);
      else
         add_hp -= 13;
      break;

   case CLASS_PALADIN:
   case CLASS_ANTI_PALADIN:
      if (action == LEVEL_GAIN)
         add_hp += number(9, 14);
      else
         add_hp -= 14;
      break;

   case CLASS_WARRIOR:
   case CLASS_MONK:
   case CLASS_BERSERKER:
   case CLASS_HUNTER:
      if (action == LEVEL_GAIN)
         add_hp += number(10, 15);
      else
         add_hp -= 14;
      break;

   default:
      if (action == LEVEL_GAIN)
         add_hp += number(5, 10);
      else
         add_hp -= 9;
      log("SYSERR: Unrecognized class %d in advance_char", c);
   }

   /*
    * If this is a magical class and the char is losing a level,
    * run init_mem_list to clear out spells they shouldn't know.
    */
   if (classes[c].magical && action == LEVEL_LOSE)
     init_mem_list(ch);

   /*
    * If losing a level, and there is a value in GET_LASTLEVEL,
    * use that instead of whatever we calculated above.
    */
   if (action == LEVEL_LOSE && GET_LASTLEVEL(ch) != 0)
     add_hp = 0 - (GET_LASTLEVEL(ch) + number(0, 1));

   /* If over level 30, use constants for hitpoints */
   if (GET_LEVEL(ch) > 30) {
      if (action == LEVEL_GAIN)
         add_hp = classes[c].hp_lev;
      else
         add_hp = 0 - classes[c].hp_lev;
   }

   /* Add to natural hitpoints and then recalculate other hitpoints */
   ch->points.max_hit += add_hp;
   GET_BASE_HIT(ch) += add_hp;
   effect_total(ch);

   /* Calculate mana */
   if (GET_LEVEL(ch) > 10)
      ch->points.max_mana = (GET_LEVEL(ch) * GET_LEVEL(ch)) / 10;
   else
      ch->points.max_mana = 0;

   /* Give immortals special treatment */
   if (GET_LEVEL(ch) >= LVL_IMMORT) {
      GET_COND(ch, FULL) = (char) -1;
      GET_COND(ch, THIRST) = (char) -1;
      GET_COND(ch, DRUNK) = (char) -1;
      SET_FLAG(PRF_FLAGS(ch), PRF_HOLYLIGHT);
   }

   /* Modify clan power */
   if (GET_CLAN(ch) && IS_CLAN_MEMBER(ch)) {
      if (action == LEVEL_GAIN)
         ++GET_CLAN(ch)->power;
      else
         --GET_CLAN(ch)->power;
   }

   check_regen_rates(ch); /* start regening new points */
   update_char(ch);       /* update skills/spells/innates/etc. for new level */
   save_player_char(ch);
}

/*
 * ASSIGNMENT OF SPELLS AND SKILLS.  Here we define which spells, skills,
 * chants, and songs are assigned to which classes, and the minimum level
 * a character must be to use them.
 */
#define spell_assign(spellnum, class, level)	skill_assign(spellnum, class, level)
#define chant_assign(chantnum, class, level)	skill_assign(chantnum, class, level)
void assign_class_skills(void) {
  int i;

  /* Set up some skills common to multiple classes */
  for (i = 0; i < NUM_CLASSES; ++i) {

    /* Skills that all classes get. */
    skill_assign(SKILL_MOUNT, i, 1);
    skill_assign(SKILL_RIDING, i, 1);
    skill_assign(SKILL_BANDAGE, i, 1);
    skill_assign(SKILL_DOUSE, i, 1);
    skill_assign(SKILL_FIRST_AID, i, 1);

    /* Magic only */
    if (classes[i].magical) {
      skill_assign(SKILL_MEDITATE, i, 1);
      skill_assign(SKILL_KNOW_SPELL, i, 1);
      skill_assign(SKILL_QUICK_CHANT, i, 1);
    }

    /* Scribe users */
    if (classes[i].mem_mode == MEMORIZE)
      skill_assign(SKILL_SCRIBE, i, 1);

    /* Arcane magic types */
    if (i == CLASS_SORCERER || classes[i].subclass_of == CLASS_SORCERER) {
      skill_assign(SKILL_PIERCING, i, 1);
      skill_assign(SKILL_DODGE, i, 20);
    }
  }

  /* From here on down, the classes are listed in alphabetical order.
   * Within each class, skills should be sorted by level and spells
   * tend to be grouped by circle. */

  /* ANTI_PALADIN */
  skill_assign(SKILL_BLUDGEONING, CLASS_ANTI_PALADIN, 1);
  skill_assign(SKILL_PIERCING, CLASS_ANTI_PALADIN, 1);
  skill_assign(SKILL_SLASHING, CLASS_ANTI_PALADIN, 1);
  skill_assign(SKILL_2H_BLUDGEONING, CLASS_ANTI_PALADIN, 1);
  skill_assign(SKILL_2H_SLASHING, CLASS_ANTI_PALADIN, 1);
  skill_assign(SKILL_KICK, CLASS_ANTI_PALADIN, 1);
  skill_assign(SKILL_BASH, CLASS_ANTI_PALADIN, 1);
  skill_assign(SKILL_DODGE, CLASS_ANTI_PALADIN, 1);
  skill_assign(SKILL_TAME, CLASS_ANTI_PALADIN, 7);
  skill_assign(SKILL_GUARD, CLASS_ANTI_PALADIN, 10);
  skill_assign(SKILL_SWITCH, CLASS_ANTI_PALADIN, 10);
  skill_assign(SKILL_RESCUE, CLASS_ANTI_PALADIN, 10);
  skill_assign(SKILL_SUMMON_MOUNT, CLASS_ANTI_PALADIN, 15);
  skill_assign(SKILL_DUAL_WIELD, CLASS_ANTI_PALADIN, 20);
  skill_assign(SKILL_PARRY, CLASS_ANTI_PALADIN, 20);
  skill_assign(SKILL_RIPOSTE, CLASS_ANTI_PALADIN, 40);
  skill_assign(SKILL_VAMP_TOUCH, CLASS_ANTI_PALADIN, 45);
  skill_assign(SKILL_RETREAT, CLASS_ANTI_PALADIN, 60);
  skill_assign(SKILL_DOUBLE_ATTACK, CLASS_ANTI_PALADIN, 70);
  skill_assign(SKILL_HITALL, CLASS_ANTI_PALADIN, 80);
  skill_assign(SKILL_DISARM, CLASS_ANTI_PALADIN, 50);

  spell_assign(SPELL_CAUSE_LIGHT, CLASS_ANTI_PALADIN, CIRCLE_1);
  spell_assign(SPELL_DARK_PRESENCE, CLASS_ANTI_PALADIN, CIRCLE_2);
  spell_assign(SPELL_DEMONSKIN, CLASS_ANTI_PALADIN, CIRCLE_2);
  spell_assign(SPELL_CREATE_FOOD, CLASS_ANTI_PALADIN, CIRCLE_3);
  spell_assign(SPELL_CREATE_WATER, CLASS_ANTI_PALADIN, CIRCLE_3);
  spell_assign(SPELL_CAUSE_SERIOUS, CLASS_ANTI_PALADIN, CIRCLE_3);
  spell_assign(SPELL_CURSE, CLASS_ANTI_PALADIN, CIRCLE_4);
  spell_assign(SPELL_CAUSE_CRITIC, CLASS_ANTI_PALADIN, CIRCLE_5);
  spell_assign(SPELL_DISPEL_GOOD, CLASS_ANTI_PALADIN, CIRCLE_5);
  spell_assign(SPELL_POISON, CLASS_ANTI_PALADIN, CIRCLE_5);
  spell_assign(SPELL_CURE_BLIND, CLASS_ANTI_PALADIN, CIRCLE_6);
  spell_assign(SPELL_BLINDNESS, CLASS_ANTI_PALADIN, CIRCLE_6);
  spell_assign(SPELL_DISPEL_MAGIC, CLASS_ANTI_PALADIN, CIRCLE_7);
  spell_assign(SPELL_SUMMON_CORPSE, CLASS_ANTI_PALADIN, CIRCLE_8);
  spell_assign(SPELL_SOULSHIELD, CLASS_ANTI_PALADIN, CIRCLE_8);
  spell_assign(SPELL_HARM, CLASS_ANTI_PALADIN, CIRCLE_9);
  spell_assign(SPELL_UNHOLY_WORD, CLASS_ANTI_PALADIN, CIRCLE_11);

  /* ASSASSIN */
  skill_assign(SKILL_INSTANT_KILL, CLASS_ASSASSIN, 1);
  skill_assign(SKILL_SNEAK, CLASS_ASSASSIN, 1);
  skill_assign(SKILL_BACKSTAB, CLASS_ASSASSIN, 1);
  skill_assign(SKILL_HIDE, CLASS_ASSASSIN, 1);
  skill_assign(SKILL_TRACK, CLASS_ASSASSIN, 1);
  skill_assign(SKILL_DODGE, CLASS_ASSASSIN, 1);
  skill_assign(SKILL_PARRY, CLASS_ASSASSIN, 1);
  skill_assign(SKILL_PIERCING, CLASS_ASSASSIN, 1);
  skill_assign(SKILL_SLASHING, CLASS_ASSASSIN, 1);
  skill_assign(SKILL_PICK_LOCK, CLASS_ASSASSIN, 6);
  skill_assign(SKILL_DUAL_WIELD, CLASS_ASSASSIN, 15);
  skill_assign(SKILL_THROATCUT, CLASS_ASSASSIN, 31);
  skill_assign(SKILL_KICK, CLASS_ASSASSIN, 36);
  skill_assign(SKILL_SHADOW, CLASS_ASSASSIN, 40);
  skill_assign(SKILL_DOUBLE_ATTACK, CLASS_ASSASSIN, 65);

  /* BARD */
  skill_assign(SKILL_BACKSTAB, CLASS_BARD, 1);
  skill_assign(SKILL_PIERCING, CLASS_BARD, 1);
  skill_assign(SKILL_SNEAK, CLASS_BARD, 10);
  skill_assign(SKILL_PICK_LOCK, CLASS_BARD, 10);
  skill_assign(SKILL_STEAL, CLASS_BARD, 10);
  skill_assign(SKILL_HIDE, CLASS_BARD, 10);
  skill_assign(SKILL_DODGE, CLASS_BARD, 20);
  skill_assign(SKILL_PARRY, CLASS_BARD, 40);
  skill_assign(SKILL_TRACK, CLASS_BARD, 50);
  skill_assign(SKILL_DOUBLE_ATTACK, CLASS_BARD, 70);
  skill_assign(SKILL_DUAL_WIELD, CLASS_BARD, 90);

  /* BERSERKER */
  skill_assign(SKILL_BERSERK, CLASS_BERSERKER, 10);
  skill_assign(SKILL_BLUDGEONING, CLASS_BERSERKER, 1);
  skill_assign(SKILL_PIERCING, CLASS_BERSERKER, 1);
  skill_assign(SKILL_SLASHING, CLASS_BERSERKER, 1);
  skill_assign(SKILL_2H_BLUDGEONING, CLASS_BERSERKER, 1);
  skill_assign(SKILL_2H_PIERCING, CLASS_BERSERKER, 1);
  skill_assign(SKILL_2H_SLASHING, CLASS_BERSERKER, 1);
  skill_assign(SKILL_SWITCH, CLASS_BERSERKER, 1);
  skill_assign(SKILL_KICK, CLASS_BERSERKER, 1);
  skill_assign(SKILL_DODGE, CLASS_BERSERKER, 1);
  skill_assign(SKILL_PARRY, CLASS_BERSERKER, 15);
  skill_assign(SKILL_DUAL_WIELD, CLASS_BERSERKER, 20);
  skill_assign(SKILL_CHANT, CLASS_BERSERKER, 25);
  chant_assign(CHANT_SPIRIT_BEAR, CLASS_BERSERKER, 25);
  skill_assign(SKILL_MAUL, CLASS_BERSERKER, 30);
  skill_assign(SKILL_TANTRUM, CLASS_BERSERKER, 42);
  skill_assign(SKILL_MEDITATE, CLASS_BERSERKER, 50);
  skill_assign(SKILL_RIPOSTE, CLASS_BERSERKER, 50);
  chant_assign(CHANT_SPIRIT_WOLF, CLASS_BERSERKER, 60);
  skill_assign(SKILL_BATTLE_HOWL, CLASS_BERSERKER, 67);
  skill_assign(SKILL_GROUND_SHAKER, CLASS_BERSERKER, 75);
  skill_assign(SKILL_DOUBLE_ATTACK, CLASS_BERSERKER, 83);
  chant_assign(CHANT_INTERMINABLE_WRATH, CLASS_BERSERKER, 90);

  /* CLERIC */
  skill_assign(SKILL_BLUDGEONING, CLASS_CLERIC, 1);
  skill_assign(SKILL_2H_BLUDGEONING, CLASS_CLERIC, 1);
  skill_assign(SKILL_DODGE, CLASS_CLERIC, 20);

  spell_assign(SPELL_DETECT_MAGIC, CLASS_CLERIC, CIRCLE_1);
  spell_assign(SPELL_CURE_LIGHT, CLASS_CLERIC, CIRCLE_1);
  spell_assign(SPELL_ARMOR, CLASS_CLERIC, CIRCLE_1);
  spell_assign(SPELL_CREATE_FOOD, CLASS_CLERIC, CIRCLE_1);
  spell_assign(SPELL_CAUSE_LIGHT, CLASS_CLERIC, CIRCLE_1);
  spell_assign(SPELL_CREATE_WATER, CLASS_CLERIC, CIRCLE_1);
  spell_assign(SPELL_LESSER_ENDURANCE, CLASS_CLERIC, CIRCLE_1);

  spell_assign(SPELL_CURE_SERIOUS, CLASS_CLERIC, CIRCLE_2);
  spell_assign(SPELL_VIGORIZE_LIGHT, CLASS_CLERIC, CIRCLE_2);
  spell_assign(SPELL_PRESERVE, CLASS_CLERIC, CIRCLE_2);
  spell_assign(SPELL_CAUSE_SERIOUS, CLASS_CLERIC, CIRCLE_2);
  spell_assign(SPELL_DETECT_POISON, CLASS_CLERIC, CIRCLE_2);
  spell_assign(SPELL_DETECT_ALIGN, CLASS_CLERIC, CIRCLE_2);
  spell_assign(SPELL_BLESS, CLASS_CLERIC, CIRCLE_2);

  spell_assign(SPELL_ENDURANCE, CLASS_CLERIC, CIRCLE_3);
  spell_assign(SPELL_CURE_BLIND, CLASS_CLERIC, CIRCLE_3);
  spell_assign(SPELL_VIGORIZE_SERIOUS, CLASS_CLERIC, CIRCLE_3);
  spell_assign(SPELL_CAUSE_CRITIC, CLASS_CLERIC, CIRCLE_3);
  spell_assign(SPELL_POISON, CLASS_CLERIC, CIRCLE_3);
  spell_assign(SPELL_PROT_FROM_EVIL, CLASS_CLERIC, CIRCLE_3);
  spell_assign(SPELL_CURE_CRITIC, CLASS_CLERIC, CIRCLE_3);
  spell_assign(SPELL_REMOVE_POISON, CLASS_CLERIC, CIRCLE_3);
  spell_assign(SPELL_WORD_OF_RECALL, CLASS_CLERIC, CIRCLE_3);

  spell_assign(SPELL_VIGORIZE_CRITIC, CLASS_CLERIC, CIRCLE_4);
  spell_assign(SPELL_BLINDNESS, CLASS_CLERIC, CIRCLE_4);
  spell_assign(SPELL_SUMMON, CLASS_CLERIC, CIRCLE_4);
  spell_assign(SPELL_DISPEL_EVIL, CLASS_CLERIC, CIRCLE_4);
  spell_assign(SPELL_DISPEL_GOOD, CLASS_CLERIC, CIRCLE_4);
  spell_assign(SPELL_SENSE_LIFE, CLASS_CLERIC, CIRCLE_4);
  spell_assign(SPELL_FLAMESTRIKE, CLASS_CLERIC, CIRCLE_4);

  spell_assign(SPELL_GREATER_ENDURANCE, CLASS_CLERIC, CIRCLE_5);
  spell_assign(SPELL_HEAL, CLASS_CLERIC, CIRCLE_5);
  spell_assign(SPELL_HARM, CLASS_CLERIC, CIRCLE_5);
  spell_assign(SPELL_DESTROY_UNDEAD, CLASS_CLERIC, CIRCLE_5);
  spell_assign(SPELL_SOULSHIELD, CLASS_CLERIC, CIRCLE_5);
  spell_assign(SPELL_EARTHQUAKE, CLASS_CLERIC, CIRCLE_5);
  spell_assign(SPELL_REMOVE_CURSE, CLASS_CLERIC, CIRCLE_5);

  spell_assign(SPELL_DARKNESS, CLASS_CLERIC, CIRCLE_6);
  spell_assign(SPELL_ILLUMINATION, CLASS_CLERIC, CIRCLE_6);
  spell_assign(SPELL_SILENCE, CLASS_CLERIC, CIRCLE_6);
  spell_assign(SPELL_UNHOLY_WORD, CLASS_CLERIC, CIRCLE_6);
  spell_assign(SPELL_HOLY_WORD, CLASS_CLERIC, CIRCLE_6);

  spell_assign(SPELL_VITALITY, CLASS_CLERIC, CIRCLE_7);
  spell_assign(SPELL_WATERWALK, CLASS_CLERIC, CIRCLE_7);
  spell_assign(SPELL_FULL_HEAL, CLASS_CLERIC, CIRCLE_7);
  spell_assign(SPELL_FULL_HARM, CLASS_CLERIC, CIRCLE_7);

  spell_assign(SPELL_DISPEL_MAGIC, CLASS_CLERIC, CIRCLE_8);
  spell_assign(SPELL_GROUP_HEAL, CLASS_CLERIC, CIRCLE_8);

  spell_assign(SPELL_GREATER_VITALITY, CLASS_CLERIC, CIRCLE_9);

  spell_assign(SPELL_GROUP_ARMOR, CLASS_CLERIC, CIRCLE_10);

  spell_assign(SPELL_RESURRECT, CLASS_CLERIC, CIRCLE_11);

  spell_assign(SPELL_DRAGONS_HEALTH, CLASS_CLERIC, CIRCLE_12);

  /* CONJURER */
  spell_assign(SPELL_MAGIC_MISSILE, CLASS_CONJURER, CIRCLE_1);
  spell_assign(SPELL_DETECT_MAGIC, CLASS_CONJURER, CIRCLE_1);
  spell_assign(SPELL_MINOR_CREATION, CLASS_CONJURER, CIRCLE_1);
  spell_assign(SPELL_CHILL_TOUCH, CLASS_CONJURER, CIRCLE_2);
  spell_assign(SPELL_BURNING_HANDS, CLASS_CONJURER, CIRCLE_2);
  spell_assign(SPELL_STRENGTH, CLASS_CONJURER, CIRCLE_2);
  spell_assign(SPELL_DETECT_INVIS, CLASS_CONJURER, CIRCLE_2);
  spell_assign(SPELL_IDENTIFY, CLASS_CONJURER, CIRCLE_3);
  spell_assign(SPELL_SHOCKING_GRASP, CLASS_CONJURER, CIRCLE_3);
  spell_assign(SPELL_CONCEALMENT, CLASS_CONJURER, CIRCLE_3);
  spell_assign(SPELL_SUMMON_ELEMENTAL, CLASS_CONJURER, CIRCLE_3);
  spell_assign(SPELL_LIGHTNING_BOLT, CLASS_CONJURER, CIRCLE_4);
  spell_assign(SPELL_LOCATE_OBJECT, CLASS_CONJURER, CIRCLE_4);
  spell_assign(SPELL_WALL_OF_STONE, CLASS_CONJURER, CIRCLE_5);
  spell_assign(SPELL_INFRAVISION, CLASS_CONJURER, CIRCLE_5);
  spell_assign(SPELL_SLEEP, CLASS_CONJURER, CIRCLE_5);
  spell_assign(SPELL_COLOR_SPRAY, CLASS_CONJURER, CIRCLE_5);
  spell_assign(SPELL_WALL_OF_FOG, CLASS_CONJURER, CIRCLE_5);
  spell_assign(SPELL_CONE_OF_COLD, CLASS_CONJURER, CIRCLE_5);
  spell_assign(SPELL_STONE_SKIN, CLASS_CONJURER, CIRCLE_6);
  spell_assign(SPELL_DETECT_POISON, CLASS_CONJURER, CIRCLE_6);
  spell_assign(SPELL_FIREBALL, CLASS_CONJURER, CIRCLE_6);
  spell_assign(SPELL_FLY, CLASS_CONJURER, CIRCLE_6);
  spell_assign(SPELL_INVISIBLE, CLASS_CONJURER, CIRCLE_7);
  spell_assign(SPELL_HASTE, CLASS_CONJURER, CIRCLE_7);
  spell_assign(SPELL_FARSEE, CLASS_CONJURER, CIRCLE_7);
  spell_assign(SPELL_DIMENSION_DOOR, CLASS_CONJURER, CIRCLE_8);
  spell_assign(SPELL_ENCHANT_WEAPON, CLASS_CONJURER, CIRCLE_9);
  spell_assign(SPELL_SUMMON_DEMON, CLASS_CONJURER, CIRCLE_10);
  spell_assign(SPELL_SUMMON_GREATER_DEMON, CLASS_CONJURER, CIRCLE_11);

  /* CRYOMANCER */
  spell_assign(SPELL_ICE_DARTS, CLASS_CRYOMANCER, CIRCLE_1);
  spell_assign(SPELL_MINOR_CREATION, CLASS_CRYOMANCER, CIRCLE_1);
  spell_assign(SPELL_DETECT_MAGIC, CLASS_CRYOMANCER, CIRCLE_1);
  spell_assign(SPELL_WATERWALK, CLASS_CRYOMANCER, CIRCLE_1);
  spell_assign(SPELL_CHILL_TOUCH, CLASS_CRYOMANCER, CIRCLE_2);
  spell_assign(SPELL_STRENGTH, CLASS_CRYOMANCER, CIRCLE_2);
  spell_assign(SPELL_CONCEALMENT, CLASS_CRYOMANCER, CIRCLE_2);
  spell_assign(SPELL_DETECT_INVIS, CLASS_CRYOMANCER, CIRCLE_2);
  spell_assign(SPELL_ICE_ARMOR, CLASS_CRYOMANCER, CIRCLE_3);
  spell_assign(SPELL_EXTINGUISH, CLASS_CRYOMANCER, CIRCLE_3);
  spell_assign(SPELL_DISPEL_MAGIC, CLASS_CRYOMANCER, CIRCLE_3);
  spell_assign(SPELL_LOCATE_OBJECT, CLASS_CRYOMANCER, CIRCLE_3);
  spell_assign(SPELL_SHOCKING_GRASP, CLASS_CRYOMANCER, CIRCLE_3);
  spell_assign(SPELL_LIGHTNING_BOLT, CLASS_CRYOMANCER, CIRCLE_4);
  spell_assign(SPELL_ICE_DAGGER, CLASS_CRYOMANCER, CIRCLE_4);
  spell_assign(SPELL_TELEPORT, CLASS_CRYOMANCER, CIRCLE_4);
  spell_assign(SPELL_RAY_OF_ENFEEB, CLASS_CRYOMANCER, CIRCLE_4);
  spell_assign(SPELL_LEVITATE, CLASS_CRYOMANCER, CIRCLE_4);
  spell_assign(SPELL_COLDSHIELD, CLASS_CRYOMANCER, CIRCLE_4);
  spell_assign(SPELL_MINOR_PARALYSIS, CLASS_CRYOMANCER, CIRCLE_5);
  spell_assign(SPELL_FREEZING_WIND, CLASS_CRYOMANCER, CIRCLE_5);
  spell_assign(SPELL_FARSEE, CLASS_CRYOMANCER, CIRCLE_5);
  spell_assign(SPELL_DIMENSION_DOOR, CLASS_CRYOMANCER, CIRCLE_5);
  spell_assign(SPELL_CONE_OF_COLD, CLASS_CRYOMANCER, CIRCLE_5);
  spell_assign(SPELL_SLEEP, CLASS_CRYOMANCER, CIRCLE_5);
  spell_assign(SPELL_INVISIBLE, CLASS_CRYOMANCER, CIRCLE_5);
  spell_assign(SPELL_ICE_STORM, CLASS_CRYOMANCER, CIRCLE_6);
  spell_assign(SPELL_HASTE, CLASS_CRYOMANCER, CIRCLE_6);
  spell_assign(SPELL_RAIN, CLASS_CRYOMANCER, CIRCLE_6);
  spell_assign(SPELL_MINOR_GLOBE, CLASS_CRYOMANCER, CIRCLE_6);
  spell_assign(SPELL_STONE_SKIN, CLASS_CRYOMANCER, CIRCLE_6);
  spell_assign(SPELL_FREEZE, CLASS_CRYOMANCER, CIRCLE_7);
  spell_assign(SPELL_WALL_OF_ICE, CLASS_CRYOMANCER, CIRCLE_8);
  spell_assign(SPELL_CHAIN_LIGHTNING, CLASS_CRYOMANCER, CIRCLE_8);
  spell_assign(SPELL_MAJOR_GLOBE, CLASS_CRYOMANCER, CIRCLE_8);
  spell_assign(SPELL_FLY, CLASS_CRYOMANCER, CIRCLE_8);
  spell_assign(SPELL_RELOCATE, CLASS_CRYOMANCER, CIRCLE_9);
  spell_assign(SPELL_MASS_INVIS, CLASS_CRYOMANCER, CIRCLE_9);
  spell_assign(SPELL_ICEBALL, CLASS_CRYOMANCER, CIRCLE_9);
  spell_assign(SPELL_NEGATE_COLD, CLASS_CRYOMANCER, CIRCLE_10);
  spell_assign(SPELL_WATERFORM, CLASS_CRYOMANCER, CIRCLE_10);
  spell_assign(SPELL_FLOOD, CLASS_CRYOMANCER, CIRCLE_11);
  spell_assign(SPELL_ICE_SHARDS, CLASS_CRYOMANCER, CIRCLE_12);

  /* DIABOLIST */
  skill_assign(SKILL_BLUDGEONING, CLASS_DIABOLIST, 1);
  skill_assign(SKILL_2H_BLUDGEONING, CLASS_DIABOLIST, 1);
  skill_assign(SKILL_DODGE, CLASS_DIABOLIST, 20);

  spell_assign(SPELL_DEMONSKIN, CLASS_DIABOLIST, CIRCLE_1);
  spell_assign(SPELL_DETECT_MAGIC, CLASS_DIABOLIST, CIRCLE_1);
  spell_assign(SPELL_CURE_LIGHT, CLASS_DIABOLIST, CIRCLE_1);
  spell_assign(SPELL_CAUSE_LIGHT, CLASS_DIABOLIST, CIRCLE_1);
  spell_assign(SPELL_LESSER_ENDURANCE, CLASS_DIABOLIST, CIRCLE_1);

  spell_assign(SPELL_CURE_SERIOUS, CLASS_DIABOLIST, CIRCLE_2);
  spell_assign(SPELL_VIGORIZE_LIGHT, CLASS_DIABOLIST, CIRCLE_2);
  spell_assign(SPELL_DARK_PRESENCE, CLASS_DIABOLIST, CIRCLE_2);
  spell_assign(SPELL_DARK_FEAST, CLASS_DIABOLIST, CIRCLE_2);
  spell_assign(SPELL_PRESERVE, CLASS_DIABOLIST, CIRCLE_2);
  spell_assign(SPELL_CAUSE_SERIOUS, CLASS_DIABOLIST, CIRCLE_2);
  spell_assign(SPELL_DETECT_POISON, CLASS_DIABOLIST, CIRCLE_2);
  spell_assign(SPELL_DETECT_ALIGN, CLASS_DIABOLIST, CIRCLE_2);

  spell_assign(SPELL_HELL_BOLT, CLASS_DIABOLIST, CIRCLE_3);
  spell_assign(SPELL_VIGORIZE_SERIOUS, CLASS_DIABOLIST, CIRCLE_3);
  spell_assign(SPELL_CAUSE_CRITIC, CLASS_DIABOLIST, CIRCLE_3);
  spell_assign(SPELL_CURE_BLIND, CLASS_DIABOLIST, CIRCLE_3);
  spell_assign(SPELL_CURE_CRITIC, CLASS_DIABOLIST, CIRCLE_3);
  spell_assign(SPELL_POISON, CLASS_DIABOLIST, CIRCLE_3);
  spell_assign(SPELL_REMOVE_POISON, CLASS_DIABOLIST, CIRCLE_3);
  spell_assign(SPELL_ENDURANCE, CLASS_DIABOLIST, CIRCLE_3);

  spell_assign(SPELL_VIGORIZE_CRITIC, CLASS_DIABOLIST, CIRCLE_4);
  spell_assign(SPELL_DISEASE, CLASS_DIABOLIST, CIRCLE_4);
  spell_assign(SPELL_DEMONIC_ASPECT, CLASS_DIABOLIST, CIRCLE_4);
  spell_assign(SPELL_ELEMENTAL_WARDING, CLASS_DIABOLIST, CIRCLE_4);
  spell_assign(SPELL_BLINDNESS, CLASS_DIABOLIST, CIRCLE_4);
  spell_assign(SPELL_SUMMON, CLASS_DIABOLIST, CIRCLE_4);
  spell_assign(SPELL_DISPEL_GOOD, CLASS_DIABOLIST, CIRCLE_4);
  spell_assign(SPELL_REMOVE_CURSE, CLASS_DIABOLIST, CIRCLE_4);
  spell_assign(SPELL_SENSE_LIFE, CLASS_DIABOLIST, CIRCLE_4);
  spell_assign(SPELL_WORD_OF_RECALL, CLASS_DIABOLIST, CIRCLE_4);

  spell_assign(SPELL_SOULSHIELD, CLASS_DIABOLIST, CIRCLE_5);
  spell_assign(SPELL_EARTHQUAKE, CLASS_DIABOLIST, CIRCLE_5);
  spell_assign(SPELL_HEAL, CLASS_DIABOLIST, CIRCLE_5);
  spell_assign(SPELL_GREATER_ENDURANCE, CLASS_DIABOLIST, CIRCLE_5);

  spell_assign(SPELL_SANE_MIND, CLASS_DIABOLIST, CIRCLE_6);
  spell_assign(SPELL_STYGIAN_ERUPTION, CLASS_DIABOLIST, CIRCLE_6);
  spell_assign(SPELL_DARKNESS, CLASS_DIABOLIST, CIRCLE_6);
  spell_assign(SPELL_SILENCE, CLASS_DIABOLIST, CIRCLE_6);

  spell_assign(SPELL_INSANITY, CLASS_DIABOLIST, CIRCLE_7);
  spell_assign(SPELL_DEMONIC_MUTATION, CLASS_DIABOLIST, CIRCLE_7);
  spell_assign(SPELL_WATERWALK, CLASS_DIABOLIST, CIRCLE_7);
  spell_assign(SPELL_FULL_HEAL, CLASS_DIABOLIST, CIRCLE_7);

  spell_assign(SPELL_HELLFIRE_BRIMSTONE, CLASS_DIABOLIST, CIRCLE_8);
  spell_assign(SPELL_SPEAK_IN_TONGUES, CLASS_DIABOLIST, CIRCLE_8);
  spell_assign(SPELL_DISPEL_MAGIC, CLASS_DIABOLIST, CIRCLE_8);
  spell_assign(SPELL_GROUP_HEAL, CLASS_DIABOLIST, CIRCLE_8);

  spell_assign(SPELL_WINGS_OF_HELL, CLASS_DIABOLIST, CIRCLE_9);
  spell_assign(SPELL_BANISH, CLASS_DIABOLIST, CIRCLE_9);
  spell_assign(SPELL_UNHOLY_WORD, CLASS_DIABOLIST, CIRCLE_9);

  spell_assign(SPELL_WORD_OF_COMMAND, CLASS_DIABOLIST, CIRCLE_10);
  spell_assign(SPELL_FULL_HARM, CLASS_DIABOLIST, CIRCLE_10);

  spell_assign(SPELL_RESURRECT, CLASS_DIABOLIST, CIRCLE_11);
  spell_assign(SPELL_HELLS_GATE, CLASS_DIABOLIST, CIRCLE_11);

  /* DRUID */
  skill_assign(SKILL_BLUDGEONING, CLASS_DRUID, 1);
  skill_assign(SKILL_2H_BLUDGEONING, CLASS_DRUID, 1);
  skill_assign(SKILL_SHAPECHANGE, CLASS_DRUID, 1);
  skill_assign(SKILL_TAME, CLASS_DRUID, 1);
  skill_assign(SKILL_DODGE, CLASS_DRUID, 20);

  spell_assign(SPELL_DETECT_MAGIC, CLASS_DRUID, CIRCLE_1);
  spell_assign(SPELL_VIGORIZE_LIGHT, CLASS_DRUID, CIRCLE_1);
  spell_assign(SPELL_BARKSKIN, CLASS_DRUID, CIRCLE_1);
  spell_assign(SPELL_CREATE_FOOD, CLASS_DRUID, CIRCLE_1);
  spell_assign(SPELL_CREATE_WATER, CLASS_DRUID, CIRCLE_1);
  spell_assign(SPELL_LESSER_ENDURANCE, CLASS_DRUID, CIRCLE_1);

  spell_assign(SPELL_VIGORIZE_SERIOUS, CLASS_DRUID, CIRCLE_2);
  spell_assign(SPELL_NIGHT_VISION, CLASS_DRUID, CIRCLE_2);
  spell_assign(SPELL_CURE_LIGHT, CLASS_DRUID, CIRCLE_2);
  spell_assign(SPELL_DETECT_POISON, CLASS_DRUID, CIRCLE_2);
  spell_assign(SPELL_DETECT_ALIGN, CLASS_DRUID, CIRCLE_2);

  spell_assign(SPELL_VIGORIZE_CRITIC, CLASS_DRUID, CIRCLE_3);
  spell_assign(SPELL_CURE_SERIOUS, CLASS_DRUID, CIRCLE_3);
  spell_assign(SPELL_WRITHING_WEEDS, CLASS_DRUID, CIRCLE_3);
  spell_assign(SPELL_POISON, CLASS_DRUID, CIRCLE_3);
  spell_assign(SPELL_REMOVE_POISON, CLASS_DRUID, CIRCLE_3);
  spell_assign(SPELL_ENDURANCE, CLASS_DRUID, CIRCLE_3);
  spell_assign(SPELL_MOONBEAM, CLASS_DRUID, CIRCLE_3);

  spell_assign(SPELL_CURE_CRITIC, CLASS_DRUID, CIRCLE_4);
  spell_assign(SPELL_SUMMON, CLASS_DRUID, CIRCLE_4);
  spell_assign(SPELL_CREATE_SPRING, CLASS_DRUID, CIRCLE_4);
  spell_assign(SPELL_CURE_BLIND, CLASS_DRUID, CIRCLE_4);
  spell_assign(SPELL_EARTHQUAKE, CLASS_DRUID, CIRCLE_4);
  spell_assign(SPELL_WORD_OF_RECALL, CLASS_DRUID, CIRCLE_4);

  spell_assign(SPELL_CONTROL_WEATHER, CLASS_DRUID, CIRCLE_5);
  spell_assign(SPELL_HARM, CLASS_DRUID, CIRCLE_5);
  spell_assign(SPELL_REMOVE_CURSE, CLASS_DRUID, CIRCLE_5);
  spell_assign(SPELL_NOURISHMENT, CLASS_DRUID, CIRCLE_5);

  spell_assign(SPELL_GREATER_ENDURANCE, CLASS_DRUID, CIRCLE_6);
  spell_assign(SPELL_HEAL, CLASS_DRUID, CIRCLE_6);
  spell_assign(SPELL_WATERWALK, CLASS_DRUID, CIRCLE_6);
  spell_assign(SPELL_LIGHTNING_BOLT, CLASS_DRUID, CIRCLE_6);
  spell_assign(SPELL_DARKNESS, CLASS_DRUID, CIRCLE_6);

  spell_assign(SPELL_ILLUMINATION, CLASS_DRUID, CIRCLE_7);
  spell_assign(SPELL_GAIAS_CLOAK, CLASS_DRUID, CIRCLE_7);
  spell_assign(SPELL_CALL_LIGHTNING, CLASS_DRUID, CIRCLE_7);

  spell_assign(SPELL_NATURES_EMBRACE, CLASS_DRUID, CIRCLE_8);
  spell_assign(SPELL_ENTANGLE, CLASS_DRUID, CIRCLE_8);
  spell_assign(SPELL_URBAN_RENEWAL, CLASS_DRUID, CIRCLE_8);
  spell_assign(SPELL_DISPEL_MAGIC, CLASS_DRUID, CIRCLE_8);

  spell_assign(SPELL_SUNRAY, CLASS_DRUID, CIRCLE_9);
  spell_assign(SPELL_ARMOR_OF_GAIA, CLASS_DRUID, CIRCLE_9);
  spell_assign(SPELL_INVIGORATE, CLASS_DRUID, CIRCLE_9);

  spell_assign(SPELL_WANDERING_WOODS, CLASS_DRUID, CIRCLE_10);
  spell_assign(SPELL_MOONWELL, CLASS_DRUID, CIRCLE_10);

  spell_assign(SPELL_CREEPING_DOOM, CLASS_DRUID, CIRCLE_11);

  /* HUNTER */
  skill_assign(SKILL_GUARD, CLASS_HUNTER, 1);
  skill_assign(SKILL_SWITCH, CLASS_HUNTER, 1);
  skill_assign(SKILL_KICK, CLASS_HUNTER, 1);
  skill_assign(SKILL_RESCUE, CLASS_HUNTER, 1);
  skill_assign(SKILL_BASH, CLASS_HUNTER, 1);
  skill_assign(SKILL_DUAL_WIELD, CLASS_HUNTER, 1);
  skill_assign(SKILL_DOUBLE_ATTACK, CLASS_HUNTER, 1);
  skill_assign(SKILL_DODGE, CLASS_HUNTER, 1);
  skill_assign(SKILL_PARRY, CLASS_HUNTER, 1);
  skill_assign(SKILL_RIPOSTE, CLASS_HUNTER, 1);
  skill_assign(SKILL_BLUDGEONING, CLASS_HUNTER, 1);
  skill_assign(SKILL_PIERCING, CLASS_HUNTER, 1);
  skill_assign(SKILL_SLASHING, CLASS_HUNTER, 1);
  skill_assign(SKILL_2H_BLUDGEONING, CLASS_HUNTER, 1);
  skill_assign(SKILL_2H_PIERCING, CLASS_HUNTER, 1);
  skill_assign(SKILL_2H_SLASHING, CLASS_HUNTER, 1);
  skill_assign(SKILL_TAME, CLASS_HUNTER, 7);
  skill_assign(SKILL_TRACK, CLASS_HUNTER, 36);
  skill_assign(SKILL_HUNT, CLASS_HUNTER, 41);

  /* ILLUSIONIST */
  skill_assign(SKILL_CONCEAL, CLASS_ILLUSIONIST, 10);
  skill_assign(SKILL_HIDE, CLASS_ILLUSIONIST, 20);
  skill_assign(SKILL_BACKSTAB, CLASS_ILLUSIONIST, 13);

  spell_assign(SPELL_MAGIC_MISSILE, CLASS_ILLUSIONIST, CIRCLE_1);
  spell_assign(SPELL_DETECT_MAGIC, CLASS_ILLUSIONIST, CIRCLE_1);
  spell_assign(SPELL_VENTRILOQUATE, CLASS_ILLUSIONIST, CIRCLE_1);

  spell_assign(SPELL_CHILL_TOUCH, CLASS_ILLUSIONIST, CIRCLE_2);
  spell_assign(SPELL_LOCATE_OBJECT, CLASS_ILLUSIONIST, CIRCLE_2);
  spell_assign(SPELL_MAGIC_TORCH, CLASS_ILLUSIONIST, CIRCLE_2);
  spell_assign(SPELL_PHANTASM, CLASS_ILLUSIONIST, CIRCLE_2);

  spell_assign(SPELL_DISPEL_MAGIC, CLASS_ILLUSIONIST, CIRCLE_3);
  spell_assign(SPELL_FEAR, CLASS_ILLUSIONIST, CIRCLE_3);
  spell_assign(SPELL_MESMERIZE, CLASS_ILLUSIONIST, CIRCLE_3);
  spell_assign(SPELL_CHARM, CLASS_ILLUSIONIST, CIRCLE_3);

  spell_assign(SPELL_BLINDNESS, CLASS_ILLUSIONIST, CIRCLE_4);
  spell_assign(SPELL_CONFUSION, CLASS_ILLUSIONIST, CIRCLE_4);
  spell_assign(SPELL_MISDIRECTION, CLASS_ILLUSIONIST, CIRCLE_4);
  spell_assign(SPELL_NIGHTMARE, CLASS_ILLUSIONIST, CIRCLE_4);

  spell_assign(SPELL_COLOR_SPRAY, CLASS_ILLUSIONIST, CIRCLE_5);
  spell_assign(SPELL_DISCORPORATE, CLASS_ILLUSIONIST, CIRCLE_5);
  spell_assign(SPELL_INFRAVISION, CLASS_ILLUSIONIST, CIRCLE_5);
  spell_assign(SPELL_SIMULACRUM, CLASS_ILLUSIONIST, CIRCLE_5);
  spell_assign(SPELL_SLEEP, CLASS_ILLUSIONIST, CIRCLE_5);

  spell_assign(SPELL_DETECT_INVIS, CLASS_ILLUSIONIST, CIRCLE_6);
  spell_assign(SPELL_DIMENSION_DOOR, CLASS_ILLUSIONIST, CIRCLE_6);
  spell_assign(SPELL_ILLUMINATION, CLASS_ILLUSIONIST, CIRCLE_6);
  spell_assign(SPELL_ISOLATION, CLASS_ILLUSIONIST, CIRCLE_6);

  spell_assign(SPELL_FARSEE, CLASS_ILLUSIONIST, CIRCLE_7);
  spell_assign(SPELL_INSANITY, CLASS_ILLUSIONIST, CIRCLE_7);
  spell_assign(SPELL_INVISIBLE, CLASS_ILLUSIONIST, CIRCLE_7);
  spell_assign(SPELL_HYSTERIA, CLASS_ILLUSIONIST, CIRCLE_7);

  spell_assign(SPELL_ILLUSORY_WALL, CLASS_ILLUSIONIST, CIRCLE_8);

  spell_assign(SPELL_FAMILIARITY, CLASS_ILLUSIONIST, CIRCLE_9);

  spell_assign(SPELL_SEVERANCE, CLASS_ILLUSIONIST, CIRCLE_10);

  spell_assign(SPELL_GLORY, CLASS_ILLUSIONIST, CIRCLE_11);

  spell_assign(SPELL_SOUL_REAVER, CLASS_ILLUSIONIST, CIRCLE_12);

  /* MERCENARY */
  skill_assign(SKILL_BLUDGEONING, CLASS_MERCENARY, 1);
  skill_assign(SKILL_PIERCING, CLASS_MERCENARY, 1);
  skill_assign(SKILL_SLASHING, CLASS_MERCENARY, 1);
  skill_assign(SKILL_2H_BLUDGEONING, CLASS_MERCENARY, 1);
  skill_assign(SKILL_2H_PIERCING, CLASS_MERCENARY, 1);
  skill_assign(SKILL_2H_SLASHING, CLASS_MERCENARY, 1);
  skill_assign(SKILL_KICK, CLASS_MERCENARY, 1);
  skill_assign(SKILL_BASH, CLASS_MERCENARY, 1);
  skill_assign(SKILL_DODGE, CLASS_MERCENARY, 1);
  skill_assign(SKILL_GUARD, CLASS_MERCENARY, 10);
  skill_assign(SKILL_BACKSTAB, CLASS_MERCENARY, 11);
  skill_assign(SKILL_DUAL_WIELD, CLASS_MERCENARY, 15);
  skill_assign(SKILL_BIND, CLASS_MERCENARY, 16);
  skill_assign(SKILL_HIDE, CLASS_MERCENARY, 20);
  skill_assign(SKILL_DISARM, CLASS_MERCENARY, 20);
  skill_assign(SKILL_TRACK, CLASS_MERCENARY, 30);
  skill_assign(SKILL_SWITCH, CLASS_MERCENARY, 40);
  skill_assign(SKILL_PARRY, CLASS_MERCENARY, 40);
  skill_assign(SKILL_RETREAT, CLASS_MERCENARY, 40);
  skill_assign(SKILL_RIPOSTE, CLASS_MERCENARY, 60);
  skill_assign(SKILL_DOUBLE_ATTACK, CLASS_MERCENARY, 70);
  skill_assign(SKILL_GROUP_RETREAT, CLASS_MERCENARY, 80);

  /* MONKS */
  skill_assign(SKILL_CHANT, CLASS_MONK, 15);
  skill_assign(SKILL_SAFEFALL, CLASS_MONK, 1);
  skill_assign(SKILL_BAREHAND, CLASS_MONK, 1);
  skill_assign(SKILL_KICK, CLASS_MONK, 1);
  skill_assign(SKILL_DUAL_WIELD, CLASS_MONK, 1);
  skill_assign(SKILL_DODGE, CLASS_MONK, 1);
  skill_assign(SKILL_BLUDGEONING, CLASS_MONK, 1);
  skill_assign(SKILL_PARRY, CLASS_MONK, 10);
  skill_assign(SKILL_RIPOSTE, CLASS_MONK, 20);
  skill_assign(SKILL_DOUBLE_ATTACK, CLASS_MONK, 30);
  skill_assign(SKILL_SWITCH, CLASS_MONK, 40);
  skill_assign(SKILL_SPRINGLEAP, CLASS_MONK, 50);
  skill_assign(SKILL_CORNER, CLASS_MONK, 80);

  chant_assign(CHANT_REGENERATION, CLASS_MONK, 15);
  chant_assign(CHANT_BATTLE_HYMN, CLASS_MONK, 30);
  chant_assign(CHANT_WAR_CRY, CLASS_MONK, 90);
  chant_assign(CHANT_PEACE, CLASS_MONK, 70);
  chant_assign(CHANT_SHADOWS_SORROW_SONG, CLASS_MONK, 30);
  chant_assign(CHANT_IVORY_SYMPHONY, CLASS_MONK, 45);
  chant_assign(CHANT_ARIA_OF_DISSONANCE, CLASS_MONK, 60);
  chant_assign(CHANT_SONATA_OF_MALAISE, CLASS_MONK, 60);
  chant_assign(CHANT_APOCALYPTIC_ANTHEM, CLASS_MONK, 75);
  chant_assign(CHANT_SEED_OF_DESTRUCTION, CLASS_MONK, 99);

  /* MYSTIC */
  skill_assign(SKILL_BLUDGEONING, CLASS_MYSTIC, 1);
  skill_assign(SKILL_SLASHING, CLASS_MYSTIC, 1);
  skill_assign(SKILL_2H_BLUDGEONING, CLASS_MYSTIC, 1);
  skill_assign(SKILL_DODGE, CLASS_MYSTIC, 1);

  spell_assign(SPELL_CURE_LIGHT, CLASS_MYSTIC, CIRCLE_1);
  spell_assign(SPELL_ARMOR, CLASS_MYSTIC, CIRCLE_1);
  spell_assign(SPELL_CREATE_FOOD, CLASS_MYSTIC, CIRCLE_1);
  spell_assign(SPELL_CREATE_WATER, CLASS_MYSTIC, CIRCLE_1);
  spell_assign(SPELL_BLESS, CLASS_MYSTIC, CIRCLE_1);
  spell_assign(SPELL_DETECT_POISON, CLASS_MYSTIC, CIRCLE_2);
  spell_assign(SPELL_DETECT_ALIGN, CLASS_MYSTIC, CIRCLE_2);
  spell_assign(SPELL_CURE_BLIND, CLASS_MYSTIC, CIRCLE_2);
  spell_assign(SPELL_BLINDNESS, CLASS_MYSTIC, CIRCLE_4);
  spell_assign(SPELL_INFRAVISION, CLASS_MYSTIC, CIRCLE_9);
  spell_assign(SPELL_PROT_FROM_EVIL, CLASS_MYSTIC, CIRCLE_3);
  spell_assign(SPELL_GROUP_ARMOR, CLASS_MYSTIC, CIRCLE_10);
  spell_assign(SPELL_CURE_CRITIC, CLASS_MYSTIC, CIRCLE_2);
  spell_assign(SPELL_SUMMON, CLASS_MYSTIC, CIRCLE_3);
  spell_assign(SPELL_REMOVE_POISON, CLASS_MYSTIC, CIRCLE_3);
  spell_assign(SPELL_WORD_OF_RECALL, CLASS_MYSTIC, CIRCLE_6);
  spell_assign(SPELL_EARTHQUAKE, CLASS_MYSTIC, CIRCLE_5);
  spell_assign(SPELL_DISPEL_EVIL, CLASS_MYSTIC, CIRCLE_4);
  spell_assign(SPELL_DISPEL_GOOD, CLASS_MYSTIC, CIRCLE_4);
  spell_assign(SPELL_HEAL, CLASS_MYSTIC, CIRCLE_5);
  spell_assign(SPELL_HARM, CLASS_MYSTIC, CIRCLE_5);
  spell_assign(SPELL_GROUP_HEAL, CLASS_MYSTIC, CIRCLE_8);
  spell_assign(SPELL_REMOVE_CURSE, CLASS_MYSTIC, CIRCLE_5);
  spell_assign(SPELL_SENSE_LIFE, CLASS_MYSTIC, CIRCLE_4);
  spell_assign(SPELL_FULL_HEAL, CLASS_MYSTIC, CIRCLE_7);
  spell_assign(SPELL_FULL_HARM, CLASS_MYSTIC, CIRCLE_9);
  spell_assign(SPELL_VITALITY, CLASS_MYSTIC, CIRCLE_5);
  spell_assign(SPELL_DARKNESS, CLASS_MYSTIC, CIRCLE_6);

  /* NECRO */
  spell_assign(SPELL_MAGIC_MISSILE, CLASS_NECROMANCER, CIRCLE_1);
  spell_assign(SPELL_MINOR_CREATION, CLASS_NECROMANCER, CIRCLE_1);
  spell_assign(SPELL_DETECT_MAGIC, CLASS_NECROMANCER, CIRCLE_1);
  spell_assign(SPELL_DECAY, CLASS_NECROMANCER, CIRCLE_1);
  spell_assign(SPELL_BURNING_HANDS, CLASS_NECROMANCER, CIRCLE_2);
  spell_assign(SPELL_DETECT_INVIS, CLASS_NECROMANCER, CIRCLE_2);
  spell_assign(SPELL_CONCEALMENT, CLASS_NECROMANCER, CIRCLE_2);
  spell_assign(SPELL_PRESERVE, CLASS_NECROMANCER, CIRCLE_2);
  spell_assign(SPELL_CHILL_TOUCH, CLASS_NECROMANCER, CIRCLE_3);
  spell_assign(SPELL_POISON, CLASS_NECROMANCER, CIRCLE_3);
  spell_assign(SPELL_STRENGTH, CLASS_NECROMANCER, CIRCLE_3);
  spell_assign(SPELL_ANIMATE_DEAD, CLASS_NECROMANCER, CIRCLE_3);
  spell_assign(SPELL_COLDSHIELD, CLASS_NECROMANCER, CIRCLE_4);
  spell_assign(SPELL_BONE_ARMOR, CLASS_NECROMANCER, CIRCLE_4);
  spell_assign(SPELL_SPINECHILLER, CLASS_NECROMANCER, CIRCLE_4);
  spell_assign(SPELL_INFRAVISION, CLASS_NECROMANCER, CIRCLE_5);
  spell_assign(SPELL_IDENTIFY, CLASS_NECROMANCER, CIRCLE_5);
  spell_assign(SPELL_LOCATE_OBJECT, CLASS_NECROMANCER, CIRCLE_5);
  spell_assign(SPELL_SLEEP, CLASS_NECROMANCER, CIRCLE_5);
  spell_assign(SPELL_ENERGY_DRAIN, CLASS_NECROMANCER, CIRCLE_5);
  spell_assign(SPELL_CONE_OF_COLD, CLASS_NECROMANCER, CIRCLE_5);
  spell_assign(SPELL_SUMMON_CORPSE, CLASS_NECROMANCER, CIRCLE_6);
  spell_assign(SPELL_DETECT_POISON, CLASS_NECROMANCER, CIRCLE_6);
  spell_assign(SPELL_INVISIBLE, CLASS_NECROMANCER, CIRCLE_6);
  spell_assign(SPELL_PYRE, CLASS_NECROMANCER, CIRCLE_6);
  spell_assign(SPELL_HASTE, CLASS_NECROMANCER, CIRCLE_7);
  spell_assign(SPELL_FARSEE, CLASS_NECROMANCER, CIRCLE_7);
  spell_assign(SPELL_IRON_MAIDEN, CLASS_NECROMANCER, CIRCLE_7);
  spell_assign(SPELL_DIMENSION_DOOR, CLASS_NECROMANCER, CIRCLE_8);
  spell_assign(SPELL_FRACTURE, CLASS_NECROMANCER, CIRCLE_8);
  spell_assign(SPELL_SOUL_TAP, CLASS_NECROMANCER, CIRCLE_9);
  spell_assign(SPELL_STONE_SKIN, CLASS_NECROMANCER, CIRCLE_9);
  spell_assign(SPELL_REBUKE_UNDEAD, CLASS_NECROMANCER, CIRCLE_10);
  spell_assign(SPELL_BONE_DRAW, CLASS_NECROMANCER, CIRCLE_10);
  spell_assign(SPELL_DEGENERATION, CLASS_NECROMANCER, CIRCLE_11);
  spell_assign(SPELL_STONE_SKIN, CLASS_NECROMANCER, CIRCLE_12);
  spell_assign(SPELL_SHIFT_CORPSE, CLASS_NECROMANCER, CIRCLE_13);

  /* PALADIN */
  skill_assign(SKILL_BLUDGEONING, CLASS_PALADIN, 1);
  skill_assign(SKILL_PIERCING, CLASS_PALADIN, 1);
  skill_assign(SKILL_SLASHING, CLASS_PALADIN, 1);
  skill_assign(SKILL_2H_BLUDGEONING, CLASS_PALADIN, 1);
  skill_assign(SKILL_2H_SLASHING, CLASS_PALADIN, 1);
  skill_assign(SKILL_KICK, CLASS_PALADIN, 1);
  skill_assign(SKILL_BASH, CLASS_PALADIN, 1);
  skill_assign(SKILL_TAME, CLASS_PALADIN, 1);
  skill_assign(SKILL_DODGE, CLASS_PALADIN, 1);
  skill_assign(SKILL_GUARD, CLASS_PALADIN, 10);
  skill_assign(SKILL_SWITCH, CLASS_PALADIN, 10);
  skill_assign(SKILL_RESCUE, CLASS_PALADIN, 10);
  skill_assign(SKILL_SUMMON_MOUNT, CLASS_PALADIN, 15);
  skill_assign(SKILL_DUAL_WIELD, CLASS_PALADIN, 20);
  skill_assign(SKILL_PARRY, CLASS_PALADIN, 20);
  skill_assign(SKILL_RIPOSTE, CLASS_PALADIN, 40);
  skill_assign(SKILL_HITALL, CLASS_PALADIN, 80);
  skill_assign(SKILL_DISARM, CLASS_PALADIN, 50);
  skill_assign(SKILL_RETREAT, CLASS_PALADIN, 60);
  skill_assign(SKILL_DOUBLE_ATTACK, CLASS_PALADIN, 70);

  spell_assign(SPELL_CURE_LIGHT, CLASS_PALADIN, CIRCLE_1);
  spell_assign(SPELL_BLESS, CLASS_PALADIN, CIRCLE_1);
  spell_assign(SPELL_ARMOR, CLASS_PALADIN, CIRCLE_2);
  spell_assign(SPELL_CREATE_FOOD, CLASS_PALADIN, CIRCLE_3);
  spell_assign(SPELL_CREATE_WATER, CLASS_PALADIN, CIRCLE_3);
  spell_assign(SPELL_PROT_FROM_EVIL, CLASS_PALADIN, CIRCLE_4);
  spell_assign(SPELL_CURE_SERIOUS, CLASS_PALADIN, CIRCLE_4);
  spell_assign(SPELL_DETECT_POISON, CLASS_PALADIN, CIRCLE_5);
  spell_assign(SPELL_DISPEL_EVIL, CLASS_PALADIN, CIRCLE_5);
  spell_assign(SPELL_CURE_BLIND, CLASS_PALADIN, CIRCLE_6);
  spell_assign(SPELL_CURE_CRITIC, CLASS_PALADIN, CIRCLE_6);
  spell_assign(SPELL_REMOVE_POISON, CLASS_PALADIN, CIRCLE_7);
  spell_assign(SPELL_DISPEL_MAGIC, CLASS_PALADIN, CIRCLE_7);
  spell_assign(SPELL_SOULSHIELD, CLASS_PALADIN, CIRCLE_8);
  spell_assign(SPELL_HEAL, CLASS_PALADIN, CIRCLE_9);
  spell_assign(SPELL_HOLY_WORD, CLASS_PALADIN, CIRCLE_10);

  /* PRIEST */
  skill_assign(SKILL_BLUDGEONING, CLASS_PRIEST, 1);
  skill_assign(SKILL_2H_BLUDGEONING, CLASS_PRIEST, 1);
  skill_assign(SKILL_DODGE, CLASS_PRIEST, 20);

  spell_assign(SPELL_DETECT_MAGIC, CLASS_PRIEST, CIRCLE_1);
  spell_assign(SPELL_CURE_LIGHT, CLASS_PRIEST, CIRCLE_1);
  spell_assign(SPELL_ARMOR, CLASS_PRIEST, CIRCLE_1);
  spell_assign(SPELL_CREATE_FOOD, CLASS_PRIEST, CIRCLE_1);
  spell_assign(SPELL_CAUSE_LIGHT, CLASS_PRIEST, CIRCLE_1);
  spell_assign(SPELL_CREATE_WATER, CLASS_PRIEST, CIRCLE_1);
  spell_assign(SPELL_LESSER_ENDURANCE, CLASS_PRIEST, CIRCLE_1);

  spell_assign(SPELL_DETECT_POISON, CLASS_PRIEST, CIRCLE_2);
  spell_assign(SPELL_DETECT_ALIGN, CLASS_PRIEST, CIRCLE_2);
  spell_assign(SPELL_CURE_SERIOUS, CLASS_PRIEST, CIRCLE_2);
  spell_assign(SPELL_VIGORIZE_LIGHT, CLASS_PRIEST, CIRCLE_2);
  spell_assign(SPELL_CIRCLE_OF_LIGHT, CLASS_PRIEST, CIRCLE_2);
  spell_assign(SPELL_PRESERVE, CLASS_PRIEST, CIRCLE_2);
  spell_assign(SPELL_CAUSE_SERIOUS, CLASS_PRIEST, CIRCLE_2);
  spell_assign(SPELL_BLESS, CLASS_PRIEST, CIRCLE_2);

  spell_assign(SPELL_DIVINE_BOLT, CLASS_PRIEST, CIRCLE_3);
  spell_assign(SPELL_VIGORIZE_SERIOUS, CLASS_PRIEST, CIRCLE_3);
  spell_assign(SPELL_CAUSE_CRITIC, CLASS_PRIEST, CIRCLE_3);
  spell_assign(SPELL_CURE_BLIND, CLASS_PRIEST, CIRCLE_3);
  spell_assign(SPELL_PROT_FROM_EVIL, CLASS_PRIEST, CIRCLE_3);
  spell_assign(SPELL_CURE_CRITIC, CLASS_PRIEST, CIRCLE_3);
  spell_assign(SPELL_REMOVE_POISON, CLASS_PRIEST, CIRCLE_3);
  spell_assign(SPELL_ENDURANCE, CLASS_PRIEST, CIRCLE_3);

  spell_assign(SPELL_VIGORIZE_CRITIC, CLASS_PRIEST, CIRCLE_4);
  spell_assign(SPELL_ELEMENTAL_WARDING, CLASS_PRIEST, CIRCLE_4);
  spell_assign(SPELL_BLINDNESS, CLASS_PRIEST, CIRCLE_4);
  spell_assign(SPELL_SUMMON, CLASS_PRIEST, CIRCLE_4);
  spell_assign(SPELL_DISPEL_EVIL, CLASS_PRIEST, CIRCLE_4);
  spell_assign(SPELL_REMOVE_CURSE, CLASS_PRIEST, CIRCLE_4);
  spell_assign(SPELL_SENSE_LIFE, CLASS_PRIEST, CIRCLE_4);
  spell_assign(SPELL_WORD_OF_RECALL, CLASS_PRIEST, CIRCLE_4);

  spell_assign(SPELL_PRAYER, CLASS_PRIEST, CIRCLE_5);
  spell_assign(SPELL_SOULSHIELD, CLASS_PRIEST, CIRCLE_5);
  spell_assign(SPELL_DESTROY_UNDEAD, CLASS_PRIEST, CIRCLE_5);
  spell_assign(SPELL_EARTHQUAKE, CLASS_PRIEST, CIRCLE_5);
  spell_assign(SPELL_HEAL, CLASS_PRIEST, CIRCLE_5);
  spell_assign(SPELL_SANE_MIND, CLASS_PRIEST, CIRCLE_5);
  spell_assign(SPELL_GREATER_ENDURANCE, CLASS_PRIEST, CIRCLE_5);

  spell_assign(SPELL_LESSER_EXORCISM, CLASS_PRIEST, CIRCLE_6);
  spell_assign(SPELL_DIVINE_RAY, CLASS_PRIEST, CIRCLE_6);
  spell_assign(SPELL_ILLUMINATION, CLASS_PRIEST, CIRCLE_6);
  spell_assign(SPELL_SILENCE, CLASS_PRIEST, CIRCLE_6);

  spell_assign(SPELL_VITALITY, CLASS_PRIEST, CIRCLE_7);
  spell_assign(SPELL_WATERWALK, CLASS_PRIEST, CIRCLE_7);
  spell_assign(SPELL_FULL_HEAL, CLASS_PRIEST, CIRCLE_7);

  spell_assign(SPELL_SPEAK_IN_TONGUES, CLASS_PRIEST, CIRCLE_8);
  spell_assign(SPELL_ENLIGHTENMENT, CLASS_PRIEST, CIRCLE_8);
  spell_assign(SPELL_DISPEL_MAGIC, CLASS_PRIEST, CIRCLE_8);
  spell_assign(SPELL_GROUP_ARMOR, CLASS_PRIEST, CIRCLE_8);
  spell_assign(SPELL_GROUP_HEAL, CLASS_PRIEST, CIRCLE_8);

  spell_assign(SPELL_GREATER_VITALITY, CLASS_PRIEST, CIRCLE_9);
  spell_assign(SPELL_EXORCISM, CLASS_PRIEST, CIRCLE_9);
  spell_assign(SPELL_WINGS_OF_HEAVEN, CLASS_PRIEST, CIRCLE_9);
  spell_assign(SPELL_BANISH, CLASS_PRIEST, CIRCLE_9);
  spell_assign(SPELL_HOLY_WORD, CLASS_PRIEST, CIRCLE_9);

  spell_assign(SPELL_WORD_OF_COMMAND, CLASS_PRIEST, CIRCLE_10);
  spell_assign(SPELL_FULL_HARM, CLASS_PRIEST, CIRCLE_10);
  spell_assign(SPELL_DIVINE_ESSENCE, CLASS_PRIEST, CIRCLE_10);

  spell_assign(SPELL_HEAVENS_GATE, CLASS_PRIEST, CIRCLE_11);
  spell_assign(SPELL_RESURRECT, CLASS_PRIEST, CIRCLE_11);

  spell_assign(SPELL_DRAGONS_HEALTH, CLASS_PRIEST, CIRCLE_12);

  /* PYROMANCER */
  spell_assign(SPELL_BURNING_HANDS, CLASS_PYROMANCER, CIRCLE_1);
  spell_assign(SPELL_DETECT_MAGIC, CLASS_PYROMANCER, CIRCLE_1);
  spell_assign(SPELL_MINOR_CREATION, CLASS_PYROMANCER, CIRCLE_1);

  spell_assign(SPELL_CONCEALMENT, CLASS_PYROMANCER, CIRCLE_2);
  spell_assign(SPELL_DETECT_INVIS, CLASS_PYROMANCER, CIRCLE_2);
  spell_assign(SPELL_DETONATION, CLASS_PYROMANCER, CIRCLE_2);
  spell_assign(SPELL_FIRE_DARTS, CLASS_PYROMANCER, CIRCLE_2);
  spell_assign(SPELL_MAGIC_TORCH, CLASS_PYROMANCER, CIRCLE_2);
  spell_assign(SPELL_STRENGTH, CLASS_PYROMANCER, CIRCLE_2);

  spell_assign(SPELL_DISPEL_MAGIC, CLASS_PYROMANCER, CIRCLE_3);
  spell_assign(SPELL_LOCATE_OBJECT, CLASS_PYROMANCER, CIRCLE_3);
  spell_assign(SPELL_PHOSPHORIC_EMBERS, CLASS_PYROMANCER, CIRCLE_3);
  spell_assign(SPELL_SMOKE, CLASS_PYROMANCER, CIRCLE_3);

  spell_assign(SPELL_FIREBALL, CLASS_PYROMANCER, CIRCLE_4);
  spell_assign(SPELL_FIRESHIELD, CLASS_PYROMANCER, CIRCLE_4);
  spell_assign(SPELL_FLAME_BLADE, CLASS_PYROMANCER, CIRCLE_4);
  spell_assign(SPELL_INFRAVISION, CLASS_PYROMANCER, CIRCLE_4);
  spell_assign(SPELL_LEVITATE, CLASS_PYROMANCER, CIRCLE_4);
  spell_assign(SPELL_MIRAGE, CLASS_PYROMANCER, CIRCLE_4);
  spell_assign(SPELL_RAY_OF_ENFEEB, CLASS_PYROMANCER, CIRCLE_4);
  spell_assign(SPELL_TELEPORT, CLASS_PYROMANCER, CIRCLE_4);

  spell_assign(SPELL_DIMENSION_DOOR, CLASS_PYROMANCER, CIRCLE_5);
  spell_assign(SPELL_FARSEE, CLASS_PYROMANCER, CIRCLE_5);
  spell_assign(SPELL_INVISIBLE, CLASS_PYROMANCER, CIRCLE_5);
  spell_assign(SPELL_MINOR_PARALYSIS, CLASS_PYROMANCER, CIRCLE_5);
  spell_assign(SPELL_POSITIVE_FIELD, CLASS_PYROMANCER, CIRCLE_5);
  spell_assign(SPELL_SLEEP, CLASS_PYROMANCER, CIRCLE_5);

  spell_assign(SPELL_FIRESTORM, CLASS_PYROMANCER, CIRCLE_6);
  spell_assign(SPELL_HASTE, CLASS_PYROMANCER, CIRCLE_6);
  spell_assign(SPELL_MINOR_GLOBE, CLASS_PYROMANCER, CIRCLE_6);
  spell_assign(SPELL_STONE_SKIN, CLASS_PYROMANCER, CIRCLE_6);

  spell_assign(SPELL_ACID_BURST, CLASS_PYROMANCER, CIRCLE_7);

  spell_assign(SPELL_FLY, CLASS_PYROMANCER, CIRCLE_8);
  spell_assign(SPELL_MAJOR_GLOBE, CLASS_PYROMANCER, CIRCLE_8);
  spell_assign(SPELL_MELT, CLASS_PYROMANCER, CIRCLE_8);

  spell_assign(SPELL_CIRCLE_OF_FIRE, CLASS_PYROMANCER, CIRCLE_9);
  spell_assign(SPELL_IMMOLATE, CLASS_PYROMANCER, CIRCLE_9);
  spell_assign(SPELL_MASS_INVIS, CLASS_PYROMANCER, CIRCLE_9);
  spell_assign(SPELL_RELOCATE, CLASS_PYROMANCER, CIRCLE_9);

  spell_assign(SPELL_CREMATE, CLASS_PYROMANCER, CIRCLE_10);
  spell_assign(SPELL_NEGATE_HEAT, CLASS_PYROMANCER, CIRCLE_10);

  spell_assign(SPELL_METEORSWARM, CLASS_PYROMANCER, CIRCLE_11);

  spell_assign(SPELL_SUPERNOVA, CLASS_PYROMANCER, CIRCLE_12);


  /* RANGER */
  skill_assign(SKILL_BLUDGEONING, CLASS_RANGER, 1);
  skill_assign(SKILL_PIERCING, CLASS_RANGER, 1);
  skill_assign(SKILL_SLASHING, CLASS_RANGER, 1);
  skill_assign(SKILL_2H_BLUDGEONING, CLASS_RANGER, 1);
  skill_assign(SKILL_2H_PIERCING, CLASS_RANGER, 1);
  skill_assign(SKILL_2H_SLASHING, CLASS_RANGER, 1);
  skill_assign(SKILL_KICK, CLASS_RANGER, 1);
  skill_assign(SKILL_TRACK, CLASS_RANGER, 1);
  skill_assign(SKILL_BASH, CLASS_RANGER, 1);
  skill_assign(SKILL_TAME, CLASS_RANGER, 1);
  skill_assign(SKILL_DUAL_WIELD, CLASS_RANGER, 1);
  skill_assign(SKILL_DODGE, CLASS_RANGER, 10);
  skill_assign(SKILL_SWITCH, CLASS_RANGER, 10);
  skill_assign(SKILL_RESCUE, CLASS_RANGER, 35);
  skill_assign(SKILL_PARRY, CLASS_RANGER, 30);
  skill_assign(SKILL_RIPOSTE, CLASS_RANGER, 40);
  skill_assign(SKILL_DOUBLE_ATTACK, CLASS_RANGER, 60);

  spell_assign(SPELL_DETECT_ALIGN, CLASS_RANGER, CIRCLE_1);
  spell_assign(SPELL_MAGIC_MISSILE, CLASS_RANGER, CIRCLE_1);
  spell_assign(SPELL_CURE_LIGHT, CLASS_RANGER, CIRCLE_2);
  spell_assign(SPELL_CHILL_TOUCH, CLASS_RANGER, CIRCLE_3);
  spell_assign(SPELL_BARKSKIN, CLASS_RANGER, CIRCLE_3);
  spell_assign(SPELL_CURE_SERIOUS, CLASS_RANGER, CIRCLE_4);
  spell_assign(SPELL_SHOCKING_GRASP, CLASS_RANGER, CIRCLE_5);
  spell_assign(SPELL_CURE_CRITIC, CLASS_RANGER, CIRCLE_6);
  spell_assign(SPELL_SENSE_LIFE, CLASS_RANGER, CIRCLE_7);
  spell_assign(SPELL_LIGHTNING_BOLT, CLASS_RANGER, CIRCLE_8);
  spell_assign(SPELL_NATURES_GUIDANCE, CLASS_RANGER, CIRCLE_9);
  spell_assign(SPELL_BLUR, CLASS_RANGER, CIRCLE_11);

  /* ROGUE */
  skill_assign(SKILL_PIERCING, CLASS_ROGUE, 1);
  skill_assign(SKILL_SLASHING, CLASS_ROGUE, 1);
  skill_assign(SKILL_2H_PIERCING, CLASS_ROGUE, 1);
  skill_assign(SKILL_HIDE, CLASS_ROGUE, 1);
  skill_assign(SKILL_DODGE, CLASS_ROGUE, 1);
  skill_assign(SKILL_PICK_LOCK, CLASS_ROGUE, 6);
  skill_assign(SKILL_SNEAK, CLASS_ROGUE, 10);
  skill_assign(SKILL_BACKSTAB, CLASS_ROGUE, 10);
  skill_assign(SKILL_DUAL_WIELD, CLASS_ROGUE, 15);
  skill_assign(SKILL_EYE_GOUGE, CLASS_ROGUE, 15);
  skill_assign(SKILL_CONCEAL, CLASS_ROGUE, 25);
  skill_assign(SKILL_TRACK, CLASS_ROGUE, 30);
  skill_assign(SKILL_PARRY, CLASS_ROGUE, 40);
  skill_assign(SKILL_STEALTH, CLASS_ROGUE, 50);
  skill_assign(SKILL_CORNER, CLASS_ROGUE, 60);
  skill_assign(SKILL_SHADOW, CLASS_ROGUE, 60);
  skill_assign(SKILL_DOUBLE_ATTACK, CLASS_ROGUE, 70);

  /* SHAMAN */
  skill_assign(SKILL_DODGE, CLASS_SHAMAN, 1);
  skill_assign(SKILL_BLUDGEONING, CLASS_SHAMAN, 1);
  skill_assign(SKILL_PIERCING, CLASS_SHAMAN, 1);
  skill_assign(SKILL_SLASHING, CLASS_SHAMAN, 1);
  skill_assign(SKILL_2H_BLUDGEONING, CLASS_SHAMAN, 1);
  skill_assign(SKILL_TAME, CLASS_SHAMAN, 7);

  spell_assign(SPELL_CURE_LIGHT, CLASS_SHAMAN, CIRCLE_1);
  spell_assign(SPELL_ARMOR, CLASS_SHAMAN, CIRCLE_2);
  spell_assign(SPELL_CREATE_FOOD, CLASS_SHAMAN, CIRCLE_1);
  spell_assign(SPELL_CREATE_WATER, CLASS_SHAMAN, CIRCLE_1);
  spell_assign(SPELL_DETECT_POISON, CLASS_SHAMAN, CIRCLE_1);
  spell_assign(SPELL_DETECT_ALIGN, CLASS_SHAMAN, CIRCLE_2);
  spell_assign(SPELL_CURE_BLIND, CLASS_SHAMAN, CIRCLE_4);
  spell_assign(SPELL_BLESS, CLASS_SHAMAN, CIRCLE_2);
  spell_assign(SPELL_BLINDNESS, CLASS_SHAMAN, CIRCLE_6);
  spell_assign(SPELL_PROT_FROM_EVIL, CLASS_SHAMAN, CIRCLE_3);
  spell_assign(SPELL_CURE_CRITIC, CLASS_SHAMAN, CIRCLE_3);
  spell_assign(SPELL_SUMMON, CLASS_SHAMAN, CIRCLE_5);
  spell_assign(SPELL_REMOVE_POISON, CLASS_SHAMAN, CIRCLE_3);
  spell_assign(SPELL_WORD_OF_RECALL, CLASS_SHAMAN, CIRCLE_6);
  spell_assign(SPELL_EARTHQUAKE, CLASS_SHAMAN, CIRCLE_6);
  spell_assign(SPELL_DISPEL_EVIL, CLASS_SHAMAN, CIRCLE_4);
  spell_assign(SPELL_DISPEL_GOOD, CLASS_SHAMAN, CIRCLE_4);
  spell_assign(SPELL_HEAL, CLASS_SHAMAN, CIRCLE_6);
  spell_assign(SPELL_HARM, CLASS_SHAMAN, CIRCLE_5);
  spell_assign(SPELL_GROUP_HEAL, CLASS_SHAMAN, CIRCLE_10);
  spell_assign(SPELL_REMOVE_CURSE, CLASS_SHAMAN, CIRCLE_5);
  spell_assign(SPELL_LIGHTNING_BOLT, CLASS_SHAMAN, CIRCLE_7);
  spell_assign(SPELL_FIREBALL, CLASS_SHAMAN, CIRCLE_8);
  spell_assign(SPELL_DETECT_INVIS, CLASS_SHAMAN, CIRCLE_7);
  spell_assign(SPELL_HASTE, CLASS_SHAMAN, CIRCLE_7);
  spell_assign(SPELL_VITALITY, CLASS_SHAMAN, CIRCLE_6);
  spell_assign(SPELL_DARKNESS, CLASS_SHAMAN, CIRCLE_6);

  /* SORCERER */
  spell_assign(SPELL_BURNING_HANDS, CLASS_SORCERER, CIRCLE_1);
  spell_assign(SPELL_MINOR_CREATION, CLASS_SORCERER, CIRCLE_1);
  spell_assign(SPELL_MAGIC_MISSILE, CLASS_SORCERER, CIRCLE_1);
  spell_assign(SPELL_DETECT_MAGIC, CLASS_SORCERER, CIRCLE_1);
  spell_assign(SPELL_CONCEALMENT, CLASS_SORCERER, CIRCLE_1);

  spell_assign(SPELL_CHILL_TOUCH, CLASS_SORCERER, CIRCLE_2);
  spell_assign(SPELL_STRENGTH, CLASS_SORCERER, CIRCLE_2);
  spell_assign(SPELL_DETECT_INVIS, CLASS_SORCERER, CIRCLE_2);

  spell_assign(SPELL_IDENTIFY, CLASS_SORCERER, CIRCLE_3);
  spell_assign(SPELL_DISPEL_MAGIC, CLASS_SORCERER, CIRCLE_3);
  spell_assign(SPELL_LOCATE_OBJECT, CLASS_SORCERER, CIRCLE_3);
  spell_assign(SPELL_SHOCKING_GRASP, CLASS_SORCERER, CIRCLE_3);

  spell_assign(SPELL_TELEPORT, CLASS_SORCERER, CIRCLE_4);
  spell_assign(SPELL_MINOR_PARALYSIS, CLASS_SORCERER, CIRCLE_4);
  spell_assign(SPELL_RAY_OF_ENFEEB, CLASS_SORCERER, CIRCLE_4);
  spell_assign(SPELL_LEVITATE, CLASS_SORCERER, CIRCLE_4);
  spell_assign(SPELL_INFRAVISION, CLASS_SORCERER, CIRCLE_4);
  spell_assign(SPELL_LIGHTNING_BOLT, CLASS_SORCERER, CIRCLE_4);
  spell_assign(SPELL_MINOR_GLOBE, CLASS_SORCERER, CIRCLE_4);
  spell_assign(SPELL_COLDSHIELD, CLASS_SORCERER, CIRCLE_4);
  spell_assign(SPELL_FIRESHIELD, CLASS_SORCERER, CIRCLE_4);

  spell_assign(SPELL_FARSEE, CLASS_SORCERER, CIRCLE_5);
  spell_assign(SPELL_COLOR_SPRAY, CLASS_SORCERER, CIRCLE_5);
  spell_assign(SPELL_DIMENSION_DOOR, CLASS_SORCERER, CIRCLE_5);
  spell_assign(SPELL_CONE_OF_COLD, CLASS_SORCERER, CIRCLE_5);
  spell_assign(SPELL_SLEEP, CLASS_SORCERER, CIRCLE_5);
  spell_assign(SPELL_INVISIBLE, CLASS_SORCERER, CIRCLE_5);

  spell_assign(SPELL_FIREBALL, CLASS_SORCERER, CIRCLE_6);
  spell_assign(SPELL_HASTE, CLASS_SORCERER, CIRCLE_6);
  spell_assign(SPELL_ICE_STORM, CLASS_SORCERER, CIRCLE_6);
  spell_assign(SPELL_FLY, CLASS_SORCERER, CIRCLE_6);
  spell_assign(SPELL_STONE_SKIN, CLASS_SORCERER, CIRCLE_6);

  spell_assign(SPELL_BIGBYS_CLENCHED_FIST, CLASS_SORCERER, CIRCLE_7);

  spell_assign(SPELL_CHAIN_LIGHTNING, CLASS_SORCERER, CIRCLE_8);
  spell_assign(SPELL_HARNESS, CLASS_SORCERER, CIRCLE_8);
  spell_assign(SPELL_MAJOR_GLOBE, CLASS_SORCERER, CIRCLE_8);

  spell_assign(SPELL_RELOCATE, CLASS_SORCERER, CIRCLE_9);
  spell_assign(SPELL_MASS_INVIS, CLASS_SORCERER, CIRCLE_9);
  spell_assign(SPELL_DISINTEGRATE, CLASS_SORCERER, CIRCLE_9);

  spell_assign(SPELL_METEORSWARM, CLASS_SORCERER, CIRCLE_10);

  spell_assign(SPELL_REDUCE, CLASS_SORCERER, CIRCLE_11);
  spell_assign(SPELL_ENLARGE, CLASS_SORCERER, CIRCLE_11);
  spell_assign(SPELL_WIZARD_EYE, CLASS_SORCERER, CIRCLE_11);

  spell_assign(SPELL_CHARM, CLASS_SORCERER, CIRCLE_12);

  /* THIEF */
  skill_assign(SKILL_PIERCING, CLASS_THIEF, 1);
  skill_assign(SKILL_SLASHING, CLASS_THIEF, 1);
  skill_assign(SKILL_2H_PIERCING, CLASS_THIEF, 1);
  skill_assign(SKILL_SNEAK, CLASS_THIEF, 1);
  skill_assign(SKILL_BACKSTAB, CLASS_THIEF, 1);
  skill_assign(SKILL_HIDE, CLASS_THIEF, 1);
  skill_assign(SKILL_DODGE, CLASS_THIEF, 1);
  skill_assign(SKILL_PICK_LOCK, CLASS_THIEF, 6);
  skill_assign(SKILL_STEAL, CLASS_THIEF, 6);
  skill_assign(SKILL_CONCEAL, CLASS_THIEF, 10);
  skill_assign(SKILL_DUAL_WIELD, CLASS_THIEF, 15);
  skill_assign(SKILL_PARRY, CLASS_THIEF, 30);
  skill_assign(SKILL_TRACK, CLASS_THIEF, 40);
  skill_assign(SKILL_STEALTH, CLASS_THIEF, 50);
  skill_assign(SKILL_DOUBLE_ATTACK, CLASS_THIEF, 75);

  /* WARRIOR */
  skill_assign(SKILL_BLUDGEONING, CLASS_WARRIOR, 1);
  skill_assign(SKILL_PIERCING, CLASS_WARRIOR, 1);
  skill_assign(SKILL_SLASHING, CLASS_WARRIOR, 1);
  skill_assign(SKILL_2H_BLUDGEONING, CLASS_WARRIOR, 1);
  skill_assign(SKILL_2H_PIERCING, CLASS_WARRIOR, 1);
  skill_assign(SKILL_2H_SLASHING, CLASS_WARRIOR, 1);
  skill_assign(SKILL_KICK, CLASS_WARRIOR, 1);
  skill_assign(SKILL_BASH, CLASS_WARRIOR, 1);
  skill_assign(SKILL_DODGE, CLASS_WARRIOR, 1);
  skill_assign(SKILL_SWITCH, CLASS_WARRIOR, 10);
  skill_assign(SKILL_RESCUE, CLASS_WARRIOR, 15);
  skill_assign(SKILL_DISARM, CLASS_WARRIOR, 20);
  skill_assign(SKILL_GUARD, CLASS_WARRIOR, 25);
  skill_assign(SKILL_DUAL_WIELD, CLASS_WARRIOR, 25);
  skill_assign(SKILL_PARRY, CLASS_WARRIOR, 30);
  skill_assign(SKILL_DOUBLE_ATTACK, CLASS_WARRIOR, 35);
  skill_assign(SKILL_RIPOSTE, CLASS_WARRIOR, 40);
  skill_assign(SKILL_HITALL, CLASS_WARRIOR, 50);
  skill_assign(SKILL_RETREAT, CLASS_WARRIOR, 60);
}

/* convert_class does no checking.  It expects a valid class and ch.
 *
 * This function changes a player's class and converts the skills/spells
 * accordingly, keeping the old values if they are better.
 * It also transfers quest spells. */
void convert_class(struct char_data *ch, int newclass) {
  int skill;
  sh_int old_skills[TOP_SKILL+1];
  sh_int new_skills[TOP_SKILL+1];

  /* read in the player's old skills */
  for (skill = 0; skill <= TOP_SKILL; skill++) {
    old_skills[skill] = GET_ISKILL(ch, skill);
  }
  /* set class */
  GET_CLASS(ch) = newclass;

  /* Big changes occur here: */
  update_char(ch);

  /* read the new skills */
  for (skill = 0; skill < MAX_SKILLS + 1; skill++) {
    new_skills[skill] = GET_ISKILL(ch, skill);
  }

  /* compare old and new */
  for (skill = 0; skill <= TOP_SKILL; skill++) {
    if(new_skills[skill]) {
      /* keep the value of the old skill if you still have the skill */
      if(old_skills[skill] > new_skills[skill]) {
        SET_SKILL(ch, skill, old_skills[skill]);
      }
    }

    /* keep any quest spells you might have earned */
    if((old_skills[skill]) && (skills[skill].quest)) {
      SET_SKILL(ch, skill, old_skills[skill]);
    }
  }
  check_regen_rates(ch);
}


int getbaseclass(int class)
{
   if (classes[class].is_subclass)
      return classes[class].subclass_of;
   return class;
}

/***************************************************************************
 * $Log: class.c,v $
 * Revision 1.176  2009/07/18 01:17:23  myc
 * Adding decay, iron maiden, spinechiller, and bone draw to necromancer
 * spell list.  Removing shocking grasp and lightning bolt.
 *
 * Revision 1.175  2009/06/14 18:11:10  myc
 * Fix innate effect for paladins.
 *
 * Revision 1.174  2009/06/09 21:48:21  myc
 * Remove usage of global buffer.
 *
 * Revision 1.173  2009/06/09 19:33:50  myc
 * Passing advance_level an enum for which action it should taking
 * rather than using a boolean, in order to reduce confusion.
 * Also took out log messages from advance_level and put them in
 * gain_exp.
 *
 * Revision 1.172  2009/06/09 05:35:39  myc
 * Modified advance_level to work with the new clan interface.
 *
 * Revision 1.171  2009/03/20 16:06:04  jps
 * Removed spells of lesser/greater invocation.
 *
 * Revision 1.170  2009/03/20 06:08:18  myc
 * Adding waterwalk to cryomancers, circle 1.  Adding detonation,
 * phosphoric embers, positive field, and acid burst to pyromancers,
 * but removing heatwave and combust.  Also alphabetized circles in
 * pyromancer spell assignment list.
 *
 * Revision 1.169  2009/03/08 23:34:14  jps
 * Renamed spells.[ch] to casting.
 *
 * Revision 1.168  2009/03/04 08:59:55  jps
 * Fix some comments.
 *
 * Revision 1.167  2008/09/20 17:43:26  jps
 * Gave dark presence spell to antipaladins at circle 2.
 *
 * Revision 1.166  2008/09/20 08:02:27  jps
 * Removed comprehend language spell.
 *
 * Revision 1.165  2008/09/12 20:16:23  jps
 * Removed vaporform from cryomancers.
 *
 * Revision 1.164  2008/09/01 22:15:59  jps
 * Saving and reporting players' game-leaving reasons and locations.
 *
 * Revision 1.163  2008/09/01 00:49:07  mud
 * The "max skill" of a spell is always 1000, since you either have it or you don't.
 *
 * Revision 1.162  2008/09/01 00:12:37  jps
 * Assign charm person to illusionists at circle 3.
 *
 * Revision 1.161  2008/08/10 06:54:33  jps
 * Added illusionist guild guards and guild masters.
 *
 * Revision 1.160  2008/08/10 01:58:49  jps
 * Added spells severance and soul reaver for illusionists.
 *
 * Revision 1.159  2008/07/27 05:23:01  jps
 * Changed save_player to save_player_char, since it only saves the character.
 *
 * Revision 1.158  2008/05/22 15:40:25  myc
 * Tweaked berserker skill assignments.
 *
 * Revision 1.157  2008/05/19 05:47:31  jps
 * Remove sane mind from illusionists, and assign mesmerize at circle 3.
 *
 * Revision 1.156  2008/05/18 22:53:54  jps
 * Assigning hysteria spell to illusionists at circle 7.
 *
 * Revision 1.155  2008/05/18 17:59:03  jps
 * Assigning familiarity to illusionists at circle 9.
 *
 * Revision 1.154  2008/05/18 02:02:53  jps
 * Assigning isolation to illusionists in circle 6.
 *
 * Revision 1.153  2008/05/12 00:43:16  jps
 * Add nightmare and discorporate spells to illusionists.
 *
 * Revision 1.152  2008/05/11 05:41:49  jps
 * Using regen.h.
 *
 * Revision 1.151  2008/04/26 23:35:43  myc
 * Info about permanent effects and race skills are stored in the
 * class/race structs now, but need to be initialized at runtime
 * by the init_races and init_classes functions.
 *
 * Revision 1.150  2008/04/26 18:56:36  myc
 * Assigning Berserker skills/chants.
 *
 * Revision 1.149  2008/04/15 04:44:42  jps
 * Give dispel magic to illusionists at circle 3.
 *
 * Revision 1.148  2008/04/14 08:39:56  jps
 * Added illusory wall to illusionists in circle 8.
 *
 * Revision 1.147  2008/04/14 02:18:25  jps
 * Assigning glory to illusionists in circle 11.
 *
 * Revision 1.146  2008/04/13 18:52:18  jps
 * Actually, confusion is supposed to be in circle 4 for illusionists.
 *
 * Revision 1.145  2008/04/13 18:30:30  jps
 * Assign spell of confusion to illusionists at circle 5.
 *
 * Revision 1.144  2008/04/04 06:12:52  myc
 * Removed dieites/worship code.
 *
 * Revision 1.143  2008/03/30 15:37:36  jps
 * Fix spelling of riposte.
 *
 * Revision 1.142  2008/03/28 17:54:53  myc
 * Now using flagvectors for effect, mob, player, preference, room, and
 * room effect flags.  AFF, AFF2, and AFF3 flags are now just EFF flags.
 *
 * Revision 1.141  2008/03/11 19:50:55  myc
 * Get rid of practice points.
 *
 * Revision 1.140  2008/03/10 18:01:17  myc
 * Adding berserker to guild info.  Adding new berserker skills and
 * chants to skill_assignments.
 *
 * Revision 1.139  2008/03/09 18:12:41  jps
 * Assigned spell of misdirection to illusionists in circle 4.
 *
 * Revision 1.138  2008/03/09 09:00:05  jps
 * Assign spell of fear to illusionists.
 *
 * Revision 1.137  2008/03/05 03:03:54  myc
 * The advance_level function doesn't require save_mem_list anymore
 * due to the elimination of redundant spell memory structures in
 * the player structure due to ascii pfiles.
 *
 * Revision 1.136  2008/02/23 01:03:54  myc
 * Cleaning up advance_level a lot.  Also reworked assign_class_skills
 * to use skill/spell/chant_assign instead of spell_level.
 *
 * Revision 1.135  2008/02/09 04:27:47  myc
 * Now relying on math header file.
 *
 * Revision 1.134  2008/02/09 03:04:23  myc
 * A few spell_level calls for illusionist were causing boot-time
 * error messages.
 *
 * Revision 1.133  2008/01/29 21:02:31  myc
 * Removing a lot of extern declarations from code files and moving
 * them to header files, mostly db.h and constants.h.
 *
 * Revision 1.132  2008/01/27 21:09:12  myc
 * Giving berserkers meditate skill
 *
 * Revision 1.131  2008/01/27 12:10:29  jps
 * Added regen and exp-cost factors.
 *
 * Revision 1.130  2008/01/27 11:16:43  jps
 * Handle newbie eq assignment here.
 *
 * Revision 1.129  2008/01/27 09:44:12  jps
 * Add a plain-but-capitalized name field. Add several factors that are used
 * when creating mob prototypes.
 *
 * Revision 1.128  2008/01/26 14:26:31  jps
 * Moved a lot of skill-related code into skills.h and skills.c.
 *
 * Revision 1.127  2008/01/07 11:55:48  jps
 * Added phantasm and simulacrum spells to illusionist class.
 *
 * Revision 1.126  2008/01/06 23:50:47  jps
 * Added spells project and simulacrum, and MOB2_ILLUSORY flag.
 *
 * Revision 1.125  2008/01/06 20:38:57  jps
 * Change illusionist spells.  Add ventriloquate to illusionists.
 *
 * Revision 1.124  2008/01/06 17:34:41  jps
 * Move thac0 values into classdef array.
 *
 * Revision 1.123  2008/01/06 05:36:37  jps
 * Add equipment restriction flags to classdef.
 * Clean up advance_level a bit.
 *
 * Revision 1.122  2008/01/05 23:05:45  jps
 * Added hp per level value to classdef.
 *
 * Revision 1.121  2008/01/05 21:58:27  jps
 * Added saving throw data to classdef structs.
 * Moved a lot of crap to chars.c.
 *
 * Revision 1.120  2008/01/05 20:31:52  jps
 * Added data to the classdef struct which controls how newly-generated
 * stats are ordered in a character.
 *
 * Revision 1.119  2008/01/05 05:33:22  jps
 * Started updating some Illusionist stuff.  Added init_char_class() and
 * update_char_class() functions.  Moved a lot of race-related stuff to races.c.
 * Moved some skill-related stuff to spells.c.  Removed redundant skill assignments.
 *
 * Revision 1.118  2008/01/04 01:50:41  jps
 * Added races.h file.  Added homeroom to class definitions.  Removed
 * obsolete "practice" data.
 *
 * Revision 1.117  2008/01/03 12:44:03  jps
 * Created an array of structs for class information. Renamed CLASS_MAGIC_USER
 * to CLASS_SORCERER.
 *
 * Revision 1.116  2008/01/02 01:26:51  jps
 * Made the assignment of sphere-related skills automatic.  They will be
 * assigned to a character if and only if there's a spell from that sphere
 * available to the character.
 *
 * Revision 1.115  2007/12/19 20:44:27  myc
 * advance_level() automatically modifies clan power and boots a player
 * from a clan if they are advanced to clan god status.  save_player()
 * no longer requires a save room (which wasn't being used anyway).
 *
 * Revision 1.114  2007/10/13 05:07:24  myc
 * Added new monk chants.
 *
 * Revision 1.113  2007/10/11 20:14:48  myc
 * Changed the skill defines slightly to support chants and songs as
 * slightly distinguished from spells and skills.  TOP_SKILL is the
 * old MAX_SKILLS.
 * Implemented monk chants using the magic system.  Added skill sets
 * to monks.
 *
 * Revision 1.112  2007/09/21 08:02:33  jps
 * Adjust direction of Mielikki priest guild guard.
 *
 * Revision 1.111  2007/09/11 16:34:24  myc
 * Added a roll_skill function that takes the level skill limits into
 * account.  It also takes up far less clock cyrcles than roll_mob_skill,
 * but the latter remains because it's used a loooot.
 *
 * Revision 1.110  2007/09/08 06:03:03  jps
 * Remove "plane shift" spell from various classes.
 *
 * Revision 1.109  2007/09/08 05:18:49  jps
 * Remove summon dracolich spell from necromancers.
 *
 * Revision 1.108  2007/09/07 18:56:04  jps
 * Thieves get double attack at level 75.
 * Mercenaries get dual wield at level 15.
 *
 * Revision 1.107  2007/09/04 06:49:19  myc
 * Re-assigning control weather spell to druids.
 *
 * Revision 1.106  2007/08/28 20:18:35  myc
 * Rangers get AFF_FARSEE innate now, instead of special-casing the ranger
 * class in do_farsee.
 *
 * Revision 1.105  2007/08/26 21:33:36  jps
 * Add level_max_skill() so you can see what the max skill is for
 * someone at a particular level - especially 99.
 *
 * Revision 1.104  2007/08/15 06:07:52  myc
 * Making conceal level 10 for thieves.
 *
 * Revision 1.103  2007/08/14 22:43:07  myc
 * Adding corner, conceal, stealth, and shadow skills.
 *
 * Revision 1.102  2007/08/05 22:19:17  myc
 * Fixed up springleap skill for monks.
 *
 * Revision 1.101  2007/08/05 20:21:51  myc
 * Added retreat and group retreat skills.
 *
 * Revision 1.100  2007/08/02 04:19:04  jps
 * Added "moonbeam" spell for Druids.
 *
 * Revision 1.99  2007/07/31 07:37:51  jps
 * Brought back the locate object spell.
 * Simplified update_skills().
 * Remove innate effects prior to applying them, so that any you had from
 * the prior race won't linger when you change to a new race.
 *
 * Revision 1.98  2007/07/04 02:21:58  myc
 * Renamed douse spell to extinguish.
 *
 * Revision 1.97  2007/06/16 00:32:55  myc
 * Removing 'circle' skill from assassins' skill lists.
 *
 * Revision 1.96  2007/06/16 00:15:49  myc
 * Three spells for necromancers: soul tap, rebuke undead,
 * and degeneration.  One spell for rangers: natures guidance.
 *
 * Revision 1.95  2007/05/29 20:16:32  jps
 * Abstracted getting base class.
 *
 * Revision 1.94  2007/05/28 22:36:26  jps
 * Reduce the <base-class>_subclass arrays to the subclasses that are live.
 *
 * Revision 1.93  2007/05/28 06:34:01  jps
 * Fix guild guard blocking to actually allow the right classes and subclasses
 * into the various guilds.  Looks like someone fixed this situation in the
 * mud simply by not loading the guards - once this change goes live, the
 * guards can be loaded again.  And once again, only warriors and thier
 * subclasses will be able to see the warrior coach (same goes for clerics
 * and sorcerers).
 *
 * Revision 1.92  2007/05/11 21:03:12  myc
 * New rogue skill, eye gouge, allows rogues to gouge out eyes.  A very
 * complicated skill.  :P  Fixed cure blind's logic, and made it support
 * eye gouge too.
 *
 * Revision 1.91  2007/05/11 20:13:28  myc
 * Vaporform is a new circle 13 spell for cryomancers.  It significantly
 * increases the caster's chance of dodging a hit.  It is a quest spell.
 *
 * Revision 1.90  2007/04/11 22:14:40  jps
 * Disabled "control weather" spell from druids, since it does nothing.
 * No mortals should have access to it now.
 *
 * Revision 1.89  2007/03/07 23:10:02  jps
 * Changed Anduin mercenary guild entrance direction to up.
 *
 * Revision 1.88  2007/02/14 03:54:53  myc
 * Changed base saves.  Sorcerers get harness circle 8.
 *
 * Revision 1.87  2007/01/25 17:05:51  myc
 * Diabolists won't forget spells when they level gain.
 *
 * Revision 1.86  2006/11/26 08:31:17  jps
 * Typo fixes for character creation process.
 *
 * Revision 1.85  2006/11/18 04:26:32  jps
 * Renamed continual light spell to illumination, and it only works on
 * LIGHT items (still rooms too).
 *
 * Revision 1.84  2006/11/08 09:16:04  jps
 * Fixed some loose-lose typos.
 *
 * Revision 1.83  2006/11/08 07:55:17  jps
 * Change verbal instances of "breath" to "breathe"
 *
 * Revision 1.82  2006/10/12 01:35:47  dce
 * Minor fix for Ogakh guild guards.
 *
 * Revision 1.81  2006/10/07 02:07:07  dce
 * Updated for guild guards in Ogakh.
 *
 * Revision 1.80  2006/05/30 01:25:13  rls
 * Gave poison back to antis and necro/druids/clerics/diabs
 * also made sure some classes had rem poison, like pali, etc.
 * as well, set innate prot_good/evil on anti/pali
 *
 * Revision 1.79  2005/06/15 17:21:43  cjd
 * Adjust checks to make certain monks skills mastered on subclas
 * and make dragon innates stay on dragons with a designated class
 *
 * Revision 1.78  2004/11/11 23:24:06  rsd
 * split up and edited the subclass_description char star to
 * make it smaller so the compiler would stop complaining
 * about it being more than 509 bytes.
 *
 * Revision 1.77  2003/06/21 01:01:08  jjl
 * Modified rogues.  Removed circle - backstab is now circlicious.  Updated
 * damage on backstab to give a little more pop.  Throatcut is now a once a day.
 *
 * Revision 1.76  2003/01/26 22:08:54  jjl
 * Gave rangers cure serious, since they have light and crit.
 *
 * Revision 1.75  2002/10/14 02:16:08  jjl
 * An update to turn vitality into a set of 6 spells, lesser endurance,
 * endurance, greater endurance, vitality, greater vitality, and dragon's
 * health.  Greater endurance is what vitality was.  The rest are scaled
 * appropriately.    The higher end may need scaled down, or may not.
 *
 * Revision 1.74  2002/09/21 03:15:32  jjl
 * Fixed the backstab multiplier spread so it's now actually based on
 * 100 levels.  The lowbie-midbie backstabby folk probably aren't going to like it.
 *
 * Revision 1.73  2002/09/15 03:55:51  jjl
 * Added skills for summon corpse and shift corpse
 *
 * Revision 1.72  2002/09/13 02:32:10  jjl
 * Updated header comments
 *
 * Revision 1.71  2002/07/16 23:21:53  rls
 * Added in new necro spell, bone armor.. and gave them ident
 *
 * Revision 1.70  2002/06/06 00:36:09  rls
 * Adjusted THAC0s for each class (to be a bit more sane *hope*)
 *
 * Revision 1.69  2002/06/04 02:24:30  dce
 * Adjusted thac0's for initial testing.
 *
 * Revision 1.68  2002/05/23 00:20:26  rls
 * Added thac0 min-max table for each of the classes (thac0 Revamp)
 *
 * Revision 1.67  2001/12/16 20:07:53  dce
 * Fixed a problem where players could get the max dam and hitroll
 * possible by changing their alignment and getting "zapped" by
 * alignment sensitive equipment. The "zapped" they would not lose
 * the +hitroll or damroll effects because of silly Hubis code.
 *
 * Revision 1.66  2001/12/07 15:42:30  dce
 * Fixed a bug with object spell effects where if a player
 * was wearing an item and died, they would permanently
 * gain that ability.
 *
 * Revision 1.65  2001/03/31 19:58:34  dce
 * Player innates and quest spells should stick.
 *
 * Revision 1.64  2001/02/02 00:34:21  mtp
 * fixed bad room def for 10014
 *
 * Revision 1.63  2001/01/16 00:33:56  mtp
 * make sure spell/skill list is clean after subclass
 *
 * Revision 1.62  2001/01/08 00:39:18  rsd
 * added the proper direction for the mercenary guild in mielikki
 *
 * Revision 1.61  2001/01/04 22:49:24  mtp
 * added guard 6175 as a guild guard in 6148
 *
 * Revision 1.60  2000/12/15 02:18:46  rsd
 * fixed the spelling of Sorcerer in a freaking class
 * array, there is no telling what relies on this misspelling.
 *
 * Revision 1.59  2000/11/29 00:19:24  mtp
 * checking guild guards for ickle/anduin/mielikki
 *
 * Revision 1.58  2000/11/21 04:31:04  rsd
 * Well, Rangers didn't have quick chant and only today
 * someone pointed it out, sheez
 *
 * Revision 1.57  2000/11/20 19:17:22  rsd
 * Added back rlog messages from prior to the addition of
 * the $log$.
 *
 * Revision 1.56  2000/11/14 20:24:24  rsd
 * added it so half elfs could be priests.. boggle
 *
 * Revision 1.55  2000/11/13 23:46:45  rsd
 * Added tame for paladins and anti's properly.
 *
 * Revision 1.54  2000/11/12 23:53:35  rsd
 * Added more debug into existing debug messages to make
 * them useful.
 *
 * Revision 1.53  2000/11/12 08:04:53  rsd
 * added more debug to set_skills() default case in the
 * switch. Unknown Class
 *
 * Revision 1.52  2000/11/12 07:28:57  rsd
 * removed the number 50 from the spell_level() circle field.
 * Rangers Paladins and AntiPaladins were assigned wrong
 *
 * Revision 1.51  2000/11/07 01:32:05  mtp
 * moved CLASS_MERCENARY from warrior subclass to rogue
 *
 * Revision 1.50  2000/09/15 17:03:00  jimmy
 * added function racial_innates() that prevents the wiping out of innate
 * skills by update_skills() when a new player is created or a player levels.
 * Added BODYSLAM to set_skills() to the races that were supposed to
 * have it.
 *
 * Revision 1.49  2000/09/04 19:58:35  rsd
 * Gave innate detect alignment to Priests and Diabs.
 *
 * Revision 1.48  2000/05/14 05:21:49  rsd
 * let half-elfs be thiefs
 *
 * Revision 1.47  2000/04/23 08:38:32  rsd
 * Retabbed and braced sections of the code, also commented out
 * add_move from the player advancement functions.  I never wanted
 * players to gain mv when the leveled in the first place. Paladins
 * have 3000 - 4000 mv at high level, found out someone had typoed
 * number(1,32) into the add_move variable as opposed to
 * number(1,3) so paladins were crankin on MV.  Smells like PWIPE
 * to me. Also fixed the citadel guardian problem, I hope.
 *
 * Revision 1.46  2000/04/23 03:23:48  rsd
 * ok I really removed weapon proficiencies from classes that didn't
 * need them, no body saw nuthiun'
 *
 * Revision 1.45  2000/04/22 22:34:01  rsd
 * Fixed deity spelling in player output. Added a guarding
 * direction for the entrance of Timun's citadel. Removed
 * weapons proficiencies from classes to set them all to
 * the proper proficiencies. Set Paladins and Anti-Paladins
 * to have detect alignemnt innately. Would have prefered
 * detect evil and good accordingly but they don't seem to
 * exist.
 *
 * Revision 1.44  2000/04/15 23:11:33  rsd
 * moved some spells between classes and levels.
 *
 * Revision 1.43  2000/04/05 06:31:31  rsd
 * changed the comment deader, moved flamestrike to lower
 * circle and removed color spay from pyros
 *
 * Revision 1.42  2000/02/14 05:12:44  cso
 * added guildguards for anduin and khuzhadam, added berserker to
 * class comment immediately after the other stuff.
 *
 * Revision 1.41  2000/01/31 00:35:20  rsd
 * removed the spell poison from the game for players. Removed
 * it from anti paladins.
 *
 * Revision 1.40  1999/11/28 22:53:27  cso
 * removed unused choice_table arg from roll_natural_abils
 *
 * Revision 1.39  1999/11/23 17:56:25  rsd
 * fixed guild guards exit points so same guard can block multiple exits.
 *
 * Revision 1.38  1999/11/23 16:09:19  rsd
 * added the other mielikki guild masters
 *
 * Revision 1.37  1999/11/23 15:48:23  jimmy
 * Fixed the slashing weapon skill.  I had it erroneously as stabbing. Doh.
 * Reinstated dual wield.
 * Allowed mobs/players to pick up items while fighting.
 * Fixed a bug in the damage message that wrongfully indicated a miss
 * due to a rounding error in the math.
 * This was all done in order to facilitate the chance to sling your
 * weapon in combat.  Dex and proficiency checks are now made on any missed
 * attact and a failure of both causes the weapon to be slung.
 *
 * Revision 1.35  1999/11/19 05:12:55  cso
 * Added buncha anduin guildguards :)
 *
 * Revision 1.34  1999/11/19 04:32:51  rsd
 * Well now,
 * Added class guild guard room assignemtns for Mielikki and
 * Ickle, I suspect Anduin will soon follow.
 * Added spell_level(SKILL_SPHERE..) for all casting classes.
 * Added SET_SKILL(ch, SKILL_SPHERE..) for players and MOBS!
 * WOO!
 *
 * Revision 1.33  1999/11/17 20:03:20  jimmy
 * reformatted return_max_skill and changed the equation to
 * 10*LEVEL + 50 as the max skill
 * --gurlaek
 *
 * Revision 1.32  1999/09/05 07:00:39  jimmy
 * Added RCS Log and Id strings to each source file
 *
 * Revision 1.31  1999/08/20 15:58:42  mud
 * commented out dual wield from each class until
 * such time that the use of it is more blanced
 *
 * Revision 1.30  1999/08/18 18:57:16  mud
 * made double attack level 90 for thieves
 *
 * Revision 1.29  1999/08/15 19:42:04  mud
 * made double attack level 65 for assassins
 *
 * Revision 1.28  1999/08/15 19:21:39  mud
 * made double attack level 70 for rogues
 *
 * Revision 1.27  1999/08/12 20:42:01  dce
 * Level 99's can now reach **.
 *
 * Revision 1.26  1999/07/30 05:08:34  mud
 * Added rescue for rangers at level 35
 *
 * Revision 1.25  1999/07/22 17:43:59  jimmy
 * Gave the newly reimpleminted spell IDENTIFY to magic users and conjurers
 * at 3rd circle
 * --gurlaek
 *
 * Revision 1.24  1999/07/20 19:45:51  jimmy
 * This is the spanky New Spell recognition code.
 * This code allows mobs/players that have the KNOW_SPELL skill
 * to make a skill check to guess the spell.  A good roll will show both
 * the spell and the target.  A bad roll will show the spell garbled and
 * then an INT check for the target.  If a really bad roll is made, the spell
 * will be replaced by an incorrect one.  the heart of this system is
 * start_chant(), end_chant, and bad_guess().
 * --gurlaek 7/20/1999
 *
 * Revision 1.23  1999/07/06 19:57:05  jimmy
 * This is a Mass check-in of the new skill/spell/language assignment system.
 * This New system combines the assignment of skill/spell/language for
 * both mobs and PCs.  LOts of code was touched and many errors were fixed.
 * MCLASS_VOID was moved from 13 to -1 to match CLASS_UNDEFINED for PC's.
 * MObs now get random skill/spell/language levels baseed on their race/class/level
 * that exactly align with PC's.  PC's no longer have to rent to use skills gained
 * by leveling or when first creating a char.  Languages no longer reset to defaults
 * when a PC levels.  Discovered that languages have been defined right in the middle
 * of the spell area.  This needs to be fixed.  A conversion util neeDs to be run on
 * the mob files to compensate for the 13 to -1 class change.
 * --gurlaek 7/6/1999
 *
 * Revision 1.22  1999/06/30 18:25:04  jimmy
 * >> This is a major conversion from the 18 point attribute system to the
 * >> 100 point attribute system.  A few of the major changes are:
 * >> All attributes are now on a scale from 0-100
 * >> Everyone views attribs the same but, the attribs for one race
 * >>   may be differeent for that of another even if they are the
 * >>   same number.
 * >> Mobs attribs now get rolled and scaled using the same algorithim as PC's
 * >> Mobs now have individual random attributes based on race/class.
 * >> The STR_ADD attrib has been completely removed.
 * >> All bonus tables for attribs in constants.c have been replaced by
 * >>   algorithims that closely duplicate the tables except on a 100 scale.
 * >> Some minor changes:
 * >> Race selection at char creation can now be toggled by using
 * >>   <world races off>
 * >> Lots of cleanup done to affected areas of code.
 * >> Setting attributes for mobs in the .mob file no longer functions
 * >>   but is still in the code for later use.
 * >> We now have a spare attribut structure in the pfile because the new
 * >>   system only used three instead of four.
 * >> --gurlaek 6/30/1999
 *
 * Revision 1.21  1999/06/10 16:56:28  mud
 * This is a mass check in after a code freeze due to an upgrade to RedHat 6.0.
 * This fixes all of the warnings associated with the new compiler and
 * libraries.  Many many curly braces had to be added to "if" statements to
 * clarify their behavior to the compiler.  The name approval code was also
 * debugged, and tested to be stable.  The xnames list was converted from an
 * array to a linked list to allow for on the fly adding of names to the
 * xnames list. This code compiles fine under both gcc RH5.2 and egcs RH6.0.
 * --Gurlaek 6/10/1999
 *
 * Revision 1.20  1999/05/26 02:11:22  mud
 * added SET_SKILL(ch, SKILL_SUMMON_MOUNT, 1000) and
 * spell_level(SKILL_SUMMON_MOUNT, CLASS_PALADIN, 15, 2)
 * for both paladin and anti's
 *
 * Revision 1.19  1999/04/29 19:00:02  mud
 * removed locate object from spell lists because it's
 * crashing the mud.
 *
 * Revision 1.18  1999/04/21 04:11:02  jimmy
 * fixed a crashbug related to display_class[] and parse_class().  someone
 * removed some classes from the menu but didn't match everything up.
 * I replaced the removed classes with blank entries so that do_help
 * for that class now works on the login menu. SCREAM
 * --gurlaek
 *
 * Revision 1.17  1999/04/16 00:50:23  mud
 * added preserve to necro's at 2nd circle.
 *
 * Revision 1.16  1999/03/24 23:30:59  mud
 * added/moved some spells for conjurers.
 * Commented out all quest spells per Fingon's
 * instructions.
 *
 * Revision 1.15  1999/03/21 16:36:55  mud
 * Altered who gets what spell and at what level, also
 * bumped up anti/pally hosemanship and set several spells
 * to skill 0 to make them quest spells.
 *
 * Revision 1.14  1999/03/20 18:54:39  tph
 * removed mystic, hunter and illusionist from parse_class().
 *
 * Revision 1.13  1999/03/15 04:44:42  mud
 * Ok, In line 17 I added something to make Fingon crazy
 * Ok, seriously I did rearrange and remove/add skills from
 * the various classes.  The purpose of this was to verify
 * the sound arrangement of the skills and how they were
 * dispursed among the classes.  This was accomplished by
 * altering SET_SKILL and spell_level fields where applicable.
 *
 * Revision 1.12  1999/03/14 00:53:03  mud
 * In class.c added a new line before the fiery mud class explanation
 * in config.c added the variable for name explanations and added the
 * text for the variable
 * in interpreter.c added the con_state stuff, whatever that was and
 * added the CON_NAME_CHECK affirmation section to the creation menu
 * loop or nanny.
 * In structs.h added the CON_NAME_CHECK define..
 * I also drove Jimmy absolutely insane with the deail in information
 * I put into our change control system.
 *
 * Revision 1.11  1999/03/11 23:37:12  mud
 * made Paladin and tla bright white instead of grey
 *
 * Revision 1.10  1999/03/10 00:03:37  dce
 * Monk semantics for dodge/parry/ripost/attack
 *
 * Revision 1.9  1999/03/09 22:26:35  mud
 * added scribe for rangers and removed it from paladins
 * antis and other classes that dfidn't need it.
 *
 * Revision 1.8  1999/03/08 23:24:48  dce
 * Added Springleap for monks
 *
 * Revision 1.7  1999/03/08 20:29:34  dce
 * Adds safefall skill for monks.
 *
 * Revision 1.6  1999/03/03 20:11:02  jimmy
 * Many enhancements to scribe and spellbooks.  Lots of checks added.
 * Scribe is now a skill.
 * Spellbooks now have to be held to scribe as well as a quill in the other hand.
 *
 * -fingon
 *
 * Revision 1.5  1999/02/26 22:30:30  dce
 * Monk additions/fixes
 *
 * Revision 1.4  1999/02/03 18:14:16  jimmy
 * Fixed yet more bugs with spellcasters and leveling.
 * Hope this does it.
 *
 * Revision 1.3  1999/02/02 20:16:54  jimmy
 * all spellcasters now attain spells when they level.
 * no renting and returning necessary.
 *
 * Revision 1.2  1999/01/30 04:16:40  mud
 * Entire file indented with emcacs
 * Changed *subclass_descrip to be Fieryified
 * changed *class_abbrevs[] to be three letter abbreviations
 * Removed Shaman as a class choice for humans
 * Added some question about *class_menu in a comment
 *
 * Revision 1.1  1999/01/29 01:23:30  mud
 * Initial revision
 *
 ***************************************************************************/
@


1.176
log
@Adding decay, iron maiden, spinechiller, and bone draw to necromancer
spell list.  Removing shocking grasp and lightning bolt.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.175 2009/06/14 18:11:10 myc Exp myc $
d499 1
a499 1
      log(buf);
d770 1
a770 1
     log(buf);
d1958 4
@


1.175
log
@Fix innate effect for paladins.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.174 2009/06/09 21:48:21 myc Exp myc $
d1514 1
a1514 1
  spell_assign(SPELL_CHILL_TOUCH, CLASS_NECROMANCER, CIRCLE_2);
d1519 1
a1521 1
  spell_assign(SPELL_SHOCKING_GRASP, CLASS_NECROMANCER, CIRCLE_3);
a1522 1
  spell_assign(SPELL_LIGHTNING_BOLT, CLASS_NECROMANCER, CIRCLE_4);
d1525 1
d1535 1
d1538 1
d1540 1
a1540 2
  spell_assign(SPELL_STONE_SKIN, CLASS_NECROMANCER, CIRCLE_12);
  spell_assign(SPELL_SHIFT_CORPSE, CLASS_NECROMANCER, CIRCLE_13);
d1542 1
d1544 1
d1546 2
d1958 3
@


1.174
log
@Remove usage of global buffer.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.173 2009/06/09 19:33:50 myc Exp myc $
d392 1
a392 1
  PERM_EFF(CLASS_PALADIN,      EFF_PROTECT_GOOD);
d1953 3
@


1.173
log
@Passing advance_level an enum for which action it should taking
rather than using a boolean, in order to reduce confusion.
Also took out log messages from advance_level and put them in
gain_exp.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.172 2009/06/09 05:35:39 myc Exp myc $
d879 1
a879 2
      sprintf(buf2, "SYSERR: Unrecognized class %d in advance_char", c);
      log(buf2);
d1953 6
@


1.172
log
@Modified advance_level to work with the new clan interface.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.171 2009/03/20 16:06:04 jps Exp myc $
d787 1
a787 1
void advance_level(struct char_data * ch, bool gaining)
d802 1
a802 1
      if (gaining)
d813 1
a813 1
      if (gaining)
d820 1
a820 1
      if (gaining)
d827 1
a827 1
      if (gaining)
d836 1
a836 1
      if (gaining)
d843 1
a843 1
      if (gaining)
d850 1
a850 1
      if (gaining)
d858 1
a858 1
      if (gaining)
d868 1
a868 1
      if (gaining)
d875 1
a875 1
      if (gaining)
d887 1
a887 1
   if (classes[c].magical && !gaining)
d894 1
a894 1
   if (!gaining && GET_LASTLEVEL(ch) != 0)
d899 1
a899 1
      if (gaining)
d926 1
a926 1
      if (gaining)
a934 7
   if (gaining) {
      sprintf(buf, "%s advanced to level %d", GET_NAME(ch), GET_LEVEL(ch));
      mudlog(buf, BRF, MAX(LVL_IMMORT, GET_INVIS_LEV(ch)), TRUE);
   } else {
      sprintf(buf, "%s lost level %d", GET_NAME(ch), GET_LEVEL(ch)+1);
      mudlog(buf, BRF, MAX(LVL_IMMORT, GET_INVIS_LEV(ch)), TRUE);
   }
d1954 3
@


1.171
log
@Removed spells of lesser/greater invocation.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.170 2009/03/20 06:08:18 myc Exp jps $
d925 5
a929 10
   if (GET_CLAN(ch)) {
      int clan = find_clan_by_id(GET_CLAN(ch));
      if (clan >= 0) {
         if (gaining)
            clans[clan].power++;
         else
            clans[clan].power--;
      }
      if (IS_CLAN_GOD(ch))
         remove_player_from_clan(GET_NAME(ch), GET_CLAN(ch));
d1961 3
@


1.170
log
@Adding waterwalk to cryomancers, circle 1.  Adding detonation,
phosphoric embers, positive field, and acid burst to pyromancers,
but removing heatwave and combust.  Also alphabetized circles in
pyromancer spell assignment list.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.169 2009/03/08 23:34:14 jps Exp myc $
a1284 1
  spell_assign(SPELL_LESSER_INVOCATION, CLASS_DIABOLIST, CIRCLE_7);
a1292 1
  spell_assign(SPELL_GREATER_INVOCATION, CLASS_DIABOLIST, CIRCLE_9);
a1649 1
  spell_assign(SPELL_LESSER_INVOCATION, CLASS_PRIEST, CIRCLE_7);
a1660 1
  spell_assign(SPELL_GREATER_INVOCATION, CLASS_PRIEST, CIRCLE_9);
d1966 6
@


1.169
log
@Renamed spells.[ch] to casting.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.168 2009/03/04 08:59:55 jps Exp jps $
d1192 1
d1679 2
d1682 4
a1685 2
  spell_assign(SPELL_DETECT_MAGIC, CLASS_PYROMANCER, CIRCLE_1);
  spell_assign(SPELL_BURNING_HANDS, CLASS_PYROMANCER, CIRCLE_1);
d1689 1
a1689 3
  spell_assign(SPELL_CONCEALMENT, CLASS_PYROMANCER, CIRCLE_2);
  spell_assign(SPELL_DETECT_INVIS, CLASS_PYROMANCER, CIRCLE_2);
  spell_assign(SPELL_SMOKE, CLASS_PYROMANCER, CIRCLE_3);
d1692 8
d1701 1
a1701 1
  spell_assign(SPELL_FLAME_BLADE, CLASS_PYROMANCER, CIRCLE_4);
d1703 2
a1704 6
  spell_assign(SPELL_RAY_OF_ENFEEB, CLASS_PYROMANCER, CIRCLE_4);
  spell_assign(SPELL_LEVITATE, CLASS_PYROMANCER, CIRCLE_4);
  spell_assign(SPELL_INFRAVISION, CLASS_PYROMANCER, CIRCLE_4);
  spell_assign(SPELL_FIREBALL, CLASS_PYROMANCER, CIRCLE_4);
  spell_assign(SPELL_FIRESHIELD, CLASS_PYROMANCER, CIRCLE_4);
  spell_assign(SPELL_HEATWAVE, CLASS_PYROMANCER, CIRCLE_5);
d1706 3
a1708 1
  spell_assign(SPELL_DIMENSION_DOOR, CLASS_PYROMANCER, CIRCLE_5);
d1710 1
a1710 2
  spell_assign(SPELL_MINOR_PARALYSIS, CLASS_PYROMANCER, CIRCLE_5);
  spell_assign(SPELL_INVISIBLE, CLASS_PYROMANCER, CIRCLE_5);
d1712 1
a1713 1
  spell_assign(SPELL_HASTE, CLASS_PYROMANCER, CIRCLE_6);
d1715 4
a1718 2
  spell_assign(SPELL_MELT, CLASS_PYROMANCER, CIRCLE_7);
  spell_assign(SPELL_COMBUST, CLASS_PYROMANCER, CIRCLE_8);
d1720 2
a1721 2
  spell_assign(SPELL_FLY, CLASS_PYROMANCER, CIRCLE_8);
  spell_assign(SPELL_RELOCATE, CLASS_PYROMANCER, CIRCLE_9);
d1725 2
d1729 1
d1731 1
d1734 1
d1970 3
@


1.168
log
@Fix some comments.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.167 2008/09/20 17:43:26 jps Exp jps $
d28 1
a28 1
#include "spells.h"
d1955 3
@


1.167
log
@Gave dark presence spell to antipaladins at circle 2.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.166 2008/09/20 08:02:27 jps Exp jps $
d518 1
a518 1
 * When a mob with the guild guard specproc is placed in a room, they will
d989 1
a989 1
   * spells tend to be grouped by circle. */
d1955 3
@


1.166
log
@Removed comprehend language spell.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.165 2008/09/12 20:16:23 jps Exp jps $
d1015 1
d1955 3
@


1.165
log
@Removed vaporform from cryomancers.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.164 2008/09/01 22:15:59 jps Exp jps $
a1181 1
  spell_assign(SPELL_COMPREHEND_LANG, CLASS_CONJURER, CIRCLE_7);
a1218 1
  spell_assign(SPELL_COMPREHEND_LANG, CLASS_CRYOMANCER, CIRCLE_7);
a1268 1
  spell_assign(SPELL_COMPREHEND_LANG, CLASS_DIABOLIST, CIRCLE_4);
a1521 1
  spell_assign(SPELL_COMPREHEND_LANG, CLASS_MYSTIC, CIRCLE_5);
a1549 1
  spell_assign(SPELL_COMPREHEND_LANG, CLASS_NECROMANCER, CIRCLE_7);
a1706 1
  spell_assign(SPELL_COMPREHEND_LANG, CLASS_PYROMANCER, CIRCLE_7);
a1746 1
  spell_assign(SPELL_COMPREHEND_LANG, CLASS_RANGER, CIRCLE_7);
a1804 1
  spell_assign(SPELL_COMPREHEND_LANG, CLASS_SHAMAN, CIRCLE_5);
a1844 1
  spell_assign(SPELL_COMPREHEND_LANG, CLASS_SORCERER, CIRCLE_7);
d1954 3
@


1.164
log
@Saving and reporting players' game-leaving reasons and locations.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.163 2008/09/01 00:49:07 mud Exp jps $
a1227 1
  spell_assign(SPELL_VAPORFORM, CLASS_CRYOMANCER, CIRCLE_13);
d1963 3
@


1.163
log
@The "max skill" of a spell is always 1000, since you either have it or you don't.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.162 2008/09/01 00:12:37 jps Exp mud $
d39 1
a39 1

d1964 3
@


1.162
log
@Assign charm person to illusionists at circle 3.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.161 2008/08/10 06:54:33 jps Exp jps $
d667 6
d1964 3
@


1.161
log
@Added illusionist guild guards and guild masters.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.160 2008/08/10 01:58:49 jps Exp jps $
d1403 1
a1433 1
  spell_assign(SPELL_CHARM, CLASS_ILLUSIONIST, CIRCLE_12);
d1958 3
@


1.160
log
@Added spells severance and soul reaver for illusionists.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.159 2008/07/27 05:23:01 jps Exp jps $
d541 1
d575 1
a615 1
  {CLASS_ILLUSIONIST,   6219,   SCMD_UP},
d619 1
d1958 3
@


1.159
log
@Changed save_player to save_player_char, since it only saves the character.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.158 2008/05/22 15:40:25 myc Exp jps $
d1427 2
d1432 1
d1956 3
@


1.158
log
@Tweaked berserker skill assignments.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.157 2008/05/19 05:47:31 jps Exp myc $
d931 1
a931 1
   save_player(ch);
d1953 3
@


1.157
log
@Remove sane mind from illusionists, and assign mesmerize at circle 3.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.156 2008/05/18 22:53:54 jps Exp jps $
d1066 4
a1069 3
  skill_assign(SKILL_MAUL, CLASS_BERSERKER, 25);
  chant_assign(CHANT_SPIRIT_WOLF, CLASS_BERSERKER, 30);
  skill_assign(SKILL_BATTLE_HOWL, CLASS_BERSERKER, 42);
d1072 2
a1073 2
  chant_assign(CHANT_SPIRIT_BEAR, CLASS_BERSERKER, 60);
  skill_assign(SKILL_TANTRUM, CLASS_BERSERKER, 67);
d1456 1
a1456 1
  skill_assign(SKILL_CHANT, CLASS_MONK, 1);
d1953 3
@


1.156
log
@Assigning hysteria spell to illusionists at circle 7.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.155 2008/05/18 17:59:03 jps Exp jps $
d1399 1
a1408 1
  spell_assign(SPELL_SANE_MIND, CLASS_ILLUSIONIST, CIRCLE_5);
d1952 3
@


1.155
log
@Assigning familiarity to illusionists at circle 9.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.154 2008/05/18 02:02:53 jps Exp jps $
d1420 1
d1952 3
@


1.154
log
@Assigning isolation to illusionists in circle 6.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.153 2008/05/12 00:43:16 jps Exp jps $
d1423 2
d1951 3
@


1.153
log
@Add nightmare and discorporate spells to illusionists.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.152 2008/05/11 05:41:49 jps Exp jps $
a1413 1

d1415 1
d1949 3
@


1.152
log
@Using regen.h.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.151 2008/04/26 23:35:43 myc Exp jps $
d1403 1
d1406 1
d1949 3
@


1.151
log
@Info about permanent effects and race skills are stored in the
class/race structs now, but need to be initialized at runtime
by the init_races and init_classes functions.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.150 2008/04/26 18:56:36 myc Exp myc $
d38 1
d1947 5
@


1.150
log
@Assigning Berserker skills/chants.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.149 2008/04/15 04:44:42 jps Exp myc $
d382 18
d757 13
a769 21
  switch (GET_CLASS(ch)) {
    case CLASS_PRIEST:
      SET_FLAG(EFF_FLAGS(ch), EFF_DETECT_ALIGN);
      break;
    case CLASS_DIABOLIST:
      SET_FLAG(EFF_FLAGS(ch), EFF_DETECT_ALIGN);
      break;
    case CLASS_PALADIN:
      SET_FLAG(EFF_FLAGS(ch), EFF_DETECT_ALIGN);
      SET_FLAG(EFF_FLAGS(ch), EFF_PROTECT_EVIL);
      break;
    case CLASS_ANTI_PALADIN:
      SET_FLAG(EFF_FLAGS(ch), EFF_DETECT_ALIGN);
      SET_FLAG(EFF_FLAGS(ch), EFF_PROTECT_GOOD);
      break;
    case CLASS_RANGER:
      SET_FLAG(EFF_FLAGS(ch), EFF_FARSEE);
      break;
    default:
      break;
  }
d1946 3
@


1.149
log
@Give dispel magic to illusionists at circle 3.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.148 2008/04/14 08:39:56 jps Exp jps $
d1043 1
a1051 2
  skill_assign(SKILL_DUAL_WIELD, CLASS_BERSERKER, 1);
  skill_assign(SKILL_DOUBLE_ATTACK, CLASS_BERSERKER, 1);
d1053 5
a1057 2
  skill_assign(SKILL_PARRY, CLASS_BERSERKER, 1);
  skill_assign(SKILL_RIPOSTE, CLASS_BERSERKER, 1);
d1059 6
a1064 7
  skill_assign(SKILL_TANTRUM, CLASS_BERSERKER, 1);
  skill_assign(SKILL_GROUND_SHAKER, CLASS_BERSERKER, 1);
  skill_assign(SKILL_BATTLE_HOWL, CLASS_BERSERKER, 1);
  skill_assign(SKILL_MAUL, CLASS_BERSERKER, 1);
  chant_assign(CHANT_SPIRIT_WOLF, CLASS_BERSERKER, 1);
  chant_assign(CHANT_SPIRIT_BEAR, CLASS_BERSERKER, 1);
  chant_assign(CHANT_INTERMINABLE_WRATH, CLASS_BERSERKER, 1);
d1936 3
@


1.148
log
@Added illusory wall to illusionists in circle 8.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.147 2008/04/14 02:18:25 jps Exp jps $
d1385 1
d1935 3
@


1.147
log
@Assigning glory to illusionists in circle 11.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.146 2008/04/13 18:52:18 jps Exp jps $
d1406 2
d1934 3
@


1.146
log
@Actually, confusion is supposed to be in circle 4 for illusionists.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.145 2008/04/13 18:30:30 jps Exp jps $
d1406 2
d1932 3
@


1.145
log
@Assign spell of confusion to illusionists at circle 5.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.144 2008/04/04 06:12:52 myc Exp jps $
d1388 1
a1391 1
  spell_assign(SPELL_CONFUSION, CLASS_ILLUSIONIST, CIRCLE_5);
d1930 3
@


1.144
log
@Removed dieites/worship code.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.143 2008/03/30 15:37:36 jps Exp myc $
d1391 1
d1930 3
@


1.143
log
@Fix spelling of riposte.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.142 2008/03/28 17:54:53 myc Exp jps $
a759 2
  if (GET_LEVEL(ch) == 1 && !IS_NPC(ch))
    GET_DIETY(ch) = -1;
d1929 3
@


1.142
log
@Now using flagvectors for effect, mob, player, preference, room, and
room effect flags.  AFF, AFF2, and AFF3 flags are now just EFF flags.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.141 2008/03/11 19:50:55 myc Exp myc $
d650 1
a650 1
    case SKILL_RIPOST:
d990 1
a990 1
  skill_assign(SKILL_RIPOST, CLASS_ANTI_PALADIN, 40);
d1057 1
a1057 1
  skill_assign(SKILL_RIPOST, CLASS_BERSERKER, 1);
d1362 1
a1362 1
  skill_assign(SKILL_RIPOST, CLASS_HUNTER, 1);
d1429 1
a1429 1
  skill_assign(SKILL_RIPOST, CLASS_MERCENARY, 60);
d1442 1
a1442 1
  skill_assign(SKILL_RIPOST, CLASS_MONK, 20);
d1546 1
a1546 1
  skill_assign(SKILL_RIPOST, CLASS_PALADIN, 40);
d1709 1
a1709 1
  skill_assign(SKILL_RIPOST, CLASS_RANGER, 40);
d1874 1
a1874 1
  skill_assign(SKILL_RIPOST, CLASS_WARRIOR, 40);
d1931 4
@


1.141
log
@Get rid of practice points.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.140 2008/03/10 18:01:17 myc Exp myc $
d741 1
a741 1
      SET_BIT(AFF_FLAGS(ch), AFF_DETECT_ALIGN);
d744 1
a744 1
      SET_BIT(AFF_FLAGS(ch), AFF_DETECT_ALIGN);
d747 2
a748 1
      SET_BIT(AFF_FLAGS(ch), AFF_DETECT_ALIGN | AFF_PROTECT_EVIL);
d751 2
a752 1
      SET_BIT(AFF_FLAGS(ch), AFF_DETECT_ALIGN | AFF_PROTECT_GOOD);
d755 1
a755 1
      SET_BIT(AFF_FLAGS(ch), AFF_FARSEE);
d891 1
a891 1
   affect_total(ch);
d904 1
a904 1
      SET_BIT(PRF_FLAGS(ch), PRF_HOLYLIGHT);
d1931 3
@


1.140
log
@Adding berserker to guild info.  Adding new berserker skills and
chants to skill_assignments.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.139 2008/03/09 18:12:41 jps Exp myc $
a896 10
   /* Calculate practices (legacy circle code) */
   if (classes[c].magical) {
      if (gaining)
         GET_PRACTICES(ch) += MAX(2, wis_app[GET_WIS(ch)].bonus);
   }
   else {
      if (gaining)
         GET_PRACTICES(ch) += MIN(2, MAX(1, wis_app[GET_WIS(ch)].bonus));
   }

d1929 4
@


1.139
log
@Assigned spell of misdirection to illusionists in circle 4.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.138 2008/03/09 09:00:05 jps Exp jps $
d541 1
d572 1
d582 1
d611 1
d1067 7
d1939 3
@


1.138
log
@Assign spell of fear to illusionists.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.137 2008/03/05 03:03:54 myc Exp jps $
d1387 1
d1928 3
@


1.137
log
@The advance_level function doesn't require save_mem_list anymore
due to the elimination of redundant spell memory structures in
the player structure due to ascii pfiles.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.136 2008/02/23 01:03:54 myc Exp myc $
d1035 1
a1035 1
  /* BARDS */
d1384 2
d1927 5
@


1.136
log
@Cleaning up advance_level a lot.  Also reworked assign_class_skills
to use skill/spell/chant_assign instead of spell_level.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.135 2008/02/09 04:27:47 myc Exp myc $
d37 1
d861 2
a862 4
    * If this is a magical class, save their current memorization
    * list to the saved player data section.  If they're losing a
    * level, run init_mem_list to clear out spells they shouldn't
    * know.
d864 2
a865 5
   if (classes[c].magical) {
     save_mem_list(ch);
     if (!gaining)
       init_mem_list(ch);
   }
d884 1
a884 1
   GET_NATHPS(ch) += add_hp;
d1925 4
@


1.135
log
@Now relying on math header file.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.134 2008/02/09 03:04:23 myc Exp myc $
d765 1
a765 4
   int add_hp = 0, i;
   int dice, sub, c = GET_CLASS(ch);
   extern void assign_mem_list(struct char_data *ch);
   extern void save_mem_list(struct char_data *ch);
d767 4
a770 4
   if (number(0, 4))
      sub = 0;
   else
      sub = 1;
d773 9
a781 12
      if (gaining) {
         save_mem_list(ch);
         dice = number(3, 8);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= (GET_LASTLEVEL(ch) + sub);
         else
            add_hp -= 8;
      }
d785 8
a792 12
      if (gaining) {
         save_mem_list(ch);
         dice = number(5, 10);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 10;
      }
d795 5
a799 11
   case CLASS_THIEF:
      if (gaining) {
         dice = number(7, 13);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 13;
      }
d802 5
a806 11
   case CLASS_WARRIOR:
      if (gaining) {
         dice = number(10, 15);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 14;
      }
d809 7
a815 13
   case CLASS_PALADIN:
      if (gaining) {
         save_mem_list(ch);
         dice = number(9, 14);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -=   14;
      }
d818 5
a822 13
   case CLASS_ANTI_PALADIN:
      if (gaining) {
         save_mem_list(ch);
         dice = number(9, 14);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -=   14;
      }
d826 4
a829 12
      if (gaining) {
         save_mem_list(ch);
         dice = number(9, 13);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 13;
      }
d832 6
a837 15

   case CLASS_DRUID:
      if (gaining) {
         save_mem_list(ch);
         dice = number(5, 11);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 11;
      }
      SET_SKILL(ch, SKILL_SHAPECHANGE, MIN(1000, 10 * (GET_LEVEL(ch) + 1)));
d840 1
a840 70
   case CLASS_SHAMAN:
      if (gaining) {
         save_mem_list(ch);
         dice = number(5, 10);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 10;
      }
      break;

   case CLASS_ASSASSIN:
      if (gaining) {
         dice = number(7, 12);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 12;
      }
      break;

   case CLASS_MERCENARY:
      if (gaining) {
         dice = number(7, 14);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 14;
      }

   case CLASS_NECROMANCER:
      if (gaining) {
         save_mem_list(ch);
         dice = number(3, 8);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 8;
      }
      break;


   case CLASS_CONJURER:
      if (gaining) {
         save_mem_list(ch);
         dice = number(3, 8);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 8;
      }
      break;
a841 11
      if (gaining) {
         dice = number(10, 15);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 14;
      }
      break;
a842 11
      if (gaining) {
         dice = number(10, 15);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 14;
      }
      break;
d844 4
a847 26
      if (gaining) {
         save_mem_list(ch);
         dice = number(10, 15);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 14;
      }
      break;
   case CLASS_PRIEST:
      if (gaining) {
         save_mem_list(ch);
         dice = number(5, 10);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 10;
      }
d850 8
a857 14
   case CLASS_DIABOLIST:
      if (gaining) {
         save_mem_list(ch);
         dice = number(5, 10);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 10;
      }
      break;
d859 10
a868 80
   case CLASS_MYSTIC:
      if (gaining) {
         save_mem_list(ch);
         dice = number(5, 10);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 10;
      }
      break;
   case CLASS_ROGUE:
      if (gaining) {
         dice = number(7, 13);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 13;
      }
      break;
   case CLASS_BARD:
      if (gaining) {
         dice = number(7, 13);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 13;
      }
      break;
   case CLASS_PYROMANCER:
      if (gaining) {
         save_mem_list(ch);
         dice = number(3, 8);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 8;
      }
      break;
   case CLASS_CRYOMANCER:
      if (gaining) {
         save_mem_list(ch);
         dice = number(3, 8);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 8;
      }
      break;
   case CLASS_ILLUSIONIST:
      if (gaining) {
         save_mem_list(ch);
         dice = number(3, 8);
         add_hp += dice;
         GET_LASTLEVEL(ch) = dice;
         assign_mem_list(ch);
      } else {
         if (!(GET_LASTLEVEL(ch) == 0))
            add_hp -= GET_LASTLEVEL(ch) + sub;
         else
            add_hp -= 8;
      }
      break;
d870 9
a878 1
   /*if over level 25 use constants for hps*/
d885 3
a887 1
   ch->points.max_hit +=   add_hp;
d890 2
d893 1
a893 1
      ch->points.max_mana = (GET_LEVEL(ch)^2)/10;
d897 2
a898 1
   if (c == CLASS_SORCERER || c == CLASS_CLERIC) {
d901 7
a907 6
      else
         ;} else {
            if (gaining)
               GET_PRACTICES(ch) += MIN(2, MAX(1, wis_app[GET_WIS(ch)].bonus));
            else
               ;   }
d909 3
a911 2
      for (i = 0; i < 3; i++)
         GET_COND(ch, i) = (char) -1;
d915 1
d929 1
a929 1
   update_char(ch);          /* update skills/spells/innates/etc. for new level */
d945 21
d967 10
a976 87
void assign_class_skills(void) {
  int i, j;
#define cls_sorcerer (1 << CLASS_SORCERER)
#define cls_cleric (1 << CLASS_CLERIC)
#define cls_thief (1 << CLASS_THIEF)
#define cls_warrior (1 << CLASS_WARRIOR)
#define cls_paladin (1 << CLASS_PALADIN)
#define cls_antipaladin (1 << CLASS_ANTI_PALADIN)
#define cls_ranger (1 << CLASS_RANGER)
#define cls_druid (1 << CLASS_DRUID)
#define cls_shaman (1 << CLASS_SHAMAN)
#define cls_assassin (1 << CLASS_ASSASSIN)
#define cls_mercenary (1 << CLASS_MERCENARY)
#define cls_necro (1 << CLASS_NECROMANCER)
#define cls_conj (1 << CLASS_CONJURER)
#define cls_monk (1 << CLASS_MONK)
#define cls_bers (1 << CLASS_BERSERKER)
#define cls_priest (1 << CLASS_PRIEST)
#define cls_diab (1 << CLASS_DIABOLIST)
#define cls_mystic (1 << CLASS_MYSTIC)
#define cls_rogue (1 << CLASS_ROGUE)
#define cls_bard (1 << CLASS_BARD)
#define cls_pyro (1 << CLASS_PYROMANCER)
#define cls_cryo (1 << CLASS_CRYOMANCER)
#define cls_illu (1 << CLASS_ILLUSIONIST)
#define cls_hunter (1 << CLASS_HUNTER)

  /* Those who scribe and memorize for spells */
#define mcls_arcane cls_sorcerer | cls_ranger | cls_necro | cls_conj | \
     cls_pyro | cls_cryo | cls_illu

  /* Those who pray for spells */
#define mcls_spiritual cls_cleric | cls_paladin | cls_antipaladin | cls_druid | \
     cls_shaman | cls_priest | cls_diab | cls_mystic

  /* Sorcerers and their ilk */
#define mcls_sorcys cls_sorcerer | cls_necro | cls_conj | cls_pyro | cls_cryo | cls_illu

  /* Use base_talents to assign spells, skills, chants, and songs
   * to multiple classes.  Use 0 to assign one to all classes.
   *
   * For instance, { SKILL_SECOND_ATTACK, cls_sorcerer | cls_cleric, 14, 0 },
   * will give mages and clerics the SECOND_ATTACK skill at level 14.
   *
   * LEVEL is relevant to skills but not to spells; CIRCLE is relevant
   * to spells but not to skills.*/

  /* TALENT   CLASSES   LEVEL  CIRCLE */
  int base_talents[][4] = {

    /* --- EVERYBODY --- */
    { SKILL_MOUNT , 0, 1, 0 },
    { SKILL_RIDING, 0, 1, 0 },
    { SKILL_BANDAGE, 0, 1, 0 },
    { SKILL_DOUSE, 0, 1, 0 },
    { SKILL_FIRST_AID, 0, 1, 0 },

    /* ARCANE SPELLCASTERS */
    { SKILL_SCRIBE, mcls_arcane, 1, 0 },

    /* ALL SPELLCASTERS */
    { SKILL_MEDITATE, mcls_arcane | mcls_spiritual, 1, 0 },
    { SKILL_KNOW_SPELL, mcls_arcane | mcls_spiritual, 1, 0 },
    { SKILL_QUICK_CHANT, mcls_arcane | mcls_spiritual, 1, 0 },

    /* SORCERER AND SUBCLASSES */
    { SKILL_PIERCING, mcls_sorcys, 1, 0 },
    { SKILL_DODGE, mcls_sorcys, 20, 0 },

    { -1, -1, -1, -1 } /* THIS MUST END THE LIST*/
  };

  for (j = 0; base_talents[j][0] != -1; j++)
    for (i = 0; i < NUM_CLASSES; i++)
      if (!base_talents[j][1] || IS_SET(base_talents[j][1], (1 << i)))
         spell_level(base_talents[j][0], i, base_talents[j][2], 2);

  /* in my base patch, cls_sorcerer, etc. are unused and that leads to
     annyoing warnings, so here I'll use them...*/
  j = (cls_sorcerer-cls_sorcerer)+(cls_cleric-cls_cleric)+(cls_thief-cls_thief)+
    (cls_warrior-cls_warrior)+(cls_paladin-cls_paladin)+
    (cls_antipaladin-cls_antipaladin)+(cls_ranger-cls_ranger)+
    (cls_druid-cls_druid)+(cls_shaman-cls_shaman)+
    (cls_assassin-cls_assassin)+(cls_mercenary-cls_mercenary)+
    (cls_necro-cls_necro)+(cls_conj-cls_conj) + cls_hunter + cls_illu +
    cls_cryo + cls_pyro + cls_bard + cls_rogue + cls_mystic + cls_diab +
    cls_priest + cls_bers + cls_monk;
d979 42
a1020 1
   * Spells tend to be grouped by circle. */
d1023 15
a1037 55
  spell_level(SKILL_INSTANT_KILL, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_THROATCUT, CLASS_ASSASSIN, 31, 2);
  spell_level(SKILL_SNEAK, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_PICK_LOCK, CLASS_ASSASSIN, 6, 2);
  spell_level(SKILL_BACKSTAB, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_KICK, CLASS_ASSASSIN, 36, 2);
  spell_level(SKILL_HIDE, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_TRACK, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_ASSASSIN, 65, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_ASSASSIN, 15, 2);
  spell_level(SKILL_DODGE, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_PARRY, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_SHADOW, CLASS_ASSASSIN, 40, 2);
  spell_level(SKILL_PIERCING, CLASS_ASSASSIN, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_ASSASSIN, 1, 1);

  /* ANTI_PALADIN */
  spell_level(SKILL_BLUDGEONING, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_RETREAT, CLASS_ANTI_PALADIN, 60, 2);
  spell_level(SKILL_VAMP_TOUCH, CLASS_ANTI_PALADIN, 45, 2);
  spell_level(SKILL_KICK, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_ANTI_PALADIN, 10, 2);
  spell_level(SKILL_BASH, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_ANTI_PALADIN, 20, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_ANTI_PALADIN, 70, 2);
  spell_level(SKILL_TAME, CLASS_ANTI_PALADIN, 7, 2);
  spell_level(SKILL_DODGE, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_ANTI_PALADIN, 40, 2);
  spell_level(SKILL_PARRY, CLASS_ANTI_PALADIN, 20, 2);
  spell_level(SKILL_HITALL, CLASS_ANTI_PALADIN, 80, 2);
  spell_level(SKILL_DISARM, CLASS_ANTI_PALADIN, 50, 2);
  spell_level(SKILL_GUARD, CLASS_ANTI_PALADIN, 10, 2);
  spell_level(SKILL_SWITCH, CLASS_ANTI_PALADIN, 10, 2);
  spell_level(SKILL_SUMMON_MOUNT, CLASS_ANTI_PALADIN, 15, 2);

  spell_level(SPELL_CAUSE_LIGHT, CLASS_ANTI_PALADIN, CIRCLE_1, 1);
  spell_level(SPELL_DEMONSKIN, CLASS_ANTI_PALADIN, CIRCLE_2, 2);
  spell_level(SPELL_CREATE_FOOD, CLASS_ANTI_PALADIN, CIRCLE_3, 3);
  spell_level(SPELL_CREATE_WATER, CLASS_ANTI_PALADIN, CIRCLE_3, 3);
  spell_level(SPELL_CAUSE_SERIOUS, CLASS_ANTI_PALADIN, CIRCLE_3, 3);
  spell_level(SPELL_CURSE, CLASS_ANTI_PALADIN, CIRCLE_4, 4);
  spell_level(SPELL_CAUSE_CRITIC, CLASS_ANTI_PALADIN, CIRCLE_5, 5);
  spell_level(SPELL_DISPEL_GOOD, CLASS_ANTI_PALADIN, CIRCLE_5, 5);
  spell_level(SPELL_POISON, CLASS_ANTI_PALADIN, CIRCLE_5, 5);
  spell_level(SPELL_CURE_BLIND, CLASS_ANTI_PALADIN, CIRCLE_6, 6);
  spell_level(SPELL_BLINDNESS, CLASS_ANTI_PALADIN, CIRCLE_6, 6);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_ANTI_PALADIN, CIRCLE_7, 7);
  spell_level(SPELL_SUMMON_CORPSE, CLASS_ANTI_PALADIN, CIRCLE_8, 8);
  spell_level(SPELL_SOULSHIELD, CLASS_ANTI_PALADIN, CIRCLE_8, 8);
  spell_level(SPELL_HARM, CLASS_ANTI_PALADIN, CIRCLE_9, 9);
  spell_level(SPELL_UNHOLY_WORD, CLASS_ANTI_PALADIN, CIRCLE_11, 11);
d1040 11
a1050 12
  spell_level(SKILL_SNEAK, CLASS_BARD, 10, 2);
  spell_level(SKILL_PICK_LOCK, CLASS_BARD, 10, 2);
  spell_level(SKILL_BACKSTAB, CLASS_BARD, 1, 2);
  spell_level(SKILL_STEAL, CLASS_BARD, 10, 2);
  spell_level(SKILL_HIDE, CLASS_BARD, 10, 2);
  spell_level(SKILL_TRACK, CLASS_BARD, 50, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_BARD, 70, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_BARD, 90, 2);
  spell_level(SKILL_DODGE, CLASS_BARD, 20, 2);
  spell_level(SKILL_PARRY, CLASS_BARD, 40, 2);

  spell_level(SKILL_PIERCING, CLASS_BARD, 1, 1);
d1053 14
a1066 20
  spell_level(SKILL_HITALL, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_GUARD, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_KICK, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_TAME, CLASS_BERSERKER, 7, 2);
  spell_level(SKILL_TRACK, CLASS_BERSERKER, 36, 2);
  spell_level(SKILL_BASH, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_DODGE, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_PARRY, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_BERSERKER, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_BERSERKER, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_BERSERKER, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_BERSERKER, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_BERSERKER, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_BERSERKER, 1, 1);
  spell_level(SKILL_MEDITATE, CLASS_BERSERKER, 50, 1);
d1069 59
a1127 59
  spell_level(SKILL_DODGE, CLASS_CLERIC, 20, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_CLERIC, 1, 1);

  spell_level(SPELL_DETECT_MAGIC, CLASS_CLERIC, CIRCLE_1, 1);
  spell_level(SPELL_CURE_LIGHT, CLASS_CLERIC, CIRCLE_1, 1);
  spell_level(SPELL_ARMOR, CLASS_CLERIC, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_FOOD, CLASS_CLERIC, CIRCLE_1, 1);
  spell_level(SPELL_CAUSE_LIGHT, CLASS_CLERIC, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_WATER, CLASS_CLERIC, CIRCLE_1, 1);
  spell_level(SPELL_LESSER_ENDURANCE, CLASS_CLERIC, CIRCLE_1,1);

  spell_level(SPELL_CURE_SERIOUS, CLASS_CLERIC, CIRCLE_2, 2);
  spell_level(SPELL_VIGORIZE_LIGHT, CLASS_CLERIC, CIRCLE_2, 2);
  spell_level(SPELL_PRESERVE, CLASS_CLERIC, CIRCLE_2, 2);
  spell_level(SPELL_CAUSE_SERIOUS, CLASS_CLERIC, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_POISON, CLASS_CLERIC, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_CLERIC, CIRCLE_2, 2);
  spell_level(SPELL_BLESS, CLASS_CLERIC, CIRCLE_2, 2);

  spell_level(SPELL_ENDURANCE, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_CURE_BLIND, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_VIGORIZE_SERIOUS, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_CAUSE_CRITIC, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_POISON, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_PROT_FROM_EVIL, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_CURE_CRITIC, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_REMOVE_POISON, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_CLERIC, CIRCLE_3, 3);

  spell_level(SPELL_VIGORIZE_CRITIC, CLASS_CLERIC, CIRCLE_4, 4);
  spell_level(SPELL_BLINDNESS, CLASS_CLERIC, CIRCLE_4, 4);
  spell_level(SPELL_SUMMON, CLASS_CLERIC, CIRCLE_4, 4);
  spell_level(SPELL_DISPEL_EVIL, CLASS_CLERIC, CIRCLE_4, 4);
  spell_level(SPELL_DISPEL_GOOD, CLASS_CLERIC, CIRCLE_4, 4);
  spell_level(SPELL_SENSE_LIFE, CLASS_CLERIC, CIRCLE_4, 4);
  spell_level(SPELL_FLAMESTRIKE, CLASS_CLERIC, CIRCLE_4, 4);

  spell_level(SPELL_GREATER_ENDURANCE, CLASS_CLERIC, CIRCLE_5, 5);
  spell_level(SPELL_HEAL, CLASS_CLERIC, CIRCLE_5, 5);
  spell_level(SPELL_HARM, CLASS_CLERIC, CIRCLE_5, 5);
  spell_level(SPELL_DESTROY_UNDEAD, CLASS_CLERIC, CIRCLE_5, 5);
  spell_level(SPELL_SOULSHIELD, CLASS_CLERIC, CIRCLE_5, 5);
  spell_level(SPELL_EARTHQUAKE, CLASS_CLERIC, CIRCLE_5, 5);
  spell_level(SPELL_REMOVE_CURSE, CLASS_CLERIC, CIRCLE_5, 5);

  spell_level(SPELL_DARKNESS, CLASS_CLERIC, CIRCLE_6, 6);
  spell_level(SPELL_ILLUMINATION, CLASS_CLERIC, CIRCLE_6, 6);
  spell_level(SPELL_SILENCE, CLASS_CLERIC, CIRCLE_6, 6);
  spell_level(SPELL_UNHOLY_WORD, CLASS_CLERIC, CIRCLE_6, 6);
  spell_level(SPELL_HOLY_WORD, CLASS_CLERIC, CIRCLE_6, 6);

  spell_level(SPELL_VITALITY, CLASS_CLERIC, CIRCLE_7, 7);
  spell_level(SPELL_WATERWALK, CLASS_CLERIC, CIRCLE_7, 7);
  spell_level(SPELL_FULL_HEAL, CLASS_CLERIC, CIRCLE_7, 7);
  spell_level(SPELL_FULL_HARM, CLASS_CLERIC, CIRCLE_7, 7);

  spell_level(SPELL_DISPEL_MAGIC, CLASS_CLERIC, CIRCLE_8, 8);
  spell_level(SPELL_GROUP_HEAL, CLASS_CLERIC, CIRCLE_8, 8);
d1129 1
a1129 1
  spell_level(SPELL_GREATER_VITALITY, CLASS_CLERIC, CIRCLE_9,9);
d1131 1
a1131 1
  spell_level(SPELL_GROUP_ARMOR, CLASS_CLERIC, CIRCLE_10, 10);
d1133 1
a1133 1
  spell_level(SPELL_RESURRECT, CLASS_CLERIC, CIRCLE_11, 11);
d1135 1
a1135 1
  spell_level(SPELL_DRAGONS_HEALTH, CLASS_CLERIC, CIRCLE_12, 12);
d1138 31
a1168 31
  spell_level(SPELL_MAGIC_MISSILE, CLASS_CONJURER, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_MAGIC, CLASS_CONJURER, CIRCLE_1, 1);
  spell_level(SPELL_MINOR_CREATION, CLASS_CONJURER, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_CONJURER, CIRCLE_2, 2);
  spell_level(SPELL_BURNING_HANDS, CLASS_CONJURER, CIRCLE_2, 2);
  spell_level(SPELL_STRENGTH, CLASS_CONJURER, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_INVIS, CLASS_CONJURER, CIRCLE_2, 2);
  spell_level(SPELL_IDENTIFY, CLASS_CONJURER, CIRCLE_3, 3);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_CONJURER, CIRCLE_3, 3);
  spell_level(SPELL_CONCEALMENT, CLASS_CONJURER, CIRCLE_3, 3);
  spell_level(SPELL_SUMMON_ELEMENTAL, CLASS_CONJURER, CIRCLE_3, 3);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_CONJURER, CIRCLE_4, 4);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_CONJURER, CIRCLE_4, 4);
  spell_level(SPELL_WALL_OF_STONE, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_INFRAVISION, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_SLEEP, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_COLOR_SPRAY, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_WALL_OF_FOG, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_CONE_OF_COLD, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_STONE_SKIN, CLASS_CONJURER, CIRCLE_6, 6);
  spell_level(SPELL_DETECT_POISON, CLASS_CONJURER, CIRCLE_6, 6);
  spell_level(SPELL_FIREBALL, CLASS_CONJURER, CIRCLE_6, 6);
  spell_level(SPELL_FLY, CLASS_CONJURER, CIRCLE_6, 6);
  spell_level(SPELL_INVISIBLE, CLASS_CONJURER, CIRCLE_7, 7);
  spell_level(SPELL_HASTE, CLASS_CONJURER, CIRCLE_7, 7);
  spell_level(SPELL_FARSEE, CLASS_CONJURER, CIRCLE_7, 7);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_CONJURER, CIRCLE_7, 7);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_CONJURER, CIRCLE_8, 8);
  spell_level(SPELL_ENCHANT_WEAPON, CLASS_CONJURER, CIRCLE_9, 9);
  spell_level(SPELL_SUMMON_DEMON, CLASS_CONJURER, CIRCLE_10, 10);
  spell_level(SPELL_SUMMON_GREATER_DEMON, CLASS_CONJURER, CIRCLE_11, 11);
d1171 44
a1214 44
  spell_level(SPELL_ICE_DARTS, CLASS_CRYOMANCER, CIRCLE_1, 1);
  spell_level(SPELL_MINOR_CREATION, CLASS_CRYOMANCER, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_MAGIC, CLASS_CRYOMANCER, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_CRYOMANCER, CIRCLE_2, 2);
  spell_level(SPELL_STRENGTH, CLASS_CRYOMANCER, CIRCLE_2, 2);
  spell_level(SPELL_CONCEALMENT, CLASS_CRYOMANCER, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_INVIS, CLASS_CRYOMANCER, CIRCLE_2, 2);
  spell_level(SPELL_ICE_ARMOR, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_EXTINGUISH, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_ICE_DAGGER, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_TELEPORT, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_RAY_OF_ENFEEB, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_LEVITATE, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_COLDSHIELD, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_MINOR_PARALYSIS, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_FREEZING_WIND, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_FARSEE, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_CONE_OF_COLD, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_SLEEP, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_INVISIBLE, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_ICE_STORM, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_HASTE, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_RAIN, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_MINOR_GLOBE, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_STONE_SKIN, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_FREEZE, CLASS_CRYOMANCER, CIRCLE_7, 7);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_CRYOMANCER, CIRCLE_7, 7);
  spell_level(SPELL_WALL_OF_ICE, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_CHAIN_LIGHTNING, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_MAJOR_GLOBE, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_FLY, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_RELOCATE, CLASS_CRYOMANCER, CIRCLE_9, 9);
  spell_level(SPELL_MASS_INVIS, CLASS_CRYOMANCER, CIRCLE_9, 9);
  spell_level(SPELL_ICEBALL, CLASS_CRYOMANCER, CIRCLE_9, 9);
  spell_level(SPELL_VAPORFORM, CLASS_CRYOMANCER, CIRCLE_13, 13);
  spell_level(SPELL_NEGATE_COLD, CLASS_CRYOMANCER, CIRCLE_10, 10);
  spell_level(SPELL_WATERFORM, CLASS_CRYOMANCER, CIRCLE_10, 10);
  spell_level(SPELL_FLOOD, CLASS_CRYOMANCER, CIRCLE_11, 11);
  spell_level(SPELL_ICE_SHARDS, CLASS_CRYOMANCER, CIRCLE_12, 12);
d1217 71
a1287 71
  spell_level(SPELL_DEMONSKIN, CLASS_DIABOLIST, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_MAGIC, CLASS_DIABOLIST, CIRCLE_1, 1);
  spell_level(SPELL_CURE_LIGHT, CLASS_DIABOLIST, CIRCLE_1, 1);
  spell_level(SPELL_CAUSE_LIGHT, CLASS_DIABOLIST, CIRCLE_1, 1);
  spell_level(SPELL_LESSER_ENDURANCE, CLASS_DIABOLIST, CIRCLE_1, 1);

  spell_level(SPELL_CURE_SERIOUS, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_VIGORIZE_LIGHT, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_DARK_PRESENCE, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_DARK_FEAST, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_PRESERVE, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_CAUSE_SERIOUS, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_POISON, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_DIABOLIST, CIRCLE_2, 2);

  spell_level(SPELL_HELL_BOLT, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_VIGORIZE_SERIOUS, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_CAUSE_CRITIC, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_CURE_BLIND, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_CURE_CRITIC, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_POISON, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_REMOVE_POISON, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_ENDURANCE, CLASS_DIABOLIST, CIRCLE_3, 3);

  spell_level(SPELL_VIGORIZE_CRITIC, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_DISEASE, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_DEMONIC_ASPECT, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_ELEMENTAL_WARDING, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_BLINDNESS, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_SUMMON, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_DISPEL_GOOD, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_REMOVE_CURSE, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_SENSE_LIFE, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_DIABOLIST, CIRCLE_4, 4);

  spell_level(SPELL_SOULSHIELD, CLASS_DIABOLIST, CIRCLE_5, 5);
  spell_level(SPELL_EARTHQUAKE, CLASS_DIABOLIST, CIRCLE_5, 5);
  spell_level(SPELL_HEAL, CLASS_DIABOLIST, CIRCLE_5, 5);
  spell_level(SPELL_GREATER_ENDURANCE, CLASS_DIABOLIST, CIRCLE_5, 5);

  spell_level(SPELL_SANE_MIND, CLASS_DIABOLIST, CIRCLE_6, 6);
  spell_level(SPELL_STYGIAN_ERUPTION, CLASS_DIABOLIST, CIRCLE_6, 6);
  spell_level(SPELL_DARKNESS, CLASS_DIABOLIST, CIRCLE_6, 6);
  spell_level(SPELL_SILENCE, CLASS_DIABOLIST, CIRCLE_6, 6);

  spell_level(SPELL_INSANITY, CLASS_DIABOLIST, CIRCLE_7, 7);
  spell_level(SPELL_DEMONIC_MUTATION, CLASS_DIABOLIST, CIRCLE_7, 7);
  spell_level(SPELL_LESSER_INVOCATION, CLASS_DIABOLIST, CIRCLE_7, 7);
  spell_level(SPELL_WATERWALK, CLASS_DIABOLIST, CIRCLE_7, 7);
  spell_level(SPELL_FULL_HEAL, CLASS_DIABOLIST, CIRCLE_7, 7);

  spell_level(SPELL_HELLFIRE_BRIMSTONE, CLASS_DIABOLIST, CIRCLE_8, 8);
  spell_level(SPELL_SPEAK_IN_TONGUES, CLASS_DIABOLIST, CIRCLE_8, 8);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_DIABOLIST, CIRCLE_8, 8);
  spell_level(SPELL_GROUP_HEAL, CLASS_DIABOLIST, CIRCLE_8, 8);

  spell_level(SPELL_GREATER_INVOCATION, CLASS_DIABOLIST, CIRCLE_9, 9);
  spell_level(SPELL_WINGS_OF_HELL, CLASS_DIABOLIST, CIRCLE_9, 9);
  spell_level(SPELL_BANISH, CLASS_DIABOLIST, CIRCLE_9, 9);
  spell_level(SPELL_UNHOLY_WORD, CLASS_DIABOLIST, CIRCLE_9, 9);

  spell_level(SPELL_WORD_OF_COMMAND, CLASS_DIABOLIST, CIRCLE_10, 10);
  spell_level(SPELL_FULL_HARM, CLASS_DIABOLIST, CIRCLE_10, 10);

  spell_level(SPELL_RESURRECT, CLASS_DIABOLIST, CIRCLE_11, 11);
  spell_level(SPELL_HELLS_GATE, CLASS_DIABOLIST, CIRCLE_11, 11);

  spell_level(SKILL_DODGE, CLASS_DIABOLIST, 20, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_DIABOLIST, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_DIABOLIST, 1, 1);
d1290 57
a1346 58
  spell_level(SKILL_SHAPECHANGE, CLASS_DRUID, 1, 2);
  spell_level(SKILL_TAME, CLASS_DRUID, 1, 2);
  spell_level(SKILL_DODGE, CLASS_DRUID, 20, 2);

  spell_level(SPELL_DETECT_MAGIC, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_VIGORIZE_LIGHT, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_BARKSKIN, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_FOOD, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_WATER, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_LESSER_ENDURANCE, CLASS_DRUID, CIRCLE_1, 1);

  spell_level(SPELL_VIGORIZE_SERIOUS, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_NIGHT_VISION, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_CURE_LIGHT, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_POISON, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_DRUID, CIRCLE_2, 2);

  spell_level(SPELL_VIGORIZE_CRITIC, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_CURE_SERIOUS, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_WRITHING_WEEDS, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_POISON, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_REMOVE_POISON, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_ENDURANCE, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_MOONBEAM, CLASS_DRUID, CIRCLE_3, 3);

  spell_level(SPELL_CURE_CRITIC, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_SUMMON, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_CREATE_SPRING, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_CURE_BLIND, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_EARTHQUAKE, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_DRUID, CIRCLE_4, 4);

  spell_level(SPELL_CONTROL_WEATHER, CLASS_DRUID, CIRCLE_5, 5);
  spell_level(SPELL_HARM, CLASS_DRUID, CIRCLE_5, 5);
  spell_level(SPELL_REMOVE_CURSE, CLASS_DRUID, CIRCLE_5, 5);
  spell_level(SPELL_NOURISHMENT, CLASS_DRUID, CIRCLE_5, 5);

  spell_level(SPELL_GREATER_ENDURANCE, CLASS_DRUID, CIRCLE_6, 6);
  spell_level(SPELL_HEAL, CLASS_DRUID, CIRCLE_6, 6);
  spell_level(SPELL_WATERWALK, CLASS_DRUID, CIRCLE_6, 6);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_DRUID, CIRCLE_6, 6);
  spell_level(SPELL_DARKNESS, CLASS_DRUID, CIRCLE_6, 6);

  spell_level(SPELL_ILLUMINATION, CLASS_DRUID, CIRCLE_7, 7);
  spell_level(SPELL_GAIAS_CLOAK, CLASS_DRUID, CIRCLE_7, 7);
  spell_level(SPELL_CALL_LIGHTNING, CLASS_DRUID, CIRCLE_7, 7);

  spell_level(SPELL_NATURES_EMBRACE, CLASS_DRUID, CIRCLE_8, 8);
  spell_level(SPELL_ENTANGLE, CLASS_DRUID, CIRCLE_8, 8);
  spell_level(SPELL_URBAN_RENEWAL, CLASS_DRUID, CIRCLE_8, 8);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_DRUID, CIRCLE_8, 8);

  spell_level(SPELL_SUNRAY, CLASS_DRUID, CIRCLE_9, 9);
  spell_level(SPELL_ARMOR_OF_GAIA, CLASS_DRUID, CIRCLE_9, 9);
  spell_level(SPELL_INVIGORATE, CLASS_DRUID, CIRCLE_9, 9);

  spell_level(SPELL_WANDERING_WOODS, CLASS_DRUID, CIRCLE_10, 10);
  spell_level(SPELL_MOONWELL, CLASS_DRUID, CIRCLE_10, 10);
d1348 2
a1349 1
  spell_level(SPELL_CREEPING_DOOM, CLASS_DRUID, CIRCLE_11, 11);
d1351 1
a1351 2
  spell_level(SKILL_BLUDGEONING, CLASS_DRUID, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_DRUID, 1, 1);
d1354 19
a1372 19
  spell_level(SKILL_GUARD, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_KICK, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_TAME, CLASS_HUNTER, 7, 2);
  spell_level(SKILL_TRACK, CLASS_HUNTER, 36, 2);
  spell_level(SKILL_BASH, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_DODGE, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_PARRY, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_HUNT, CLASS_HUNTER, 41, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_HUNTER, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_HUNTER, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_HUNTER, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_HUNTER, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_HUNTER, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_HUNTER, 1, 1);
d1375 3
a1377 3
  spell_level(SKILL_CONCEAL, CLASS_ILLUSIONIST, 10, 1);
  spell_level(SKILL_HIDE, CLASS_ILLUSIONIST, 20, 1);
  spell_level(SKILL_BACKSTAB, CLASS_ILLUSIONIST, 13, 1);
d1379 3
a1381 3
  spell_level(SPELL_MAGIC_MISSILE, CLASS_ILLUSIONIST, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_MAGIC, CLASS_ILLUSIONIST, CIRCLE_1, 1);
  spell_level(SPELL_VENTRILOQUATE, CLASS_ILLUSIONIST, CIRCLE_1, 1);
d1383 4
a1386 4
  spell_level(SPELL_CHILL_TOUCH, CLASS_ILLUSIONIST, CIRCLE_2, 2);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_ILLUSIONIST, CIRCLE_2, 2);
  spell_level(SPELL_MAGIC_TORCH, CLASS_ILLUSIONIST, CIRCLE_2, 2);
  spell_level(SPELL_PHANTASM, CLASS_ILLUSIONIST, CIRCLE_2, 2);
d1388 1
a1388 1
  spell_level(SPELL_BLINDNESS, CLASS_ILLUSIONIST, CIRCLE_4, 4);
d1390 5
a1394 5
  spell_level(SPELL_COLOR_SPRAY, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_INFRAVISION, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_SANE_MIND, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_SIMULACRUM, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_SLEEP, CLASS_ILLUSIONIST, CIRCLE_5, 5);
d1396 2
a1397 2
  spell_level(SPELL_DETECT_INVIS, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_ILLUSIONIST, CIRCLE_6, 6);
d1399 1
a1399 1
  spell_level(SPELL_ILLUMINATION, CLASS_ILLUSIONIST, CIRCLE_6, 6);
d1401 3
a1403 5
  spell_level(SPELL_FARSEE, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_INSANITY, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_INVISIBLE, CLASS_ILLUSIONIST, CIRCLE_7, 7);

  spell_level(SPELL_CHARM, CLASS_ILLUSIONIST, CIRCLE_12, 12);
d1405 1
d1408 22
a1429 22
  spell_level(SKILL_RETREAT, CLASS_MERCENARY, 40, 2);
  spell_level(SKILL_GROUP_RETREAT, CLASS_MERCENARY, 80, 2);
  spell_level(SKILL_DISARM, CLASS_MERCENARY, 20, 2);
  spell_level(SKILL_GUARD, CLASS_MERCENARY, 10, 2);
  spell_level(SKILL_SWITCH, CLASS_MERCENARY, 40, 2);
  spell_level(SKILL_BACKSTAB, CLASS_MERCENARY, 11, 2);
  spell_level(SKILL_BIND, CLASS_MERCENARY, 16, 2);
  spell_level(SKILL_HIDE, CLASS_MERCENARY, 20, 2);
  spell_level(SKILL_TRACK, CLASS_MERCENARY, 30, 2);
  spell_level(SKILL_KICK, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_BASH, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_MERCENARY, 15, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_MERCENARY, 70, 2);
  spell_level(SKILL_DODGE, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_PARRY, CLASS_MERCENARY, 40, 2);
  spell_level(SKILL_RIPOST, CLASS_MERCENARY, 60, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_MERCENARY, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_MERCENARY, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_MERCENARY, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_MERCENARY, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_MERCENARY, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_MERCENARY, 1, 1);
d1432 24
a1455 24
  spell_level(SKILL_CORNER, CLASS_MONK, 80, 2);
  spell_level(SKILL_SPRINGLEAP, CLASS_MONK, 50, 2);
  spell_level(SKILL_CHANT, CLASS_MONK, 1, 2);
  spell_level(SKILL_SAFEFALL, CLASS_MONK, 1, 2);
  spell_level(SKILL_BAREHAND, CLASS_MONK, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_MONK, 40, 2);
  spell_level(SKILL_KICK, CLASS_MONK, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_MONK, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_MONK, 30, 2);
  spell_level(SKILL_DODGE, CLASS_MONK, 1, 2);
  spell_level(SKILL_PARRY, CLASS_MONK, 10, 2);
  spell_level(SKILL_RIPOST, CLASS_MONK, 20, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_MONK, 1, 1);

  spell_level(CHANT_REGENERATION, CLASS_MONK, 15, 2);
  spell_level(CHANT_BATTLE_HYMN, CLASS_MONK, 30, 4);
  spell_level(CHANT_WAR_CRY, CLASS_MONK, 90, 12);
  spell_level(CHANT_PEACE, CLASS_MONK, 70, 10);
  spell_level(CHANT_SHADOWS_SORROW_SONG, CLASS_MONK, 30, 4);
  spell_level(CHANT_IVORY_SYMPHONY, CLASS_MONK, 45, 6);
  spell_level(CHANT_ARIA_OF_DISSONANCE, CLASS_MONK, 60, 8);
  spell_level(CHANT_SONATA_OF_MALAISE, CLASS_MONK, 60, 8);
  spell_level(CHANT_APOCALYPTIC_ANTHEM, CLASS_MONK, 75, 10);
  spell_level(CHANT_SEED_OF_DESTRUCTION, CLASS_MONK, 99, 13);
d1458 34
a1491 34
  spell_level(SKILL_BLUDGEONING, CLASS_MYSTIC, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_MYSTIC, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_MYSTIC, 1, 1);

  spell_level(SPELL_CURE_LIGHT, CLASS_MYSTIC, CIRCLE_1, 1);
  spell_level(SPELL_ARMOR, CLASS_MYSTIC, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_FOOD, CLASS_MYSTIC, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_WATER, CLASS_MYSTIC, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_POISON, CLASS_MYSTIC, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_MYSTIC, CIRCLE_2, 2);
  spell_level(SPELL_CURE_BLIND, CLASS_MYSTIC, CIRCLE_2, 2);
  spell_level(SPELL_BLESS, CLASS_MYSTIC, CIRCLE_1, 1);
  spell_level(SPELL_BLINDNESS, CLASS_MYSTIC, CIRCLE_4, 4);
  spell_level(SPELL_INFRAVISION, CLASS_MYSTIC, CIRCLE_9, 9);
  spell_level(SPELL_PROT_FROM_EVIL, CLASS_MYSTIC, CIRCLE_3, 3);
  spell_level(SPELL_GROUP_ARMOR, CLASS_MYSTIC, CIRCLE_10, 10);
  spell_level(SPELL_CURE_CRITIC, CLASS_MYSTIC, CIRCLE_2, 2);
  spell_level(SPELL_SUMMON, CLASS_MYSTIC, CIRCLE_3, 3);
  spell_level(SPELL_REMOVE_POISON, CLASS_MYSTIC, CIRCLE_3, 3);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_MYSTIC, CIRCLE_6, 6);
  spell_level(SPELL_EARTHQUAKE, CLASS_MYSTIC, CIRCLE_5, 5);
  spell_level(SPELL_DISPEL_EVIL, CLASS_MYSTIC, CIRCLE_4, 4);
  spell_level(SPELL_DISPEL_GOOD, CLASS_MYSTIC, CIRCLE_4, 4);
  spell_level(SPELL_HEAL, CLASS_MYSTIC, CIRCLE_5, 5);
  spell_level(SPELL_HARM, CLASS_MYSTIC, CIRCLE_5, 5);
  spell_level(SPELL_GROUP_HEAL, CLASS_MYSTIC, CIRCLE_8, 8);
  spell_level(SPELL_REMOVE_CURSE, CLASS_MYSTIC, CIRCLE_5, 5);
  spell_level(SPELL_SENSE_LIFE, CLASS_MYSTIC, CIRCLE_4, 4);
  spell_level(SPELL_FULL_HEAL, CLASS_MYSTIC, CIRCLE_7, 7);
  spell_level(SPELL_FULL_HARM, CLASS_MYSTIC, CIRCLE_9, 9);
  spell_level(SPELL_VITALITY, CLASS_MYSTIC, CIRCLE_5, 5);
  spell_level(SKILL_DODGE, CLASS_MYSTIC, 1, 2);
  spell_level(SPELL_DARKNESS, CLASS_MYSTIC, CIRCLE_6, 6);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_MYSTIC, CIRCLE_5, 5);
d1494 33
a1526 33
  spell_level(SPELL_MAGIC_MISSILE, CLASS_NECROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_MINOR_CREATION, CLASS_NECROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_MAGIC, CLASS_NECROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_NECROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_BURNING_HANDS, CLASS_NECROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_INVIS, CLASS_NECROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_CONCEALMENT, CLASS_NECROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_PRESERVE, CLASS_NECROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_POISON, CLASS_NECROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_STRENGTH, CLASS_NECROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_NECROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_ANIMATE_DEAD, CLASS_NECROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_NECROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_COLDSHIELD, CLASS_NECROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_BONE_ARMOR, CLASS_NECROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_INFRAVISION, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_IDENTIFY, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_SLEEP, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_ENERGY_DRAIN, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_CONE_OF_COLD, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_SUMMON_CORPSE, CLASS_NECROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_DETECT_POISON, CLASS_NECROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_INVISIBLE, CLASS_NECROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_HASTE, CLASS_NECROMANCER, CIRCLE_7, 7);
  spell_level(SPELL_FARSEE, CLASS_NECROMANCER, CIRCLE_7, 7);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_NECROMANCER, CIRCLE_7, 7);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_NECROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_STONE_SKIN, CLASS_NECROMANCER, CIRCLE_12, 12);
  spell_level(SPELL_SHIFT_CORPSE, CLASS_NECROMANCER, CIRCLE_13, 13);
  spell_level(SPELL_SOUL_TAP, CLASS_NECROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_REBUKE_UNDEAD, CLASS_NECROMANCER, CIRCLE_10, 10);
  spell_level(SPELL_DEGENERATION, CLASS_NECROMANCER, CIRCLE_11, 11);
d1529 37
a1565 36
  spell_level(SKILL_RETREAT, CLASS_PALADIN, 60, 2);
  spell_level(SKILL_GUARD, CLASS_PALADIN, 10, 2);
  spell_level(SKILL_SWITCH, CLASS_PALADIN, 10, 2);
  spell_level(SKILL_KICK, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_PALADIN, 10, 2);
  spell_level(SKILL_BASH, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_PALADIN, 20, 2);
  spell_level(SKILL_TAME, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_PALADIN, 70, 2);
  spell_level(SKILL_DODGE, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_PARRY, CLASS_PALADIN, 20, 2);
  spell_level(SKILL_RIPOST, CLASS_PALADIN, 40, 2);
  spell_level(SKILL_HITALL, CLASS_PALADIN, 80, 2);
  spell_level(SKILL_DISARM, CLASS_PALADIN, 50, 2);
  spell_level(SKILL_SUMMON_MOUNT, CLASS_PALADIN, 15, 2);
  spell_level(SPELL_CURE_LIGHT, CLASS_PALADIN, CIRCLE_1, 1);
  spell_level(SPELL_BLESS, CLASS_PALADIN, CIRCLE_1, 1);
  spell_level(SPELL_ARMOR, CLASS_PALADIN, CIRCLE_2, 2);
  spell_level(SPELL_CREATE_FOOD, CLASS_PALADIN, CIRCLE_3, 3);
  spell_level(SPELL_CREATE_WATER, CLASS_PALADIN, CIRCLE_3, 3);
  spell_level(SPELL_PROT_FROM_EVIL, CLASS_PALADIN, CIRCLE_4, 4);
  spell_level(SPELL_CURE_SERIOUS, CLASS_PALADIN, CIRCLE_4, 4);
  spell_level(SPELL_DETECT_POISON, CLASS_PALADIN, CIRCLE_5, 5);
  spell_level(SPELL_DISPEL_EVIL, CLASS_PALADIN, CIRCLE_5, 5);
  spell_level(SPELL_CURE_BLIND, CLASS_PALADIN, CIRCLE_6, 6);
  spell_level(SPELL_CURE_CRITIC, CLASS_PALADIN, CIRCLE_6, 6);
  spell_level(SPELL_REMOVE_POISON, CLASS_PALADIN, CIRCLE_7, 7);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_PALADIN, CIRCLE_7, 7);
  spell_level(SPELL_SOULSHIELD, CLASS_PALADIN, CIRCLE_8, 8);
  spell_level(SPELL_HEAL, CLASS_PALADIN, CIRCLE_9, 9);
  spell_level(SPELL_HOLY_WORD, CLASS_PALADIN, CIRCLE_10, 10);
  spell_level(SKILL_BLUDGEONING, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_PALADIN, 1, 1);
d1568 73
a1640 73
  spell_level(SKILL_DODGE, CLASS_PRIEST, 20, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_PRIEST, 1, 1);

  spell_level(SPELL_DETECT_MAGIC, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_CURE_LIGHT, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_ARMOR, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_FOOD, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_CAUSE_LIGHT, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_WATER, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_LESSER_ENDURANCE, CLASS_PRIEST, CIRCLE_1,1);

  spell_level(SPELL_DETECT_POISON, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_CURE_SERIOUS, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_VIGORIZE_LIGHT, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_CIRCLE_OF_LIGHT, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_PRESERVE, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_CAUSE_SERIOUS, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_BLESS, CLASS_PRIEST, CIRCLE_2, 2);

  spell_level(SPELL_DIVINE_BOLT, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_VIGORIZE_SERIOUS, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_CAUSE_CRITIC, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_CURE_BLIND, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_PROT_FROM_EVIL, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_CURE_CRITIC, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_REMOVE_POISON, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_ENDURANCE, CLASS_PRIEST, CIRCLE_3, 3);

  spell_level(SPELL_VIGORIZE_CRITIC, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_ELEMENTAL_WARDING, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_BLINDNESS, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_SUMMON, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_DISPEL_EVIL, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_REMOVE_CURSE, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_SENSE_LIFE, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_PRIEST, CIRCLE_4, 4);

  spell_level(SPELL_PRAYER, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_SOULSHIELD, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_DESTROY_UNDEAD, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_EARTHQUAKE, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_HEAL, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_SANE_MIND, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_GREATER_ENDURANCE, CLASS_PRIEST, CIRCLE_5, 5);

  spell_level(SPELL_LESSER_EXORCISM, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_DIVINE_RAY, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_ILLUMINATION, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_SILENCE, CLASS_PRIEST, CIRCLE_6, 6);

  spell_level(SPELL_VITALITY, CLASS_PRIEST, CIRCLE_7, 7);
  spell_level(SPELL_LESSER_INVOCATION, CLASS_PRIEST, CIRCLE_7, 7);
  spell_level(SPELL_WATERWALK, CLASS_PRIEST, CIRCLE_7, 7);
  spell_level(SPELL_FULL_HEAL, CLASS_PRIEST, CIRCLE_7, 7);

  spell_level(SPELL_SPEAK_IN_TONGUES, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_ENLIGHTENMENT, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_GROUP_ARMOR, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_GROUP_HEAL, CLASS_PRIEST, CIRCLE_8, 8);

  spell_level(SPELL_GREATER_VITALITY, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_EXORCISM, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_GREATER_INVOCATION, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_WINGS_OF_HEAVEN, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_BANISH, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_HOLY_WORD, CLASS_PRIEST, CIRCLE_9, 9);

  spell_level(SPELL_WORD_OF_COMMAND, CLASS_PRIEST, CIRCLE_10, 10);
  spell_level(SPELL_FULL_HARM, CLASS_PRIEST, CIRCLE_10, 10);
  spell_level(SPELL_DIVINE_ESSENCE, CLASS_PRIEST, CIRCLE_10, 10);
d1642 2
a1643 2
  spell_level(SPELL_HEAVENS_GATE, CLASS_PRIEST, CIRCLE_11, 11);
  spell_level(SPELL_RESURRECT, CLASS_PRIEST, CIRCLE_11, 11);
d1645 1
a1645 1
  spell_level(SPELL_DRAGONS_HEALTH, CLASS_PRIEST, CIRCLE_12, 12);
d1648 42
a1689 42
  spell_level(SPELL_MINOR_CREATION, CLASS_PYROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_MAGIC, CLASS_PYROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_BURNING_HANDS, CLASS_PYROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_FIRE_DARTS, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_MAGIC_TORCH, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_STRENGTH, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_CONCEALMENT, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_INVIS, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_SMOKE, CLASS_PYROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_PYROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_PYROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_MIRAGE, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_FLAME_BLADE, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_TELEPORT, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_RAY_OF_ENFEEB, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_LEVITATE, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_INFRAVISION, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_FIREBALL, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_FIRESHIELD, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_HEATWAVE, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_FARSEE, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_SLEEP, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_MINOR_PARALYSIS, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_INVISIBLE, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_FIRESTORM, CLASS_PYROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_MINOR_GLOBE, CLASS_PYROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_HASTE, CLASS_PYROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_STONE_SKIN, CLASS_PYROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_MELT, CLASS_PYROMANCER, CIRCLE_7, 7);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_PYROMANCER, CIRCLE_7, 7);
  spell_level(SPELL_COMBUST, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_MAJOR_GLOBE, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_FLY, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_RELOCATE, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_CIRCLE_OF_FIRE, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_IMMOLATE, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_MASS_INVIS, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_CREMATE, CLASS_PYROMANCER, CIRCLE_10, 10);
  spell_level(SPELL_NEGATE_HEAT, CLASS_PYROMANCER, CIRCLE_10, 10);
  spell_level(SPELL_METEORSWARM, CLASS_PYROMANCER, CIRCLE_11, 11);
  spell_level(SPELL_SUPERNOVA, CLASS_PYROMANCER, CIRCLE_12, 12);
d1692 31
a1722 31
  spell_level(SKILL_KICK, CLASS_RANGER, 1, 2);
  spell_level(SKILL_TRACK, CLASS_RANGER, 1, 2);
  spell_level(SKILL_BASH, CLASS_RANGER, 1, 2);
  spell_level(SKILL_TAME, CLASS_RANGER, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_RANGER, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_RANGER, 60, 2);
  spell_level(SKILL_DODGE, CLASS_RANGER, 10, 2);
  spell_level(SKILL_RESCUE, CLASS_RANGER, 35, 2);
  spell_level(SKILL_PARRY, CLASS_RANGER, 30, 2);
  spell_level(SKILL_RIPOST, CLASS_RANGER, 40, 2);
  spell_level(SKILL_SWITCH, CLASS_RANGER, 10, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_RANGER, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_RANGER, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_RANGER, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_RANGER, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_RANGER, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_RANGER, 1, 1);

  spell_level(SPELL_DETECT_ALIGN, CLASS_RANGER, CIRCLE_1, 1);
  spell_level(SPELL_MAGIC_MISSILE, CLASS_RANGER, CIRCLE_1, 1);
  spell_level(SPELL_CURE_LIGHT, CLASS_RANGER, CIRCLE_2, 2);
  spell_level(SPELL_CHILL_TOUCH, CLASS_RANGER, CIRCLE_3, 3);
  spell_level(SPELL_BARKSKIN, CLASS_RANGER, CIRCLE_3, 3);
  spell_level(SPELL_CURE_SERIOUS, CLASS_RANGER, CIRCLE_4, 4);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_RANGER, CIRCLE_5, 5);
  spell_level(SPELL_CURE_CRITIC, CLASS_RANGER, CIRCLE_6, 6);
  spell_level(SPELL_SENSE_LIFE, CLASS_RANGER, CIRCLE_7, 7);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_RANGER, CIRCLE_7, 7);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_RANGER, CIRCLE_8, 8);
  spell_level(SPELL_NATURES_GUIDANCE, CLASS_RANGER, CIRCLE_9, 9);
  spell_level(SPELL_BLUR, CLASS_RANGER, CIRCLE_11, 11);
d1725 17
a1741 18
  spell_level(SKILL_PIERCING, CLASS_ROGUE, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_ROGUE, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_ROGUE, 1, 1);

  spell_level(SKILL_SNEAK, CLASS_ROGUE, 10, 2);
  spell_level(SKILL_PICK_LOCK, CLASS_ROGUE, 6, 2);
  spell_level(SKILL_BACKSTAB, CLASS_ROGUE, 10, 2);
  spell_level(SKILL_HIDE, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_TRACK, CLASS_ROGUE, 30, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_ROGUE, 70, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_ROGUE, 15, 2);
  spell_level(SKILL_DODGE, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_PARRY, CLASS_ROGUE, 40, 2);
  spell_level(SKILL_EYE_GOUGE, CLASS_ROGUE, 15, 2);
  spell_level(SKILL_STEALTH, CLASS_ROGUE, 50, 2);
  spell_level(SKILL_CORNER, CLASS_ROGUE, 60, 2);
  spell_level(SKILL_SHADOW, CLASS_ROGUE, 60, 2);
  spell_level(SKILL_CONCEAL, CLASS_ROGUE, 25, 2);
d1744 35
a1778 35
  spell_level(SKILL_BLUDGEONING, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_SHAMAN, 1, 1);

  spell_level(SPELL_CURE_LIGHT, CLASS_SHAMAN, CIRCLE_1, 1);
  spell_level(SPELL_ARMOR, CLASS_SHAMAN, CIRCLE_2, 2);
  spell_level(SPELL_CREATE_FOOD, CLASS_SHAMAN, CIRCLE_1, 1);
  spell_level(SKILL_TAME, CLASS_SHAMAN, 7, 2);
  spell_level(SPELL_CREATE_WATER, CLASS_SHAMAN, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_POISON, CLASS_SHAMAN, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_ALIGN, CLASS_SHAMAN, CIRCLE_2, 2);
  spell_level(SPELL_CURE_BLIND, CLASS_SHAMAN, CIRCLE_4, 4);
  spell_level(SPELL_BLESS, CLASS_SHAMAN, CIRCLE_2, 2);
  spell_level(SPELL_BLINDNESS, CLASS_SHAMAN, CIRCLE_6, 6);
  spell_level(SPELL_PROT_FROM_EVIL, CLASS_SHAMAN, 16, 2);
  spell_level(SPELL_CURE_CRITIC, CLASS_SHAMAN, CIRCLE_3, 3);
  spell_level(SPELL_SUMMON, CLASS_SHAMAN, CIRCLE_5, 5);
  spell_level(SPELL_REMOVE_POISON, CLASS_SHAMAN, CIRCLE_3, 3);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_SHAMAN, CIRCLE_6, 6);
  spell_level(SPELL_EARTHQUAKE, CLASS_SHAMAN, CIRCLE_6, 6);
  spell_level(SPELL_DISPEL_EVIL, CLASS_SHAMAN, CIRCLE_4, 4);
  spell_level(SPELL_DISPEL_GOOD, CLASS_SHAMAN, CIRCLE_4, 4);
  spell_level(SPELL_HEAL, CLASS_SHAMAN, CIRCLE_6, 6);
  spell_level(SPELL_HARM, CLASS_SHAMAN, CIRCLE_5, 5);
  spell_level(SPELL_GROUP_HEAL, CLASS_SHAMAN, CIRCLE_10, 10);
  spell_level(SPELL_REMOVE_CURSE, CLASS_SHAMAN, CIRCLE_5, 5);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_SHAMAN, CIRCLE_7, 7);
  spell_level(SPELL_FIREBALL, CLASS_SHAMAN, CIRCLE_8, 8);
  spell_level(SPELL_DETECT_INVIS, CLASS_SHAMAN, CIRCLE_7, 7);
  spell_level(SPELL_HASTE, CLASS_SHAMAN, CIRCLE_7, 7);
  spell_level(SPELL_VITALITY, CLASS_SHAMAN, CIRCLE_6, 6);
  spell_level(SKILL_DODGE, CLASS_SHAMAN, 1, 2);
  spell_level(SPELL_DARKNESS, CLASS_SHAMAN, CIRCLE_6, 6);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_SHAMAN, CIRCLE_5, 5);
d1781 54
a1834 54
  spell_level(SPELL_BURNING_HANDS, CLASS_SORCERER, CIRCLE_1, 1);
  spell_level(SPELL_MINOR_CREATION, CLASS_SORCERER, CIRCLE_1, 1);
  spell_level(SPELL_MAGIC_MISSILE, CLASS_SORCERER, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_MAGIC, CLASS_SORCERER, CIRCLE_1, 1);
  spell_level(SPELL_CONCEALMENT, CLASS_SORCERER, CIRCLE_1, 1);

  spell_level(SPELL_CHILL_TOUCH, CLASS_SORCERER, CIRCLE_2, 2);
  spell_level(SPELL_STRENGTH, CLASS_SORCERER, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_INVIS, CLASS_SORCERER, CIRCLE_2, 2);

  spell_level(SPELL_IDENTIFY, CLASS_SORCERER, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_SORCERER, CIRCLE_3, 3);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_SORCERER, CIRCLE_3, 3);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_SORCERER, CIRCLE_3, 3);

  spell_level(SPELL_TELEPORT, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_MINOR_PARALYSIS, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_RAY_OF_ENFEEB, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_LEVITATE, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_INFRAVISION, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_MINOR_GLOBE, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_COLDSHIELD, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_FIRESHIELD, CLASS_SORCERER, CIRCLE_4, 4);

  spell_level(SPELL_FARSEE, CLASS_SORCERER, CIRCLE_5, 5);
  spell_level(SPELL_COLOR_SPRAY, CLASS_SORCERER, CIRCLE_5, 5);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_SORCERER, CIRCLE_5, 5);
  spell_level(SPELL_CONE_OF_COLD, CLASS_SORCERER, CIRCLE_5, 5);
  spell_level(SPELL_SLEEP, CLASS_SORCERER, CIRCLE_5, 5);
  spell_level(SPELL_INVISIBLE, CLASS_SORCERER, CIRCLE_5, 5);

  spell_level(SPELL_FIREBALL, CLASS_SORCERER, CIRCLE_6, 6);
  spell_level(SPELL_HASTE, CLASS_SORCERER, CIRCLE_6, 6);
  spell_level(SPELL_ICE_STORM, CLASS_SORCERER, CIRCLE_6, 6);
  spell_level(SPELL_FLY, CLASS_SORCERER, CIRCLE_6, 6);
  spell_level(SPELL_STONE_SKIN, CLASS_SORCERER, CIRCLE_6, 6);

  spell_level(SPELL_COMPREHEND_LANG, CLASS_SORCERER, CIRCLE_7, 7);
  spell_level(SPELL_BIGBYS_CLENCHED_FIST, CLASS_SORCERER, CIRCLE_7, 7);

  spell_level(SPELL_CHAIN_LIGHTNING, CLASS_SORCERER, CIRCLE_8, 8);
  spell_level(SPELL_HARNESS, CLASS_SORCERER, CIRCLE_8, 8);
  spell_level(SPELL_MAJOR_GLOBE, CLASS_SORCERER, CIRCLE_8, 8);

  spell_level(SPELL_RELOCATE, CLASS_SORCERER, CIRCLE_9, 9);
  spell_level(SPELL_MASS_INVIS, CLASS_SORCERER, CIRCLE_9, 9);
  spell_level(SPELL_DISINTEGRATE, CLASS_SORCERER, CIRCLE_9, 9);

  spell_level(SPELL_METEORSWARM, CLASS_SORCERER, CIRCLE_10, 10);

  spell_level(SPELL_REDUCE, CLASS_SORCERER, CIRCLE_11, 11);
  spell_level(SPELL_ENLARGE, CLASS_SORCERER, CIRCLE_11, 11);
  spell_level(SPELL_WIZARD_EYE, CLASS_SORCERER, CIRCLE_11, 11);
d1836 1
a1836 1
  spell_level(SPELL_CHARM, CLASS_SORCERER, CIRCLE_12, 12);
d1839 15
a1853 15
  spell_level(SKILL_SNEAK, CLASS_THIEF, 1, 2);
  spell_level(SKILL_PICK_LOCK, CLASS_THIEF, 6, 2);
  spell_level(SKILL_BACKSTAB, CLASS_THIEF, 1, 2);
  spell_level(SKILL_STEAL, CLASS_THIEF, 6, 2);
  spell_level(SKILL_HIDE, CLASS_THIEF, 1, 2);
  spell_level(SKILL_TRACK, CLASS_THIEF, 40, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_THIEF, 75, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_THIEF, 15, 2);
  spell_level(SKILL_DODGE, CLASS_THIEF, 1, 2);
  spell_level(SKILL_PARRY, CLASS_THIEF, 30, 2);
  spell_level(SKILL_CONCEAL, CLASS_THIEF, 10, 2);
  spell_level(SKILL_STEALTH, CLASS_THIEF, 50, 2);
  spell_level(SKILL_PIERCING, CLASS_THIEF, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_THIEF, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_THIEF, 1, 1);
d1856 19
a1874 19
  spell_level(SKILL_RETREAT, CLASS_WARRIOR, 60, 2);
  spell_level(SKILL_DISARM, CLASS_WARRIOR, 20, 2);
  spell_level(SKILL_GUARD, CLASS_WARRIOR, 25, 2);
  spell_level(SKILL_SWITCH, CLASS_WARRIOR, 10, 2);
  spell_level(SKILL_HITALL, CLASS_WARRIOR, 50, 2);
  spell_level(SKILL_KICK, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_WARRIOR, 15, 2);
  spell_level(SKILL_BASH, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_WARRIOR, 25, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_WARRIOR, 35, 2);
  spell_level(SKILL_DODGE, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_PARRY, CLASS_WARRIOR, 30, 2);
  spell_level(SKILL_RIPOST, CLASS_WARRIOR, 40, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_WARRIOR, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_WARRIOR, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_WARRIOR, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_WARRIOR, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_WARRIOR, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_WARRIOR, 1, 1);
d1929 3
@


1.134
log
@A few spell_level calls for illusionist were causing boot-time
error messages.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.133 2008/01/29 21:02:31 myc Exp myc $
d36 1
d2219 4
@


1.133
log
@Removing a lot of extern declarations from code files and moving
them to header files, mostly db.h and constants.h.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.132 2008/01/27 21:09:12 myc Exp myc $
d1663 3
a1665 3
  spell_level(SKILL_CONCEAL, CLASS_ILLUSIONIST, 10, 0);
  spell_level(SKILL_HIDE, CLASS_ILLUSIONIST, 20, 0);
  spell_level(SKILL_BACKSTAB, CLASS_ILLUSIONIST, 13, 0);
d2218 4
@


1.132
log
@Giving berserkers meditate skill
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.131 2008/01/27 12:10:29 jps Exp myc $
a765 1
   extern struct wis_app_type wis_app[];
d2218 3
@


1.131
log
@Added regen and exp-cost factors.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.130 2008/01/27 11:16:43 jps Exp jps $
d1354 1
d2219 3
@


1.130
log
@Handle newbie eq assignment here.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.129 2008/01/27 09:44:12 jps Exp jps $
d93 1
a93 1
 *   hp_lev, thac0, nowear_flag
d110 1
a110 1
      5, 6, ITEM_ANTI_SORCERER,
d121 1
a121 1
      8, 4, ITEM_ANTI_CLERIC,
d132 1
a132 1
      8, 1, ITEM_ANTI_ROGUE,
d143 1
a143 1
      12, -5, ITEM_ANTI_WARRIOR,
d154 1
a154 1
      10, -4, ITEM_ANTI_PALADIN,
d165 1
a165 1
      10, -4, ITEM_ANTI_ANTI_PALADIN,
d176 1
a176 1
      10, -4, ITEM_ANTI_RANGER,
d187 1
a187 1
      8, 5, ITEM_ANTI_DRUID,
d198 1
a198 1
      8, 6, ITEM_ANTI_SHAMAN,
d209 1
a209 1
      8, 2, ITEM_ANTI_ASSASSIN,
d220 1
a220 1
      11, 2, ITEM_ANTI_MERCENARY,
d231 1
a231 1
      5, 7, ITEM_ANTI_NECROMANCER,
d242 1
a242 1
      5, 7, ITEM_ANTI_CONJURER,
d253 1
a253 1
      10, -4, 0,
d264 1
a264 1
      12, -4, 0,
d275 1
a275 1
      8, 5, ITEM_ANTI_CLERIC,
d286 1
a286 1
      8, 5, ITEM_ANTI_CLERIC,
d297 1
a297 1
      8, 7, ITEM_ANTI_CLERIC,
d308 1
a308 1
      8, 2, ITEM_ANTI_ROGUE,
d316 1
a316 1
      FALSE, MEMORIZE, FALSE, TRUE, CLASS_ROGUE, -1, 3038,
d319 1
a319 1
      9, 2, 0,
d330 1
a330 1
      5, 7, ITEM_ANTI_SORCERER,
d341 1
a341 1
      5, 7, ITEM_ANTI_SORCERER,
d352 1
a352 1
      5, 7, ITEM_ANTI_SORCERER,
d363 1
a363 1
      10, -4, 0,
d374 1
a374 1
      7, 0, 0,
d2218 3
@


1.129
log
@Add a plain-but-capitalized name field. Add several factors that are used
when creating mob prototypes.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.128 2008/01/26 14:26:31 jps Exp jps $
d52 30
d95 1
d111 2
a112 1
      120, 80, 80, 60, 100, 75
d122 2
a123 1
      100, 80, 80, 70, 100, 100
d133 2
a134 1
      100, 90, 100, 100, 100, 80
d144 2
a145 1
      100, 120, 120, 120, 100, 120
d151 1
a151 1
      FALSE, PRAY, TRUE, TRUE, CLASS_WARRIOR, -1, 3022,
d155 2
a156 1
      100, 120, 120, 120, 100, 120
d162 1
a162 1
      FALSE, PRAY, TRUE, TRUE, CLASS_WARRIOR, -1, 3022,
d166 2
a167 1
      100, 120, 120, 120, 100, 120
d173 1
a173 1
      FALSE, MEMORIZE, TRUE, TRUE, CLASS_WARRIOR, -1, 3022,
d177 2
a178 1
      100, 120, 120, 120, 100, 120
d188 2
a189 1
      100, 80, 80, 70, 100, 100
d199 2
a200 1
      100, 100, 100, 100, 100, 100
d210 2
a211 1
      100, 90, 100, 100, 100, 80
d221 2
a222 1
      100, 90, 100, 100, 100, 80
d232 2
a233 1
      120, 80, 80, 60, 100, 75
d243 2
a244 1
      120, 80, 80, 60, 100, 75
d254 2
a255 1
      100, 120, 120, 120, 100, 120
d265 2
a266 1
      100, 120, 120, 120, 100, 120
d276 2
a277 1
      100, 80, 80, 70, 100, 100
d287 2
a288 1
      100, 80, 80, 70, 100, 100
d298 2
a299 1
      100, 80, 80, 70, 100, 100
d309 2
a310 1
      100, 90, 100, 100, 100, 80
d320 2
a321 1
      100, 90, 100, 100, 100, 80
d331 2
a332 1
      120, 80, 80, 60, 100, 75
d342 2
a343 1
      120, 80, 80, 60, 100, 75
d353 2
a354 1
      120, 80, 80, 60, 100, 75
d364 2
a365 1
      100, 90, 100, 100, 100, 80
d375 2
a376 1
      80, 100, 130, 100, 75, 105
d469 26
d2218 4
@


1.128
log
@Moved a lot of skill-related code into skills.h and skills.c.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.127 2008/01/07 11:55:48 jps Exp jps $
d58 1
a58 1
 *   name, altname, displayname,
d64 1
d73 2
a74 2
   /* SORCERER */ 
   { "sorcerer", "", "&5&bSorcerer&0",
d79 2
a80 1
      5, 6, ITEM_ANTI_SORCERER
d84 1
a84 1
   { "cleric", "", "&6Cleric&0",
d89 2
a90 1
      8, 4, ITEM_ANTI_CLERIC
d94 1
a94 1
   { "thief", "", "&1&bThief&0",
d99 2
a100 1
      8, 1, ITEM_ANTI_ROGUE
d104 1
a104 1
   { "warrior", "", "&4&bWarrior&0",
d109 2
a110 1
      12, -5, ITEM_ANTI_WARRIOR
d114 1
a114 1
   { "paladin", "", "&8Paladin&0",
d119 2
a120 1
      10, -4, ITEM_ANTI_PALADIN
d124 1
a124 1
   { "anti-paladin", "antipaladin", "&1&bAnti-&9Paladin&0",
d129 2
a130 1
      10, -4, ITEM_ANTI_ANTI_PALADIN
d134 1
a134 1
   { "ranger", "", "&2&bRanger&0",
d139 2
a140 1
      10, -4, ITEM_ANTI_RANGER
d144 1
a144 1
   { "druid", "", "&2Druid&0",
d149 2
a150 1
      8, 5, ITEM_ANTI_DRUID
d154 1
a154 1
   { "shaman", "", "&6&bShaman&0",
d159 2
a160 1
      8, 6, ITEM_ANTI_SHAMAN
d164 1
a164 1
   { "assassin", "", "&1Assassin&0",
d169 2
a170 1
      8, 2, ITEM_ANTI_ASSASSIN
d174 1
a174 1
   { "mercenary", "", "&3Mercenary&0",
d179 2
a180 1
      11, 2, ITEM_ANTI_MERCENARY
d184 1
a184 1
   { "necromancer", "", "&5Necromancer&0",
d189 2
a190 1
      5, 7, ITEM_ANTI_NECROMANCER
d194 1
a194 1
   { "conjurer", "", "&3&bConjurer&0",
d199 2
a200 1
      5, 7, ITEM_ANTI_CONJURER
d204 1
a204 1
   { "monk", "", "&9&bM&0&7on&9&bk&0",
d209 2
a210 1
      10, -4, 0
d214 1
a214 1
   { "berserker", "", "&9&bBer&1ser&9ker&0",
d219 2
a220 1
      12, -4, 0
d224 1
a224 1
   { "priest", "", "&6&bPr&7ie&6st&0",
d229 2
a230 1
      8, 5, ITEM_ANTI_CLERIC
d234 1
a234 1
   { "diabolist", "", "&5Dia&9&bbol&0&5ist&0",
d239 2
a240 1
      8, 5, ITEM_ANTI_CLERIC
d244 1
a244 1
   { "mystic", "", "&7&bM&0&7ys&9&bti&7c&0",
d249 2
a250 1
      8, 7, ITEM_ANTI_CLERIC
d254 1
a254 1
   { "rogue", "", "&9&bRogue&0",
d259 2
a260 1
      8, 2, ITEM_ANTI_ROGUE
d264 1
a264 1
   { "bard", "", "&4B&9&bar&0&4d&0",
d269 2
a270 1
      9, 2, 0
d274 1
a274 1
   { "pyromancer", "", "&1P&byr&0&1o&9&bma&0&7nc&9&ber&0",
d279 2
a280 1
      5, 7, ITEM_ANTI_SORCERER
d284 1
a284 1
   { "cryomancer", "", "&4C&bry&0&4o&7ma&9&bnc&0&7er&0",
d289 2
a290 1
      5, 7, ITEM_ANTI_SORCERER
d294 1
a294 1
   { "illusionist", "", "&4I&5l&4l&5u&4s&5i&4o&5n&4i&5s&4t&0",
d299 2
a300 1
      5, 7, ITEM_ANTI_SORCERER
d304 1
a304 1
   { "hunter", "", "&9&bHun&0&2te&9&br&0",
d309 12
a320 1
      10, -4, 0
d341 1
a341 1
   
a412 1

d429 1
a429 1
  
d465 2
a466 2
  {CLASS_NECROMANCER,   30072,  SCMD_WEST}, 
  {CLASS_ILLUSIONIST,   30072,  SCMD_WEST}, 
d469 1
a469 1
  {CLASS_NECROMANCER,   30112,  SCMD_UP}, 
d489 1
a489 1
  /* Anduin */ 
d557 1
a557 1
  
d591 1
a591 1
      
d659 1
a659 1
      SET_BIT(AFF_FLAGS(ch), AFF_DETECT_ALIGN | AFF_PROTECT_EVIL); 
d662 1
a662 1
      SET_BIT(AFF_FLAGS(ch), AFF_DETECT_ALIGN | AFF_PROTECT_GOOD); 
d687 2
a688 2
 
   if (number(0, 4))   
d707 1
a707 1
      
d722 1
a722 1
      
d735 1
a735 1
      
d748 1
a748 1
      
d763 1
a763 1
      
d778 1
a778 1
      
d793 2
a794 2
      
      
d810 1
a810 1
      
d825 1
a825 1
      
d838 1
a838 1
      
d850 1
a850 1
      
d865 2
a866 2
      
      
d948 1
a948 1
      
d1044 1
a1044 1
   
d1050 1
a1050 1
            if (gaining) 
d1052 1
a1052 1
            else 
d1071 1
a1071 1
   
d1161 1
a1161 1
  
d1166 1
a1166 1
  
d1175 1
a1175 1
    cls_cryo + cls_pyro + cls_bard + cls_rogue + cls_mystic + cls_diab + 
d1177 1
a1177 1
  
d1272 1
a1272 1
 
d1284 1
a1284 1
  spell_level(SPELL_LESSER_ENDURANCE, CLASS_CLERIC, CIRCLE_1,1); 
d1294 1
a1294 1
  spell_level(SPELL_ENDURANCE, CLASS_CLERIC, CIRCLE_3, 3); 
d1312 1
a1312 1
  spell_level(SPELL_GREATER_ENDURANCE, CLASS_CLERIC, CIRCLE_5, 5); 
d1327 1
a1327 1
  spell_level(SPELL_WATERWALK, CLASS_CLERIC, CIRCLE_7, 7);  
d1334 1
a1334 1
  spell_level(SPELL_GREATER_VITALITY, CLASS_CLERIC, CIRCLE_9,9); 
d1340 1
a1340 1
  spell_level(SPELL_DRAGONS_HEALTH, CLASS_CLERIC, CIRCLE_12, 12);  
d1426 1
a1426 1
  spell_level(SPELL_LESSER_ENDURANCE, CLASS_DIABOLIST, CIRCLE_1, 1); 
d1444 1
a1444 1
  spell_level(SPELL_ENDURANCE, CLASS_DIABOLIST, CIRCLE_3, 3); 
d1471 1
a1471 1
  spell_level(SPELL_WATERWALK, CLASS_DIABOLIST, CIRCLE_7, 7);  
d1504 1
a1504 1
  spell_level(SPELL_LESSER_ENDURANCE, CLASS_DRUID, CIRCLE_1, 1); 
d1517 1
a1517 1
  spell_level(SPELL_ENDURANCE, CLASS_DRUID, CIRCLE_3, 3); 
d1532 1
a1532 1
  spell_level(SPELL_GREATER_ENDURANCE, CLASS_DRUID, CIRCLE_6, 6); 
d1730 1
a1730 1
  spell_level(SPELL_SHIFT_CORPSE, CLASS_NECROMANCER, CIRCLE_13, 13); 
d1802 1
a1802 1
  spell_level(SPELL_ENDURANCE, CLASS_PRIEST, CIRCLE_3, 3); 
d1819 1
a1819 1
  spell_level(SPELL_GREATER_ENDURANCE, CLASS_PRIEST, CIRCLE_5, 5); 
d1828 1
a1828 1
  spell_level(SPELL_WATERWALK, CLASS_PRIEST, CIRCLE_7, 7);  
d1837 1
a1837 1
  spell_level(SPELL_GREATER_VITALITY, CLASS_PRIEST, CIRCLE_9, 9); 
d1851 1
a1851 1
  spell_level(SPELL_DRAGONS_HEALTH, CLASS_PRIEST, CIRCLE_12, 12); 
d2093 1
a2093 1
  
d2103 1
a2103 1
  
d2108 1
a2108 1
  
d2110 1
a2110 1
  for (skill = 0; skill <= TOP_SKILL; skill++) {  
d2136 3
d2536 1
a2536 1
 * Revision 1.24  1999/07/20 19:45:51  jimmy  
d2546 1
a2546 1
 * Revision 1.23  1999/07/06 19:57:05  jimmy  
d2583 3
a2585 3
 * This fixes all of the warnings associated with the new compiler and 
 * libraries.  Many many curly braces had to be added to "if" statements to 
 * clarify their behavior to the compiler.  The name approval code was also 
d2587 1
a2587 1
 * array to a linked list to allow for on the fly adding of names to the 
d2589 1
a2589 1
 * --Gurlaek 6/10/1999 
d2659 1
a2659 1
 * Many enhancements to scribe and spellbooks.  Lots of checks added.  
d2662 1
a2662 1
 * 
d2668 1
a2668 1
 * Revision 1.4  1999/02/03 18:14:16  jimmy  
@


1.127
log
@Added phantasm and simulacrum spells to illusionist class.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.126 2008/01/06 23:50:47 jps Exp jps $
d35 1
d1056 1
a1056 1
void init_spell_levels(void) {
d2085 1
a2085 1
    if((old_skills[skill]) && (spell_info[skill].quest)) {
d2102 3
@


1.126
log
@Added spells project and simulacrum, and MOB2_ILLUSORY flag.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.125 2008/01/06 20:38:57 jps Exp jps $
d1553 1
d1557 2
d1560 1
d1564 3
d1569 1
a1569 1
  spell_level(SPELL_SLEEP, CLASS_ILLUSIONIST, CIRCLE_5, 5);
d1571 1
d1575 1
d2101 3
@


1.125
log
@Change illusionist spells.  Add ventriloquate to illusionists.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.124 2008/01/06 17:34:41 jps Exp jps $
d594 7
d1546 4
d2092 3
@


1.124
log
@Move thac0 values into classdef array.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.123 2008/01/06 05:36:37 jps Exp jps $
a1538 2
  spell_level(SPELL_INCENDIARY_NEBULA, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_FARSEE, CLASS_ILLUSIONIST, CIRCLE_7, 7);
a1539 1
  spell_level(SPELL_DETECT_INVIS, CLASS_ILLUSIONIST, CIRCLE_6, 6);
d1541 1
a1542 3
  spell_level(SPELL_INFRAVISION, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_INVISIBLE, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_BURNING_HANDS, CLASS_ILLUSIONIST, CIRCLE_1, 1);
d1544 2
a1545 5
  spell_level(SPELL_STRENGTH, CLASS_ILLUSIONIST, CIRCLE_2, 2);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_ILLUSIONIST, CIRCLE_3, 3);
  spell_level(SPELL_SLEEP, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_ILLUSIONIST, CIRCLE_4, 4);
  spell_level(SPELL_DETECT_POISON, CLASS_ILLUSIONIST, CIRCLE_6, 6);
d1547 3
a1549 3
  spell_level(SPELL_FIREBALL, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_STONE_SKIN, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_FLY, CLASS_ILLUSIONIST, CIRCLE_7, 7);
d1551 7
a1557 7
  spell_level(SPELL_HASTE, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_METEORSWARM, CLASS_ILLUSIONIST, CIRCLE_10, 10);
  spell_level(SPELL_BIGBYS_CLENCHED_FIST, CLASS_ILLUSIONIST, CIRCLE_8, 8);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_CONE_OF_COLD, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_ICE_STORM, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_ICE_SHARDS, CLASS_ILLUSIONIST, CIRCLE_11, 11);
d2081 3
@


1.123
log
@Add equipment restriction flags to classdef.
Clean up advance_level a bit.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.122 2008/01/05 23:05:45 jps Exp jps $
d62 1
a62 1
 *   hp_lev, nowear_flag
d77 1
a77 1
      5, ITEM_ANTI_SORCERER
d86 1
a86 1
      8, ITEM_ANTI_CLERIC
d95 1
a95 1
      8, ITEM_ANTI_ROGUE
d104 1
a104 1
      12, ITEM_ANTI_WARRIOR
d113 1
a113 1
      10, ITEM_ANTI_PALADIN
d122 1
a122 1
      10, ITEM_ANTI_ANTI_PALADIN
d131 1
a131 1
      10, ITEM_ANTI_RANGER
d140 1
a140 1
      8, ITEM_ANTI_DRUID
d149 1
a149 1
      8, ITEM_ANTI_SHAMAN
d158 1
a158 1
      8, ITEM_ANTI_ASSASSIN
d167 1
a167 1
      11, ITEM_ANTI_MERCENARY
d176 1
a176 1
      5, ITEM_ANTI_NECROMANCER
d185 1
a185 1
      5, ITEM_ANTI_CONJURER
d194 1
a194 1
      10, 0
d203 1
a203 1
      12, 0
d212 1
a212 1
      8, ITEM_ANTI_CLERIC
d221 1
a221 1
      8, ITEM_ANTI_CLERIC
d230 1
a230 1
      8, ITEM_ANTI_CLERIC
d239 1
a239 1
      8, ITEM_ANTI_ROGUE
d248 1
a248 1
      9, 0
d257 1
a257 1
      5, ITEM_ANTI_SORCERER
d266 1
a266 1
      5, ITEM_ANTI_SORCERER
d275 1
a275 1
      5, ITEM_ANTI_SORCERER
d284 1
a284 1
      10, 0
d378 1
a378 1
/* This controls the behavior of the guild guards.
a511 35

/********************************************************************
 * THAC0 for classes and levels.  (To Hit Armor Class 0)            *
 ********************************************************************/ 

/* new thac0 based on interplation function - RLS: 05-21-02 */
const struct class_thac0 thac0_table [NUM_CLASSES] =
{
  {25,   6}, /* sorcerer */
  {25,   4}, /* cleric */
  {25,   1}, /* thief */
  {25,  -5}, /* warrior */
  {25,  -4}, /* paladin */
  {25,  -4}, /* anti-paladin */
  {25,  -4}, /* ranger */
  {25,   5}, /* druid */
  {25,   6}, /* shaman */
  {25,   2}, /* assassin */
  {25,   2}, /* mercenary */
  {25,   7}, /* necromancer */
  {25,   7}, /* conjurer */
  {25,  -4}, /* monk */
  {25,  -4}, /* berserker */
  {25,   5}, /* priest */
  {25,   5}, /* diabolist */
  {25,   7}, /* mystic */
  {25,   2}, /* rogue */
  {25,   2}, /* bard */
  {25,   7}, /* pyro */
  {25,   7}, /* cryo */
  {25,   7}, /* illusionist */
  {25,  -4}  /* hunter */
};


d2089 4
@


1.122
log
@Added hp per level value to classdef.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.121 2008/01/05 21:58:27 jps Exp jps $
d62 1
a62 1
 *   hp_lev, ...
d77 1
a77 1
      5
d86 1
a86 1
      8
d95 1
a95 1
      8
d104 1
a104 1
      12
d113 1
a113 1
      10
d122 1
a122 1
      10
d131 1
a131 1
      10
d140 1
a140 1
      8
d149 1
a149 1
      8
d158 1
a158 1
      8
d167 1
a167 1
      11
d176 1
a176 1
      5
d185 1
a185 1
      5
d194 1
a194 1
      10
d203 1
a203 1
      12
d212 1
a212 1
      8
d221 1
a221 1
      8
d230 1
a230 1
      8
d239 1
a239 1
      8
d248 1
a248 1
      9
d257 1
a257 1
      5
d266 1
a266 1
      5
d275 1
a275 1
      5
d284 1
a284 1
      10
a666 6
/*std hp table*/          /*MU|CL|TH|WA|PL|AP|RA|DR|SH*/ 
const int std_hp_table[] = { 5, 8, 8,12,10,10,10, 8, 8,
/*AS|MC|NE|CO|MO|BE|PR|DI|MY|RO|BA|PY|CR|IL|HU*/
   8,11, 5, 5,10,12, 8, 8, 8, 8, 9, 5, 5, 5, 10
};                      

d668 2
a669 22
 * invalid_class is used by handler.c to determine if a piece of equipment is
 * usable by a particular class, based on the ITEM_ANTI_{class} bitvectors.
 */

int invalid_class(struct char_data *ch, struct obj_data *obj) {
  if ((IS_OBJ_STAT(obj, ITEM_ANTI_MAGIC_USER) && IS_MAGIC_USER(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_CLERIC) && IS_CLERIC(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_WARRIOR) && IS_WARRIOR(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_THIEF) && IS_THIEF(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_PALADIN) && IS_PALADIN(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_ANTI_PALADIN) && IS_ANTI_PALADIN(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_RANGER) && IS_RANGER(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_DRUID) && IS_DRUID(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_SHAMAN) && IS_SHAMAN(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_ASSASSIN) && IS_ASSASSIN(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_MERCENARY) && IS_MERCENARY(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_NECROMANCER) && IS_NECROMANCER(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_CONJURER) && IS_CONJURER(ch))) 
    return 1;
  else
    return 0;
}
a670 4
/*
 * This function controls the change to maxmove, maxmana, and maxhp for
 * each class every time they gain a level.
 */
d673 1
a673 1
void advance_level(struct char_data * ch, int state)
d675 5
a679 12

  /* Note: add_move was commented out of this function because I don't
     want players gaining mv with levels.  I also found the number()
     function that was responsible for giving high level paladins over
     3000 movement.  If we want to add or subtract movement for gain/
     loss of a level in the future it's all there. RSD 4/23/00 */

  int add_hp = 0, add_move = 0, i;
  int dice, sub, c = GET_CLASS(ch);
  extern struct wis_app_type wis_app[];
  extern void assign_mem_list(struct char_data *ch);
  extern void save_mem_list(struct char_data *ch);
d681 245
a925 281
  /*add_hp = con_app[GET_CON(ch)].hitp;*/
  if (number(0, 4))  
    sub = 0;
  else
    sub = 1;
  switch (c) {
    
  case CLASS_SORCERER:
    if (state) {
      save_mem_list(ch);
      dice = number(3, 8);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      add_move = 0; /* commented out in the rest of the code */ 
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= (GET_LASTLEVEL(ch) + sub);
      else
        add_hp -= 8;
      /*  add_move = -number(0, 2); */
    }
    break;
    
  case CLASS_CLERIC:
    if (state) {
      save_mem_list(ch);
      dice = number(5, 10);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(0, 2); */
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 10;
      /*  add_move = -number(0, 2); */
    }
    break;
    
  case CLASS_THIEF:
    if (state) {
      dice = number(7, 13);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(1, 3); */
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 13;
      /*  add_move = -number(1, 3); */
    }
    break;
    
  case CLASS_WARRIOR:
    if (state) {
      dice = number(10, 15);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(1, 3); */
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 14;
      /*  add_move = -number(1, 3); */
    }
    break;
    
  case CLASS_PALADIN:
    if (state) {
      save_mem_list(ch);
      dice = number(9, 14);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(1, 3); */ 
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -=  14;
      /*  add_move = -number(1, 2); */ 
    }
    break;
    
  case CLASS_ANTI_PALADIN:
    if (state) {
      save_mem_list(ch);
      dice = number(9, 14);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(1, 2); */ 
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -=  14;
      /*  add_move = -number(1, 2); */ 
    }
    break;
    
  case CLASS_RANGER:
    if (state) {
      save_mem_list(ch);
      dice = number(9, 13);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(1, 3); */ 
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 13;
      /*  add_move = -number(1, 3);  */
    }
    break;
    
    
  case CLASS_DRUID:
    if (state) {
      save_mem_list(ch);
      dice = number(5, 11);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(0, 2); */
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 11;
      /*  add_move = -number(0, 2); */
    }
    SET_SKILL(ch, SKILL_SHAPECHANGE, MIN(1000, 10 * (GET_LEVEL(ch) + 1)));
    break;
    
  case CLASS_SHAMAN:
    if (state) {
      save_mem_list(ch);
      dice = number(5, 10);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(0, 2); */
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 10;
      /*  add_move = -number(0, 2); */
    }
    break;
    
  case CLASS_ASSASSIN:
    if (state) {
      dice = number(7, 12);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(1, 3); */
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 12;
      /*  add_move = -number(1, 3); */
    }
    break;
    
  case CLASS_MERCENARY:
    if (state) {
      dice = number(7, 14);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(1, 3); */
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 14;
      /*  add_move = -number(1, 3); */
    }
    
  case CLASS_NECROMANCER:
    if (state) {
      save_mem_list(ch);
      dice = number(3, 8);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(0, 2); */
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 8;
     /*   add_move = -number(0, 2); */
    }
    break;
    
    
  case CLASS_CONJURER:
    if (state) {
      save_mem_list(ch);
      dice = number(3, 8);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(0, 2); */
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 8;
      /*  add_move = -number(0, 2); */
    }
    break;
  case CLASS_MONK:
    if (state) {
      dice = number(10, 15);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(1, 3); */
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 14;
      /*  add_move = -number(1, 3); */
    }
    break;
  case CLASS_BERSERKER:
    if (state) {
      dice = number(10, 15);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(1, 3); */
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 14;
      /*  add_move = -number(1, 3); */
    }
    break;
  case CLASS_HUNTER:
    if (state) {
      save_mem_list(ch);
      dice = number(10, 15);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(1, 3); */
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 14;
      /*  add_move = -number(1, 3); */
    }
    break;
  case CLASS_PRIEST:
    if (state) {
      save_mem_list(ch);
      dice = number(5, 10);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(0, 2); */
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 10;
      /*  add_move = -number(0, 2); */
    }
    break;
d927 100
a1026 11
  case CLASS_DIABOLIST:
    if (state) {
      save_mem_list(ch);
      dice = number(5, 10);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(0, 2); */
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
d1028 24
a1051 129
        add_hp -= 10;
      /*  add_move = -number(0, 2); */
    }
    break;
    
  case CLASS_MYSTIC:
    if (state) {
      save_mem_list(ch);
      dice = number(5, 10);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(0, 2); */
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 10;
      /*  add_move = -number(0, 2); */
    }
    break;
  case CLASS_ROGUE:
    if (state) {
      dice = number(7, 13);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(1, 3); */
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 13;
      /*  add_move = -number(1, 3); */
    }
    break;
  case CLASS_BARD:
    if (state) {
      dice = number(7, 13);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(1, 3); */
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 13;
      /*  add_move = -number(1, 3); */
    }
    break;
  case CLASS_PYROMANCER:
    if (state) {
      save_mem_list(ch);
      dice = number(3, 8);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(0, 2); */
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 8;
      /*  add_move = -number(0, 2); */
    }
    break;
  case CLASS_CRYOMANCER:
    if (state) {
      save_mem_list(ch);
      dice = number(3, 8);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(0, 2); */
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 8;
      /*  add_move = -number(0, 2); */
    }
    break;
  case CLASS_ILLUSIONIST:
    if (state) {
      save_mem_list(ch);
      dice = number(3, 8);
      add_hp += dice;
      GET_LASTLEVEL(ch) = dice;
      /*  add_move = number(0, 2); */
      assign_mem_list(ch);
    } else {
      if (!(GET_LASTLEVEL(ch) == 0))
        add_hp -= GET_LASTLEVEL(ch) + sub;
      else
        add_hp -= 8;
      /*  add_move = -number(0, 2); */
    }
    break;
  }
  /*if over level 25 use constants for hps*/
  if (GET_LEVEL(ch) > 30) {
    if (state)
      add_hp = classes[c].hp_lev;
    else
      add_hp = 0 - classes[c].hp_lev;
  }
  ch->points.max_hit +=  add_hp;
  GET_NATHPS(ch) += add_hp;
  affect_total(ch);
/*    ch->points.max_move +=  add_move; */
  /*con_aff(ch);*/
  if (GET_LEVEL(ch) > 10)
    ch->points.max_mana = (GET_LEVEL(ch)^2)/10;
  else
    ch->points.max_mana = 0;
  
  if (c == CLASS_SORCERER || c == CLASS_CLERIC) {
    if (state)
      GET_PRACTICES(ch) += MAX(2, wis_app[GET_WIS(ch)].bonus);
    else
      ;} else {
        if (state) 
          GET_PRACTICES(ch) += MIN(2, MAX(1, wis_app[GET_WIS(ch)].bonus));
        else 
          ;  }
  if (GET_LEVEL(ch) >= LVL_IMMORT) {
    for (i = 0; i < 3; i++)
      GET_COND(ch, i) = (char) -1;
    SET_BIT(PRF_FLAGS(ch), PRF_HOLYLIGHT);
  }
d1053 22
a1074 22
  if (GET_CLAN(ch)) {
    int clan = find_clan_by_id(GET_CLAN(ch));
    if (clan >= 0) {
      if (state)
        clans[clan].power++;
      else
        clans[clan].power--;
    }
    if (IS_CLAN_GOD(ch))
      remove_player_from_clan(GET_NAME(ch), GET_CLAN(ch));
  }
  
  check_regen_rates(ch); /* start regening new points */
  update_char(ch);       /* update skills/spells/innates/etc. for new level */
  save_player(ch);
  if (state) {
    sprintf(buf, "%s advanced to level %d", GET_NAME(ch), GET_LEVEL(ch));
    mudlog(buf, BRF, MAX(LVL_IMMORT, GET_INVIS_LEV(ch)), TRUE);
  } else {
    sprintf(buf, "%s lost level %d", GET_NAME(ch), GET_LEVEL(ch)+1);
    mudlog(buf, BRF, MAX(LVL_IMMORT, GET_INVIS_LEV(ch)), TRUE);
  }
d1118 1
a1118 1
  /* Sorcerers and pals */
d2124 3
@


1.121
log
@Added saving throw data to classdef structs.
Moved a lot of crap to chars.c.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.120 2008/01/05 20:31:52 jps Exp jps $
d62 1
d76 2
a77 1
      { 90, 85, 95, 105, 80 }
d85 2
a86 1
      { 85, 110, 85, 115, 90 }
d94 2
a95 1
      { 95, 90, 100, 110, 110 }
d103 2
a104 1
      { 105, 115, 100, 100, 110 }
d112 2
a113 1
      { 95, 115, 100, 105, 90 }
d121 2
a122 1
      { 95, 115, 100, 105, 90 }
d130 2
a131 1
      { 95, 115, 100, 105, 90 }
d139 2
a140 1
      { 85, 110, 85, 115, 90 }
d148 2
a149 1
      { 105, 115, 105, 110, 110 }
d157 2
a158 1
      { 95, 90, 100, 110, 110 }
d166 2
a167 1
      { 95, 90, 100, 110, 110 }
d175 2
a176 1
      { 90, 85, 95, 105, 80 }
d184 2
a185 1
      { 90, 85, 95, 105, 80 }
d193 2
a194 1
      { 105, 115, 100, 100, 110 }
d202 2
a203 1
      { 105, 115, 100, 100, 110 }
d211 2
a212 1
      { 85, 110, 85, 115, 90 }
d220 2
a221 1
      { 85, 110, 85, 115, 90 }
d229 2
a230 1
      { 85, 110, 85, 115, 90 }
d238 2
a239 1
      { 95, 90, 100, 110, 110 }
d247 2
a248 1
      { 95, 90, 100, 110, 110 }
d256 2
a257 1
      { 90, 85, 95, 105, 80 }
d265 2
a266 1
      { 90, 85, 95, 105, 80 }
d274 2
a275 1
      { 90, 85, 95, 105, 80 }
d283 2
a284 1
      { 105, 115, 100, 100, 110 }
a671 3
const int race_reduce[] = 
/*HU|EL|GN|DW|TR|DE|DU|OG|OR|HE|BA|HA*/
{  0,-1,-1, 1, 1,-1, 1, 2, 0, 0, 1,-1} ;
d713 1
a713 1
  int dice, sub;
d723 1
a723 1
  switch (GET_CLASS(ch)) {
d735 1
a735 1
	add_hp -= (GET_LASTLEVEL(ch) + sub);
d737 1
a737 1
	add_hp -= 8;
d752 1
a752 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d754 1
a754 1
	add_hp -= 10;
d767 1
a767 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d769 1
a769 1
	add_hp -= 13;
d782 1
a782 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d784 1
a784 1
	add_hp -= 14;
d799 1
a799 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d801 1
a801 1
	add_hp -=  14;
d816 1
a816 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d818 1
a818 1
	add_hp -=  14;
d833 1
a833 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d835 1
a835 1
	add_hp -= 13;
d851 1
a851 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d853 1
a853 1
	add_hp -= 11;
d869 1
a869 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d871 1
a871 1
	add_hp -= 10;
d884 1
a884 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d886 1
a886 1
	add_hp -= 12;
d899 1
a899 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d901 1
a901 1
	add_hp -= 14;
d915 1
a915 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d917 1
a917 1
	add_hp -= 8;
d933 1
a933 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d935 1
a935 1
	add_hp -= 8;
d947 1
a947 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d949 1
a949 1
	add_hp -= 14;
d961 1
a961 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d963 1
a963 1
	add_hp -= 14;
d977 1
a977 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d979 1
a979 1
	add_hp -= 14;
d993 1
a993 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d995 1
a995 1
	add_hp -= 10;
d1010 1
a1010 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d1012 1
a1012 1
	add_hp -= 10;
d1027 1
a1027 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d1029 1
a1029 1
	add_hp -= 10;
d1041 1
a1041 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d1043 1
a1043 1
	add_hp -= 13;
d1055 1
a1055 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d1057 1
a1057 1
	add_hp -= 13;
d1071 1
a1071 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d1073 1
a1073 1
	add_hp -= 8;
d1087 1
a1087 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d1089 1
a1089 1
	add_hp -= 8;
d1103 1
a1103 1
	add_hp -= GET_LASTLEVEL(ch) + sub;
d1105 1
a1105 1
	add_hp -= 8;
d1113 1
a1113 1
      add_hp = std_hp_table[(int)GET_CLASS(ch)];
d1115 2
a1116 6
      add_hp = 0 - std_hp_table[(int)GET_CLASS(ch)];
  }  
  /*race reduce*/
  /*color out if dont want it in*/
  /*   add_hp = add_hp + race_reduce[(int)GET_RACE(ch)];
   */
d1127 1
a1127 1
  if (GET_CLASS(ch) == CLASS_SORCERER || GET_CLASS(ch) == CLASS_CLERIC) {
d1132 4
a1135 4
	if (state) 
	  GET_PRACTICES(ch) += MIN(2, MAX(1, wis_app[GET_WIS(ch)].bonus));
	else 
	  ;  }
d2191 1
a2191 1
	SET_SKILL(ch, skill, old_skills[skill]);
d2213 4
@


1.120
log
@Added data to the classdef struct which controls how newly-generated
stats are ordered in a character.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.119 2008/01/05 05:33:22 jps Exp jps $
a35 3
void convert_class(struct char_data *ch, int newclass);
void convert_race(struct char_data *ch, int newrace);
extern struct spell_info_type spell_info[];
d60 2
d74 3
a76 1
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA} },
d82 3
a84 1
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA} },
d90 3
a92 1
      {STAT_DEX, STAT_STR, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA} },
d98 3
a100 1
      {STAT_STR, STAT_DEX, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA} },
d106 3
a108 1
      {STAT_STR, STAT_DEX, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA} },
d114 3
a116 1
      {STAT_STR, STAT_DEX, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA} },
d122 3
a124 1
      {STAT_STR, STAT_DEX, STAT_CON, STAT_INT, STAT_WIS, STAT_CHA} },
d130 3
a132 1
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA} },
d138 3
a140 1
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA} },
d146 3
a148 1
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA} },
d154 3
a156 1
      {STAT_STR, STAT_DEX, STAT_CON, STAT_INT, STAT_WIS, STAT_CHA} },
d162 3
a164 1
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA} },
d170 3
a172 1
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA} },
d178 3
a180 1
      {STAT_CON, STAT_STR, STAT_DEX, STAT_WIS, STAT_INT, STAT_CHA} },
d186 3
a188 1
      {STAT_STR, STAT_DEX, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA} },
d194 3
a196 1
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA} },
d202 3
a204 1
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA} },
d210 3
a212 1
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA} },
d218 3
a220 1
      {STAT_DEX, STAT_STR, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA} },
d226 3
a228 1
      {STAT_DEX, STAT_STR, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA} },
d234 3
a236 1
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA} },
d242 3
a244 1
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA} },
d250 3
a252 1
      {STAT_WIS, STAT_INT, STAT_STR, STAT_DEX, STAT_CON, STAT_CHA} },
d258 3
a260 26
      {STAT_STR, STAT_DEX, STAT_CON, STAT_WIS, STAT_INT, STAT_CHA} }
};

const char *stats_display = 
"&0&7&b[s]&0 Strength	&0&7&b[i]&0 Intelligence\r\n"
"&0&7&b[w]&0 Wisdom	&0&7&b[c]&0 Constitution\r\n"
"&0&7&b[d]&0 Dexterity	&0&7&b[m]&0 Charisma\r\n\r\n"
;

#define Y   TRUE
#define N   FALSE

int class_ok_race[NUM_RACES][NUM_CLASSES] = {
  /*            S, C, T, W, P, A, R, D, Sh,As,M, N, Co, Mo, Be, Pr, Di, My, Ro, Ba, Py, Cr, Il, Hu*/
  /* Human */ { Y, Y, Y, Y, Y, Y, Y, Y, N, Y, Y, Y, Y,  Y,  N,  Y,  Y,  Y,  Y,  Y,  Y,  Y,  Y,  N},
  /* Elf   */ { Y, Y, Y, N, N, N, Y, Y, N, N, N, N, Y,  N,  N,  Y,  Y,  Y,  Y,  Y,  Y,  Y,  Y,  N},
  /* Gnome */ { Y, Y, N, N, N, N, N, N, Y, N, N, N, Y,  N,  N,  Y,  Y,  N,  N,  N,  Y,  Y,  Y,  N},
  /* Dwarf */ { N, Y, Y, Y, N, N, N, N, N, N, Y, N, Y,  N,  Y,  Y,  Y,  N,  Y,  Y,  N,  N,  N,  N},
  /* troll */ { N, N, N, Y, N, N, N, N, Y, N, Y, N, N,  N,  Y,  N,  N,  N,  Y,  N,  N,  N,  N,  Y},
  /* DROW  */ { Y, Y, N, Y, N, Y, N, N, Y, Y, Y, Y, Y,  N,  N,  N,  Y,  N,  Y,  N,  Y,  Y,  Y,  Y},
  /* DUER  */ { N, Y, Y, Y, N, N, N, N, N, Y, Y, N, N,  N,  Y,  N,  Y,  N,  Y,  N,  N,  N,  N,  Y},
  /* OGRE  */ { N, N, N, Y, N, N, N, N, Y, N, Y, N, N,  N,  Y,  N,  N,  N,  Y,  N,  N,  N,  N,  Y},
  /* ORC   */ { Y, Y, Y, Y, N, Y, N, N, Y, Y, Y, Y, Y,  N,  Y,  N,  Y,  N,  Y,  N,  Y,  Y,  Y,  Y},
  /* H-E   */ { Y, Y, Y, Y, N, N, Y, Y, N, N, N, N, Y,  Y,  N,  Y,  N,  N,  Y,  Y,  Y,  Y,  Y,  N},
  /* BARB  */ { N, N, N, Y, N, N, N, N, Y, N, Y, N, N,  N,  Y,  N,  N,  N,  Y,  N,  N,  N,  N,  N},
  /* HALFL */ { Y, Y, Y, Y, N, N, N, N, N, N, N, N, Y,  N,  N,  Y,  N,  N,  Y,  Y,  Y,  Y,  Y,  N}
a262 9
/* The menu for choosing a class in interpreter.c: */
const char *class_menu =
"\r\n"
"Select a class:\r\n"
"  [C]leric\r\n"
"  [T]hief\r\n"
"  [W]arrior\r\n"
"  [M]age\r\n";

a351 119
int get_base_saves(struct char_data *ch, int type)
{
  int rod = 0, para = 0, petr = 0, bre = 0, spe = 0;
  
  /* base saves for level 1 */
  switch(GET_CLASS(ch)) {
  case CLASS_BERSERKER:
  case CLASS_HUNTER:
  case CLASS_MONK:
  case CLASS_WARRIOR:
    para = 105;
    rod  = 115;
    petr = 100;
    bre  = 100;
    spe  = 110;
    break;
  case CLASS_PALADIN:
  case CLASS_ANTI_PALADIN:
  case CLASS_RANGER:
    para = 95;
    rod  = 115;
    petr = 100;
    bre  = 105;
    spe  = 90;
    break;
  case CLASS_SORCERER:
  case CLASS_CRYOMANCER:
  case CLASS_PYROMANCER:
  case CLASS_ILLUSIONIST:
  case CLASS_NECROMANCER:
  case CLASS_CONJURER:
    para = 90;
    rod  = 85;
    petr = 95;
    bre  = 105;
    spe  = 80;
    break;
  case CLASS_ROGUE:
  case CLASS_ASSASSIN:
  case CLASS_THIEF:
  case CLASS_MERCENARY:
  case CLASS_BARD:
    para = 95;
    rod  = 90;
    petr = 100;
    bre  = 110;
    spe  = 110;
    break;
  case CLASS_CLERIC:
  case CLASS_PRIEST:
  case CLASS_MYSTIC:
  case CLASS_DIABOLIST:
  case CLASS_DRUID:
    para = 85;
    rod  = 110;
    petr = 85;
    bre  = 115;
    spe  = 90;
    break;
  default:
    para = 105;
    rod  = 115;
    petr = 105;
    bre  = 110;
    spe  = 110;
    break;
  }

  /* decrease by 1 point per 2 levels */
  para -= (int) (GET_LEVEL(ch)/2);
  rod  -= (int) (GET_LEVEL(ch)/2);
  petr -= (int) (GET_LEVEL(ch)/2);
  bre  -= (int) (GET_LEVEL(ch)/2);
  spe  -= (int) (GET_LEVEL(ch)/2);

  /* dwarves, gnomes, and halflings get better saves */
  switch(GET_RACE(ch)) {
  case RACE_DUERGAR:
  case RACE_DWARF:
    para -= (int)(0.125 * GET_VIEWED_CON(ch));
    rod  -= (int)(0.1 * GET_VIEWED_CON(ch));
    spe  -= (int)(0.1 * GET_VIEWED_CON(ch));
    break;
  case RACE_GNOME:
    rod  -= (int)(0.1 * GET_VIEWED_CON(ch));
    spe  -= (int)(0.1 * GET_VIEWED_CON(ch));
    break;
  case RACE_HALFLING:
    para -= (int)(0.1 * GET_VIEWED_CON(ch));
    rod  -= (int)(0.1 * GET_VIEWED_CON(ch));
    spe  -= (int)(0.1 * GET_VIEWED_CON(ch));
    break;
  default:
    break;
  }

  /* stats affect saves */
  para -= (int)(0.5 * (GET_VIEWED_CON(ch) - 90));
  spe  -= (int)(0.5 * (GET_VIEWED_WIS(ch) - 90));
  rod  -= (int)(0.5 * (GET_VIEWED_DEX(ch) - 90));
  bre  -= (int)(0.5 * (GET_VIEWED_DEX(ch) - 90));

  switch(type) {
  case SAVING_SPELL:
    return MAX(5, MIN(spe, 95));
  case SAVING_BREATH:
    return  MAX(5, MIN(bre, 95));
  case SAVING_ROD:
    return  MAX(5, MIN(rod, 95));
  case SAVING_PETRI:
    return  MAX(5, MIN(petr, 95));
  case SAVING_PARA:
    return  MAX(5, MIN(para, 95));
  default:
    log("SYSERR: Invalid save_type passed to get_base_saves");
  }
  return 100; /* fail save if get to here */
}

a520 87
/*
 * Roll the 6 stats for a PC/NPC... each stat is made of 2*NUMBER.  Where
 * NUMBER is the best 5 out of 6 rolls of a random number from 3 to 10.
 * This gives a range of 2*(18-3)=30 TO 2*(60-10)=100.
 * Each class then decides which priority will be given for the best to worst stats.
 */

void roll_natural_abils(struct char_data *ch)
{
   int i, j, k, temp;
   ubyte table[6];
   ubyte rolls[6];
   
   for (i = 0; i < 6; i++)
      table[i] = 0;
   /* loop through each stat */
   for (i = 0; i < 6; i++) {
      /* roll a number from 3 to 10 */
      for (j = 0; j < 6; j++)
         rolls[j] = number(3, 10);
      /* sum the best 5 out of 6 */
      temp = rolls[0] + rolls[1] + rolls[2] + rolls[3] + rolls[4] + rolls[5]
         - MIN(rolls[0], MIN(rolls[1], MIN(rolls[2], MIN(rolls[3], MIN(rolls[4], rolls[5])))));
      /* multiply by 2 */
      temp = temp*2;
      /* this arranges the rolls from lowest to highest in table[] */
      for (k = 0; k < 6; k++)
         if (table[k] < temp) {
            temp ^= table[k];
            table[k] ^= temp;
            temp ^= table[k];
         }
   }
   /* At this point we have six stats from lowest to highest in table[] */

   /* time to give a bonus if necessary */

   /* this sums the total stats into i*/
   i = 0;
   for (j = 0; j < 6; j++)
      i = i + (int)table[j];
   /* ok lets say average = 450 (75 per) if LESS then this then bonus stats*/
   /* random spread of bonus 5 stat points */
   while(i <= 450) {
      j = number(0, 5);
      if ((int)table[j] <= 95) {
         table[j] = (ubyte)((int)table[j] + 5);
         i = i + 5;
      }
   }

   /* Arrange the stats according to the class.  Each class has stats that are
    * most important; the highest rolled values will be assigned to those
    * stats. */
   if (GET_CLASS(ch) >= 0 && GET_CLASS(ch) < NUM_CLASSES) {
      for (i = 0; i < NUM_STATS; i++) {
         switch (classes[(int)GET_CLASS(ch)].statorder[i]) {
            case STAT_STR:
               GET_NATURAL_STR(ch) = table[i];
               break;
            case STAT_DEX:
               GET_NATURAL_DEX(ch) = table[i];
               break;
            case STAT_CON:
               GET_NATURAL_CON(ch) = table[i];
               break;
            case STAT_WIS:
               GET_NATURAL_WIS(ch) = table[i];
               break;
            case STAT_INT:
               GET_NATURAL_INT(ch) = table[i];
               break;
            case STAT_CHA:
               GET_NATURAL_CHA(ch) = table[i];
               break;
         }
      }
   } else {
      GET_NATURAL_STR(ch) = table[0];
      GET_NATURAL_DEX(ch) = table[1];
      GET_NATURAL_CON(ch) = table[2];
      GET_NATURAL_WIS(ch) = table[3];
      GET_NATURAL_INT(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
   }
}

a611 23
/* this rolls a random skill based on the level of the mob */
/* Values range from 55 to 1000. --gurlaek 7/3/1999         */

int roll_mob_skill(int level) {
  int x, tmp, value = number(50, 100); /* ok give him 50-100 to start with */
  
  for ( x = 1; x < level; x++) {
    tmp = number(5 , 15);  /* add an additional 5-15 per level */
    if((value + tmp) <= 1000) {
      value += tmp;
    } else {
      value = 1000;
    }
  }
  return value;
}

int roll_skill(struct char_data *ch, int skill) {
  int value = number(50 + 5 * GET_LEVEL(ch), 100 + 15 * GET_LEVEL(ch));
  int max = return_max_skill(ch, skill);
  return MIN(value, max);
}

d652 24
a1147 60
 /* This simply determines how much damage barehand does
    David Endre 3/9/99 */
int barehand_mult(int level)
{
  return ((int)(level/4 + number(1, level/2)));
} 


/*
 * This simply calculates the backstab multiplier based on a character's
 * level.  This used to be an array, but was changed to be a function so
 * that it would be easier to add more levels to your MUD.  This doesn't
 * really create a big performance hit because it's not used very often.
 */
int backstab_mult(int level)
{
  if (level <= 0)
    return 1;
  else if (level <= 14)
    return 2;
  else if (level <= 26)
    return 3;
  else if (level <= 40)
    return 4;
  else if (level <= 56)
    return 5;
  else if (level <= 76)
    return 7;
  else if (level <= 90)
    return 9;  
  else if (level < LVL_IMMORT)
    return 11;	  /* all remaining mortal levels */
  else 
    return 20;	  /* immortals */
}

/*
 * invalid_class is used by handler.c to determine if a piece of equipment is
 * usable by a particular class, based on the ITEM_ANTI_{class} bitvectors.
 */

int invalid_class(struct char_data *ch, struct obj_data *obj) {
  if ((IS_OBJ_STAT(obj, ITEM_ANTI_MAGIC_USER) && IS_MAGIC_USER(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_CLERIC) && IS_CLERIC(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_WARRIOR) && IS_WARRIOR(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_THIEF) && IS_THIEF(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_PALADIN) && IS_PALADIN(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_ANTI_PALADIN) && IS_ANTI_PALADIN(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_RANGER) && IS_RANGER(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_DRUID) && IS_DRUID(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_SHAMAN) && IS_SHAMAN(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_ASSASSIN) && IS_ASSASSIN(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_MERCENARY) && IS_MERCENARY(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_NECROMANCER) && IS_NECROMANCER(ch)) ||
      (IS_OBJ_STAT(obj, ITEM_ANTI_CONJURER) && IS_CONJURER(ch))) 
    return 1;
  else
    return 0;
}

d2195 4
@


1.119
log
@Started updating some Illusionist stuff.  Added init_char_class() and
update_char_class() functions.  Moved a lot of race-related stuff to races.c.
Moved some skill-related stuff to spells.c.  Removed redundant skill assignments.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.118 2008/01/04 01:50:41 jps Exp jps $
d71 1
a71 1
   /* MAGIC_USER */
d74 2
a75 1
      TRUE, MEMORIZE, TRUE, FALSE, CLASS_UNDEFINED, 45, 3046 },
d80 2
a81 1
      TRUE, PRAY, TRUE, FALSE, CLASS_UNDEFINED, 45, 3003 },
d86 2
a87 1
      FALSE, MEM_NONE, TRUE, TRUE, CLASS_ROGUE, -1, 3038 },
d92 2
a93 1
      FALSE, MEM_NONE, TRUE, FALSE, CLASS_UNDEFINED, 25, 3022 },
d98 2
a99 1
      FALSE, PRAY, TRUE, TRUE, CLASS_WARRIOR, -1, 3022 },
d104 2
a105 1
      FALSE, PRAY, TRUE, TRUE, CLASS_WARRIOR, -1, 3022 },
d110 2
a111 1
      FALSE, MEMORIZE, TRUE, TRUE, CLASS_WARRIOR, -1, 3022 },
d116 2
a117 1
      TRUE, PRAY, TRUE, TRUE, CLASS_CLERIC, -1, 3003 },
d122 2
a123 1
      TRUE, MEM_NONE, FALSE, FALSE, CLASS_UNDEFINED, -1, 3001 },
d128 2
a129 1
      FALSE, MEM_NONE, TRUE, TRUE, CLASS_ROGUE, -1, 3038 },
d134 2
a135 1
      FALSE, MEM_NONE, TRUE, TRUE, CLASS_ROGUE, -1, 3038 },
d140 2
a141 1
      TRUE, MEMORIZE, TRUE, TRUE, CLASS_SORCERER, -1, 3046 },
d146 2
a147 1
      TRUE, MEMORIZE, FALSE, TRUE, CLASS_SORCERER, -1, 3046 },
d152 2
a153 1
      FALSE, MEM_NONE, TRUE, TRUE, CLASS_WARRIOR, -1, 3022 },
d158 2
a159 1
      FALSE, MEM_NONE, FALSE, TRUE, CLASS_WARRIOR, -1, 3022 },
d164 2
a165 1
      TRUE, PRAY, TRUE, TRUE, CLASS_CLERIC, -1, 3003 },
d170 2
a171 1
      TRUE, PRAY, TRUE, TRUE, CLASS_CLERIC, -1, 3003 },
d176 2
a177 1
      TRUE, PRAY, FALSE, TRUE, CLASS_CLERIC, -1, 3003 },
d182 2
a183 1
      FALSE, MEM_NONE, TRUE, FALSE, CLASS_UNDEFINED, 25, 3038 },
d188 2
a189 1
      FALSE, MEMORIZE, FALSE, TRUE, CLASS_ROGUE, -1, 3038 },
d194 2
a195 1
      TRUE, MEMORIZE, TRUE, TRUE, CLASS_SORCERER, -1, 3046 },
d200 2
a201 1
      TRUE, MEMORIZE, TRUE, TRUE, CLASS_SORCERER, -1, 3046 },
d206 2
a207 1
      TRUE, MEMORIZE, FALSE, TRUE, CLASS_SORCERER, -1, 3046 },
d212 2
a213 1
      FALSE, MEM_NONE, FALSE, TRUE, CLASS_ROGUE, -1, 3038 }
a458 27
/*
 * These are definitions which control the guildmasters for each class.
 *
 * The first field (top line) controls the highest percentage skill level
 * a character of the class is allowed to attain in any skill.  (After
 * this level, attempts to practice will say "You are already learned in
 * this area."
 * 
 * The second line controls the maximum percent gain in learnedness a
 * character is allowed per practice -- in other words, if the random
 * die throw comes out higher than this number, the gain will only be
 * this number instead.
 *
 * The third line controls the minimu percent gain in learnedness a
 * character is allowed per practice -- in other words, if the random
 * die throw comes out below this number, the gain will be set up to
 * this number.
 * 
 * The fourth line simply sets whether the character knows 'spells'
 * or 'skills'.  This does not affect anything except the message given
 * to the character when trying to practice (i.e. "You know of the
 * following spells" vs. "You know of the following skills"
 */

#define SPL	0
#define SKL	1

d636 25
a660 26
  int i, j, k, temp;
  /* int stats[6];*/
  ubyte table[6];
  ubyte rolls[6];
  
  for (i = 0; i < 6; i++)
    table[i] = 0;
  /* loop through each stat */
  for (i = 0; i < 6; i++) {
    /* roll a number from 3 to 10 */
    for (j = 0; j < 6; j++)
      rolls[j] = number(3, 10);
    /* sum the best 5 out of 6 */
    temp = rolls[0] + rolls[1] + rolls[2] + rolls[3] + rolls[4] + rolls[5]
      - MIN(rolls[0], MIN(rolls[1], MIN(rolls[2], MIN(rolls[3], MIN(rolls[4], rolls[5])))));
    /* multiply by 2 */
    temp = temp*2;
    /* this arranges the rolls from lowest to highest in table[] */
    for (k = 0; k < 6; k++)
      if (table[k] < temp) {
	temp ^= table[k];
	table[k] ^= temp;
	temp ^= table[k];
      }
  }
  /* At this point we have six stats from lowest to highest in table[] */
d662 1
a662 1
  /* time to give a bonus if necessary */
d664 13
a676 18
  /* this sums the total stats into i*/
  i = 0;
  for (j=0;j<6;j++)
    i = i + (int)table[j];
  /* ok lets say average = 450 (75 per) if LESS then this then bonus stats*/
  /* random spread of bonus 5 stat points */
  while(i<=450) {
    j = number(0, 5);
    if ((int)table[j] <= 95) {
      table[j] = (ubyte)((int)table[j] + 5);
      i = i + 5;
    }
  }
  if(!IS_NPC(ch)) {
    /* i've no idea why this is in this function */
    SET_BIT(PLR_FLAGS(ch), PLR_LOADROOM);
    SET_BIT(PRF_FLAGS(ch), PRF_AUTOEXIT);
  }  
d678 25
a702 129
  if (!GET_ROLL(ch, 0)) { /*if baiscally NOT going through interpreter*/
    switch (GET_CLASS(ch)) {
    case CLASS_SORCERER:
      GET_NATURAL_WIS(ch) = table[0];
      GET_NATURAL_INT(ch) = table[1];
      GET_NATURAL_STR(ch) = table[2];
      GET_NATURAL_DEX(ch) = table[3];
      GET_NATURAL_CON(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_CLERIC:
      GET_NATURAL_WIS(ch) = table[0];
      GET_NATURAL_INT(ch) = table[1];
      GET_NATURAL_STR(ch) = table[2];
      GET_NATURAL_DEX(ch) = table[3];
      GET_NATURAL_CON(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_THIEF:
      GET_NATURAL_DEX(ch) = table[0];
      GET_NATURAL_STR(ch) = table[1];
      GET_NATURAL_CON(ch) = table[2];
      GET_NATURAL_INT(ch) = table[3];
      GET_NATURAL_WIS(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_WARRIOR:
      GET_NATURAL_STR(ch) = table[0];
      GET_NATURAL_DEX(ch) = table[1];
      GET_NATURAL_CON(ch) = table[2];
      GET_NATURAL_WIS(ch) = table[3];
      GET_NATURAL_INT(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_PALADIN:
      GET_NATURAL_STR(ch) = table[0];
      GET_NATURAL_DEX(ch) = table[1];
      GET_NATURAL_CON(ch) = table[2];
      GET_NATURAL_WIS(ch) = table[3];
      GET_NATURAL_INT(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_ANTI_PALADIN:
      GET_NATURAL_STR(ch) = table[0];
      GET_NATURAL_DEX(ch) = table[1];
      GET_NATURAL_CON(ch) = table[2];
      GET_NATURAL_WIS(ch) = table[3];
      GET_NATURAL_INT(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_RANGER:
      GET_NATURAL_STR(ch) = table[0];
      GET_NATURAL_DEX(ch) = table[1];
      GET_NATURAL_CON(ch) = table[2];
      GET_NATURAL_INT(ch) = table[3];
      GET_NATURAL_WIS(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_DRUID:
      GET_NATURAL_WIS(ch) = table[0];
      GET_NATURAL_INT(ch) = table[1];
      GET_NATURAL_STR(ch) = table[2];
      GET_NATURAL_DEX(ch) = table[3];
      GET_NATURAL_CON(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_SHAMAN:
      GET_NATURAL_WIS(ch) = table[0];
      GET_NATURAL_INT(ch) = table[1];
      GET_NATURAL_STR(ch) = table[2];
      GET_NATURAL_DEX(ch) = table[3];
      GET_NATURAL_CON(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_ASSASSIN:
      GET_NATURAL_WIS(ch) = table[0];
      GET_NATURAL_INT(ch) = table[1];
      GET_NATURAL_STR(ch) = table[2];
      GET_NATURAL_DEX(ch) = table[3];
      GET_NATURAL_CON(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_MERCENARY:
      GET_NATURAL_STR(ch) = table[0];
      GET_NATURAL_DEX(ch) = table[1];
      GET_NATURAL_CON(ch) = table[2];
      GET_NATURAL_INT(ch) = table[3];
      GET_NATURAL_WIS(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_NECROMANCER:
      GET_NATURAL_WIS(ch) = table[0];
      GET_NATURAL_INT(ch) = table[1];
      GET_NATURAL_STR(ch) = table[2];
      GET_NATURAL_DEX(ch) = table[3];
      GET_NATURAL_CON(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_CONJURER:
      GET_NATURAL_WIS(ch) = table[0];
      GET_NATURAL_INT(ch) = table[1];
      GET_NATURAL_STR(ch) = table[2];
      GET_NATURAL_DEX(ch) = table[3];
      GET_NATURAL_CON(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;     
    case CLASS_BERSERKER:
      GET_NATURAL_STR(ch) = table[0];
      GET_NATURAL_DEX(ch) = table[1];
      GET_NATURAL_CON(ch) = table[2];
      GET_NATURAL_WIS(ch) = table[3];
      GET_NATURAL_INT(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_MONK: /* this is class VOID for NPC's */
      if(IS_NPC(ch)) {
	GET_NATURAL_STR(ch) = table[0];
	GET_NATURAL_DEX(ch) = table[1];
	GET_NATURAL_CON(ch) = table[2];
	GET_NATURAL_WIS(ch) = table[3];
	GET_NATURAL_INT(ch) = table[4];
	GET_NATURAL_CHA(ch) = table[5];
      } else {
	GET_NATURAL_CON(ch) = table[0];
	GET_NATURAL_STR(ch) = table[1];
	GET_NATURAL_DEX(ch) = table[2];
	GET_NATURAL_WIS(ch) = table[3];
	GET_NATURAL_INT(ch) = table[4];
	GET_NATURAL_CHA(ch) = table[5];
d704 1
a704 74
      break;
    case CLASS_PRIEST:
      GET_NATURAL_WIS(ch) = table[0];
      GET_NATURAL_INT(ch) = table[1];
      GET_NATURAL_STR(ch) = table[2];
      GET_NATURAL_DEX(ch) = table[3];
      GET_NATURAL_CON(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_DIABOLIST:
      GET_NATURAL_WIS(ch) = table[0];
      GET_NATURAL_INT(ch) = table[1];
      GET_NATURAL_STR(ch) = table[2];
      GET_NATURAL_DEX(ch) = table[3];
      GET_NATURAL_CON(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_MYSTIC:
      GET_NATURAL_WIS(ch) = table[0];
      GET_NATURAL_INT(ch) = table[1];
      GET_NATURAL_STR(ch) = table[2];
      GET_NATURAL_DEX(ch) = table[3];
      GET_NATURAL_CON(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_ROGUE:
      GET_NATURAL_DEX(ch) = table[0];
      GET_NATURAL_STR(ch) = table[1];
      GET_NATURAL_CON(ch) = table[2];
      GET_NATURAL_INT(ch) = table[3];
      GET_NATURAL_WIS(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_BARD:
      GET_NATURAL_DEX(ch) = table[0];
      GET_NATURAL_STR(ch) = table[1];
      GET_NATURAL_CON(ch) = table[2];
      GET_NATURAL_INT(ch) = table[3];
      GET_NATURAL_WIS(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_PYROMANCER:
      GET_NATURAL_WIS(ch) = table[0];
      GET_NATURAL_INT(ch) = table[1];
      GET_NATURAL_STR(ch) = table[2];
      GET_NATURAL_DEX(ch) = table[3];
      GET_NATURAL_CON(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_CRYOMANCER:
      GET_NATURAL_WIS(ch) = table[0];
      GET_NATURAL_INT(ch) = table[1];
      GET_NATURAL_STR(ch) = table[2];
      GET_NATURAL_DEX(ch) = table[3];
      GET_NATURAL_CON(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_ILLUSIONIST:
      GET_NATURAL_WIS(ch) = table[0];
      GET_NATURAL_INT(ch) = table[1];
      GET_NATURAL_STR(ch) = table[2];
      GET_NATURAL_DEX(ch) = table[3];
      GET_NATURAL_CON(ch) = table[4];
      GET_NATURAL_CHA(ch) = table[5];
      break;
    case CLASS_HUNTER:
      GET_NATURAL_STR(ch) = table[0];
      GET_NATURAL_DEX(ch) = table[1];
      GET_NATURAL_CON(ch) = table[2];
      GET_NATURAL_WIS(ch) = table[3];
      GET_NATURAL_INT(ch) = table[4];
	GET_NATURAL_CHA(ch) = table[5];
	break;
    default:
d711 2
a712 11
      break;
    }
  } else { /*through interpreter*/
    GET_NATURAL_CON(ch) = table[((int)GET_ROLL(ch, 0) - 1)];
    GET_NATURAL_STR(ch) = table[((int)GET_ROLL(ch, 1) - 1)];
    GET_NATURAL_DEX(ch) = table[((int)GET_ROLL(ch, 2) - 1)];
    GET_NATURAL_WIS(ch) = table[((int)GET_ROLL(ch, 3) - 1)];
    GET_NATURAL_INT(ch) = table[((int)GET_ROLL(ch, 4) - 1)];
    GET_NATURAL_CHA(ch) = table[((int)GET_ROLL(ch, 5) - 1)];
  }
} 
d2447 5
@


1.118
log
@Added races.h file.  Added homeroom to class definitions.  Removed
obsolete "practice" data.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.117 2008/01/03 12:44:03 jps Exp jps $
a37 1
bool racial_innate(int race, int skill);
d484 1
d515 1
d557 1
d583 1
d910 3
a912 19
/*
  calling this function wipes out every skill a player has. It
  also clears off all their affects so as not to corrupt any numbers.
*/
void clear_skills(struct char_data *ch)
{
  int i;
  
  /* unaffect ch */
  if (ch->affected) {
    while (ch->affected)
      affect_remove(ch, ch->affected);
    check_regen_rates(ch);
  }
  /* clear skills */
  for (i = 0; i <= TOP_SKILL; ++i)
    SET_SKILL(ch, i, 0);
  
}
a913 3
/*this function is used to limit the skill a players class can get
 *the defult is full skill 1000 so dont use it if it is that
 *It actually limits skill accross the levels, ie:
d915 1
a915 1
 *Proky. 
d1003 1
a1003 1
int roll_mob_skill(struct char_data *ch) {
d1006 1
a1006 1
  for ( x = 1; x < GET_LEVEL(ch); x++) {
d1023 7
a1029 2
/* This re/applies all the class affect flags. DCE 07-dec-01 */
void set_class_affects(struct char_data *ch) {
a1048 1378
}

/* This sets or adds the racial hitroll and damroll bonuses. If
   type = 0 then it sets the values, if type = 1 then it adds the
   values to the existing values. DCE 12-15-01 */
void apply_racial_bonus_hit_and_dam(struct char_data *ch, int type)
{
  int dam = 0, hit = 0;

  switch (GET_RACE(ch)) {
    
    case RACE_DROW_ELF:
      dam = 2;
      hit = 3;
      break;
    case RACE_ELF:
      dam = 2;
      hit = 3;
      break;
    case RACE_DWARF:
      dam = 4;
      hit = 5;
      break;
    case RACE_DUERGAR:
      dam = 4;
      hit = 5;
      break;
    case RACE_HALFLING:
      dam = 3;
      hit = 6;
      break;
    case RACE_TROLL:
      dam = 5;
      hit = 4;
      break;
    case RACE_OGRE:
      dam = 5;
      hit = 4;
      break;
    case RACE_HALF_ELF:
      dam = 3;
      hit = 3;
      break;
    case RACE_GNOME:
      dam = 2;
      hit = 4;
      break;
    case RACE_BARBARIAN:
      dam = 5;
      hit = 4;
      break;
    case RACE_HUMAN:
      dam = 3;
      hit = 3;
      break;
    case RACE_ORC:
      dam = 3;
      hit = 3;
      break;
    default:
      dam = 0;
      hit = 0;
      break;
  }

  if (type == 0) {
    GET_DAMROLL(ch) = dam;
    GET_HITROLL(ch) = hit;
  } else if (type == 1) {
    GET_DAMROLL(ch) += dam;
    GET_HITROLL(ch) += hit;
  }

}

void set_racial_affects(struct char_data *ch) {

   /* First clear all possible bits that might be set here.
    * So if someone is being changed from a duergar to a human,
    * ultravision would be removed. */
   REMOVE_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
   REMOVE_BIT(AFF_FLAGS(ch), AFF_SENSE_LIFE);
   REMOVE_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);

  switch (GET_RACE(ch)) {

  case RACE_DROW_ELF:
    SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
    break;
  case RACE_ELF:
    SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
    break;
  case RACE_DWARF:
    SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
    break;
  case RACE_DUERGAR:
    SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
    break;
  case RACE_HALFLING:
    SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
    SET_BIT(AFF_FLAGS(ch), AFF_SENSE_LIFE);
    break;
  case RACE_TROLL:
    SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
    break;
  case RACE_OGRE:
    SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
    break;
  case RACE_HALF_ELF:
    SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
    break;
  case RACE_GNOME:
    SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
    break;
  case RACE_BARBARIAN:
    break;
  case RACE_HUMAN:
    break;
  case RACE_ORC:
    break;
  case SPECIES_UNDEAD:
    break;
  case SPECIES_HUMANOID:
    break;
  case SPECIES_ANIMAL:
   break;
  case SPECIES_GIANT:
    break;
  case SPECIES_OTHER:
    break;
  case SPECIES_GOBLIN:
    break;
  case SPECIES_DRAGON:
    break;
  case SPECIES_DEMON:
    break;
  default:
    break;
  }
}


 /* This sets initial skills for both mobs/players.   This can be called
    when player race or class changes. Be sure to call clear_skills
    before calling this. All spells must be set to 1000 and skills set 
    from 50 to 200. This is also used to set innate skills.
    -Banyal
    -Gurlaek 7/5/1999
 */
void set_skills(struct char_data *ch)
{
  /* Skills that everyone should have */
  SET_SKILL(ch, SKILL_DOUSE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
  SET_SKILL(ch, SKILL_FIRST_AID, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
  
  switch (GET_CLASS(ch)) {
  case CLASS_UNDEFINED:
    SET_SKILL(ch, SKILL_BASH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KICK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_NECROMANCER:
    SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
    SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
    SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
    SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
    SET_SKILL(ch, SPELL_CONCEALMENT, 1000);
    SET_SKILL(ch, SPELL_PRESERVE, 1000);
    SET_SKILL(ch, SPELL_STRENGTH, 1000);
    SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
    SET_SKILL(ch, SPELL_ANIMATE_DEAD, 1000);
    SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
    SET_SKILL(ch, SPELL_COLDSHIELD, 1000);
    SET_SKILL(ch, SPELL_INFRAVISION, 1000);
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
    SET_SKILL(ch, SPELL_SLEEP, 1000);
    SET_SKILL(ch, SPELL_ENERGY_DRAIN, 1000);
    SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
    SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
    SET_SKILL(ch, SPELL_INVISIBLE, 1000);
    SET_SKILL(ch, SPELL_FARSEE, 1000);
    SET_SKILL(ch, SPELL_HASTE, 1000);
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
    SET_SKILL(ch, SPELL_POISON, 1000); 
    /*    SET_SKILL(ch, SPELL_SUMMON_DRACOLICH, 0); Quest */
    SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
    SET_SKILL(ch, SPELL_SOUL_TAP, 1000);
    SET_SKILL(ch, SPELL_REBUKE_UNDEAD, 1000);
    SET_SKILL(ch, SPELL_DEGENERATION, 1000);
    SET_SKILL(ch, SKILL_DODGE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SCRIBE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KNOW_SPELL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_CONJURER:
    SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
    SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
    SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
    SET_SKILL(ch, SPELL_STRENGTH, 1000);
    SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
    SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
    SET_SKILL(ch, SPELL_CONCEALMENT, 1000);
    SET_SKILL(ch, SPELL_SUMMON_ELEMENTAL, 1000);
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
    SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
    SET_SKILL(ch, SPELL_SLEEP, 1000);
    SET_SKILL(ch, SPELL_COLOR_SPRAY, 1000);
    SET_SKILL(ch, SPELL_WALL_OF_STONE, 1000);
    SET_SKILL(ch, SPELL_WALL_OF_FOG, 1000);
    SET_SKILL(ch, SPELL_INFRAVISION, 1000);
    SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
    SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
    SET_SKILL(ch, SPELL_FIREBALL, 1000);
    SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
    SET_SKILL(ch, SPELL_FLY, 1000);
    SET_SKILL(ch, SPELL_FARSEE, 1000);
    SET_SKILL(ch, SPELL_INVISIBLE, 1000);
    SET_SKILL(ch, SPELL_HASTE, 1000);
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
    SET_SKILL(ch, SPELL_ENCHANT_WEAPON, 1000);
    SET_SKILL(ch, SPELL_IDENTIFY, 1000);
    /*    SET_SKILL(ch, SPELL_SUMMON_DEMON, 1000);
	  SET_SKILL(ch, SPELL_SUMMON_GREATER_DEMON, 1000); */
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SCRIBE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KNOW_SPELL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_SORCERER:
    SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
    SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
    SET_SKILL(ch, SPELL_CONCEALMENT, 1000);
    SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    SET_SKILL(ch, SPELL_STRENGTH, 1000);
    SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
    SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
    SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
    SET_SKILL(ch, SPELL_TELEPORT, 1000);
    SET_SKILL(ch, SPELL_MINOR_PARALYSIS, 1000);
    SET_SKILL(ch, SPELL_LEVITATE, 1000);
    SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
    SET_SKILL(ch, SPELL_RAY_OF_ENFEEB, 1000);
    SET_SKILL(ch, SPELL_INFRAVISION, 1000);
    SET_SKILL(ch, SPELL_MINOR_GLOBE, 1000);
    SET_SKILL(ch, SPELL_FIRESHIELD, 1000);
    SET_SKILL(ch, SPELL_COLDSHIELD, 1000);
    SET_SKILL(ch, SPELL_FARSEE, 1000);
    SET_SKILL(ch, SPELL_INVISIBLE, 1000);
    SET_SKILL(ch, SPELL_SLEEP, 1000);
    SET_SKILL(ch, SPELL_COLOR_SPRAY, 1000);
    SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
    SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
    SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
    SET_SKILL(ch, SPELL_FLY, 1000);
    SET_SKILL(ch, SPELL_HASTE, 1000);
    SET_SKILL(ch, SPELL_FIREBALL, 1000);
    SET_SKILL(ch, SPELL_ICE_STORM, 1000);
    SET_SKILL(ch, SPELL_BIGBYS_CLENCHED_FIST, 1000);
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    /*      SET_SKILL(ch, SPELL_MAJOR_GLOBE, 0); */
    SET_SKILL(ch, SPELL_CHAIN_LIGHTNING, 1000);
    SET_SKILL(ch, SPELL_MASS_INVIS, 1000);
    /*      SET_SKILL(ch, SPELL_RELOCATE, 0); */
    SET_SKILL(ch, SPELL_DISINTEGRATE, 1000);
    /*      SET_SKILL(ch, SPELL_METEORSWARM, 0); */
    SET_SKILL(ch, SPELL_REDUCE, 1000);
    SET_SKILL(ch, SPELL_ENLARGE, 1000);
    /*      SET_SKILL(ch, SPELL_WIZARD_EYE, 0); */
    SET_SKILL(ch, SPELL_HARNESS, 1000);
    SET_SKILL(ch, SPELL_CHARM, 1000);
    /*SET_SKILL(ch, SPELL_INCENDIARY_NEBULA, 1000); */
    SET_SKILL(ch, SPELL_IDENTIFY, 1000);

    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SCRIBE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KNOW_SPELL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_PYROMANCER:
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
    SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
    SET_SKILL(ch, SPELL_FIRE_DARTS, 1000);
    SET_SKILL(ch, SPELL_MAGIC_TORCH, 1000);
    SET_SKILL(ch, SPELL_STRENGTH, 1000);
    SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
    SET_SKILL(ch, SPELL_CONCEALMENT, 1000);
    SET_SKILL(ch, SPELL_SMOKE, 1000);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
    SET_SKILL(ch, SPELL_MIRAGE, 1000);
    SET_SKILL(ch, SPELL_FLAME_BLADE, 1000);
    SET_SKILL(ch, SPELL_FIRESHIELD, 1000);
    SET_SKILL(ch, SPELL_TELEPORT, 1000);
    SET_SKILL(ch, SPELL_LEVITATE, 1000);
    SET_SKILL(ch, SPELL_INFRAVISION, 1000);
    SET_SKILL(ch, SPELL_RAY_OF_ENFEEB, 1000);
    SET_SKILL(ch, SPELL_FIREBALL, 1000);
    SET_SKILL(ch, SPELL_MINOR_PARALYSIS, 1000);
    SET_SKILL(ch, SPELL_FARSEE, 1000);
    SET_SKILL(ch, SPELL_INVISIBLE, 1000);
    SET_SKILL(ch, SPELL_SLEEP, 1000);
    SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
    SET_SKILL(ch, SPELL_HEATWAVE, 1000);
    SET_SKILL(ch, SPELL_FIRESTORM, 1000);
    SET_SKILL(ch, SPELL_MINOR_GLOBE, 1000);
    SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
    SET_SKILL(ch, SPELL_HASTE, 1000);
    SET_SKILL(ch, SPELL_MELT, 1000);
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_COMBUST, 1000);
    SET_SKILL(ch, SPELL_MAJOR_GLOBE, 1000);
    SET_SKILL(ch, SPELL_FLY, 1000);
    SET_SKILL(ch, SPELL_CIRCLE_OF_FIRE, 1000);
    SET_SKILL(ch, SPELL_IMMOLATE, 1000);
    SET_SKILL(ch, SPELL_MASS_INVIS, 1000);
    /*      SET_SKILL(ch, SPELL_RELOCATE, 0); */
    SET_SKILL(ch, SPELL_CREMATE, 1000);
    /*      SET_SKILL(ch, SPELL_METEORSWARM, 0); */
    SET_SKILL(ch, SPELL_NEGATE_HEAT, 1000);
    /* SET_SKILL(ch, SPELL_SUPERNOVA, 0); */
    /*      SET_SKILL(ch, SPELL_WIZARD_EYE, 0); */
    /*    SET_SKILL(ch, SPELL_HARNESS, 1000); */
    /*    SET_SKILL(ch, SPELL_INCENDIARY_NEBULA, 1000);*/

    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SCRIBE, IS_NPC(ch) ? roll_mob_skill(ch) :  50);
    SET_SKILL(ch, SKILL_KNOW_SPELL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_CRYOMANCER:
    SET_SKILL(ch, SPELL_ICE_DARTS, 1000);
    SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    SET_SKILL(ch, SPELL_CONCEALMENT, 1000);
    SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
    SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
    SET_SKILL(ch, SPELL_STRENGTH, 1000);
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
    SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
    SET_SKILL(ch, SPELL_ICE_ARMOR, 1000);
    SET_SKILL(ch, SPELL_EXTINGUISH, 1000);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    SET_SKILL(ch, SPELL_TELEPORT, 1000);
    SET_SKILL(ch, SPELL_LEVITATE, 1000);
    SET_SKILL(ch, SPELL_COLDSHIELD, 1000);
    SET_SKILL(ch, SPELL_RAY_OF_ENFEEB, 1000);
    SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
    SET_SKILL(ch, SPELL_ICE_DAGGER, 1000);
    SET_SKILL(ch, SPELL_MINOR_PARALYSIS, 1000);
    SET_SKILL(ch, SPELL_SLEEP, 1000);
    SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
    SET_SKILL(ch, SPELL_FREEZING_WIND, 1000);
    SET_SKILL(ch, SPELL_FARSEE, 1000);
    SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
    SET_SKILL(ch, SPELL_INVISIBLE, 1000);
    SET_SKILL(ch, SPELL_HASTE, 1000);
    SET_SKILL(ch, SPELL_ICE_STORM, 1000);
    SET_SKILL(ch, SPELL_MINOR_GLOBE, 1000);
    SET_SKILL(ch, SPELL_RAIN, 1000);
    SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
    SET_SKILL(ch, SPELL_FREEZE, 1000);
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_FLY, 1000);
    SET_SKILL(ch, SPELL_CHAIN_LIGHTNING, 1000);
    /*      SET_SKILL(ch, SPELL_MAJOR_GLOBE, 0); */
    SET_SKILL(ch, SPELL_WALL_OF_ICE, 1000);
    SET_SKILL(ch, SPELL_MASS_INVIS, 1000);
    /*      SET_SKILL(ch, SPELL_RELOCATE, 0); */
    SET_SKILL(ch, SPELL_ICEBALL, 1000);
    SET_SKILL(ch, SPELL_NEGATE_COLD, 1000);
    SET_SKILL(ch, SPELL_WATERFORM, 1000);
    /*      SET_SKILL(ch, SPELL_WIZARD_EYE, 0); */
    SET_SKILL(ch, SPELL_FLOOD, 0);
    /*      SET_SKILL(ch, SPELL_ICE_SHARDS, 0); */
    /*SET_SKILL(ch, SPELL_HARNESS, 1000);*/
    /*SET_SKILL(ch, SPELL_CHARM, 1000);*/
    /*SET_SKILL(ch, SPELL_GREATER_WATERWALK, 1000);*/

    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SCRIBE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KNOW_SPELL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_ILLUSIONIST:
    SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
    SET_SKILL(ch, SPELL_FARSEE, 1000);
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
    SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
    SET_SKILL(ch, SPELL_INFRAVISION, 1000);
    SET_SKILL(ch, SPELL_INVISIBLE, 1000);
    SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
    SET_SKILL(ch, SPELL_STRENGTH, 1000);
    SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
    SET_SKILL(ch, SPELL_SLEEP, 1000);
    SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
    SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
    SET_SKILL(ch, SPELL_COLOR_SPRAY, 1000);
    SET_SKILL(ch, SPELL_FIREBALL, 1000);
    /* SET_SKILL(ch, SPELL_CHARM, 1000); */
    SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
    SET_SKILL(ch, SPELL_FLY, 1000);
    SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
    SET_SKILL(ch, SPELL_HASTE, 1000);
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SPELL_METEORSWARM, 1000);
    SET_SKILL(ch, SPELL_BIGBYS_CLENCHED_FIST, 1000);

    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SCRIBE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KNOW_SPELL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
    SET_SKILL(ch, SPELL_ICE_STORM, 1000);
    SET_SKILL(ch, SPELL_ICE_SHARDS, 1000);
    SET_SKILL(ch, SPELL_INCENDIARY_NEBULA, 1000);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); 

    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_CLERIC:
    SET_SKILL(ch, SPELL_ARMOR, 1000);
    SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
    SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
    SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
    SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);   
    SET_SKILL(ch, SPELL_BLESS, 1000);   
    SET_SKILL(ch, SPELL_CURE_SERIOUS, 1000);
    SET_SKILL(ch, SPELL_VIGORIZE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_CAUSE_SERIOUS, 1000);
    SET_SKILL(ch, SPELL_PRESERVE, 1000);
    SET_SKILL(ch, SPELL_VIGORIZE_SERIOUS, 1000);
    SET_SKILL(ch, SPELL_CAUSE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
    SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
    SET_SKILL(ch, SPELL_POISON, 1000); 
    SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
    SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
    SET_SKILL(ch, SPELL_BLINDNESS, 1000);
    SET_SKILL(ch, SPELL_SUMMON, 1000);
    SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
    SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
    SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
    /*    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);*/
    SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
    SET_SKILL(ch, SPELL_HEAL, 1000);
    SET_SKILL(ch, SPELL_HARM, 1000);
    SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
    SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
    SET_SKILL(ch, SPELL_DESTROY_UNDEAD, 1000);
    SET_SKILL(ch, SPELL_VITALITY, 1000);    
    SET_SKILL(ch, SPELL_UNHOLY_WORD, 1000);
    SET_SKILL(ch, SPELL_HOLY_WORD, 1000);
    SET_SKILL(ch, SPELL_ILLUMINATION, 1000);
    SET_SKILL(ch, SPELL_SILENCE, 1000);
    SET_SKILL(ch, SPELL_FLAMESTRIKE, 1000);
    SET_SKILL(ch, SPELL_DARKNESS, 1000);
    SET_SKILL(ch, SPELL_WATERWALK, 1000);
    SET_SKILL(ch, SPELL_FULL_HEAL, 1000);
    SET_SKILL(ch, SPELL_FULL_HARM, 1000);
    /*      SET_SKILL(ch, SPELL_GROUP_HEAL, 0); */
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    /*      SET_SKILL(ch, SPELL_PLANE_SHIFT, 0); */
    /*      SET_SKILL(ch, SPELL_GROUP_ARMOR, 0); */
    /*      SET_SKILL(ch, SPELL_RESURRECT, 0); */

    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);    
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KNOW_SPELL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_PRIEST:
    SET_SKILL(ch, SPELL_ARMOR, 1000);
    SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
    SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
    SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    SET_SKILL(ch, SPELL_CIRCLE_OF_LIGHT, 1000);
    SET_SKILL(ch, SPELL_BLESS, 1000);
    SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
    SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
    SET_SKILL(ch, SPELL_CURE_SERIOUS, 1000);
    SET_SKILL(ch, SPELL_VIGORIZE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_PRESERVE, 1000);
    SET_SKILL(ch, SPELL_CAUSE_SERIOUS, 1000);
    SET_SKILL(ch, SPELL_VIGORIZE_SERIOUS, 1000);
    SET_SKILL(ch, SPELL_CAUSE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
    SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
    SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
    SET_SKILL(ch, SPELL_DIVINE_BOLT, 1000);
    SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_BLINDNESS, 1000);
    SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
    SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
    SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
    SET_SKILL(ch, SPELL_ELEMENTAL_WARDING, 1000);
    SET_SKILL(ch, SPELL_SUMMON, 1000);
    SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
    SET_SKILL(ch, SPELL_SANE_MIND, 1000);
    SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
    SET_SKILL(ch, SPELL_DESTROY_UNDEAD, 1000);
    SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
    SET_SKILL(ch, SPELL_HEAL, 1000);
    SET_SKILL(ch, SPELL_VITALITY, 1000);
    SET_SKILL(ch, SPELL_PRAYER, 1000);
    SET_SKILL(ch, SPELL_LESSER_EXORCISM, 1000);
    SET_SKILL(ch, SPELL_ILLUMINATION, 1000);
    SET_SKILL(ch, SPELL_DIVINE_RAY, 1000);
    SET_SKILL(ch, SPELL_SILENCE, 1000);
    SET_SKILL(ch, SPELL_LESSER_INVOCATION, 1000);
    SET_SKILL(ch, SPELL_WATERWALK, 1000);
    SET_SKILL(ch, SPELL_FULL_HEAL, 1000);
    SET_SKILL(ch, SPELL_SPEAK_IN_TONGUES, 1000);
    SET_SKILL(ch, SPELL_ENLIGHTENMENT, 1000);
    /*      SET_SKILL(ch, SPELL_GROUP_ARMOR, 0); */
    /*      SET_SKILL(ch, SPELL_GROUP_HEAL, 0); */
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    SET_SKILL(ch, SPELL_GREATER_INVOCATION, 1000);
    SET_SKILL(ch, SPELL_WINGS_OF_HEAVEN, 1000);
    /*      SET_SKILL(ch, SPELL_BANISH, 0); */
    /*      SET_SKILL(ch, SPELL_PLANE_SHIFT, 0); */
    SET_SKILL(ch, SPELL_HOLY_WORD, 1000);
    SET_SKILL(ch, SPELL_EXORCISM, 1000);
    SET_SKILL(ch, SPELL_FULL_HARM, 1000);
    /*      SET_SKILL(ch, SPELL_WORD_OF_COMMAND, 0); */
    SET_SKILL(ch, SPELL_DIVINE_ESSENCE,1000);
    /*      SET_SKILL(ch, SPELL_RESURRECT, 0); */
    /*      SET_SKILL(ch, SPELL_HEAVENS_GATE, 0); */
 
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KNOW_SPELL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_DIABOLIST:
    SET_SKILL(ch, SPELL_DEMONSKIN, 1000);
    SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
    SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
    SET_SKILL(ch, SPELL_CURE_SERIOUS, 1000);
    SET_SKILL(ch, SPELL_VIGORIZE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_PRESERVE, 1000);
    SET_SKILL(ch, SPELL_DARK_PRESENCE, 1000);
    SET_SKILL(ch, SPELL_DARK_FEAST, 1000);
    SET_SKILL(ch, SPELL_CAUSE_SERIOUS, 1000);
    SET_SKILL(ch, SPELL_HELL_BOLT, 1000);
    SET_SKILL(ch, SPELL_CAUSE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
    SET_SKILL(ch, SPELL_VIGORIZE_SERIOUS, 1000);
    SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
    SET_SKILL(ch, SPELL_BLINDNESS, 1000);
    SET_SKILL(ch, SPELL_SUMMON, 1000);
    SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
    SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
    SET_SKILL(ch, SPELL_DISEASE, 1000);
    SET_SKILL(ch, SPELL_DEMONIC_ASPECT, 1000);
    SET_SKILL(ch, SPELL_ELEMENTAL_WARDING, 1000);
    SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
    SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
    SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
    SET_SKILL(ch, SPELL_HEAL, 1000);
    SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
    SET_SKILL(ch, SPELL_VITALITY, 1000);
    SET_SKILL(ch, SPELL_SANE_MIND, 1000);
    SET_SKILL(ch, SPELL_DARKNESS, 1000);
    SET_SKILL(ch, SPELL_SILENCE, 1000);
    SET_SKILL(ch, SPELL_STYGIAN_ERUPTION, 1000);
    SET_SKILL(ch, SPELL_INSANITY, 1000);
    SET_SKILL(ch, SPELL_DEMONIC_MUTATION, 1000);
    SET_SKILL(ch, SPELL_LESSER_INVOCATION, 1000);
    SET_SKILL(ch, SPELL_WATERWALK, 1000);
    SET_SKILL(ch, SPELL_FULL_HEAL, 1000);
    SET_SKILL(ch, SPELL_POISON, 1000); 
    /*      SET_SKILL(ch, SPELL_HELLFIRE_BRIMSTONE, 0); */
    SET_SKILL(ch, SPELL_SPEAK_IN_TONGUES, 1000);
    /*      SET_SKILL(ch, SPELL_GROUP_HEAL, 0); */
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    SET_SKILL(ch, SPELL_GREATER_INVOCATION, 1000);
    SET_SKILL(ch, SPELL_WINGS_OF_HELL, 1000);
    /*      SET_SKILL(ch, SPELL_BANISH, 0); */
    /*      SET_SKILL(ch, SPELL_PLANE_SHIFT, 0); */
    SET_SKILL(ch, SPELL_UNHOLY_WORD, 1000);
    SET_SKILL(ch, SPELL_FULL_HARM, 1000);
    /*      SET_SKILL(ch, SPELL_WORD_OF_COMMAND, 0); */
    /*      SET_SKILL(ch, SPELL_HELLS_GATE, 0); */
    /*      SET_SKILL(ch, SPELL_RESURRECT, 0); */

    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KNOW_SPELL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_MYSTIC:
    SET_SKILL(ch, SPELL_BLESS, 1000);
    SET_SKILL(ch, SPELL_ARMOR, 1000);
    SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
    SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
    SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
    SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
    SET_SKILL(ch, SPELL_BLESS, 1000);
    SET_SKILL(ch, SPELL_BLINDNESS, 1000);
    SET_SKILL(ch, SPELL_INFRAVISION, 1000);
    SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
    SET_SKILL(ch, SPELL_GROUP_ARMOR, 1000);
    SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_SUMMON, 1000);
    SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
    SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
    SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
    SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
    SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
    SET_SKILL(ch, SPELL_HEAL, 1000);
    SET_SKILL(ch, SPELL_HARM, 1000);
    SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
    SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
    SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
    SET_SKILL(ch, SPELL_FULL_HEAL, 1000);
    SET_SKILL(ch, SPELL_FULL_HARM, 1000);
    SET_SKILL(ch, SPELL_VITALITY, 1000);
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SPELL_DARKNESS, 1000);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KNOW_SPELL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_THIEF:
    SET_SKILL(ch, SKILL_SNEAK,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_HIDE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_STEAL,  IS_NPC(ch) ? roll_mob_skill(ch) : 150);
    SET_SKILL(ch, SKILL_BACKSTAB,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_PICK_LOCK,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_TRACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PARRY,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_CONCEAL, IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_STEALTH, IS_NPC(ch) ? roll_mob_skill(ch) : 100);

    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_ROGUE:
    SET_SKILL(ch, SKILL_SNEAK,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_HIDE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BACKSTAB,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_PICK_LOCK,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_TRACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PARRY,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_EYE_GOUGE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_STEALTH, IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_CORNER, IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_SHADOW, IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_CONCEAL, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_BARD:
    SET_SKILL(ch, SKILL_SNEAK,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_HIDE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_STEAL,  IS_NPC(ch) ? roll_mob_skill(ch) : 150);
    SET_SKILL(ch, SKILL_BACKSTAB,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_PICK_LOCK,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_TRACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PARRY,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_WARRIOR:
    SET_SKILL(ch, SKILL_RETREAT, IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_DISARM,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_HITALL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_GUARD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SWITCH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    /*    SET_SKILL(ch, SKILL_TRACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BASH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KICK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RESCUE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    /*   SET_SKILL(ch, SKILL_TAME,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PARRY,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIPOST,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_MONK:
    SET_SKILL(ch, SKILL_BAREHAND, 1000);
    SET_SKILL(ch, SKILL_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SWITCH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    /*   SET_SKILL(ch, SKILL_GUARD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
	 SET_SKILL(ch, SKILL_TRACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    SET_SKILL(ch, SKILL_DUAL_WIELD, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    /*   SET_SKILL(ch, SKILL_BASH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
    SET_SKILL(ch, SKILL_KICK,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    /*   SET_SKILL(ch, SKILL_RESCUE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); 
	 SET_SKILL(ch, SKILL_TAME,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PARRY,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIPOST,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SAFEFALL, 1000);
    SET_SKILL(ch, SKILL_SPRINGLEAP,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_CORNER, IS_NPC(ch) ? roll_mob_skill(ch) : 100);

    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    SET_SKILL(ch, CHANT_REGENERATION, 1000);
    SET_SKILL(ch, CHANT_BATTLE_HYMN, 1000);
    SET_SKILL(ch, CHANT_WAR_CRY, 1000);
    SET_SKILL(ch, CHANT_PEACE, 1000);
    SET_SKILL(ch, CHANT_SHADOWS_SORROW_SONG, 1000);
    SET_SKILL(ch, CHANT_IVORY_SYMPHONY, 1000);
    /* Quest chant: SET_SKILL(ch, CHANT_ARIA_OF_DISSONANCE, 1000); */
    SET_SKILL(ch, CHANT_SONATA_OF_MALAISE, 1000);
    /* Quest chant: SET_SKILL(ch, CHANT_APOCALYPTIC_ANTHEM, 1000); */
    /* Quest chant: SET_SKILL(ch, CHANT_SEED_OF_DESTRUCTION, 1000); */

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_BERSERKER:
    SET_SKILL(ch, SKILL_GUARD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SWITCH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_HITALL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_TRACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BASH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KICK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RESCUE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_TAME,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PARRY,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIPOST,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_HUNTER:
    SET_SKILL(ch, SKILL_TRACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BASH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KICK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RESCUE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_TAME,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PARRY,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIPOST,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_HUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_ASSASSIN:
    SET_SKILL(ch, SKILL_SNEAK,  IS_NPC(ch) ? roll_mob_skill(ch) : 150);
    SET_SKILL(ch, SKILL_INSTANT_KILL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_HIDE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BACKSTAB,  IS_NPC(ch) ? roll_mob_skill(ch) : 150);
    SET_SKILL(ch, SKILL_TRACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 150);
    SET_SKILL(ch, SKILL_THROATCUT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PARRY,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SHADOW, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_MERCENARY:
    SET_SKILL(ch, SKILL_GROUP_RETREAT, IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_RETREAT, IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_DISARM,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_GUARD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SWITCH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_HIDE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BIND,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BACKSTAB,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_TRACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 150);
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BASH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KICK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    /*  SET_SKILL(ch, SKILL_RESCUE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
	SET_SKILL(ch, SKILL_TAME,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PARRY,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIPOST,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_PALADIN:
    SET_SKILL(ch, SKILL_RETREAT, IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_GUARD,  IS_NPC(ch) ? roll_mob_skill(ch) : 150);
    SET_SKILL(ch, SKILL_SWITCH,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_BASH,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_KICK,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_RESCUE,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_TAME,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); 
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DISARM,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_HITALL,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 250);
    SET_SKILL(ch, SKILL_PARRY,  IS_NPC(ch) ? roll_mob_skill(ch) : 250);
    SET_SKILL(ch, SKILL_RIPOST,  IS_NPC(ch) ? roll_mob_skill(ch) : 250);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 350);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 350);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_SUMMON_MOUNT, 1000);
    SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_BLESS, 1000);
    SET_SKILL(ch, SPELL_ARMOR, 1000);
    SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
    SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
    SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
    SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
    SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
    SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
    SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);    
    SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
    SET_SKILL(ch, SPELL_HEAL, 1000);
    SET_SKILL(ch, SPELL_HOLY_WORD, 1000);
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_ANTI_PALADIN:
    /*SKILLS*/
    SET_SKILL(ch, SKILL_RETREAT, IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_VAMP_TOUCH,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_BASH,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_KICK,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_RESCUE, IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_TAME,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); 
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DISARM,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_HITALL,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_GUARD,  IS_NPC(ch) ? roll_mob_skill(ch) : 150);
    SET_SKILL(ch, SKILL_SWITCH,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
    SET_SKILL(ch, SKILL_DODGE, IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_PARRY,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 350);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 350);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIPOST,  IS_NPC(ch) ? roll_mob_skill(ch) : 250);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 150);
    SET_SKILL(ch, SKILL_SUMMON_MOUNT,  1000);

    /*SPELLS*/
    SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_DEMONSKIN, 1000);
    SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
    SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
    SET_SKILL(ch, SPELL_CAUSE_SERIOUS, 1000);
    SET_SKILL(ch, SPELL_CURSE, 1000);
    SET_SKILL(ch, SPELL_POISON, 1000); 
    SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
    SET_SKILL(ch, SPELL_CAUSE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_BLINDNESS, 1000);
    SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
    SET_SKILL(ch, SPELL_HARM, 1000);
    /*    SET_SKILL(ch, SPELL_VAMPIRIC_BREATH, 1000);*/
    SET_SKILL(ch, SPELL_UNHOLY_WORD, 1000);
    SET_SKILL(ch, SPELL_DETECT_POISON, 1000);

    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_RANGER:
    SET_SKILL(ch, SKILL_RESCUE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SWITCH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    /*  SET_SKILL(ch, SKILL_GUARD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
    SET_SKILL(ch, SKILL_KICK,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    /*  SET_SKILL(ch, SKILL_RESCUE,  IS_NPC(ch) ? roll_mob_skill(ch) : 200); */
    SET_SKILL(ch, SKILL_TRACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 150);
    SET_SKILL(ch, SKILL_BASH,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_TAME,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 150);
    SET_SKILL(ch, SKILL_PARRY,  IS_NPC(ch) ? roll_mob_skill(ch) : 150);
    SET_SKILL(ch, SKILL_RIPOST,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SCRIBE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);


    SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
    SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
    SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
    SET_SKILL(ch, SPELL_BARKSKIN, 1000);
    SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
    SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
    SET_SKILL(ch, SPELL_NATURES_GUIDANCE, 1000);
    /*      SET_SKILL(ch, SPELL_BLUR, 0); */

    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_DRUID:
    SET_SKILL(ch, SPELL_VIGORIZE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
    SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
    SET_SKILL(ch, SPELL_BARKSKIN, 1000);
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    SET_SKILL(ch, SPELL_VIGORIZE_SERIOUS, 1000);
    SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
    SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
    SET_SKILL(ch, SPELL_NIGHT_VISION, 1000);
    SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_CURE_SERIOUS, 1000);
    SET_SKILL(ch, SPELL_WRITHING_WEEDS, 1000);
    SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
    SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
    SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_SUMMON, 1000);
    SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
    SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
    SET_SKILL(ch, SPELL_CREATE_SPRING, 1000);
    SET_SKILL(ch, SPELL_CONTROL_WEATHER, 1000);
    SET_SKILL(ch, SPELL_HARM, 1000);
    SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
    SET_SKILL(ch, SPELL_NOURISHMENT, 1000);
    SET_SKILL(ch, SPELL_HEAL, 1000);
    SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
    SET_SKILL(ch, SPELL_WATERWALK, 1000);
    SET_SKILL(ch, SPELL_VITALITY, 1000);
    SET_SKILL(ch, SPELL_DARKNESS, 1000);
    SET_SKILL(ch, SPELL_ILLUMINATION, 1000);
    SET_SKILL(ch, SPELL_GAIAS_CLOAK, 1000);
    SET_SKILL(ch, SPELL_CALL_LIGHTNING, 1000);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    SET_SKILL(ch, SPELL_NATURES_EMBRACE, 1000);
    SET_SKILL(ch, SPELL_ENTANGLE, 1000);
    SET_SKILL(ch, SPELL_URBAN_RENEWAL, 1000);
    SET_SKILL(ch, SPELL_SUNRAY, 1000);
    SET_SKILL(ch, SPELL_ARMOR_OF_GAIA, 1000);
    SET_SKILL(ch, SPELL_INVIGORATE, 1000);
    SET_SKILL(ch, SPELL_WANDERING_WOODS, 1000);
    SET_SKILL(ch, SPELL_POISON, 1000); 
    /*      SET_SKILL(ch, SPELL_MOONWELL, 1000); */
    /*      SET_SKILL(ch, SPELL_CREEPING_DOOM, 1000); */
    SET_SKILL(ch, SPELL_MOONBEAM, 1000);
    SET_SKILL(ch, SKILL_TAME,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KNOW_SPELL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SHAPECHANGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  case CLASS_SHAMAN:
    SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_ARMOR, 1000);
    SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
    SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
    SET_SKILL(ch, SKILL_TAME,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
    SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
    SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
    SET_SKILL(ch, SPELL_BLINDNESS, 1000);
    SET_SKILL(ch, SPELL_BLESS, 1000);
    SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
    SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_SUMMON, 1000);
    SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
    SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
    SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
    SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
    SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
    SET_SKILL(ch, SPELL_HEAL, 1000);
    SET_SKILL(ch, SPELL_HARM, 1000);
    SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
    SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
    SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
    SET_SKILL(ch, SPELL_FIREBALL, 1000);
    SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
    SET_SKILL(ch, SPELL_HASTE, 1000);
    SET_SKILL(ch, SPELL_VITALITY, 1000);
    SET_SKILL(ch, SKILL_DODGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SPELL_DARKNESS, 1000);
    SET_SKILL(ch, SKILL_RIDING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MOUNT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_MEDITATE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_KNOW_SPELL,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SKILL_BANDAGE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);

    /*SET_SKILL(ch, SKILL_MISSILE, IS_NPC(ch) ? roll_mob_skill(ch) : 50);*/
    break;
  default:
    sprintf(buf, "SYSERR:class.c:set_skills(): Unknown Class %d for %s", GET_CLASS(ch), GET_NAME(ch));
    log(buf);
    break;
  }

  set_class_affects(ch);
  set_racial_affects(ch);

  switch (GET_RACE(ch)) {
    
  case RACE_DROW_ELF:
    SET_SKILL(ch, LANG_DUERGAR, 300);
    SET_SKILL(ch, LANG_DROW, 1000);
    SET_SKILL(ch, LANG_OGRE, 300);
    SPEAKING(ch) = LANG_DROW;
    if (GET_LEVEL(ch) == 1 && !IS_NPC(ch)){
      apply_racial_bonus_hit_and_dam(ch, 0);
    }
    GET_ALIGNMENT(ch) = -1000;
    break;
  case RACE_ELF:
    SET_SKILL(ch, LANG_ELVEN, 1000);
    SET_SKILL(ch, LANG_COMMON, 200);
    SET_SKILL(ch, LANG_HALFLING, 200);
    SET_SKILL(ch, LANG_GNOMISH, 200);
    SPEAKING(ch) = LANG_ELVEN;
    if (GET_LEVEL(ch) == 1 && !IS_NPC(ch)){
      apply_racial_bonus_hit_and_dam(ch, 0);
    }
    GET_ALIGNMENT(ch) = 1000;
    break;
  case RACE_DWARF:
    SET_SKILL(ch, LANG_DWARVEN, 1000);
    SET_SKILL(ch, LANG_COMMON, 100);
    SET_SKILL(ch, LANG_GNOMISH, 200);
    SET_SKILL(ch, LANG_HALFLING, 200);
    SPEAKING(ch) = LANG_DWARVEN;
    if (GET_LEVEL(ch) == 1 && !IS_NPC(ch)){
      apply_racial_bonus_hit_and_dam(ch, 0);
    }
    GET_ALIGNMENT(ch) = 1000;
    break;
  case RACE_DUERGAR:
    SET_SKILL(ch, LANG_DUERGAR, 1000);
    SET_SKILL(ch, LANG_DROW, 100);
    SET_SKILL(ch, LANG_OGRE, 200);
    SPEAKING(ch) = LANG_DUERGAR;
    if (GET_LEVEL(ch) == 1 && !IS_NPC(ch)){
      apply_racial_bonus_hit_and_dam(ch, 0);
    }
    GET_ALIGNMENT(ch) = -1000;
    break;
  case RACE_HALFLING:
    SET_SKILL(ch, LANG_HALFLING, 1000);
    SET_SKILL(ch, LANG_COMMON, 400);
    SET_SKILL(ch, LANG_ELVEN, 200);
    SET_SKILL(ch, LANG_DWARVEN, 400);
    SET_SKILL(ch, LANG_GNOMISH, 200);
    SPEAKING(ch) = LANG_HALFLING;
    if (GET_LEVEL(ch) == 1 && !IS_NPC(ch)){
      apply_racial_bonus_hit_and_dam(ch, 0);
    }
    GET_ALIGNMENT(ch) = 1000;
    break;
  case RACE_TROLL:
    SET_SKILL(ch, SKILL_DOORBASH, 1000);
    SET_SKILL(ch, SKILL_BODYSLAM, 1000);
    SET_SKILL(ch, LANG_TROLLISH, 1000);
    SET_SKILL(ch, LANG_DROW, 50);
    SPEAKING(ch) = LANG_TROLLISH;
    if (GET_LEVEL(ch) == 1 && !IS_NPC(ch)){
      apply_racial_bonus_hit_and_dam(ch, 0);
    }
    GET_ALIGNMENT(ch) = -1000;
    break;
  case RACE_OGRE:
    SET_SKILL(ch, SKILL_DOORBASH, 1000);
    SET_SKILL(ch, SKILL_BODYSLAM, 1000);
    SET_SKILL(ch, LANG_OGRE, 1000);
    SET_SKILL(ch, LANG_TROLLISH, 50);
    SPEAKING(ch) = LANG_OGRE;
    if (GET_LEVEL(ch) == 1 && !IS_NPC(ch)){
      apply_racial_bonus_hit_and_dam(ch, 0);
    }
    GET_ALIGNMENT(ch) = -1000;
    break;
  case RACE_HALF_ELF:
    SET_SKILL(ch, LANG_COMMON, 1000);
    SET_SKILL(ch, LANG_ELVEN, 1000);
    SET_SKILL(ch, LANG_DWARVEN, 200);
    SET_SKILL(ch, LANG_HALFLING, 200);
    SPEAKING(ch) = LANG_ELVEN;
    if (GET_LEVEL(ch) == 1 && !IS_NPC(ch)){
      apply_racial_bonus_hit_and_dam(ch, 0);
    }
    GET_ALIGNMENT(ch) = 1000;
    break;
  case RACE_GNOME:
    SET_SKILL(ch, LANG_COMMON, 200);
    SET_SKILL(ch, LANG_ELVEN, 200);
    SET_SKILL(ch, LANG_GNOMISH, 1000);
    SET_SKILL(ch, LANG_HALFLING, 200);
    SPEAKING(ch) = LANG_GNOMISH;
    if (GET_LEVEL(ch) == 1 && !IS_NPC(ch)){
      apply_racial_bonus_hit_and_dam(ch, 0);
    }
    GET_ALIGNMENT(ch) = 1000;
    break;
  case RACE_BARBARIAN:
    SET_SKILL(ch, SKILL_DOORBASH, 1000);
    SET_SKILL(ch, SKILL_BODYSLAM, 1000);
    SET_SKILL(ch, LANG_COMMON, 200);
    SET_SKILL(ch, LANG_BARBARIAN, 1000);
    SPEAKING(ch) = LANG_BARBARIAN;
    if (GET_LEVEL(ch) == 1 && !IS_NPC(ch)){
      apply_racial_bonus_hit_and_dam(ch, 0);
    }
    break;
  case RACE_HUMAN:
    SET_SKILL(ch, LANG_COMMON, 1000);
    SET_SKILL(ch, LANG_ELVEN, 200);
    SET_SKILL(ch, LANG_HALFLING, 200);
    SET_SKILL(ch, LANG_DWARVEN, 200);
    SET_SKILL(ch, LANG_GNOMISH, 200);
    SPEAKING(ch) = LANG_COMMON;
    if (GET_LEVEL(ch) == 1 && !IS_NPC(ch)){
      apply_racial_bonus_hit_and_dam(ch, 0);
    }
    break;
  case RACE_ORC:
    SET_SKILL(ch, LANG_DROW, 200);
    SET_SKILL(ch, LANG_DUERGAR, 200);
    SET_SKILL(ch, LANG_OGRE, 100);
    SET_SKILL(ch, LANG_ORCISH, 1000);
    SET_SKILL(ch, LANG_TROLLISH, 200);
    SPEAKING(ch) = LANG_ORCISH;
    if (GET_LEVEL(ch) == 1 && !IS_NPC(ch)){
      apply_racial_bonus_hit_and_dam(ch, 0);
    }
    GET_ALIGNMENT(ch) = -1000;
    break;
    /* these new cases need to be filled --gurlaek 7/5/1999 */
  case SPECIES_UNDEAD:
    break;
  case SPECIES_HUMANOID:
    break;
  case SPECIES_ANIMAL:
   break;
  case SPECIES_GIANT:
    break;
  case SPECIES_OTHER:
    break;
  case SPECIES_GOBLIN:
    break;
  case SPECIES_DRAGON:
    SET_SKILL (ch, SKILL_BREATHE, roll_mob_skill(ch));
    SET_SKILL (ch, SKILL_SWEEP, roll_mob_skill(ch));
    SET_SKILL (ch, SKILL_ROAR, roll_mob_skill(ch));
    SET_SKILL (ch, SPELL_ACID_BREATH, 1000);
    SET_SKILL (ch, SPELL_FROST_BREATH, 1000);
    SET_SKILL (ch, SPELL_GAS_BREATH, 1000);
    SET_SKILL (ch, SPELL_FIRE_BREATH, 1000);
    SET_SKILL (ch, SPELL_LIGHTNING_BREATH, 1000);
    break;
  case SPECIES_DEMON:
    SET_SKILL (ch, SKILL_BREATHE, roll_mob_skill(ch));
    SET_SKILL (ch, SKILL_ROAR, roll_mob_skill(ch));
    SET_SKILL (ch, SPELL_ACID_BREATH, 1000);
    SET_SKILL (ch, SPELL_FROST_BREATH, 1000);
    SET_SKILL (ch, SPELL_GAS_BREATH, 1000);
    SET_SKILL (ch, SPELL_FIRE_BREATH, 1000);
    SET_SKILL (ch, SPELL_LIGHTNING_BREATH, 1000);
    break;
  default:
    sprintf(buf, "SYSERR:class.c:set_skills(): Unknown Race %d for %s", GET_RACE(ch), GET_NAME(ch));
    log(buf);
    break;
  }
a1061 30
/* Some initializations for characters, including initial skills */
void do_start(struct char_data * ch)
{
  void advance_level(struct char_data * ch, int);
  void set_innate(struct char_data * ch, char *arg);
  
  
  GET_LEVEL(ch) = 1;
  GET_EXP(ch) = 1;
  
  set_title(ch, "\0");
  ch->points.max_hit = 15;
  GET_NATHPS(ch) = 15;
  set_skills(ch);
  
  advance_level(ch, TRUE);
  
  GET_HIT(ch) = GET_MAX_HIT(ch);
  GET_MANA(ch) = GET_MAX_MANA(ch);
  GET_MOVE(ch) = GET_MAX_MOVE(ch);
  
  GET_COND(ch, THIRST) = 24;
  GET_COND(ch, FULL) = 24;
  GET_COND(ch, DRUNK) = 0;
  
  ch->player.time.played = 0;
  ch->player.time.logon = time(0);
}


a1081 2
   /*   extern struct con_app_type con_app[]; */
  void update_skills(struct char_data *ch);
d1523 3
a1525 3
  check_regen_rates(ch);	/* start regening new points */
  update_skills(ch);            /* update skills/spells for new level -gurlaek 7/5/1999 */
  save_char(ch);
a1532 1
  
a1594 3



d1596 3
a1598 3
 * SPELLS AND SKILLS.  This area defines which spells are assigned to
 * which classes, and the minimum level the character must be to use
 * the spell or skill.
d1600 1
d1603 68
a1670 36
  int cls_mage = (1 << CLASS_SORCERER);
  int cls_cleric = (1 << CLASS_CLERIC);
  int cls_thief = (1 << CLASS_THIEF);
  int cls_warrior = (1 << CLASS_WARRIOR);
  int cls_paladin = (1 << CLASS_PALADIN);
  int cls_antipaladin = (1 << CLASS_ANTI_PALADIN);
  int cls_ranger = (1 << CLASS_RANGER);
  int cls_druid = (1 << CLASS_DRUID);
  int cls_shaman = (1 << CLASS_SHAMAN);
  int cls_assassin = (1 << CLASS_ASSASSIN);
  int cls_mercenary = (1 << CLASS_MERCENARY);
  int cls_necro = (1 << CLASS_NECROMANCER);
  int cls_conj = (1 << CLASS_CONJURER);
  int cls_monk = (1 << CLASS_MONK);
  int cls_bers = (1 << CLASS_BERSERKER);
  int cls_priest = (1 << CLASS_PRIEST);
  int cls_diab = (1 << CLASS_DIABOLIST);
  int cls_mystic = (1 << CLASS_MYSTIC);
  int cls_rogue = (1 << CLASS_ROGUE);
  int cls_bard = (1 << CLASS_BARD);
  int cls_pyro = (1 << CLASS_PYROMANCER);
  int cls_cryo = (1 << CLASS_CRYOMANCER);
  int cls_illu = (1 << CLASS_ILLUSIONIST);
  int cls_hunter = (1 << CLASS_HUNTER);
  
  
  /* Assign a spell/skill to a a whole group of classes (0 is all)
     For instance, { SKILL_SECOND_ATTACK, cls_mage | cls_cleric, 14 },
     will give mages and clerics the SECOND_ATTACK skill at level 14.
     More convenient than individual spell_level()s.  Use 0 to give
     a skill to all the classes.
     -dkoepke */
  int base_skl[][3] = {
    { SKILL_MOUNT , 0, 1 },
    { SKILL_RIDING, 0, 1 },
    { -1, -1 } /* THIS MUST END THE LIST*/
d1673 1
a1673 2
  /* give all the base_skl[]'s*/
  for (j = 0; base_skl[j][0] != -1; j++)
d1675 2
a1676 2
      if (!base_skl[j][1] || IS_SET(base_skl[j][1], (1 << i)))
         spell_level(base_skl[j][0], i, base_skl[j][2], 2);
d1678 1
a1678 1
  /* in my base patch, cls_mage, etc. are unused and that leads to
d1680 1
a1680 1
  j = (cls_mage-cls_mage)+(cls_cleric-cls_cleric)+(cls_thief-cls_thief)+
d1689 2
a1690 57
  /* MAGES */
  spell_level(SPELL_BURNING_HANDS, CLASS_SORCERER, CIRCLE_1, 1);
  spell_level(SPELL_MINOR_CREATION, CLASS_SORCERER, CIRCLE_1, 1);
  spell_level(SPELL_MAGIC_MISSILE, CLASS_SORCERER, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_MAGIC, CLASS_SORCERER, CIRCLE_1, 1);
  spell_level(SPELL_CONCEALMENT, CLASS_SORCERER, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_SORCERER, CIRCLE_2, 2);
  spell_level(SPELL_STRENGTH, CLASS_SORCERER, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_INVIS, CLASS_SORCERER, CIRCLE_2, 2);
  spell_level(SPELL_IDENTIFY, CLASS_SORCERER, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_SORCERER, CIRCLE_3, 3);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_SORCERER, CIRCLE_3, 3);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_SORCERER, CIRCLE_3, 3);
  spell_level(SPELL_TELEPORT, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_MINOR_PARALYSIS, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_RAY_OF_ENFEEB, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_LEVITATE, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_INFRAVISION, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_MINOR_GLOBE, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_COLDSHIELD, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_FIRESHIELD, CLASS_SORCERER, CIRCLE_4, 4);
  spell_level(SPELL_FARSEE, CLASS_SORCERER, CIRCLE_5, 5);
  spell_level(SPELL_COLOR_SPRAY, CLASS_SORCERER, CIRCLE_5, 5);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_SORCERER, CIRCLE_5, 5);
  spell_level(SPELL_CONE_OF_COLD, CLASS_SORCERER, CIRCLE_5, 5);
  spell_level(SPELL_SLEEP, CLASS_SORCERER, CIRCLE_5, 5);
  spell_level(SPELL_INVISIBLE, CLASS_SORCERER, CIRCLE_5, 5);
  spell_level(SPELL_FIREBALL, CLASS_SORCERER, CIRCLE_6, 6);
  spell_level(SPELL_HASTE, CLASS_SORCERER, CIRCLE_6, 6);
  spell_level(SPELL_ICE_STORM, CLASS_SORCERER, CIRCLE_6, 6);
  spell_level(SPELL_FLY, CLASS_SORCERER, CIRCLE_6, 6);
  spell_level(SPELL_STONE_SKIN, CLASS_SORCERER, CIRCLE_6, 6);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_SORCERER, CIRCLE_7, 7);
  spell_level(SPELL_BIGBYS_CLENCHED_FIST, CLASS_SORCERER, CIRCLE_7, 7);
  spell_level(SPELL_CHAIN_LIGHTNING, CLASS_SORCERER, CIRCLE_8, 8);
  spell_level(SPELL_HARNESS, CLASS_SORCERER, CIRCLE_8, 8);
  spell_level(SPELL_MAJOR_GLOBE, CLASS_SORCERER, CIRCLE_8, 8);
  spell_level(SPELL_RELOCATE, CLASS_SORCERER, CIRCLE_9, 9);
  spell_level(SPELL_MASS_INVIS, CLASS_SORCERER, CIRCLE_9, 9);
  spell_level(SPELL_DISINTEGRATE, CLASS_SORCERER, CIRCLE_9, 9);
  spell_level(SPELL_METEORSWARM, CLASS_SORCERER, CIRCLE_10, 10);
  spell_level(SPELL_REDUCE, CLASS_SORCERER, CIRCLE_11, 11);
  spell_level(SPELL_ENLARGE, CLASS_SORCERER, CIRCLE_11, 11);
  spell_level(SPELL_WIZARD_EYE, CLASS_SORCERER, CIRCLE_11, 11);
  spell_level(SPELL_CHARM, CLASS_SORCERER, CIRCLE_12, 12);
  spell_level(SKILL_DODGE, CLASS_SORCERER, 20, 2);
  spell_level(SKILL_RIDING, CLASS_SORCERER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_SORCERER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_SORCERER, 1, 2);
  spell_level(SKILL_SCRIBE, CLASS_SORCERER, 1, 1);
  spell_level(SKILL_KNOW_SPELL, CLASS_SORCERER, 1, 1);
  spell_level(SKILL_QUICK_CHANT, CLASS_SORCERER, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_SORCERER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_SORCERER, 1, 2);
  spell_level(SKILL_FIRST_AID, CLASS_SORCERER, 1, 2);
  spell_level(SKILL_PIERCING, CLASS_SORCERER, 1, 1);
d1692 16
a1707 1
  /*spell_level(SKILL_MISSILE, CLASS_SORCERER, 1, 1);*/
d1709 22
a1730 57
  /* PYROMANCER */
  spell_level(SPELL_MINOR_CREATION, CLASS_PYROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_MAGIC, CLASS_PYROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_BURNING_HANDS, CLASS_PYROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_FIRE_DARTS, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_MAGIC_TORCH, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_STRENGTH, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_CONCEALMENT, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_INVIS, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_SMOKE, CLASS_PYROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_PYROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_PYROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_MIRAGE, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_FLAME_BLADE, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_TELEPORT, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_RAY_OF_ENFEEB, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_LEVITATE, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_INFRAVISION, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_FIREBALL, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_FIRESHIELD, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_HEATWAVE, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_FARSEE, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_SLEEP, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_MINOR_PARALYSIS, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_INVISIBLE, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_FIRESTORM, CLASS_PYROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_MINOR_GLOBE, CLASS_PYROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_HASTE, CLASS_PYROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_STONE_SKIN, CLASS_PYROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_MELT, CLASS_PYROMANCER, CIRCLE_7, 7);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_PYROMANCER, CIRCLE_7, 7);
  spell_level(SPELL_COMBUST, CLASS_PYROMANCER, CIRCLE_8, 8);
  /*  spell_level(SPELL_HARNESS, CLASS_PYROMANCER, CIRCLE_8, 8);*/
  spell_level(SPELL_MAJOR_GLOBE, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_FLY, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_RELOCATE, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_CIRCLE_OF_FIRE, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_IMMOLATE, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_MASS_INVIS, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_CREMATE, CLASS_PYROMANCER, CIRCLE_10, 10);
  spell_level(SPELL_NEGATE_HEAT, CLASS_PYROMANCER, CIRCLE_10, 10);
  spell_level(SPELL_METEORSWARM, CLASS_PYROMANCER, CIRCLE_11, 11);
  spell_level(SPELL_SUPERNOVA, CLASS_PYROMANCER, CIRCLE_12, 12);
/*    spell_level(SPELL_WIZARD_EYE, CLASS_PYROMANCER, CIRCLE_11, 11); */
  /* skills */
  spell_level(SKILL_FIRST_AID, CLASS_PYROMANCER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_PYROMANCER, 1, 2);
  spell_level(SKILL_DODGE, CLASS_PYROMANCER, 20, 2);
  spell_level(SKILL_RIDING, CLASS_PYROMANCER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_PYROMANCER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_PYROMANCER, 1, 2);
  spell_level(SKILL_SCRIBE, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_KNOW_SPELL, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_QUICK_CHANT, CLASS_PYROMANCER, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_PYROMANCER, 1, 2);
  spell_level(SKILL_PIERCING, CLASS_PYROMANCER, 1, 1);
d1732 16
a1747 1
  /*spell_level(SKILL_MISSILE, CLASS_PYROMANCER, 1, 1);*/
d1749 11
a1759 60
  
  /* CRYOMANCER */
  spell_level(SPELL_ICE_DARTS, CLASS_CRYOMANCER, CIRCLE_1, 1);
  spell_level(SPELL_MINOR_CREATION, CLASS_CRYOMANCER, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_MAGIC, CLASS_CRYOMANCER, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_CRYOMANCER, CIRCLE_2, 2);
  spell_level(SPELL_STRENGTH, CLASS_CRYOMANCER, CIRCLE_2, 2);
  spell_level(SPELL_CONCEALMENT, CLASS_CRYOMANCER, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_INVIS, CLASS_CRYOMANCER, CIRCLE_2, 2);
  spell_level(SPELL_ICE_ARMOR, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_EXTINGUISH, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_ICE_DAGGER, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_TELEPORT, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_RAY_OF_ENFEEB, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_LEVITATE, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_COLDSHIELD, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_MINOR_PARALYSIS, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_FREEZING_WIND, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_FARSEE, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_CONE_OF_COLD, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_SLEEP, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_INVISIBLE, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_ICE_STORM, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_HASTE, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_RAIN, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_MINOR_GLOBE, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_STONE_SKIN, CLASS_CRYOMANCER, CIRCLE_6, 6);
  /*  spell_level(SPELL_WALL_OF_FOG, CLASS_CRYOMANCER, CIRCLE_7, 7);*/
  spell_level(SPELL_FREEZE, CLASS_CRYOMANCER, CIRCLE_7, 7);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_CRYOMANCER, CIRCLE_7, 7);
  spell_level(SPELL_WALL_OF_ICE, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_CHAIN_LIGHTNING, CLASS_CRYOMANCER, CIRCLE_8, 8);
  /*  spell_level(SPELL_HARNESS, CLASS_CRYOMANCER, CIRCLE_8, 8); */
  spell_level(SPELL_MAJOR_GLOBE, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_FLY, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_RELOCATE, CLASS_CRYOMANCER, CIRCLE_9, 9);
  spell_level(SPELL_MASS_INVIS, CLASS_CRYOMANCER, CIRCLE_9, 9);
  spell_level(SPELL_ICEBALL, CLASS_CRYOMANCER, CIRCLE_9, 9);
  spell_level(SPELL_VAPORFORM, CLASS_CRYOMANCER, CIRCLE_13, 13);
  spell_level(SPELL_NEGATE_COLD, CLASS_CRYOMANCER, CIRCLE_10, 10);
  spell_level(SPELL_WATERFORM, CLASS_CRYOMANCER, CIRCLE_10, 10);
  spell_level(SPELL_FLOOD, CLASS_CRYOMANCER, CIRCLE_11, 11);
  spell_level(SPELL_ICE_SHARDS, CLASS_CRYOMANCER, CIRCLE_12, 12);
/*    spell_level(SPELL_WIZARD_EYE, CLASS_CRYOMANCER, CIRCLE_11, 11); */
  spell_level(SKILL_DODGE, CLASS_CRYOMANCER, 20, 2);
  spell_level(SKILL_RIDING, CLASS_CRYOMANCER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_CRYOMANCER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_CRYOMANCER, 1, 2);
  spell_level(SKILL_SCRIBE, CLASS_CRYOMANCER, 1, 1); 
  spell_level(SKILL_KNOW_SPELL, CLASS_CRYOMANCER, 1, 1); 
  spell_level(SKILL_QUICK_CHANT, CLASS_CRYOMANCER, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_CRYOMANCER, 1, 2);
  spell_level(SKILL_FIRST_AID, CLASS_CRYOMANCER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_CRYOMANCER, 1, 2);
  spell_level(SKILL_PIERCING, CLASS_CRYOMANCER, 1, 1);
d1761 1
a1761 1
  /*spell_level(SKILL_MISSILE, CLASS_CRYOMANCER, 1, 1);*/
d1763 20
a1782 40

  /* ILLUSIONIST */
  spell_level(SKILL_FIRST_AID, CLASS_ILLUSIONIST, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_ILLUSIONIST, 1, 2);
  spell_level(SPELL_INCENDIARY_NEBULA, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_FARSEE, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_MAGIC_MISSILE, CLASS_ILLUSIONIST, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_INVIS, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_DETECT_MAGIC, CLASS_ILLUSIONIST, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_ILLUSIONIST, CIRCLE_2, 2);
  spell_level(SPELL_INFRAVISION, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_INVISIBLE, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_BURNING_HANDS, CLASS_ILLUSIONIST, CIRCLE_1, 1);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_ILLUSIONIST, CIRCLE_2, 2);
  spell_level(SPELL_STRENGTH, CLASS_ILLUSIONIST, CIRCLE_2, 2);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_ILLUSIONIST, CIRCLE_3, 3);
  spell_level(SPELL_SLEEP, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_ILLUSIONIST, CIRCLE_4, 4);
  spell_level(SPELL_DETECT_POISON, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_COLOR_SPRAY, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_FIREBALL, CLASS_ILLUSIONIST, CIRCLE_6, 6);
   /*   spell_level(SPELL_CHARM, CLASS_ILLUSIONIST, 31, 2); */
  spell_level(SPELL_STONE_SKIN, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_FLY, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_HASTE, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SKILL_DODGE, CLASS_ILLUSIONIST, 1, 2);
  spell_level(SPELL_METEORSWARM, CLASS_ILLUSIONIST, CIRCLE_10, 10);
  spell_level(SPELL_BIGBYS_CLENCHED_FIST, CLASS_ILLUSIONIST, CIRCLE_8, 8);
  spell_level(SKILL_RIDING, CLASS_ILLUSIONIST, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_ILLUSIONIST, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_ILLUSIONIST, 1, 2);
  spell_level(SKILL_SCRIBE,  CLASS_ILLUSIONIST, 1, 1);
  spell_level(SKILL_KNOW_SPELL,  CLASS_ILLUSIONIST, 1, 1);
  spell_level(SKILL_QUICK_CHANT, CLASS_ILLUSIONIST, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_ILLUSIONIST, CIRCLE_7, 7);
  spell_level(SPELL_CONE_OF_COLD, CLASS_ILLUSIONIST, CIRCLE_5, 5);
  spell_level(SPELL_ICE_STORM, CLASS_ILLUSIONIST, CIRCLE_6, 6);
  spell_level(SPELL_ICE_SHARDS, CLASS_ILLUSIONIST, CIRCLE_11, 11);
  spell_level(SKILL_BANDAGE, CLASS_ILLUSIONIST, 1, 2);
d1784 4
a1787 1
  spell_level(SKILL_PIERCING, CLASS_ILLUSIONIST, 1, 1);
a1788 3
  /*spell_level(SKILL_MISSILE, CLASS_ILLUSIONIST, 1, 1);*/

  /* CLERICS */
a1821 1
  /*  spell_level(SPELL_COMPREHEND_LANG, CLASS_CLERIC, CIRCLE_4, 4);*/
a1836 1

a1841 1

a1845 1
/*  spell_level(SPELL_PLANE_SHIFT, CLASS_CLERIC, CIRCLE_9, 9);*/
d1853 32
a1884 106
  spell_level(SKILL_FIRST_AID, CLASS_CLERIC, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_CLERIC, 1, 2);
  spell_level(SKILL_DODGE, CLASS_CLERIC, 20, 2);
  spell_level(SKILL_RIDING, CLASS_CLERIC, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_CLERIC, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_CLERIC, 1, 2);
  spell_level(SKILL_KNOW_SPELL, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_QUICK_CHANT, CLASS_CLERIC, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_CLERIC, 1, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_CLERIC, 1, 1);

  /*spell_level(SKILL_MISSILE, CLASS_CLERIC, 1, 1);*/


  /* PRIEST */
  spell_level(SPELL_DETECT_MAGIC, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_CURE_LIGHT, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_ARMOR, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_FOOD, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_CAUSE_LIGHT, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_WATER, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_LESSER_ENDURANCE, CLASS_PRIEST, CIRCLE_1,1);

  spell_level(SPELL_DETECT_POISON, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_CURE_SERIOUS, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_VIGORIZE_LIGHT, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_CIRCLE_OF_LIGHT, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_PRESERVE, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_CAUSE_SERIOUS, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_BLESS, CLASS_PRIEST, CIRCLE_2, 2);

  spell_level(SPELL_DIVINE_BOLT, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_VIGORIZE_SERIOUS, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_CAUSE_CRITIC, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_CURE_BLIND, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_PROT_FROM_EVIL, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_CURE_CRITIC, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_REMOVE_POISON, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_ENDURANCE, CLASS_PRIEST, CIRCLE_3, 3); 

  spell_level(SPELL_VIGORIZE_CRITIC, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_ELEMENTAL_WARDING, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_BLINDNESS, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_SUMMON, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_DISPEL_EVIL, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_REMOVE_CURSE, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_SENSE_LIFE, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_PRIEST, CIRCLE_4, 4);

  spell_level(SPELL_PRAYER, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_SOULSHIELD, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_DESTROY_UNDEAD, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_EARTHQUAKE, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_HEAL, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_SANE_MIND, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_GREATER_ENDURANCE, CLASS_PRIEST, CIRCLE_5, 5); 

  spell_level(SPELL_LESSER_EXORCISM, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_DIVINE_RAY, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_ILLUMINATION, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_SILENCE, CLASS_PRIEST, CIRCLE_6, 6);

  spell_level(SPELL_VITALITY, CLASS_PRIEST, CIRCLE_7, 7);
  spell_level(SPELL_LESSER_INVOCATION, CLASS_PRIEST, CIRCLE_7, 7);
  spell_level(SPELL_WATERWALK, CLASS_PRIEST, CIRCLE_7, 7);  
  spell_level(SPELL_FULL_HEAL, CLASS_PRIEST, CIRCLE_7, 7);

  spell_level(SPELL_SPEAK_IN_TONGUES, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_ENLIGHTENMENT, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_GROUP_ARMOR, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_GROUP_HEAL, CLASS_PRIEST, CIRCLE_8, 8);

  spell_level(SPELL_GREATER_VITALITY, CLASS_PRIEST, CIRCLE_9, 9); 
  spell_level(SPELL_EXORCISM, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_GREATER_INVOCATION, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_WINGS_OF_HEAVEN, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_BANISH, CLASS_PRIEST, CIRCLE_9, 9);
/*  spell_level(SPELL_PLANE_SHIFT, CLASS_PRIEST, CIRCLE_9, 9); */
  spell_level(SPELL_HOLY_WORD, CLASS_PRIEST, CIRCLE_9, 9);

  spell_level(SPELL_WORD_OF_COMMAND, CLASS_PRIEST, CIRCLE_10, 10);
  spell_level(SPELL_FULL_HARM, CLASS_PRIEST, CIRCLE_10, 10);
  spell_level(SPELL_DIVINE_ESSENCE, CLASS_PRIEST, CIRCLE_10, 10);

  spell_level(SPELL_HEAVENS_GATE, CLASS_PRIEST, CIRCLE_11, 11);
  spell_level(SPELL_RESURRECT, CLASS_PRIEST, CIRCLE_11, 11);

  spell_level(SPELL_DRAGONS_HEALTH, CLASS_PRIEST, CIRCLE_12, 12); 


  spell_level(SKILL_DODGE, CLASS_PRIEST, 20, 2);
  spell_level(SKILL_RIDING, CLASS_PRIEST, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_PRIEST, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_PRIEST, 1, 2);
  spell_level(SKILL_KNOW_SPELL, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_QUICK_CHANT, CLASS_PRIEST, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_PRIEST, 1, 2);
  spell_level(SKILL_FIRST_AID, CLASS_PRIEST, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_PRIEST, 1, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_PRIEST, 1, 1);

  /*spell_level(SKILL_MISSILE, CLASS_PRIEST, 1, 1);*/
d1886 45
a1992 1
/*  spell_level(SPELL_PLANE_SHIFT, CLASS_DIABOLIST, CIRCLE_9, 9); */
a2000 1
  spell_level(SKILL_DOUSE, CLASS_DIABOLIST, 1, 2);
a2001 7
  spell_level(SKILL_RIDING, CLASS_DIABOLIST, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_DIABOLIST, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_DIABOLIST, 1, 2);
  spell_level(SKILL_KNOW_SPELL, CLASS_DIABOLIST, 1, 1);
  spell_level(SKILL_QUICK_CHANT, CLASS_DIABOLIST, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_DIABOLIST, 1, 2);
  spell_level(SKILL_FIRST_AID, CLASS_DIABOLIST, 1, 2);
d2005 4
a2008 1
  /*spell_level(SKILL_MISSILE, CLASS_DIABOLIST, 1, 1);*/
d2010 6
d2017 5
a2021 43
  /* MYSTICS */
  spell_level(SKILL_FIRST_AID, CLASS_MYSTIC, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_MYSTIC, 1, 2);
  spell_level(SPELL_CURE_LIGHT, CLASS_MYSTIC, CIRCLE_1, 1);
  spell_level(SPELL_ARMOR, CLASS_MYSTIC, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_FOOD, CLASS_MYSTIC, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_WATER, CLASS_MYSTIC, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_POISON, CLASS_MYSTIC, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_MYSTIC, CIRCLE_2, 2);
  spell_level(SPELL_CURE_BLIND, CLASS_MYSTIC, CIRCLE_2, 2);
  spell_level(SPELL_BLESS, CLASS_MYSTIC, CIRCLE_1, 1);
  /*spell_level(SPELL_DETECT_INVIS, CLASS_MYSTIC, 6);*/
  spell_level(SPELL_BLINDNESS, CLASS_MYSTIC, CIRCLE_4, 4);
  spell_level(SPELL_INFRAVISION, CLASS_MYSTIC, CIRCLE_9, 9);
  spell_level(SPELL_PROT_FROM_EVIL, CLASS_MYSTIC, CIRCLE_3, 3);
  spell_level(SPELL_GROUP_ARMOR, CLASS_MYSTIC, CIRCLE_10, 10);
  spell_level(SPELL_CURE_CRITIC, CLASS_MYSTIC, CIRCLE_2, 2);
  spell_level(SPELL_SUMMON, CLASS_MYSTIC, CIRCLE_3, 3);
  spell_level(SPELL_REMOVE_POISON, CLASS_MYSTIC, CIRCLE_3, 3);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_MYSTIC, CIRCLE_6, 6);
  spell_level(SPELL_EARTHQUAKE, CLASS_MYSTIC, CIRCLE_5, 5);
  spell_level(SPELL_DISPEL_EVIL, CLASS_MYSTIC, CIRCLE_4, 4);
  spell_level(SPELL_DISPEL_GOOD, CLASS_MYSTIC, CIRCLE_4, 4);
  /* spell_level(SPELL_SANCTUARY, CLASS_MYSTIC, 49); */
  /* spell_level(SPELL_CALL_LIGHTNING, CLASS_MYSTIC, 15); */
  spell_level(SPELL_HEAL, CLASS_MYSTIC, CIRCLE_5, 5);
  /* spell_level(SPELL_CONTROL_WEATHER, CLASS_MYSTIC, 17); */
  spell_level(SPELL_HARM, CLASS_MYSTIC, CIRCLE_5, 5);
  spell_level(SPELL_GROUP_HEAL, CLASS_MYSTIC, CIRCLE_8, 8);
  spell_level(SPELL_REMOVE_CURSE, CLASS_MYSTIC, CIRCLE_5, 5);
  spell_level(SPELL_SENSE_LIFE, CLASS_MYSTIC, CIRCLE_4, 4);
  spell_level(SPELL_FULL_HEAL, CLASS_MYSTIC, CIRCLE_7, 7);
  spell_level(SPELL_FULL_HARM, CLASS_MYSTIC, CIRCLE_9, 9);
  spell_level(SPELL_VITALITY, CLASS_MYSTIC, CIRCLE_5, 5);
  spell_level(SKILL_DODGE, CLASS_MYSTIC, 1, 2);
  spell_level(SPELL_DARKNESS, CLASS_MYSTIC, CIRCLE_6, 6);
  spell_level(SKILL_RIDING, CLASS_MYSTIC, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_MYSTIC, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_MYSTIC, 1, 2);
  spell_level(SKILL_KNOW_SPELL, CLASS_MYSTIC, 1, 1);
  spell_level(SKILL_QUICK_CHANT, CLASS_MYSTIC, 1, 2);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_MYSTIC, CIRCLE_5, 5);
  spell_level(SKILL_BANDAGE, CLASS_MYSTIC, 1, 2);
d2023 7
a2029 3
  spell_level(SKILL_BLUDGEONING, CLASS_MYSTIC, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_MYSTIC, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_MYSTIC, 1, 1);
d2031 6
a2036 20
  /*spell_level(SKILL_MISSILE, CLASS_MYSTIC, 1, 1);*/
  
  /* THIEVES */
  spell_level(SKILL_FIRST_AID, CLASS_THIEF, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_THIEF, 1, 2);
  spell_level(SKILL_SNEAK, CLASS_THIEF, 1, 2);
  spell_level(SKILL_PICK_LOCK, CLASS_THIEF, 6, 2);
  spell_level(SKILL_BACKSTAB, CLASS_THIEF, 1, 2);
  spell_level(SKILL_STEAL, CLASS_THIEF, 6, 2);
  spell_level(SKILL_HIDE, CLASS_THIEF, 1, 2);
  spell_level(SKILL_TRACK, CLASS_THIEF, 40, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_THIEF, 75, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_THIEF, 15, 2);
  spell_level(SKILL_DODGE, CLASS_THIEF, 1, 2);
  spell_level(SKILL_PARRY, CLASS_THIEF, 30, 2);
  spell_level(SKILL_RIDING, CLASS_THIEF, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_THIEF, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_THIEF, 1, 2);
  spell_level(SKILL_CONCEAL, CLASS_THIEF, 10, 2);
  spell_level(SKILL_STEALTH, CLASS_THIEF, 50, 2);
d2038 4
a2041 3
  spell_level(SKILL_PIERCING, CLASS_THIEF, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_THIEF, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_THIEF, 1, 1);
d2043 5
a2047 1
  /*spell_level(SKILL_MISSILE, CLASS_THIEF, 1, 1);*/
d2049 3
a2051 20
  /* ROGUES */
  spell_level(SKILL_FIRST_AID, CLASS_ROGUE, 1, 2); 
  spell_level(SKILL_DOUSE, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_SNEAK, CLASS_ROGUE, 10, 2);
  spell_level(SKILL_PICK_LOCK, CLASS_ROGUE, 6, 2);
  spell_level(SKILL_BACKSTAB, CLASS_ROGUE, 10, 2);
  spell_level(SKILL_HIDE, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_TRACK, CLASS_ROGUE, 30, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_ROGUE, 70, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_ROGUE, 15, 2);
  spell_level(SKILL_DODGE, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_PARRY, CLASS_ROGUE, 40, 2);
  spell_level(SKILL_RIDING, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_ROGUE, 1, 2);
  spell_level(SKILL_EYE_GOUGE, CLASS_ROGUE, 15, 2);
  spell_level(SKILL_STEALTH, CLASS_ROGUE, 50, 2);
  spell_level(SKILL_CORNER, CLASS_ROGUE, 60, 2);
  spell_level(SKILL_SHADOW, CLASS_ROGUE, 60, 2);
  spell_level(SKILL_CONCEAL, CLASS_ROGUE, 25, 2);
d2053 4
a2056 3
  spell_level(SKILL_PIERCING, CLASS_ROGUE, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_ROGUE, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_ROGUE, 1, 1);
d2058 3
a2060 1
  /*spell_level(SKILL_MISSILE, CLASS_ROGUE, 1, 1);*/
d2062 2
a2063 16
  /* BARDS */
  spell_level(SKILL_FIRST_AID, CLASS_BARD, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_BARD, 1, 2);
  spell_level(SKILL_SNEAK, CLASS_BARD, 10, 2);
  spell_level(SKILL_PICK_LOCK, CLASS_BARD, 10, 2);
  spell_level(SKILL_BACKSTAB, CLASS_BARD, 1, 2);
  spell_level(SKILL_STEAL, CLASS_BARD, 10, 2);
  spell_level(SKILL_HIDE, CLASS_BARD, 10, 2);
  spell_level(SKILL_TRACK, CLASS_BARD, 50, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_BARD, 70, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_BARD, 90, 2);
  spell_level(SKILL_DODGE, CLASS_BARD, 20, 2);
  spell_level(SKILL_PARRY, CLASS_BARD, 40, 2);
  spell_level(SKILL_RIDING, CLASS_BARD, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_BARD, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_BARD, 1, 2);
d2065 1
a2065 1
  spell_level(SKILL_PIERCING, CLASS_BARD, 1, 1);
d2067 2
a2068 1
  /*spell_level(SKILL_MISSILE, CLASS_BARD, 1, 1);*/
d2070 73
a2142 28
  /* WARRIORS */
  spell_level(SKILL_RETREAT, CLASS_WARRIOR, 60, 2);
  spell_level(SKILL_FIRST_AID, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_DISARM, CLASS_WARRIOR, 20, 2);
  spell_level(SKILL_DOUSE, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_GUARD, CLASS_WARRIOR, 25, 2);
  spell_level(SKILL_SWITCH, CLASS_WARRIOR, 10, 2);
  spell_level(SKILL_HITALL, CLASS_WARRIOR, 50, 2);
  spell_level(SKILL_KICK, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_WARRIOR, 15, 2);
  /*  spell_level(SKILL_TAME, CLASS_WARRIOR, 7, 2);
      spell_level(SKILL_TRACK, CLASS_WARRIOR, 36, 2); */
  spell_level(SKILL_BASH, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_WARRIOR, 25, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_WARRIOR, 35, 2);
  spell_level(SKILL_DODGE, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_PARRY, CLASS_WARRIOR, 30, 2);
  spell_level(SKILL_RIPOST, CLASS_WARRIOR, 40, 2);
  spell_level(SKILL_RIDING, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_WARRIOR, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_WARRIOR, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_WARRIOR, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_WARRIOR, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_WARRIOR, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_WARRIOR, 1, 1);
  /*spell_level(SKILL_MISSILE, CLASS_WARRIOR, 1, 1);*/
a2146 1
  spell_level(SKILL_FIRST_AID, CLASS_MONK, 1, 2);
a2149 2
  spell_level(SKILL_DOUSE, CLASS_MONK, 1, 2);
  /*  spell_level(SKILL_GUARD, CLASS_MONK, 1, 2); */
a2151 4
  /*  spell_level(SKILL_RESCUE, CLASS_MONK, 1, 2);
      spell_level(SKILL_TAME, CLASS_MONK, 7, 2);
      spell_level(SKILL_TRACK, CLASS_MONK, 36, 2);
      spell_level(SKILL_BASH, CLASS_MONK, 1, 2); */
a2156 4
  spell_level(SKILL_RIDING, CLASS_MONK, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_MONK, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_MONK, 1, 2);

d2170 4
a2173 1
  /*spell_level(SKILL_MISSILE, CLASS_MONK, 1, 1);*/
d2175 30
a2204 53
  /* BERSERKER */
  spell_level(SKILL_FIRST_AID, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_HITALL, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_GUARD, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_KICK, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_TAME, CLASS_BERSERKER, 7, 2);
  spell_level(SKILL_TRACK, CLASS_BERSERKER, 36, 2);
  spell_level(SKILL_BASH, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_DODGE, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_PARRY, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_RIDING, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_BERSERKER, 1, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_BERSERKER, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_BERSERKER, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_BERSERKER, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_BERSERKER, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_BERSERKER, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_BERSERKER, 1, 1);
  /*spell_level(SKILL_MISSILE, CLASS_BERSERKER, 1, 1);*/
 
  /* HUNTERS */
  spell_level(SKILL_FIRST_AID, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_GUARD, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_KICK, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_TAME, CLASS_HUNTER, 7, 2);
  spell_level(SKILL_TRACK, CLASS_HUNTER, 36, 2);
  spell_level(SKILL_BASH, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_DODGE, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_PARRY, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_RIDING, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_HUNT, CLASS_HUNTER, 41, 2);
  spell_level(SKILL_BANDAGE, CLASS_HUNTER, 1, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_HUNTER, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_HUNTER, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_HUNTER, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_HUNTER, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_HUNTER, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_HUNTER, 1, 1);
  /*spell_level(SKILL_MISSILE, CLASS_HUNTER, 1, 1);*/
d2206 34
a2242 2
  spell_level(SKILL_FIRST_AID, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_PALADIN, 1, 2);
a2253 5
  spell_level(SKILL_RIDING, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_KNOW_SPELL, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_BANDAGE, CLASS_PALADIN, 1, 2);
a2255 1
  spell_level(SKILL_QUICK_CHANT, CLASS_PALADIN, 1, 2);
d2279 4
a2282 1
  /*spell_level(SKILL_MISSILE, CLASS_PALADIN, 1, 1);*/
d2284 7
a2290 48
 
  /* ANTI_PALADIN */
  spell_level(SKILL_RETREAT, CLASS_ANTI_PALADIN, 60, 2);
  spell_level(SKILL_DOUSE, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_VAMP_TOUCH, CLASS_ANTI_PALADIN, 45, 2);
  spell_level(SKILL_KICK, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_RESCUE, CLASS_ANTI_PALADIN, 10, 2);
  spell_level(SKILL_BASH, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_ANTI_PALADIN, 20, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_ANTI_PALADIN, 70, 2);
  spell_level(SKILL_FIRST_AID, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_TAME, CLASS_ANTI_PALADIN, 7, 2);
  spell_level(SKILL_DODGE, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_ANTI_PALADIN, 40, 2);
  spell_level(SKILL_PARRY, CLASS_ANTI_PALADIN, 20, 2);
  spell_level(SKILL_RIDING, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_KNOW_SPELL, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_BANDAGE, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_HITALL, CLASS_ANTI_PALADIN, 80, 2);
  spell_level(SKILL_DISARM, CLASS_ANTI_PALADIN, 50, 2);
  spell_level(SKILL_GUARD, CLASS_ANTI_PALADIN, 10, 2);
  spell_level(SKILL_SWITCH, CLASS_ANTI_PALADIN, 10, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_SUMMON_MOUNT, CLASS_ANTI_PALADIN, 15, 2);
  spell_level(SPELL_CAUSE_LIGHT, CLASS_ANTI_PALADIN, CIRCLE_1, 1);
  spell_level(SPELL_DEMONSKIN, CLASS_ANTI_PALADIN, CIRCLE_2, 2);
  spell_level(SPELL_CREATE_FOOD, CLASS_ANTI_PALADIN, CIRCLE_3, 3);
  spell_level(SPELL_CREATE_WATER, CLASS_ANTI_PALADIN, CIRCLE_3, 3);
  spell_level(SPELL_CAUSE_SERIOUS, CLASS_ANTI_PALADIN, CIRCLE_3, 3);
  spell_level(SPELL_CURSE, CLASS_ANTI_PALADIN, CIRCLE_4, 4);
  spell_level(SPELL_CAUSE_CRITIC, CLASS_ANTI_PALADIN, CIRCLE_5, 5);
  spell_level(SPELL_DISPEL_GOOD, CLASS_ANTI_PALADIN, CIRCLE_5, 5);
  spell_level(SPELL_POISON, CLASS_ANTI_PALADIN, CIRCLE_5, 5);
  spell_level(SPELL_CURE_BLIND, CLASS_ANTI_PALADIN, CIRCLE_6, 6);
  spell_level(SPELL_BLINDNESS, CLASS_ANTI_PALADIN, CIRCLE_6, 6);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_ANTI_PALADIN, CIRCLE_7, 7);
  spell_level(SPELL_SUMMON_CORPSE, CLASS_ANTI_PALADIN, CIRCLE_8, 8);
  spell_level(SPELL_SOULSHIELD, CLASS_ANTI_PALADIN, CIRCLE_8, 8);
  spell_level(SPELL_HARM, CLASS_ANTI_PALADIN, CIRCLE_9, 9);
  /*spell_level(SPELL_VAMPIRIC_BREATH, CLASS_ANTI_PALADIN, CIRCLE_10, 10);*/
  spell_level(SPELL_UNHOLY_WORD, CLASS_ANTI_PALADIN, CIRCLE_11, 11);
  spell_level(SKILL_BLUDGEONING, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_ANTI_PALADIN, 1, 1);
d2292 110
a2401 1
  /*spell_level(SKILL_MISSILE, CLASS_ANTI_PALADIN, 1, 1);*/
a2403 2
  spell_level(SKILL_FIRST_AID, CLASS_RANGER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_RANGER, 1, 2);
a2404 1
  /* spell_level(SKILL_RESCUE, CLASS_RANGER, 1, 2); */
a2413 6
  spell_level(SKILL_RIDING, CLASS_RANGER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_RANGER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_RANGER, 1, 2);
  spell_level(SKILL_SCRIBE, CLASS_RANGER, 1, 1);
  spell_level(SKILL_KNOW_SPELL, CLASS_RANGER, 1, 1);
  spell_level(SKILL_BANDAGE, CLASS_RANGER, 1, 2);
d2415 7
a2421 1
  /*  spell_level(SKILL_SPRINGLEAP, CLASS_RANGER, 10, 2); */
a2434 8
  spell_level(SKILL_QUICK_CHANT, CLASS_RANGER, 1, 1);
  spell_level(SKILL_BLUDGEONING, CLASS_RANGER, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_RANGER, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_RANGER, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_RANGER, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_RANGER, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_RANGER, 1, 1);
  /*spell_level(SKILL_MISSILE, CLASS_RANGER, 1, 1);*/
d2436 4
d2441 14
a2454 12
  /* DRUID */
  spell_level(SKILL_FIRST_AID, CLASS_DRUID, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_DRUID, 1, 2);  
  spell_level(SKILL_SHAPECHANGE, CLASS_DRUID, 1, 2);
  spell_level(SKILL_TAME, CLASS_DRUID, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_DRUID, 1, 2);
  spell_level(SKILL_DODGE, CLASS_DRUID, 20, 2);
  spell_level(SKILL_RIDING, CLASS_DRUID, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_DRUID, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_DRUID, 1, 2);
  spell_level(SKILL_KNOW_SPELL, CLASS_DRUID, 1, 1);
  spell_level(SKILL_QUICK_CHANT, CLASS_DRUID, 1, 2);
d2456 5
a2460 38
  spell_level(SPELL_DETECT_MAGIC, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_VIGORIZE_LIGHT, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_BARKSKIN, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_FOOD, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_WATER, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_LESSER_ENDURANCE, CLASS_DRUID, CIRCLE_1, 1); 

  spell_level(SPELL_VIGORIZE_SERIOUS, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_NIGHT_VISION, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_CURE_LIGHT, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_POISON, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_DRUID, CIRCLE_2, 2);

  spell_level(SPELL_VIGORIZE_CRITIC, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_CURE_SERIOUS, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_WRITHING_WEEDS, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_POISON, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_REMOVE_POISON, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_ENDURANCE, CLASS_DRUID, CIRCLE_3, 3); 
  spell_level(SPELL_MOONBEAM, CLASS_DRUID, CIRCLE_3, 3);

  spell_level(SPELL_CURE_CRITIC, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_SUMMON, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_CREATE_SPRING, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_CURE_BLIND, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_EARTHQUAKE, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_DRUID, CIRCLE_4, 4);

  spell_level(SPELL_CONTROL_WEATHER, CLASS_DRUID, CIRCLE_5, 5);
  spell_level(SPELL_HARM, CLASS_DRUID, CIRCLE_5, 5);
  spell_level(SPELL_REMOVE_CURSE, CLASS_DRUID, CIRCLE_5, 5);
  spell_level(SPELL_NOURISHMENT, CLASS_DRUID, CIRCLE_5, 5);

  spell_level(SPELL_GREATER_ENDURANCE, CLASS_DRUID, CIRCLE_6, 6); 
  spell_level(SPELL_HEAL, CLASS_DRUID, CIRCLE_6, 6);
  spell_level(SPELL_WATERWALK, CLASS_DRUID, CIRCLE_6, 6);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_DRUID, CIRCLE_6, 6);
  spell_level(SPELL_DARKNESS, CLASS_DRUID, CIRCLE_6, 6);
a2461 27
  spell_level(SPELL_ILLUMINATION, CLASS_DRUID, CIRCLE_7, 7);
  spell_level(SPELL_GAIAS_CLOAK, CLASS_DRUID, CIRCLE_7, 7);
  spell_level(SPELL_CALL_LIGHTNING, CLASS_DRUID, CIRCLE_7, 7);

  spell_level(SPELL_NATURES_EMBRACE, CLASS_DRUID, CIRCLE_8, 8);
  spell_level(SPELL_ENTANGLE, CLASS_DRUID, CIRCLE_8, 8);
  spell_level(SPELL_URBAN_RENEWAL, CLASS_DRUID, CIRCLE_8, 8);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_DRUID, CIRCLE_8, 8);

  spell_level(SPELL_SUNRAY, CLASS_DRUID, CIRCLE_9, 9);
  spell_level(SPELL_ARMOR_OF_GAIA, CLASS_DRUID, CIRCLE_9, 9);
  spell_level(SPELL_INVIGORATE, CLASS_DRUID, CIRCLE_9, 9);

  spell_level(SPELL_WANDERING_WOODS, CLASS_DRUID, CIRCLE_10, 10);
  spell_level(SPELL_MOONWELL, CLASS_DRUID, CIRCLE_10, 10);

  spell_level(SPELL_CREEPING_DOOM, CLASS_DRUID, CIRCLE_11, 11);

  spell_level(SKILL_BLUDGEONING, CLASS_DRUID, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_DRUID, 1, 1);

  /*spell_level(SKILL_MISSILE, CLASS_DRUID, 1, 1);*/


  /* SHAMAN */
  spell_level(SKILL_FIRST_AID, CLASS_SHAMAN, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_SHAMAN, 1, 2);
a2490 5
  spell_level(SKILL_RIDING, CLASS_SHAMAN, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_SHAMAN, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_SHAMAN, 1, 2);
  spell_level(SKILL_KNOW_SPELL, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_QUICK_CHANT, CLASS_SHAMAN, 1, 2);
a2491 5
  spell_level(SKILL_BANDAGE, CLASS_SHAMAN, 1, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_SHAMAN, 1, 1);
d2493 6
a2498 1
  /*spell_level(SKILL_MISSILE, CLASS_SHAMAN, 1, 1);*/
d2500 3
d2504 4
a2507 22
  /* ASSASSIN */
  spell_level(SKILL_FIRST_AID, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_INSTANT_KILL, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_THROATCUT, CLASS_ASSASSIN, 31, 2);
  spell_level(SKILL_SNEAK, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_PICK_LOCK, CLASS_ASSASSIN, 6, 2);
  spell_level(SKILL_BACKSTAB, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_KICK, CLASS_ASSASSIN, 36, 2);
  spell_level(SKILL_HIDE, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_TRACK, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_ASSASSIN, 65, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_ASSASSIN, 15, 2);
  spell_level(SKILL_DODGE, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_PARRY, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_RIDING, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_ASSASSIN, 1, 2);
  spell_level(SKILL_SHADOW, CLASS_ASSASSIN, 40, 2);
 
  spell_level(SKILL_PIERCING, CLASS_ASSASSIN, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_ASSASSIN, 1, 1);
d2509 9
a2517 1
  /*spell_level(SKILL_MISSILE, CLASS_ASSASSIN, 1, 1);*/
d2519 6
a2524 31
  /* MERCENARY */
  spell_level(SKILL_RETREAT, CLASS_MERCENARY, 40, 2);
  spell_level(SKILL_GROUP_RETREAT, CLASS_MERCENARY, 80, 2);
  spell_level(SKILL_FIRST_AID, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_DISARM, CLASS_MERCENARY, 20, 2);
  spell_level(SKILL_DOUSE, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_GUARD, CLASS_MERCENARY, 10, 2);
  spell_level(SKILL_SWITCH, CLASS_MERCENARY, 40, 2);
  spell_level(SKILL_BACKSTAB, CLASS_MERCENARY, 11, 2);
  spell_level(SKILL_BIND, CLASS_MERCENARY, 16, 2);
  spell_level(SKILL_HIDE, CLASS_MERCENARY, 20, 2);
  /*  spell_level(SKILL_TAME, CLASS_MERCENARY, 7, 2); */
  spell_level(SKILL_TRACK, CLASS_MERCENARY, 30, 2);
  spell_level(SKILL_KICK, CLASS_MERCENARY, 1, 2);
  /* spell_level(SKILL_RESCUE, CLASS_MERCENARY, 1, 2); */
  spell_level(SKILL_BASH, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_MERCENARY, 15, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_MERCENARY, 70, 2);
  spell_level(SKILL_DODGE, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_PARRY, CLASS_MERCENARY, 40, 2);
  spell_level(SKILL_RIPOST, CLASS_MERCENARY, 60, 2);
  spell_level(SKILL_RIDING, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_BLUDGEONING, CLASS_MERCENARY, 1, 1);
  spell_level(SKILL_PIERCING, CLASS_MERCENARY, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_MERCENARY, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_MERCENARY, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_MERCENARY, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_MERCENARY, 1, 1);
  /*spell_level(SKILL_MISSILE, CLASS_MERCENARY, 1, 1);*/
d2526 5
a2530 46
  /* NECRO */
  spell_level(SKILL_FIRST_AID, CLASS_NECROMANCER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_NECROMANCER, 1, 2);
  spell_level(SKILL_DODGE, CLASS_NECROMANCER, 20, 2);
  spell_level(SKILL_RIDING, CLASS_NECROMANCER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_NECROMANCER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_NECROMANCER, 1, 2);
  spell_level(SKILL_SCRIBE, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_KNOW_SPELL, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_QUICK_CHANT, CLASS_NECROMANCER, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_NECROMANCER, 1, 2);
  spell_level(SPELL_MAGIC_MISSILE, CLASS_NECROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_MINOR_CREATION, CLASS_NECROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_MAGIC, CLASS_NECROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_NECROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_BURNING_HANDS, CLASS_NECROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_INVIS, CLASS_NECROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_CONCEALMENT, CLASS_NECROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_PRESERVE, CLASS_NECROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_POISON, CLASS_NECROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_STRENGTH, CLASS_NECROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_NECROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_ANIMATE_DEAD, CLASS_NECROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_NECROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_COLDSHIELD, CLASS_NECROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_BONE_ARMOR, CLASS_NECROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_INFRAVISION, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_IDENTIFY, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_SLEEP, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_ENERGY_DRAIN, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_CONE_OF_COLD, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_SUMMON_CORPSE, CLASS_NECROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_DETECT_POISON, CLASS_NECROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_INVISIBLE, CLASS_NECROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_HASTE, CLASS_NECROMANCER, CIRCLE_7, 7);
  spell_level(SPELL_FARSEE, CLASS_NECROMANCER, CIRCLE_7, 7);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_NECROMANCER, CIRCLE_7, 7);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_NECROMANCER, CIRCLE_8, 8);
  /* spell_level(SPELL_SUMMON_DRACOLICH, CLASS_NECROMANCER, CIRCLE_10, 10); */
  spell_level(SPELL_STONE_SKIN, CLASS_NECROMANCER, CIRCLE_12, 12);
  spell_level(SPELL_SHIFT_CORPSE, CLASS_NECROMANCER, CIRCLE_13, 13); 
  spell_level(SPELL_SOUL_TAP, CLASS_NECROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_REBUKE_UNDEAD, CLASS_NECROMANCER, CIRCLE_10, 10);
  spell_level(SPELL_DEGENERATION, CLASS_NECROMANCER, CIRCLE_11, 11);
  spell_level(SKILL_PIERCING, CLASS_NECROMANCER, 1, 1);
d2532 2
a2533 1
  /*spell_level(SKILL_MISSILE, CLASS_NECROMANCER, 1, 1);*/
d2535 3
d2539 3
a2541 47
  /* CONJURER */
  spell_level(SKILL_FIRST_AID, CLASS_CONJURER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_CONJURER, 1, 2);
  spell_level(SKILL_DODGE, CLASS_CONJURER, 20, 2);
  spell_level(SKILL_BANDAGE, CLASS_CONJURER, 1, 2);
  spell_level(SKILL_RIDING, CLASS_CONJURER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_CONJURER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_CONJURER, 1, 2);
  spell_level(SKILL_SCRIBE, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_KNOW_SPELL, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_QUICK_CHANT, CLASS_CONJURER, 1, 2);
  spell_level(SPELL_MAGIC_MISSILE, CLASS_CONJURER, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_MAGIC, CLASS_CONJURER, CIRCLE_1, 1);
  spell_level(SPELL_MINOR_CREATION, CLASS_CONJURER, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_CONJURER, CIRCLE_2, 2);
  spell_level(SPELL_BURNING_HANDS, CLASS_CONJURER, CIRCLE_2, 2);
  spell_level(SPELL_STRENGTH, CLASS_CONJURER, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_INVIS, CLASS_CONJURER, CIRCLE_2, 2);
  spell_level(SPELL_IDENTIFY, CLASS_CONJURER, CIRCLE_3, 3);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_CONJURER, CIRCLE_3, 3);
  spell_level(SPELL_CONCEALMENT, CLASS_CONJURER, CIRCLE_3, 3);
  spell_level(SPELL_SUMMON_ELEMENTAL, CLASS_CONJURER, CIRCLE_3, 3);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_CONJURER, CIRCLE_4, 4);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_CONJURER, CIRCLE_4, 4);
  spell_level(SPELL_WALL_OF_STONE, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_INFRAVISION, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_SLEEP, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_COLOR_SPRAY, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_WALL_OF_FOG, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_CONE_OF_COLD, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_STONE_SKIN, CLASS_CONJURER, CIRCLE_6, 6);
  spell_level(SPELL_DETECT_POISON, CLASS_CONJURER, CIRCLE_6, 6);
  spell_level(SPELL_FIREBALL, CLASS_CONJURER, CIRCLE_6, 6);
  spell_level(SPELL_FLY, CLASS_CONJURER, CIRCLE_6, 6);
  spell_level(SPELL_INVISIBLE, CLASS_CONJURER, CIRCLE_7, 7);
  spell_level(SPELL_HASTE, CLASS_CONJURER, CIRCLE_7, 7);
  spell_level(SPELL_FARSEE, CLASS_CONJURER, CIRCLE_7, 7);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_CONJURER, CIRCLE_7, 7);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_CONJURER, CIRCLE_8, 8);
  spell_level(SPELL_ENCHANT_WEAPON, CLASS_CONJURER, CIRCLE_9, 9);
  spell_level(SPELL_SUMMON_DEMON, CLASS_CONJURER, CIRCLE_10, 10);
  spell_level(SPELL_SUMMON_GREATER_DEMON, CLASS_CONJURER, CIRCLE_11, 11);
  spell_level(SKILL_PIERCING, CLASS_CONJURER, 1, 1);
 
  /*spell_level(SKILL_MISSILE, CLASS_CONJURER, 1, 1);*/
 
}
d2543 1
a2543 17
/* UPDATE_SKILLS
 *
 * Makes sure that the character has the proper skills, spells, and
 * innates. Should be called whenever someone is created, or logs in,
 * or gains a level, or changes class/race for any reason.
 *
 * It will automatically handle the spell sphere skills, such as
 * SKILL_SPHERE_GENERIC.  If any spell is assigned to a class, the
 * related sphere skill will be assigned.  Conversely, if there are no
 * spells of a given sphere, players in that class will have the
 * sphere-skill removed.
 *
 * The above will work even if additional spheres are introduced,
 * and even if they are non-contiguous with the current ones.
 * In other words, SKILL_SPHERE_NEXUS could be added as number 500.
 * However, the defines IS_SKILL_SPHERE and NUM_SPHERE_SKILLS must
 * correctly take such changes into account. */
d2545 3
a2547 4
void update_skills(struct char_data *ch)
{
   int skill, i, spherecheck[NUM_SPHERE_SKILLS];
   bool spherepresent;
d2549 1
a2549 2
   if (GET_CLASS(ch) == CLASS_UNDEFINED)
      return;
d2551 16
a2566 1
   memset(&spherecheck, 0, sizeof(spherecheck));
d2568 20
a2587 80
   for (skill = 0; skill <= TOP_SKILL; ++skill) {
      if (IS_LANGUAGE(skill)) continue;

      /* Skills and spells can be divided into three categories here:
       *
       * 1. That you're guaranteed to have - you meet the level requirement
       *    and it isn't a quest spell.
       * 2. That you're guaranteed NOT to have - which is anything for which you
       *    don't meet the level requirement, and there's no special excuse which
       *    would give it to.
       * 3. That you normally wouldn't have, except that a quest or race
       *    allowance might have qualified you for it.
       *
       * For items in category 1, we make sure you have the skill.
       * Category 2 items we make sure you don't have.
       *
       * For spells in category 1 or 3, we make sure you have the related magical
       * sphere skill. For example, the magic missile spell is in the sphere of
       * generic. Any character with that spell, we ensure that he or she has the
       * skill of SKILL_SPHERE_GENERIC.
       */

      if (spell_info[skill].min_level[(int)GET_CLASS(ch)] <= GET_LEVEL(ch)) {
         /* This is a talent that you do have, or could have. */
         if (spell_info[skill].quest == FALSE) {
            /* This skill/spell you get because your level is high enough.
             * So: ensure that you have it. */
            if (GET_SKILL(ch, skill) <= 0) {
               /* You don't have it, so set the starting value.  Individual
                * spells and languages don't actually improve, so the value
                * is 1000. */
               if (IS_SPELL(skill) || IS_LANGUAGE(skill))
                  SET_SKILL(ch, skill, 1000);
               /* Barehand and safe fall don't improve either, though with
                * some improvements to the mud, they could. */
               else if (skill == SKILL_BAREHAND || skill == SKILL_SAFEFALL)
                  SET_SKILL(ch, skill, 1000);
               else
               /* Skills, chants, and songs do improve. You get the low
                * starting value. */
                  SET_SKILL(ch, skill, !IS_NPC(ch) ? 50 : roll_mob_skill(ch));
            }
         }

         /* Remember all spells' related sphere skills. */
         if (IS_SPELL(skill)) {
            for (i = 0; i < NUM_SPHERE_SKILLS; i++) {
               if (spherecheck[i] == spell_info[skill].sphere || !spherecheck[i]) {
                  spherecheck[i] = spell_info[skill].sphere;
                  break;
               }
            }
         }

      } else if (!IS_SPHERE_SKILL(skill) && spell_info[skill].quest == FALSE &&
            racial_innate(GET_RACE(ch), skill) == FALSE) {
         /* You don't meet the level requirement. Neither race nor questage
          * could give it to you, so you CAN'T have it. We take it away! */
         SET_SKILL(ch, skill, 0);
      }
   }

   /* Now set the sphere skills according to the spells we saw in the previous loop.
    * I've looped over the entire skill set again under the assumption that the
    * sphere-skills might NOT be contiguous in the future. */
   for (skill = 0; skill <= TOP_SKILL; ++skill) {
      if (IS_SPHERE_SKILL(skill)) {
         spherepresent = FALSE;
         for (i = 0; i < NUM_SPHERE_SKILLS; i++) {
            if (spherecheck[i] == skill) {
               spherepresent = TRUE;
               break;
            }
         }
         if (!spherepresent)
            SET_SKILL(ch, skill, 0);
         else if (GET_SKILL(ch, skill) <= 0)
            SET_SKILL(ch, skill, !IS_NPC(ch) ? 50 : roll_mob_skill(ch));
      }
   }
d2590 5
a2594 45
bool racial_innate(int race, int skill) {
  switch (skill) {

  case SKILL_DOORBASH:
    if(race == RACE_TROLL ||
       race == RACE_OGRE ||
       race == RACE_BARBARIAN) {
      return TRUE;
    }
    break;

  case SKILL_BODYSLAM:
    if(race == RACE_TROLL ||
       race == RACE_OGRE ||
       race == RACE_BARBARIAN) {
      return TRUE;
    }
    break;

  case SKILL_BREATHE:
    if(race == SPECIES_DRAGON) {
      return TRUE;
    }

  case SKILL_SWEEP:
    if(race == SPECIES_DRAGON) {
      return TRUE;
    }

  case SKILL_ROAR:
    if(race == SPECIES_DRAGON) {
      return TRUE;
    }

  default:
    break;
  }

  return FALSE;
}

/* convert_race/convert_class does no checking.  It expects a valid class */
/* and ch. These functions change a players class/race and converts the   */
/* skills/spells accordingly keeping the old values if they are better.   */
/* They also transfer quest spells.  Written by gurlaek 7/6/1999          */
a2603 2
  /* clear skills */
  clear_skills(ch);
d2606 3
a2608 4
  /* default skills for class/race */
  set_skills(ch);
  /* adj for level */
  update_skills(ch);
a2631 4
void convert_race(struct char_data *ch, int newrace) {
  int skill;
  sh_int old_skills[TOP_SKILL+1];
  sh_int new_skills[TOP_SKILL+1];
d2633 2
a2634 38
  /* read in the player's old skills */
  for (skill = 0; skill <= TOP_SKILL; skill++) {
    old_skills[skill] = GET_ISKILL(ch, skill);
  }

  /* clear skills */
  clear_skills(ch);
  /* set race/align */
  GET_RACE(ch) = newrace;
  GET_RACE_ALIGN(ch) = races[newrace].racealign;
  /* default skills for class/race */
  set_skills(ch);
  /* adj for level */
  update_skills(ch);
  
  /* read the new skills */
  for (skill = 0; skill <= TOP_SKILL; skill++) {
    new_skills[skill] = GET_ISKILL(ch, skill);
  }
  
  /* compare old and new */
  for (skill = 0; skill <= TOP_SKILL; skill++) {  
    if(new_skills[skill]) {
      /* keep the value of the old skill if you still have the skill */
      if(old_skills[skill] > new_skills[skill]) {
	SET_SKILL(ch, skill, old_skills[skill]);
      }
    }

    /* keep any quest spells you might have earned */
    if((old_skills[skill]) && (spell_info[skill].quest)) {
      SET_SKILL(ch, skill, old_skills[skill]);
    }
  }
  check_regen_rates(ch);
}

int getbaseclass(int class) {
d2642 4
d2657 1
a2657 1
 * from a clan if they are advanced to clan god status.  save_char()
@


1.117
log
@Created an array of structs for class information. Renamed CLASS_MAGIC_USER
to CLASS_SORCERER.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.116 2008/01/02 01:26:51 jps Exp jps $
d34 1
a39 1
extern const char *pc_race_types[];
d63 1
a63 1
 *   magical, mem_mode, active, is_subclass, subclass_of, max_subclass_level
d75 1
a75 1
      TRUE, MEMORIZE, TRUE, FALSE, CLASS_UNDEFINED, 45 },
d80 1
a80 1
      TRUE, PRAY, TRUE, FALSE, CLASS_UNDEFINED, 45 },
d85 1
a85 1
      FALSE, MEM_NONE, TRUE, TRUE, CLASS_ROGUE, -1 },
d90 1
a90 1
      FALSE, MEM_NONE, TRUE, FALSE, CLASS_UNDEFINED, 25 },
d95 1
a95 1
      FALSE, PRAY, TRUE, TRUE, CLASS_WARRIOR, -1 },
d100 1
a100 1
      FALSE, PRAY, TRUE, TRUE, CLASS_WARRIOR, -1 },
d105 1
a105 1
      FALSE, MEMORIZE, TRUE, TRUE, CLASS_WARRIOR, -1 },
d110 1
a110 1
      TRUE, PRAY, TRUE, TRUE, CLASS_CLERIC, -1 },
d115 1
a115 1
      TRUE, MEM_NONE, FALSE, FALSE, CLASS_UNDEFINED, -1 },
d120 1
a120 1
      FALSE, MEM_NONE, TRUE, TRUE, CLASS_ROGUE, -1 },
d125 1
a125 1
      FALSE, MEM_NONE, TRUE, TRUE, CLASS_ROGUE, -1 },
d130 1
a130 1
      TRUE, MEMORIZE, TRUE, TRUE, CLASS_SORCERER, -1 },
d135 1
a135 1
      TRUE, MEMORIZE, FALSE, TRUE, CLASS_SORCERER, -1 },
d140 1
a140 1
      FALSE, MEM_NONE, TRUE, TRUE, CLASS_WARRIOR, -1 },
d145 1
a145 1
      FALSE, MEM_NONE, FALSE, TRUE, CLASS_WARRIOR, -1 },
d150 1
a150 1
      TRUE, PRAY, TRUE, TRUE, CLASS_CLERIC, -1 },
d155 1
a155 1
      TRUE, PRAY, TRUE, TRUE, CLASS_CLERIC, -1 },
d160 1
a160 1
      TRUE, PRAY, FALSE, TRUE, CLASS_CLERIC, -1 },
d165 1
a165 1
      FALSE, MEM_NONE, TRUE, FALSE, CLASS_UNDEFINED, 25 },
d170 1
a170 1
      FALSE, MEMORIZE, FALSE, TRUE, CLASS_ROGUE, -1 },
d175 1
a175 1
      TRUE, MEMORIZE, TRUE, TRUE, CLASS_SORCERER, -1 },
d180 1
a180 1
      TRUE, MEMORIZE, TRUE, TRUE, CLASS_SORCERER, -1 },
d185 1
a185 1
      TRUE, MEMORIZE, FALSE, TRUE, CLASS_SORCERER, -1 },
d190 1
a190 1
      FALSE, MEM_NONE, FALSE, TRUE, CLASS_ROGUE, -1 }
d230 4
a233 1
 * You can pass NULL for ch and vict.
d245 6
a273 1
      return class;
d276 11
d306 1
a306 1
               with_indefinite_article(pc_race_types[(int)GET_RACE(vict)]),
d463 14
a476 16


int prac_params[4][NUM_CLASSES] = {
/* MAG CLE THE WAR PAL ANT RAN DRU SHA ASS MER NEC CON MON BER PRI DIA MYS ROG BAR PYR CRY ILL HUN */
  {95, 95, 95, 95, 85, 85, 85, 95, 95, 95, 80, 95, 95, 95, 95, 95, 95, 95, 95, 95, 85, 85, 85, 95},	
  {100,100,12, 12, 10, 10, 10, 100,100,10, 10, 100,100,10, 10, 100,100,100,10, 10, 100,100,100,10},
  {25, 25, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
  {SPL,SPL,SKL,SKL,SKL,SKL,SKL,SPL,SPL,SKL,SKL,SPL,SPL,SKL,SKL,SPL,SPL,SPL,SKL,SKL,SPL,SPL,SPL,SKL}
};


/*
 * ...And the appropriate rooms for each guildmaster/guildguard; controls
 * which types of people the various guildguards let through.  i.e., the
 * first line shows that from room 3017, only MAGIC_USERS are allowed
 * to go south.
d481 1
a481 1
  {CLASS_SORCERER,    3045,   SCMD_EAST},
d511 1
a511 1
  {CLASS_SORCERER,    30072,  SCMD_WEST},
d555 1
a555 1
  {CLASS_SORCERER,    6219,   SCMD_UP},
a559 1

d577 1
a577 1
  {CLASS_SORCERER,    10036,   SCMD_NORTH},
d585 1
a585 26

  /* CLASS LIST COMMENT -
CLASS_SORCERER  
CLASS_CLERIC      
CLASS_THIEF       
CLASS_WARRIOR     
CLASS_PALADIN     
CLASS_ANTI_PALADIN
CLASS_RANGER      
CLASS_DRUID       
CLASS_SHAMAN      
CLASS_ASSASSIN    
CLASS_MERCENARY   
CLASS_NECROMANCER 
CLASS_CONJURER    
CLASS_MONK         
CLASS_PRIEST       
CLASS_DIABOLIST   
CLASS_ROGUE       
CLASS_BARD        
CLASS_PYROMANCER  
CLASS_CRYOMANCER
CLASS_BERSERKER
  end class comment */

/* Example of all block 
d588 1
a4438 1
  extern int set_race_align(struct char_data *ch);
d4449 1
a4449 1
  GET_RACE_ALIGN(ch) = set_race_align(ch);
d4485 4
@


1.116
log
@Made the assignment of sphere-related skills automatic.  They will be
assigned to a character if and only if there's a spell from that sphere
available to the character.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.115 2007/12/19 20:44:27 myc Exp jps $
d32 2
d39 1
d55 14
a68 30
/* i'm not sure who mangled this removing the classes but...    */
/* it has been fixed.  Don't change this unless you change      */
/* parse_class to match exactly.  Both MUST contain NUM_CLASSES */
/* of classes.  No more crashes.  --Gurlaek                     */
char *class_display[NUM_CLASSES] = {
  "a) &5&bSorcerer&0",
  "b) &6Cleric&0",
  "c) &1&bThief&0",
  "d) &4&bWarrior&0",
  "e) &8Paladin&0",
  "f) &1&bAnti-&9Paladin&0",
  "g) &2&bRanger&0",
  "h) &2Druid&0",
  "i) &6&bShaman&0",
  "j) &1Assassin&0",
  "k) &3Mercenary&0",
  "l) &5Necromancer&0",
  "m) &3&bConjurer&0",
  "n) &9&bM&0&7on&9&bk&0",
  "o) &9&bBer&1ser&9ker&0",
  "p) &6&bPr&7ie&6st&0",
  "q) &5Dia&9&bbol&0&5ist&0",
  "r) ",
  "s) &9&bRogue&0",
  "t) &4B&9&bar&0&4d&0",
  "u) &1P&byr&0&1o&9&bma&0&7nc&9&ber&0",
  "v) &4C&bry&0&4o&7ma&9&bnc&0&7er&0",
  "w) ",
  "x) ",
};
d70 1
d72 120
a191 17
int warrior_subclasses[WARRIOR_SUBCLASSES] = 
{ CLASS_PALADIN, CLASS_ANTI_PALADIN, CLASS_RANGER, CLASS_MONK};
/* CLASS_BERSERKER */

int cleric_subclasses[CLERIC_SUBCLASSES] = 
{ CLASS_PRIEST, CLASS_DIABOLIST, CLASS_DRUID};
/* CLASS_MYSTIC */


int rogue_subclasses[ROGUE_SUBCLASSES] = 
{ CLASS_ASSASSIN, CLASS_THIEF,CLASS_MERCENARY};
/* CLASS_HUNTER, CLASS_BARD */

int mage_subclasses[MAGE_SUBCLASSES] = 
{ CLASS_PYROMANCER, CLASS_CRYOMANCER, CLASS_NECROMANCER};
/* CLASS_ILLUSIONIST, CLASS_CONJURER */

a198 89


/* Names first */

const char *class_abbrevs[] = {
  "&5&bSor&0",
  "&6Cle&0",
  "&1&bThi&0",
  "&4&bWar&0",
  "&8Pal&0",
  "&1&bAnt&0",
  "&2&bRan&0",
  "&2Dru&0",
  "&6&bSha&0",
  "&1Ass&0",
  "&3Mer&0",
  "&5Nec&0",
  "&3&bCon&0",
  "&9&bMon&0",
  "&9&bBe&1r&0",
  "&6&bPr&7i&0",
  "&5Di&9&ba&0",
  "&7&bM&0&7ys&0",
  "&9&bRog&0",
  "&4B&9&bar&0",
  "&1P&byr&0",
  "&4C&bry&0",
  "&4I&5ll&0",
  "&9&bHun&0",
  "\n"
};

const char *pc_star[] = {
  "&5&b**&0",
  "&6**&0",
  "&1&b**&0",
  "&4&b**&0",
  "&8**&0",
  "&1&b**&0",
  "&2&b**&0",
  "&2**&0",
  "&6&b**&0",
  "&1**&0",
  "&3**&0",
  "&5**&0",
  "&3&b**&0",
  "&9&b**&0",
  "&9&b**&0",
  "&6&b**&0",
  "&5**&0",
  "&7&b**&0",
  "&9&b**&0",
  "&4**&0",
  "&1**&0",
  "&4**&0",
  "&4**&0",
  "&9&b**&0",
  "\n"
};

/* Needs 12 non-ansi spaces */
const char *pc_class_types[] = {
  "&5&bSorcerer&0    ",
  "&6Cleric&0      ",
  "&1&bThief&0       ",
  "&4&bWarrior&0     ",
  "&8Paladin&0     ",
  "&1&bAnti-&9Paladin&0",
  "&2&d&bRanger&0      ",
  "&2Druid&0       ",
  "&6&bShaman&0      ",
  "&1Assassin&0    ",
  "&3Mercenary&0   ",
  "&5Necromancer&0 ",
  "&3&bConjurer&0    ",
  "&9&bM&0&7on&9&bk&0        ",
  "&9&bBer&1ser&9ker&0   ",
  "&6&bPr&7ie&6st&0      ",
  "&5Dia&9&bbol&0&5ist&0   ",
  "&7&bM&0&7ys&9&bti&7c&0      ",
  "&9&bRogue&0       ",
  "&4B&9&bar&0&4d&0        ",
  "&1P&byr&0&1o&9&bma&0&7nc&9&ber&0  ",
  "&4C&bry&0&4o&7ma&9&bnc&0&7er&0  ",
  "&4I&5l&4l&5u&4s&5i&4o&5n&4i&5s&4t&0 ",
  "&9&bHun&0&2te&9&br&0      ",
  "\n"
};

d227 68
a294 36
int parse_class(struct char_data *ch, char arg) {
  int class = CLASS_UNDEFINED;
  
  switch (LOWER(arg)) {
  case 'a': class = CLASS_MAGIC_USER; break;
  case 'b': class = CLASS_CLERIC    ; break;
  case 'c': class = CLASS_THIEF	    ; break;
  case 'd': class = CLASS_WARRIOR   ; break;
  case 'e': class = CLASS_PALADIN   ; break;
  case 'f': class = CLASS_ANTI_PALADIN; break;
  case 'g': class = CLASS_RANGER    ; break;
  case 'h': class = CLASS_DRUID     ; break;
  case 'i': class = CLASS_SHAMAN    ; break;
  case 'j': class = CLASS_ASSASSIN  ; break;
  case 'k': class = CLASS_MERCENARY ; break;
  case 'l': class = CLASS_NECROMANCER; break;
  case 'm': class = CLASS_CONJURER  ; break;
  case 'n': class = CLASS_MONK      ; break;
  case 'o': class = CLASS_BERSERKER ; break;
  case 'p': class = CLASS_PRIEST    ; break;
  case 'q': class = CLASS_DIABOLIST ; break;
  case 'r': class = CLASS_UNDEFINED ; break;
  case 's': class = CLASS_ROGUE     ; break;
  case 't': class = CLASS_BARD      ; break;
  case 'u': class = CLASS_PYROMANCER; break;
  case 'v': class = CLASS_CRYOMANCER; break;
  case 'w': class = CLASS_UNDEFINED ; break;
  case 'x': class = CLASS_UNDEFINED ; break;
  default : class = CLASS_UNDEFINED ; break;
  }
  
  if (class >= 0 && class < NUM_CLASSES)
    if (ch && !class_ok_race[(int)GET_RACE(ch)][class])
      class = CLASS_UNDEFINED;
  
  return (class);
a296 2
/* These are the new base save numbers courtesy of Nechtrous */
/* Making base numbers more realistic -myc 11 Feb 2007 */
d322 1
a322 1
  case CLASS_MAGIC_USER:
a415 90
/*
 * bitvectors (i.e., powers of two) for each class, mainly for use in
 * do_who and do_users.  Add new classes at the end so that all classes
 * use sequential powers of two (1 << 0, 1 << 1, 1 << 2, 1 << 3, 1 << 4,
 * 1 << 5, etc.
 */

long find_class_bitvector(char arg)
{
  arg = LOWER(arg);
  
  switch (arg) {
  case 'a':
    return (1 << 0);
    break;
  case 'b':
    return (1 << 1);
    break;
  case 'c':
    return (1 << 2);
    break;
  case 'd':
    return (1 << 3);
    break;
  case 'e':
    return (1 << 4);
    break;
  case 'f':
    return (1 << 5);
    break;
  case 'g':
    return (1 << 6);
    break;
  case 'h':
    return (1 << 7);
    break;
  case 'i':
    return (1 << 8);
    break;
  case 'j':
    return (1 << 9);
    break;
  case 'k':
    return (1 << 10);
    break;
  case 'l':
    return (1 << 11);
    break;
  case 'm':
    return (1 << 12);
    break;
  case 'n':
    return (1 << 13);
    break;
  case 'o':
    return (1 << 14);
    break;
  case 'p':
    return (1 << 15);
    break;
  case 'q':
    return (1 << 16);
    break;
  case 'r':
    return (1 << 17);
    break;
  case 's':
    return (1 << 18);
    break;
  case 't':
    return (1 << 19);
    break;
  case 'u':
    return (1 << 20);
    break;
  case 'v':
    return (1 << 21);
    break;
  case 'w':
    return (1 << 22);
    break;
  case 'x':
    return (1 << 23);
    break;
  default:
    return 0;
    break;
  }
}

d464 1
a464 1
  {CLASS_MAGIC_USER,    3045,   SCMD_EAST},
d494 1
a494 1
  {CLASS_MAGIC_USER,    30072,  SCMD_WEST},
d538 1
a538 1
  {CLASS_MAGIC_USER,    6219,   SCMD_UP},
d561 1
a561 1
  {CLASS_MAGIC_USER,    10036,   SCMD_NORTH},
d571 1
a571 1
CLASS_MAGIC_USER  
d694 1
a694 1
    case CLASS_MAGIC_USER:
d1324 1
a1324 1
  case CLASS_MAGIC_USER:
d2519 1
a2519 1
  case CLASS_MAGIC_USER:
d2925 1
a2925 1
  if (GET_CLASS(ch) == CLASS_MAGIC_USER || GET_CLASS(ch) == CLASS_CLERIC) {
d3035 1
a3035 1
  int cls_mage = (1 << CLASS_MAGIC_USER);
d3091 56
a3146 56
  spell_level(SPELL_BURNING_HANDS, CLASS_MAGIC_USER, CIRCLE_1, 1);
  spell_level(SPELL_MINOR_CREATION, CLASS_MAGIC_USER, CIRCLE_1, 1);
  spell_level(SPELL_MAGIC_MISSILE, CLASS_MAGIC_USER, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_MAGIC, CLASS_MAGIC_USER, CIRCLE_1, 1);
  spell_level(SPELL_CONCEALMENT, CLASS_MAGIC_USER, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_MAGIC_USER, CIRCLE_2, 2);
  spell_level(SPELL_STRENGTH, CLASS_MAGIC_USER, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_INVIS, CLASS_MAGIC_USER, CIRCLE_2, 2);
  spell_level(SPELL_IDENTIFY, CLASS_MAGIC_USER, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_MAGIC_USER, CIRCLE_3, 3);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_MAGIC_USER, CIRCLE_3, 3);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_MAGIC_USER, CIRCLE_3, 3);
  spell_level(SPELL_TELEPORT, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_MINOR_PARALYSIS, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_RAY_OF_ENFEEB, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_LEVITATE, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_INFRAVISION, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_MINOR_GLOBE, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_COLDSHIELD, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_FIRESHIELD, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_FARSEE, CLASS_MAGIC_USER, CIRCLE_5, 5);
  spell_level(SPELL_COLOR_SPRAY, CLASS_MAGIC_USER, CIRCLE_5, 5);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_MAGIC_USER, CIRCLE_5, 5);
  spell_level(SPELL_CONE_OF_COLD, CLASS_MAGIC_USER, CIRCLE_5, 5);
  spell_level(SPELL_SLEEP, CLASS_MAGIC_USER, CIRCLE_5, 5);
  spell_level(SPELL_INVISIBLE, CLASS_MAGIC_USER, CIRCLE_5, 5);
  spell_level(SPELL_FIREBALL, CLASS_MAGIC_USER, CIRCLE_6, 6);
  spell_level(SPELL_HASTE, CLASS_MAGIC_USER, CIRCLE_6, 6);
  spell_level(SPELL_ICE_STORM, CLASS_MAGIC_USER, CIRCLE_6, 6);
  spell_level(SPELL_FLY, CLASS_MAGIC_USER, CIRCLE_6, 6);
  spell_level(SPELL_STONE_SKIN, CLASS_MAGIC_USER, CIRCLE_6, 6);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_MAGIC_USER, CIRCLE_7, 7);
  spell_level(SPELL_BIGBYS_CLENCHED_FIST, CLASS_MAGIC_USER, CIRCLE_7, 7);
  spell_level(SPELL_CHAIN_LIGHTNING, CLASS_MAGIC_USER, CIRCLE_8, 8);
  spell_level(SPELL_HARNESS, CLASS_MAGIC_USER, CIRCLE_8, 8);
  spell_level(SPELL_MAJOR_GLOBE, CLASS_MAGIC_USER, CIRCLE_8, 8);
  spell_level(SPELL_RELOCATE, CLASS_MAGIC_USER, CIRCLE_9, 9);
  spell_level(SPELL_MASS_INVIS, CLASS_MAGIC_USER, CIRCLE_9, 9);
  spell_level(SPELL_DISINTEGRATE, CLASS_MAGIC_USER, CIRCLE_9, 9);
  spell_level(SPELL_METEORSWARM, CLASS_MAGIC_USER, CIRCLE_10, 10);
  spell_level(SPELL_REDUCE, CLASS_MAGIC_USER, CIRCLE_11, 11);
  spell_level(SPELL_ENLARGE, CLASS_MAGIC_USER, CIRCLE_11, 11);
  spell_level(SPELL_WIZARD_EYE, CLASS_MAGIC_USER, CIRCLE_11, 11);
  spell_level(SPELL_CHARM, CLASS_MAGIC_USER, CIRCLE_12, 12);
  spell_level(SKILL_DODGE, CLASS_MAGIC_USER, 20, 2);
  spell_level(SKILL_RIDING, CLASS_MAGIC_USER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_MAGIC_USER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_MAGIC_USER, 1, 2);
  spell_level(SKILL_SCRIBE, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_KNOW_SPELL, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_QUICK_CHANT, CLASS_MAGIC_USER, 1, 2);
  spell_level(SKILL_BANDAGE, CLASS_MAGIC_USER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_MAGIC_USER, 1, 2);
  spell_level(SKILL_FIRST_AID, CLASS_MAGIC_USER, 1, 2);
  spell_level(SKILL_PIERCING, CLASS_MAGIC_USER, 1, 1);
d3148 1
a3148 1
  /*spell_level(SKILL_MISSILE, CLASS_MAGIC_USER, 1, 1);*/
d4487 3
a4489 18
   int i, baseclass;

   baseclass = class;

   for (i = 0; i < WARRIOR_SUBCLASSES; i++)
      if (class == warrior_subclasses[i])
         baseclass = CLASS_WARRIOR;
   for (i = 0; i < CLERIC_SUBCLASSES; i++)
      if (class == cleric_subclasses[i])
         baseclass = CLASS_CLERIC;
   for (i = 0; i < ROGUE_SUBCLASSES; i++)
      if (class == rogue_subclasses[i])
         baseclass = CLASS_ROGUE;
   for (i = 0; i < MAGE_SUBCLASSES; i++)
      if (class == mage_subclasses[i])
         baseclass = CLASS_MAGIC_USER;

   return baseclass;
d4494 5
@


1.115
log
@advance_level() automatically modifies clan power and boots a player
from a clan if they are advanced to clan god status.  save_char()
no longer requires a save room (which wasn't being used anyway).
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.114 2007/10/13 05:07:24 myc Exp myc $
a1333 12
    SET_SKILL(ch, SKILL_SPHERE_GENERIC,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_FIRE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_WATER,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_EARTH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_AIR,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_HEALING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_PROT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_ENCHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_SUMMON,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DEATH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DIVIN,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

a1377 13

    SET_SKILL(ch, SKILL_SPHERE_GENERIC,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_FIRE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_WATER,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_EARTH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_AIR,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_HEALING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_PROT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_ENCHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_SUMMON,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DEATH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DIVIN,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

a1437 13

    SET_SKILL(ch, SKILL_SPHERE_GENERIC,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_FIRE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_WATER,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_EARTH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_AIR,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_HEALING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_PROT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_ENCHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_SUMMON,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DEATH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DIVIN,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

a1496 13

    SET_SKILL(ch, SKILL_SPHERE_GENERIC,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_FIRE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_WATER,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_EARTH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_AIR,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_HEALING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_PROT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_ENCHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_SUMMON,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DEATH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DIVIN,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

a1557 13

    SET_SKILL(ch, SKILL_SPHERE_GENERIC,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_FIRE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_WATER,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_EARTH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_AIR,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_HEALING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_PROT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_ENCHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_SUMMON,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DEATH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DIVIN,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

a1662 13

    SET_SKILL(ch, SKILL_SPHERE_GENERIC,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_FIRE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_WATER,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_EARTH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_AIR,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_HEALING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_PROT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_ENCHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_SUMMON,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DEATH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DIVIN,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

a1735 13

    SET_SKILL(ch, SKILL_SPHERE_GENERIC,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_FIRE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_WATER,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_EARTH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_AIR,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_HEALING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_PROT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_ENCHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_SUMMON,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DEATH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DIVIN,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

a1804 13

    SET_SKILL(ch, SKILL_SPHERE_GENERIC,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_FIRE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_WATER,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_EARTH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_AIR,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_HEALING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_PROT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_ENCHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_SUMMON,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DEATH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DIVIN,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

a2118 14
    /*    SET_SKILL(ch, SPELL_BLUR, 1000); */

    SET_SKILL(ch, SKILL_SPHERE_GENERIC,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_FIRE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_WATER,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_EARTH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_AIR,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_HEALING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_PROT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_ENCHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_SUMMON,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DEATH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DIVIN,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

a2150 12
    SET_SKILL(ch, SKILL_SPHERE_GENERIC,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_FIRE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_WATER,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_EARTH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_AIR,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_HEALING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_PROT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_ENCHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_SUMMON,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DEATH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DIVIN,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

a2196 12

    SET_SKILL(ch, SKILL_SPHERE_GENERIC,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_FIRE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_WATER,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_EARTH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_AIR,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_HEALING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_PROT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_ENCHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_SUMMON,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DEATH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DIVIN,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
a2275 13

    SET_SKILL(ch, SKILL_SPHERE_GENERIC,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_FIRE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_WATER,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_EARTH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_AIR,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_HEALING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_PROT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_ENCHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_SUMMON,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DEATH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DIVIN,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

a2317 13

    SET_SKILL(ch, SKILL_SPHERE_GENERIC,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_FIRE,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_WATER,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_EARTH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_AIR,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_HEALING,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_PROT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_ENCHANT,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_SUMMON,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DEATH,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SPHERE_DIVIN,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);

a3203 12
  spell_level(SKILL_SPHERE_GENERIC, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_SPHERE_FIRE, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_SPHERE_WATER, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_SPHERE_EARTH, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_SPHERE_AIR, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_SPHERE_HEALING, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_SPHERE_PROT, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_SPHERE_ENCHANT, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_SPHERE_SUMMON, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_SPHERE_DEATH, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_SPHERE_DIVIN, CLASS_MAGIC_USER, 1, 1);

a3263 12
  spell_level(SKILL_SPHERE_GENERIC, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_FIRE, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_WATER, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_EARTH, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_AIR, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_HEALING, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_PROT, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_ENCHANT, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_SUMMON, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_DEATH, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_DIVIN, CLASS_PYROMANCER, 1, 1);

a3326 12
  spell_level(SKILL_SPHERE_GENERIC, CLASS_CRYOMANCER, 1, 1);
  spell_level(SKILL_SPHERE_FIRE, CLASS_CRYOMANCER, 1, 1);
  spell_level(SKILL_SPHERE_WATER, CLASS_CRYOMANCER, 1, 1);
  spell_level(SKILL_SPHERE_EARTH, CLASS_CRYOMANCER, 1, 1);
  spell_level(SKILL_SPHERE_AIR, CLASS_CRYOMANCER, 1, 1);
  spell_level(SKILL_SPHERE_HEALING, CLASS_CRYOMANCER, 1, 1);
  spell_level(SKILL_SPHERE_PROT, CLASS_CRYOMANCER, 1, 1);
  spell_level(SKILL_SPHERE_ENCHANT, CLASS_CRYOMANCER, 1, 1);
  spell_level(SKILL_SPHERE_SUMMON, CLASS_CRYOMANCER, 1, 1);
  spell_level(SKILL_SPHERE_DEATH, CLASS_CRYOMANCER, 1, 1);
  spell_level(SKILL_SPHERE_DIVIN, CLASS_CRYOMANCER, 1, 1);
 
a3453 12
  spell_level(SKILL_SPHERE_GENERIC, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_SPHERE_FIRE, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_SPHERE_WATER, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_SPHERE_EARTH, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_SPHERE_AIR, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_SPHERE_HEALING, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_SPHERE_PROT, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_SPHERE_ENCHANT, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_SPHERE_SUMMON, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_SPHERE_DEATH, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_SPHERE_DIVIN, CLASS_CLERIC, 1, 1);

a3546 11
  spell_level(SKILL_SPHERE_GENERIC, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_SPHERE_FIRE, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_SPHERE_WATER, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_SPHERE_EARTH, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_SPHERE_AIR, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_SPHERE_HEALING, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_SPHERE_PROT, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_SPHERE_ENCHANT, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_SPHERE_SUMMON, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_SPHERE_DEATH, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_SPHERE_DIVIN, CLASS_PRIEST, 1, 1);
a3631 12
  spell_level(SKILL_SPHERE_GENERIC, CLASS_DIABOLIST, 1, 1);
  spell_level(SKILL_SPHERE_FIRE, CLASS_DIABOLIST, 1, 1);
  spell_level(SKILL_SPHERE_WATER, CLASS_DIABOLIST, 1, 1);
  spell_level(SKILL_SPHERE_EARTH, CLASS_DIABOLIST, 1, 1);
  spell_level(SKILL_SPHERE_AIR, CLASS_DIABOLIST, 1, 1);
  spell_level(SKILL_SPHERE_HEALING, CLASS_DIABOLIST, 1, 1);
  spell_level(SKILL_SPHERE_PROT, CLASS_DIABOLIST, 1, 1);
  spell_level(SKILL_SPHERE_ENCHANT, CLASS_DIABOLIST, 1, 1);
  spell_level(SKILL_SPHERE_SUMMON, CLASS_DIABOLIST, 1, 1);
  spell_level(SKILL_SPHERE_DEATH, CLASS_DIABOLIST, 1, 1);
  spell_level(SKILL_SPHERE_DIVIN, CLASS_DIABOLIST, 1, 1);

a3923 12
  spell_level(SKILL_SPHERE_GENERIC, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_FIRE, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_WATER, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_EARTH, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_AIR, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_HEALING, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_PROT, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_ENCHANT, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_SUMMON, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_DEATH, CLASS_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_DIVIN, CLASS_PALADIN, 1, 1);

a3974 12
  spell_level(SKILL_SPHERE_GENERIC, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_FIRE, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_WATER, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_EARTH, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_AIR, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_HEALING, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_PROT, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_ENCHANT, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_SUMMON, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_DEATH, CLASS_ANTI_PALADIN, 1, 1);
  spell_level(SKILL_SPHERE_DIVIN, CLASS_ANTI_PALADIN, 1, 1);
 
a4017 11
  spell_level(SKILL_SPHERE_GENERIC, CLASS_RANGER, 1, 1);
  spell_level(SKILL_SPHERE_FIRE, CLASS_RANGER, 1, 1);
  spell_level(SKILL_SPHERE_WATER, CLASS_RANGER, 1, 1);
  spell_level(SKILL_SPHERE_EARTH, CLASS_RANGER, 1, 1);
  spell_level(SKILL_SPHERE_AIR, CLASS_RANGER, 1, 1);
  spell_level(SKILL_SPHERE_HEALING, CLASS_RANGER, 1, 1);
  spell_level(SKILL_SPHERE_PROT, CLASS_RANGER, 1, 1);
  spell_level(SKILL_SPHERE_ENCHANT, CLASS_RANGER, 1, 1);
  spell_level(SKILL_SPHERE_SUMMON, CLASS_RANGER, 1, 1);
  spell_level(SKILL_SPHERE_DEATH, CLASS_RANGER, 1, 1);
  spell_level(SKILL_SPHERE_DIVIN, CLASS_RANGER, 1, 1);
a4097 12
  spell_level(SKILL_SPHERE_GENERIC, CLASS_DRUID, 1, 1);
  spell_level(SKILL_SPHERE_FIRE, CLASS_DRUID, 1, 1);
  spell_level(SKILL_SPHERE_WATER, CLASS_DRUID, 1, 1);
  spell_level(SKILL_SPHERE_EARTH, CLASS_DRUID, 1, 1);
  spell_level(SKILL_SPHERE_AIR, CLASS_DRUID, 1, 1);
  spell_level(SKILL_SPHERE_HEALING, CLASS_DRUID, 1, 1);
  spell_level(SKILL_SPHERE_PROT, CLASS_DRUID, 1, 1);
  spell_level(SKILL_SPHERE_ENCHANT, CLASS_DRUID, 1, 1);
  spell_level(SKILL_SPHERE_SUMMON, CLASS_DRUID, 1, 1);
  spell_level(SKILL_SPHERE_DEATH, CLASS_DRUID, 1, 1);
  spell_level(SKILL_SPHERE_DIVIN, CLASS_DRUID, 1, 1);
 
a4142 11
  spell_level(SKILL_SPHERE_GENERIC, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_SPHERE_FIRE, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_SPHERE_WATER, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_SPHERE_EARTH, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_SPHERE_AIR, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_SPHERE_HEALING, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_SPHERE_PROT, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_SPHERE_ENCHANT, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_SPHERE_SUMMON, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_SPHERE_DEATH, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_SPHERE_DIVIN, CLASS_SHAMAN, 1, 1);
a4252 12
  spell_level(SKILL_SPHERE_GENERIC, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_FIRE, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_WATER, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_EARTH, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_AIR, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_HEALING, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_PROT, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_ENCHANT, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_SUMMON, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_DEATH, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_SPHERE_DIVIN, CLASS_NECROMANCER, 1, 1);

a4299 12
  spell_level(SKILL_SPHERE_GENERIC, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_SPHERE_FIRE, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_SPHERE_WATER, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_SPHERE_EARTH, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_SPHERE_AIR, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_SPHERE_HEALING, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_SPHERE_PROT, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_SPHERE_ENCHANT, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_SPHERE_SUMMON, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_SPHERE_DEATH, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_SPHERE_DIVIN, CLASS_CONJURER, 1, 1);
 
d4310 13
a4322 1
 * or gains a level, or changes class/race for any reason. */
d4326 2
a4327 1
   int skill = 0;
d4332 2
d4347 7
a4353 2
       * This code deals with categories 1 and 2 here, and ignores skills in
       * category 3.
d4356 30
a4385 11
      if (spell_info[skill].min_level[(int)GET_CLASS(ch)] <= GET_LEVEL(ch) 
            && spell_info[skill].quest == FALSE) {
         /* This skill/spell you get because your level is high enough.
          * So: ensure that you have it. */
         if (GET_SKILL(ch, skill) <= 0) {
            if (!IS_SKILL(skill))
               SET_SKILL(ch, skill, 1000);
            else if (skill == SKILL_BAREHAND || skill == SKILL_SAFEFALL)
               SET_SKILL(ch, skill, 1000);
            else
               SET_SKILL(ch, skill, !IS_NPC(ch) ? 150 : roll_mob_skill(ch));
d4387 2
a4388 1
      } else if (spell_info[skill].quest == FALSE &&
d4395 19
d4567 5
@


1.114
log
@Added new monk chants.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.113 2007/10/11 20:14:48 myc Exp myc $
d31 1
a31 1

d3164 12
d3179 1
a3179 1
  save_char(ch, NOWHERE);
d4828 3
@


1.113
log
@Changed the skill defines slightly to support chants and songs as
slightly distinguished from spells and skills.  TOP_SKILL is the
old MAX_SKILLS.
Implemented monk chants using the magic system.  Added skill sets
to monks.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.112 2007/09/21 08:02:33 jps Exp myc $
d2079 6
d4046 6
d4816 7
@


1.112
log
@Adjust direction of Mielikki priest guild guard.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.111 2007/09/11 16:34:24 myc Exp jps $
d499 2
a500 2
#define SPELL	0
#define SKILL	1
d505 5
a509 5
  /* MAG  CLE	THE  WAR PAL ANTP RAN DRU  SHA  ASS MER NECR CONJ MONK, BERS, PRIE, DIAB, MYST, ROG, BARD, PYRO, CRYO, ILLU, HUNTER*/
  {95,	  95,	95,  95, 85, 85,  85, 95,  95,  95, 80, 95,  95,  95,   95,   95,   95,   95,   95,  95,   85,   85,   85,   95},	
  {100,	  100,	12,  12, 10, 10,  10, 100, 100, 10, 10, 100, 100, 10,   10,   100,  100,  100,  10,  10,   100,  100,  100,  10},
  {25,	  25,	1,   1,  1,  1,   1,  1,   1,   1,  1,  1,   1,   1,    1,    1,    1,    1,    1,   1,    1,    1,    1,    1},
  {SPELL, SPELL, SKILL,	SKILL, SKILL, SKILL, SKILL, SPELL, SPELL, SKILL, SKILL, SPELL, SPELL, SKILL, SKILL, SPELL, SPELL, SPELL, SKILL, SKILL, SPELL, SPELL, SPELL, SKILL}	
d982 1
a982 1
  if(ch->affected) {
d988 1
a988 1
  for (i=0;i < MAX_SKILLS+1;i++)
d2075 5
d4036 5
d4615 1
a4615 1
   for (skill = 0; skill < MAX_SKILLS + 1; skill++) {
d4637 1
a4637 1
            if (IS_SPELL(skill))
d4700 2
a4701 2
  sh_int old_skills[MAX_SKILLS+1];
  sh_int new_skills[MAX_SKILLS+1];
d4704 1
a4704 1
  for (skill = 0; skill < MAX_SKILLS + 1; skill++) {
d4722 1
a4722 1
  for (skill = 0; skill < MAX_SKILLS + 1; skill++) {  
d4740 2
a4741 2
  sh_int old_skills[MAX_SKILLS+1];
  sh_int new_skills[MAX_SKILLS+1];
d4745 1
a4745 1
  for (skill = 0; skill < MAX_SKILLS + 1; skill++) {
d4760 1
a4760 1
  for (skill = 0; skill < MAX_SKILLS + 1; skill++) {
d4765 1
a4765 1
  for (skill = 0; skill < MAX_SKILLS + 1; skill++) {  
d4804 3
@


1.111
log
@Added a roll_skill function that takes the level skill limits into
account.  It also takes up far less clock cyrcles than roll_mob_skill,
but the latter remains because it's used a loooot.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.110 2007/09/08 06:03:03 jps Exp myc $
d535 1
a535 1
  {CLASS_PRIEST,        3004,   SCMD_SOUTH},
d4794 5
@


1.110
log
@Remove "plane shift" spell from various classes.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.109 2007/09/08 05:18:49 jps Exp jps $
d1099 6
d2864 1
a2864 1
    SET_SKILL(ch, SKILL_SHAPECHANGE, MIN(1000,(int)(1000*GET_LEVEL(ch)/50)));
d4794 3
@


1.109
log
@Remove summon dracolich spell from necromancers.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.108 2007/09/07 18:56:04 jps Exp jps $
d3611 1
a3611 1
  spell_level(SPELL_PLANE_SHIFT, CLASS_CLERIC, CIRCLE_9, 9);
d3711 1
a3711 1
  spell_level(SPELL_PLANE_SHIFT, CLASS_PRIEST, CIRCLE_9, 9);
d3811 1
a3811 1
  spell_level(SPELL_PLANE_SHIFT, CLASS_DIABOLIST, CIRCLE_9, 9);
d4788 3
@


1.108
log
@Thieves get double attack at level 75.
Mercenaries get dual wield at level 15.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.107 2007/09/04 06:49:19 myc Exp jps $
d4503 1
a4503 1
  spell_level(SPELL_SUMMON_DRACOLICH, CLASS_NECROMANCER, CIRCLE_10, 10);
d4788 4
@


1.107
log
@Re-assigning control weather spell to druids.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.106 2007/08/28 20:18:35 myc Exp myc $
d3906 1
a3906 1
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_THIEF, 90, 2);
d4448 1
a4448 1
  spell_level(SKILL_DUAL_WIELD, CLASS_MERCENARY, 60, 2);
d4788 3
@


1.106
log
@Rangers get AFF_FARSEE innate now, instead of special-casing the ranger
class in do_farsee.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.105 2007/08/26 21:33:36 jps Exp myc $
d2367 1
a2367 1
/*    SET_SKILL(ch, SPELL_CONTROL_WEATHER, 1000);*/
d3870 2
a3871 2
  /*spell_level(SPELL_SANCTUARY, CLASS_MYSTIC, 49);*/
  /* spell_level(SPELL_CALL_LIGHTNING, CLASS_MYSTIC, 15);*/
d3873 1
a3873 1
  /* spell_level(SPELL_CONTROL_WEATHER, CLASS_MYSTIC, 17);*/
d4302 1
a4302 1
/*  spell_level(SPELL_CONTROL_WEATHER, CLASS_DRUID, CIRCLE_5, 5); */
d4788 4
@


1.105
log
@Add level_max_skill() so you can see what the max skill is for
someone at a particular level - especially 99.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.104 2007/08/15 06:07:52 myc Exp jps $
d1109 1
a1109 2
      SET_BIT(AFF_FLAGS(ch), AFF_DETECT_ALIGN); 
      SET_BIT(AFF_FLAGS(ch), AFF_PROTECT_EVIL);
d1112 4
a1115 2
      SET_BIT(AFF_FLAGS(ch), AFF_DETECT_ALIGN); 
      SET_BIT(AFF_FLAGS(ch), AFF_PROTECT_GOOD);
d4788 4
@


1.104
log
@Making conceal level 10 for thieves.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.103 2007/08/14 22:43:07 myc Exp myc $
d1000 1
a1000 1
int return_max_skill(struct char_data *ch, int skill) {
d1075 1
a1075 2
  return (MIN((10*GET_LEVEL(ch)) + 50, max_skill));
    /*  return (MIN(max_skill, (GET_LEVEL(ch) * (int)(max_skill/50))));*/
d1078 3
d4787 3
@


1.103
log
@Adding corner, conceal, stealth, and shadow skills.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.102 2007/08/05 22:19:17 myc Exp myc $
d3910 1
a3910 1
  spell_level(SKILL_CONCEAL, CLASS_THIEF, 30, 2);
d4785 3
@


1.102
log
@Fixed up springleap skill for monks.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.101 2007/08/05 20:21:51 myc Exp myc $
d1962 2
d1985 4
d2062 1
d2130 1
d3910 2
d3935 4
d3997 1
d4422 1
d4785 3
@


1.101
log
@Added retreat and group retreat skills.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.100 2007/08/02 04:19:04 jps Exp myc $
d3983 1
d4769 3
@


1.100
log
@Added "moonbeam" spell for Druids.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.99 2007/07/31 07:37:51 jps Exp jps $
d2010 1
d2130 2
d2160 1
d2218 1
d3954 1
d4064 1
d4125 1
d4413 2
d4768 3
@


1.99
log
@Brought back the locate object spell.
Simplified update_skills().
Remove innate effects prior to applying them, so that any you had from
the prior race won't linger when you change to a new race.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.98 2007/07/04 02:21:58 myc Exp jps $
d2374 1
d4266 1
d4758 6
@


1.98
log
@Renamed douse spell to extinguish.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.97 2007/06/16 00:32:55 myc Exp myc $
a1191 1
/* This re/applies all the racial affect flags. DCE 07-dec-01 */
d1194 7
d1300 1
a1300 1
    /* SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000); */
d1352 1
a1352 1
    /* SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000); */
d1408 1
a1408 1
    /* SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000); */
d1482 1
a1482 1
    /* SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000); */
d1551 1
a1551 1
    /* SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000); */
d1626 1
a1626 1
    /* SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000); */
d3280 1
a3280 1
  /* spell_level(SPELL_LOCATE_OBJECT, CLASS_MAGIC_USER, CIRCLE_3, 3); */
d3352 1
a3352 1
  /* spell_level(SPELL_LOCATE_OBJECT, CLASS_PYROMANCER, CIRCLE_3, 3); */
d3425 1
a3425 1
  /* spell_level(SPELL_LOCATE_OBJECT, CLASS_CRYOMANCER, CIRCLE_3, 3); */
d4460 1
a4460 1
  /* spell_level(SPELL_LOCATE_OBJECT, CLASS_NECROMANCER, CIRCLE_5, 5); */
d4517 1
a4517 1
  /*  spell_level(SPELL_LOCATE_OBJECT, CLASS_CONJURER, CIRCLE_4, 4);*/
d4554 6
a4559 1
/* reset skills to include new class skills for classes */
d4562 7
a4568 2
  int skill = 0;
   /*   int skill_level = 0; */
d4570 31
a4600 13
  for (skill = 0; skill < MAX_SKILLS + 1; skill++) {
    /* what a GOAT FUCK! someone defined languages right in the middle of spells */
    /* added this line so languages don't get erased every time. FIXIT!!! --gurlaek 7/5/1999 */
    if(skill >= MIN_LANGUAGE && skill <= MAX_LANGUAGE)
      continue;
    if(GET_CLASS(ch) == CLASS_UNDEFINED)
      continue;
    if (spell_info[skill].min_level[(int)GET_CLASS(ch)] <= GET_LEVEL(ch) 
	&& spell_info[skill].quest == FALSE) { /* don't give handouts :) --gurlaek 7/5/1999 */
      
      if(skill == SPELL_LOCATE_OBJECT) {
	SET_SKILL(ch, skill, 0);
	continue;
d4602 2
a4603 31
      if (GET_SKILL(ch, skill) <= 0) {
	/* this isn't guaranteed in the future to be correct, very generic..pelase 
	   feel free to update as needed.. fingh 11/28/98
	   Set spells to 1000
	*/
	if (skill <= MAX_SPELLS)
	  SET_SKILL(ch, skill, 1000);
        else if (skill == SKILL_BAREHAND || skill == SKILL_SAFEFALL)
          SET_SKILL(ch, skill, 1000);
	else
	  /* mobs now get skills here too based on level --gurlaek 7/5/1999 */
	  SET_SKILL(ch, skill, !IS_NPC(ch) ? 150 : roll_mob_skill(ch));
      } /* end if (get_skill) */
    } else if (spell_info[skill].quest == FALSE &&
	       racial_innate(GET_RACE(ch), skill) == FALSE) {
      /* keep quest spells earned --gurlaek 7/5/1999 */
      /* also keep racial innates --gurlaek 9/8/2000 */
      SET_SKILL(ch, skill, 0);
    } else if (spell_info[skill].min_level[(int)GET_CLASS(ch)] == LVL_IMMORT
		    && GET_LEVEL(ch) < LVL_IMMORT) {
      /* Moved this else statement below the check for quest
         spells and innates. Also added a check for racial innates
         and quest spells...should this have been combined in the
         prior else check??? Zantir 3/25/01 */
      /* praps this class shouldnt have this skill -- mtp */
      if (spell_info[skill].quest == FALSE &&
         racial_innate(GET_RACE(ch), skill) == FALSE)
        SET_SKILL(ch,skill,0);
    }
  } /* end for loop */
} /* end update_skills */
d4756 3
@


1.97
log
@Removing 'circle' skill from assassins' skill lists.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.96 2007/06/16 00:15:49 myc Exp myc $
d1548 1
a1548 1
    SET_SKILL(ch, SPELL_DOUSE, 1000);
d3417 1
a3417 1
  spell_level(SPELL_DOUSE, CLASS_CRYOMANCER, CIRCLE_3, 3);
d4751 3
@


1.96
log
@Three spells for necromancers: soul tap, rebuke undead,
and degeneration.  One spell for rangers: natures guidance.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.95 2007/05/29 20:16:32 jps Exp myc $
a2106 1
    SET_SKILL(ch, SKILL_CIRCLE,  IS_NPC(ch) ? roll_mob_skill(ch) : 100);
a4379 1
  spell_level(SKILL_CIRCLE, CLASS_ASSASSIN, 1, 2);
d4751 4
@


1.95
log
@Abstracted getting base class.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.94 2007/05/28 22:36:26 jps Exp jps $
d1307 3
d2313 1
d4205 1
d4470 3
d4753 3
@


1.94
log
@Reduce the <base-class>_subclass arrays to the subclasses that are live.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.93 2007/05/28 06:34:01 jps Exp jps $
d4722 21
d4745 3
@


1.93
log
@Fix guild guard blocking to actually allow the right classes and subclasses
into the various guilds.  Looks like someone fixed this situation in the
mud simply by not loading the guards - once this change goes live, the
guards can be loaded again.  And once again, only warriors and thier
subclasses will be able to see the warrior coach (same goes for clerics
and sorcerers).
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.92 2007/05/11 21:03:12 myc Exp jps $
d85 2
a86 2
{ CLASS_PALADIN, CLASS_ANTI_PALADIN, CLASS_RANGER,
  CLASS_BERSERKER, CLASS_MONK};
d89 3
a91 1
{ CLASS_PRIEST, CLASS_DIABOLIST, CLASS_DRUID, CLASS_MYSTIC };
d94 2
a95 2
{ CLASS_ASSASSIN, CLASS_THIEF,CLASS_MERCENARY, CLASS_HUNTER,
  CLASS_BARD };
d98 2
a99 2
{ CLASS_PYROMANCER, CLASS_CRYOMANCER, CLASS_ILLUSIONIST,
  CLASS_NECROMANCER, CLASS_CONJURER };
d4724 8
@


1.92
log
@New rogue skill, eye gouge, allows rogues to gouge out eyes.  A very
complicated skill.  :P  Fixed cure blind's logic, and made it support
eye gouge too.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.91 2007/05/11 20:13:28 myc Exp myc $
d521 3
d530 2
a537 1
  {CLASS_BARD,          3037,   SCMD_DOWN},
d542 6
a547 3
  {CLASS_RANGER,        3549,   SCMD_WEST},
  {CLASS_MONK,		5307,	SCMD_EAST},
  {CLASS_PALADIN,	5305,	SCMD_EAST},
d551 3
a556 3
  {CLASS_PYROMANCER,    30072,  SCMD_WEST},
  {CLASS_CRYOMANCER,    30072,  SCMD_WEST},
  {CLASS_NECROMANCER,   30072,  SCMD_WEST}, 
a558 1
  {CLASS_DIABOLIST,     30107,  SCMD_SOUTH},
d562 1
d571 3
a574 3
  {CLASS_RANGER,        30029,  SCMD_WEST},
  {CLASS_MONK,		30029,	SCMD_WEST},
  {CLASS_PALADIN,	30029,	SCMD_WEST},
a576 1
  {CLASS_WARRIOR,	6079,   SCMD_EAST},
d578 5
a582 9
  {CLASS_MONK,  	6079,   SCMD_EAST},
  {CLASS_PALADIN,	6079,   SCMD_EAST},
  {CLASS_RANGER,	6079,   SCMD_EAST},

  {CLASS_WARRIOR,	6148,   SCMD_SOUTH},
  {CLASS_ANTI_PALADIN,  6148,   SCMD_SOUTH},
  {CLASS_MONK,  	6148,   SCMD_SOUTH},
  {CLASS_PALADIN,	6148,   SCMD_SOUTH},
  {CLASS_RANGER,	6148,   SCMD_SOUTH},
d585 2
a586 1
  {CLASS_MERCENARY,	6106,	SCMD_UP},
a587 2
  {CLASS_THIEF,         6067,   SCMD_NORTH},
  {CLASS_BARD,          6067,   SCMD_NORTH},
a604 1
  {CLASS_BARD,          10047,   SCMD_EAST},
d608 3
a610 3
  {CLASS_PALADIN,	10014,   SCMD_WEST},
  {CLASS_MONK,		10014,   SCMD_WEST},
  {CLASS_RANGER,	10014,   SCMD_WEST},
a621 12
  /* Khuzhadam */
  /*	commented out for now 28/11 mtp
  {CLASS_WARRIOR,      61526,  SCMD_WEST},
  {CLASS_BERSERKER,    61526,  SCMD_SOUTH},
  {CLASS_CLERIC,       61528,  SCMD_NORTH},
  {CLASS_PRIEST,       61528,  SCMD_SOUTH},
  {CLASS_ROGUE,        61532,  SCMD_NORTH},
  {CLASS_MERCENARY,    61532,  SCMD_EAST},
  {CLASS_THIEF,        61532,  SCMD_DOWN},
  */


d4722 5
@


1.91
log
@Vaporform is a new circle 13 spell for cryomancers.  It significantly
increases the caster's chance of dodging a hit.  It is a quest spell.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.90 2007/04/11 22:14:40 jps Exp myc $
d1983 1
d3919 1
d4734 4
@


1.90
log
@Disabled "control weather" spell from druids, since it does nothing.
No mortals should have access to it now.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.89 2007/03/07 23:10:02 jps Exp jps $
a1583 1
    SET_SKILL(ch, SPELL_GREATER_WATERWALK, 1000);
d1591 1
d3456 1
a3456 1
  spell_level(SPELL_GREATER_WATERWALK, CLASS_CRYOMANCER, CIRCLE_9, 9);
d4732 4
@


1.89
log
@Changed Anduin mercenary guild entrance direction to up.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.88 2007/02/14 03:54:53 myc Exp jps $
d2351 1
a2351 1
    SET_SKILL(ch, SPELL_CONTROL_WEATHER, 1000);
d4271 1
a4271 1
  spell_level(SPELL_CONTROL_WEATHER, CLASS_DRUID, CIRCLE_5, 5);
d4732 3
@


1.88
log
@Changed base saves.  Sorcerers get harness circle 8.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.87 2007/01/25 17:05:51 myc Exp myc $
d583 1
a583 1
  {CLASS_MERCENARY,	6106,	SCMD_WEST},
d4732 3
@


1.87
log
@Diabolists won't forget spells when they level gain.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.86 2006/11/26 08:31:17 jps Exp myc $
d262 1
a262 1

d267 1
a269 1
  case CLASS_ANTI_PALADIN:
a270 1
  case CLASS_RANGER:
d273 14
a286 5
    para = 70-(int)(GET_LEVEL(ch)*11/14);
    rod  = 80-(int)(GET_LEVEL(ch)*11/14);
    petr = 75-(int)(GET_LEVEL(ch)*11/14);
    bre  = 85-(int)(GET_LEVEL(ch)*13/14);
    spe  = 85-(int)(GET_LEVEL(ch)*11/14);
d288 1
a288 1
  case CLASS_MAGIC_USER:	
d294 5
a298 5
    para = 70-(int)(GET_LEVEL(ch)*3/7);
    rod  = 55-(int)(GET_LEVEL(ch)*4/7);
    petr = 65-(int)(GET_LEVEL(ch)*4/7);
    bre  = 75-(int)(GET_LEVEL(ch)*4/7);
    spe  = 60-(int)(GET_LEVEL(ch)*4/7);
d305 5
a309 5
    para = 65-(int)(GET_LEVEL(ch)*5/14);
    rod  = 70-(int)(GET_LEVEL(ch)*5/7);
    petr = 60-(int)(GET_LEVEL(ch)*5/14);
    bre  = 80-(int)(GET_LEVEL(ch)*5/14);
    spe  = 75-(int)(GET_LEVEL(ch)*5/7);
d316 5
a320 5
    para = 65-(int)(GET_LEVEL(ch)*4/7);
    rod  = 70-(int)(GET_LEVEL(ch)*4/7);
    petr = 65-(int)(GET_LEVEL(ch)*4/7);
    bre  = 80-(int)(GET_LEVEL(ch)*4/7);
    spe  = 75-(int)(GET_LEVEL(ch)*4/7);
d323 6
a328 6
    para = 65-(int)(GET_LEVEL(ch)*4/7);
    rod  = 70-(int)(GET_LEVEL(ch)*4/7);
    petr = 65-(int)(GET_LEVEL(ch)*4/7);
    bre  = 80-(int)(GET_LEVEL(ch)*4/7);
    spe  = 75-(int)(GET_LEVEL(ch)*4/7);
    break;     
d330 9
a338 1
  
d358 2
d364 1
d367 1
a367 1
    return MAX(5, spe);
d369 1
a369 1
    return  MAX(5, bre);
d371 1
a371 1
    return  MAX(5, rod);
d373 1
a373 1
    return  MAX(5, petr);
d375 1
a375 1
    return  MAX(5, para);
d1442 1
a1442 1
    /*SET_SKILL(ch, SPELL_HARNESS, 1000); */
d1504 1
a1504 1
    SET_SKILL(ch, SPELL_FIREWALK, 1000);
d1511 1
a1511 1
    SET_SKILL(ch, SPELL_GREATER_FIREWALK, 1000);
d3305 1
a3305 1
  /*  spell_level(SPELL_HARNESS, CLASS_MAGIC_USER, CIRCLE_8, 8); */
d3373 1
a3373 1
  spell_level(SPELL_FIREWALK, CLASS_PYROMANCER, CIRCLE_8, 8);
d3381 1
a3381 1
  spell_level(SPELL_GREATER_FIREWALK, CLASS_PYROMANCER, CIRCLE_10, 10);
d4732 3
@


1.86
log
@Typo fixes for character creation process.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.85 2006/11/18 04:26:32 jps Exp jps $
d2968 1
d4713 3
@


1.85
log
@Renamed continual light spell to illumination, and it only works on
LIGHT items (still rooms too).
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.84 2006/11/08 09:16:04 jps Exp jps $
d41 1
a41 1
"&1&bF&0&3&bi&0&1&be&0&3&br&0&1&by&0&7&bMUD has many various and complex classes for you to play.  All players\r\n"
d4712 4
@


1.84
log
@Fixed some loose-lose typos.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.83 2006/11/08 07:55:17 jps Exp jps $
d1680 1
a1680 1
    SET_SKILL(ch, SPELL_CONTINUAL_LIGHT, 1000);
d1756 1
a1756 1
    SET_SKILL(ch, SPELL_CONTINUAL_LIGHT, 1000);
d2341 1
a2341 1
    SET_SKILL(ch, SPELL_CONTINUAL_LIGHT, 1000);
d3558 1
a3558 1
  spell_level(SPELL_CONTINUAL_LIGHT, CLASS_CLERIC, CIRCLE_6, 6);
d3655 1
a3655 1
  spell_level(SPELL_CONTINUAL_LIGHT, CLASS_PRIEST, CIRCLE_6, 6);
d4262 1
a4262 1
  spell_level(SPELL_CONTINUAL_LIGHT, CLASS_DRUID, CIRCLE_7, 7);
d4712 3
@


1.83
log
@Change verbal instances of "breath" to "breathe"
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.82 2006/10/12 01:35:47 dce Exp $
d2665 1
a2665 1
/*modified by proky so if loose level uses GET_LASTLEVEL(ch)*/
d4712 3
@


1.82
log
@Minor fix for Ogakh guild guards.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.81 2006/10/07 02:07:07 dce Exp dce $
d2595 1
a2595 1
    SET_SKILL (ch, SKILL_BREATH, roll_mob_skill(ch));
d2605 1
a2605 1
    SET_SKILL (ch, SKILL_BREATH, roll_mob_skill(ch));
d4601 1
a4601 1
  case SKILL_BREATH:
d4712 3
@


1.81
log
@Updated for guild guards in Ogakh.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.80 2006/05/30 01:25:13 rls Exp dce $
d527 4
a530 1
  {CLASS_NECROMANCER,   30112,  SCMD_UP},  /* Haunted House */
d534 3
d541 1
d544 1
d546 3
d4712 3
@


1.80
log
@Gave poison back to antis and necro/druids/clerics/diabs
also made sure some classes had rem poison, like pali, etc.
as well, set innate prot_good/evil on anti/pali
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.79 2005/06/15 17:21:43 cjd Exp $
d523 16
d4701 5
@


1.79
log
@Adjust checks to make certain monks skills mastered on subclas
and make dragon innates stay on dragons with a designated class
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.78 2004/11/11 23:24:06 rsd Exp $
d1072 1
d1076 1
d1268 1
d1633 1
d1819 1
d2209 1
a2209 1
    /* SET_SKILL(ch, SPELL_POISON, 1000); */
d2325 1
d3507 1
d3707 1
d4042 1
d4100 1
a4100 1
  /*    spell_level(SPELL_POISON, CLASS_ANTI_PALADIN, CIRCLE_5, 5); */
d4213 1
d4403 1
d4685 4
@


1.78
log
@split up and edited the subclass_description char star to
make it smaller so the compiler would stop complaining
about it being more than 509 bytes.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.77 2003/06/21 01:01:08 jjl Exp $
d4519 2
d4563 15
d4674 5
@


1.77
log
@Modified rogues.  Removed circle - backstab is now circlicious.  Updated
damage on backstab to give a little more pop.  Throatcut is now a once a day.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.76 2003/01/26 22:08:54 jjl Exp $
d41 10
a50 10
"&1&bF&0&3&bi&0&1&be&0&3&br&0&1&by&0&7&bMUD has many various and complex classes for you to play.  All the\r\n"
"classes originate from four basic classes. Each of the basic classes\r\n"
"posses unknown growth potential throughout gameplay.  When you create\r\n"
"your character you are limited to these four basic classes.  As you\r\n"
"explore and adventure about the realm and advance your experience with\r\n"
"your character you may learn of ways to specialize your skills and spells\r\n"
"into a new subclass.  If you manage to learn of these ways your new class\r\n"
"will posses new and different skills and spells thus altering your power\r\n"
"within the realm.  Some classes will also be required to choose a deity in\r\n"
"in the future as well.&0\r\n";
d4657 4
@


1.76
log
@Gave rangers cure serious, since they have light and crit.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.75 2002/10/14 02:16:08 jjl Exp $
d3118 1
a3118 1
    return 6;
d3120 1
a3120 1
    return 7;  
d3122 1
a3122 1
    return 8;	  /* all remaining mortal levels */
d4657 3
@


1.75
log
@An update to turn vitality into a set of 6 spells, lesser endurance,
endurance, greater endurance, vitality, greater vitality, and dragon's
health.  Greater endurance is what vitality was.  The rest are scaled
appropriately.    The higher end may need scaled down, or may not.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.74 2002/09/21 03:15:32 jjl Exp $
d4147 1
d4657 6
@


1.74
log
@Fixed the backstab multiplier spread so it's now actually based on
100 levels.  The lowbie-midbie backstabby folk probably aren't going to like it.
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.73 2002/09/15 03:55:51 jjl Exp $
d3487 2
d3496 2
d3505 1
d3514 2
d3522 1
a3522 1
  spell_level(SPELL_VITALITY, CLASS_CLERIC, CIRCLE_5, 5);
d3528 3
d3534 2
d3538 2
d3541 1
d3543 1
d3545 3
d3582 2
d3592 1
d3600 2
d3610 1
d3617 2
a3618 1
  spell_level(SPELL_VITALITY, CLASS_PRIEST, CIRCLE_5, 5);
d3623 2
d3628 1
d3634 2
d3642 1
d3646 1
d3649 4
d3684 2
d3694 1
d3701 2
d3714 1
d3718 2
a3719 1
  spell_level(SPELL_VITALITY, CLASS_DIABOLIST, CIRCLE_5, 5);
d3724 1
d3730 1
d3735 1
d3741 1
d3744 1
d3747 1
d4186 1
d4192 2
d4199 1
d4204 2
d4212 1
d4217 2
a4220 1
  spell_level(SPELL_VITALITY, CLASS_DRUID, CIRCLE_6, 6);
d4223 1
d4227 1
d4232 1
d4236 1
d4239 1
d4241 1
d4656 4
@


1.73
log
@Added skills for summon corpse and shift corpse
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.72 2002/09/13 02:32:10 jjl Exp $
d3108 10
a3117 10
    return 1;	  /* level 0 */
  else if (level <= 7)
    return 2;	  /* level 1 - 7 */
  else if (level <= 13)
    return 3;	  /* level 8 - 13 */
  else if (level <= 20)
    return 4;	  /* level 14 - 20 */
  else if (level <= 28)
    return 5;	  /* level 21 - 28 */
  else if (level <= 38)
d3119 2
a3120 2
  else if (level <= 48)
    return 7;
d3123 1
a3123 1
  else
d4592 3
@


1.72
log
@Updated header comments
@
text
@d2 1
a2 1
 * $Id: class.c,v 1.71 2002/07/16 23:21:53 rls Exp $
d4045 1
d4340 1
d4349 1
d4592 3
@


1.71
log
@Added in new necro spell, bone armor.. and gave them ident
@
text
@d1 3
a3 1
// $Id: class.c,v 1.70 2002/06/06 00:36:09 rls Exp $
d2648 1
a2648 1
  //  extern struct con_app_type con_app[];
d3456 1
a3456 1
  //  spell_level(SPELL_CHARM, CLASS_ILLUSIONIST, 31, 2);
d4428 1
a4428 1
  //  int skill_level = 0;
d4587 338
a4924 333
// $Log: class.c,v $
// Revision 1.70  2002/06/06 00:36:09  rls
// Adjusted THAC0s for each class (to be a bit more sane *hope*)
//
// Revision 1.69  2002/06/04 02:24:30  dce
// Adjusted thac0's for initial testing.
//
// Revision 1.68  2002/05/23 00:20:26  rls
// Added thac0 min-max table for each of the classes (thac0 Revamp)
//
// Revision 1.67  2001/12/16 20:07:53  dce
// Fixed a problem where players could get the max dam and hitroll
// possible by changing their alignment and getting "zapped" by
// alignment sensitive equipment. The "zapped" they would not lose
// the +hitroll or damroll effects because of silly Hubis code.
//
// Revision 1.66  2001/12/07 15:42:30  dce
// Fixed a bug with object spell effects where if a player
// was wearing an item and died, they would permanently
// gain that ability.
//
// Revision 1.65  2001/03/31 19:58:34  dce
// Player innates and quest spells should stick.
//
// Revision 1.64  2001/02/02 00:34:21  mtp
// fixed bad room def for 10014
//
// Revision 1.63  2001/01/16 00:33:56  mtp
// make sure spell/skill list is clean after subclass
//
// Revision 1.62  2001/01/08 00:39:18  rsd
// added the proper direction for the mercenary guild in mielikki
//
// Revision 1.61  2001/01/04 22:49:24  mtp
// added guard 6175 as a guild guard in 6148
//
// Revision 1.60  2000/12/15 02:18:46  rsd
// fixed the spelling of Sorcerer in a freaking class
// array, there is no telling what relies on this misspelling.
//
// Revision 1.59  2000/11/29 00:19:24  mtp
// checking guild guards for ickle/anduin/mielikki
//
// Revision 1.58  2000/11/21 04:31:04  rsd
// Well, Rangers didn't have quick chant and only today
// someone pointed it out, sheez
//
// Revision 1.57  2000/11/20 19:17:22  rsd
// Added back rlog messages from prior to the addition of
// the $log$.
//
// Revision 1.56  2000/11/14 20:24:24  rsd
// added it so half elfs could be priests.. boggle
//
// Revision 1.55  2000/11/13 23:46:45  rsd
// Added tame for paladins and anti's properly.
//
// Revision 1.54  2000/11/12 23:53:35  rsd
// Added more debug into existing debug messages to make
// them useful.
//
// Revision 1.53  2000/11/12 08:04:53  rsd
// added more debug to set_skills() default case in the
// switch. Unknown Class
//
// Revision 1.52  2000/11/12 07:28:57  rsd
// removed the number 50 from the spell_level() circle field.
// Rangers Paladins and AntiPaladins were assigned wrong
//
// Revision 1.51  2000/11/07 01:32:05  mtp
// moved CLASS_MERCENARY from warrior subclass to rogue
//
// Revision 1.50  2000/09/15 17:03:00  jimmy
// added function racial_innates() that prevents the wiping out of innate
// skills by update_skills() when a new player is created or a player levels.
// Added BODYSLAM to set_skills() to the races that were supposed to
// have it.
//
// Revision 1.49  2000/09/04 19:58:35  rsd
// Gave innate detect alignment to Priests and Diabs.
//
// Revision 1.48  2000/05/14 05:21:49  rsd
// let half-elfs be thiefs
//
// Revision 1.47  2000/04/23 08:38:32  rsd
// Retabbed and braced sections of the code, also commented out
// add_move from the player advancement functions.  I never wanted
// players to gain mv when the leveled in the first place. Paladins
// have 3000 - 4000 mv at high level, found out someone had typoed
// number(1,32) into the add_move variable as opposed to
// number(1,3) so paladins were crankin on MV.  Smells like PWIPE
// to me. Also fixed the citadel guardian problem, I hope.
//
// Revision 1.46  2000/04/23 03:23:48  rsd
// ok I really removed weapon proficiencies from classes that didn't
// need them, no body saw nuthiun'
//
// Revision 1.45  2000/04/22 22:34:01  rsd
// Fixed deity spelling in player output. Added a guarding
// direction for the entrance of Timun's citadel. Removed
// weapons proficiencies from classes to set them all to
// the proper proficiencies. Set Paladins and Anti-Paladins
// to have detect alignemnt innately. Would have prefered
// detect evil and good accordingly but they don't seem to
// exist.
//
// Revision 1.44  2000/04/15 23:11:33  rsd
// moved some spells between classes and levels.
//
// Revision 1.43  2000/04/05 06:31:31  rsd
// changed the comment deader, moved flamestrike to lower
// circle and removed color spay from pyros
//
// Revision 1.42  2000/02/14 05:12:44  cso
// added guildguards for anduin and khuzhadam, added berserker to
// class comment immediately after the other stuff.
//
// Revision 1.41  2000/01/31 00:35:20  rsd
// removed the spell poison from the game for players. Removed
// it from anti paladins.
//
// Revision 1.40  1999/11/28 22:53:27  cso
// removed unused choice_table arg from roll_natural_abils
//
// Revision 1.39  1999/11/23 17:56:25  rsd
// fixed guild guards exit points so same guard can block multiple exits.
//
// Revision 1.38  1999/11/23 16:09:19  rsd
// added the other mielikki guild masters
//
// Revision 1.37  1999/11/23 15:48:23  jimmy
// Fixed the slashing weapon skill.  I had it erroneously as stabbing. Doh.
// Reinstated dual wield.
// Allowed mobs/players to pick up items while fighting.
// Fixed a bug in the damage message that wrongfully indicated a miss
// due to a rounding error in the math.
// This was all done in order to facilitate the chance to sling your
// weapon in combat.  Dex and proficiency checks are now made on any missed
// attact and a failure of both causes the weapon to be slung.
//
// Revision 1.35  1999/11/19 05:12:55  cso
// Added buncha anduin guildguards :)
//
// Revision 1.34  1999/11/19 04:32:51  rsd
// Well now,
// Added class guild guard room assignemtns for Mielikki and
// Ickle, I suspect Anduin will soon follow.
// Added spell_level(SKILL_SPHERE..) for all casting classes.
// Added SET_SKILL(ch, SKILL_SPHERE..) for players and MOBS!
// WOO!
//
// Revision 1.33  1999/11/17 20:03:20  jimmy
// reformatted return_max_skill and changed the equation to
// 10*LEVEL + 50 as the max skill
// --gurlaek
//
// Revision 1.32  1999/09/05 07:00:39  jimmy
// Added RCS Log and Id strings to each source file
//
// Revision 1.31  1999/08/20 15:58:42  mud
// commented out dual wield from each class until
// such time that the use of it is more blanced
//
// Revision 1.30  1999/08/18 18:57:16  mud
// made double attack level 90 for thieves
//
// Revision 1.29  1999/08/15 19:42:04  mud
// made double attack level 65 for assassins
//
// Revision 1.28  1999/08/15 19:21:39  mud
// made double attack level 70 for rogues
//
// Revision 1.27  1999/08/12 20:42:01  dce
// Level 99's can now reach **.
//
// Revision 1.26  1999/07/30 05:08:34  mud
// Added rescue for rangers at level 35
//
// Revision 1.25  1999/07/22 17:43:59  jimmy
// Gave the newly reimpleminted spell IDENTIFY to magic users and conjurers
// at 3rd circle
// --gurlaek
//
// Revision 1.24  1999/07/20 19:45:51  jimmy  
// This is the spanky New Spell recognition code.
// This code allows mobs/players that have the KNOW_SPELL skill
// to make a skill check to guess the spell.  A good roll will show both
// the spell and the target.  A bad roll will show the spell garbled and
// then an INT check for the target.  If a really bad roll is made, the spell
// will be replaced by an incorrect one.  the heart of this system is
// start_chant(), end_chant, and bad_guess().
// --gurlaek 7/20/1999
//
// Revision 1.23  1999/07/06 19:57:05  jimmy  
// This is a Mass check-in of the new skill/spell/language assignment system.
// This New system combines the assignment of skill/spell/language for
// both mobs and PCs.  LOts of code was touched and many errors were fixed.
// MCLASS_VOID was moved from 13 to -1 to match CLASS_UNDEFINED for PC's.
// MObs now get random skill/spell/language levels baseed on their race/class/level
// that exactly align with PC's.  PC's no longer have to rent to use skills gained
// by leveling or when first creating a char.  Languages no longer reset to defaults
// when a PC levels.  Discovered that languages have been defined right in the middle
// of the spell area.  This needs to be fixed.  A conversion util neeDs to be run on
// the mob files to compensate for the 13 to -1 class change.
// --gurlaek 7/6/1999
//
// Revision 1.22  1999/06/30 18:25:04  jimmy
// >> This is a major conversion from the 18 point attribute system to the
// >> 100 point attribute system.  A few of the major changes are:
// >> All attributes are now on a scale from 0-100
// >> Everyone views attribs the same but, the attribs for one race
// >>   may be differeent for that of another even if they are the
// >>   same number.
// >> Mobs attribs now get rolled and scaled using the same algorithim as PC's
// >> Mobs now have individual random attributes based on race/class.
// >> The STR_ADD attrib has been completely removed.
// >> All bonus tables for attribs in constants.c have been replaced by
// >>   algorithims that closely duplicate the tables except on a 100 scale.
// >> Some minor changes:
// >> Race selection at char creation can now be toggled by using
// >>   <world races off>
// >> Lots of cleanup done to affected areas of code.
// >> Setting attributes for mobs in the .mob file no longer functions
// >>   but is still in the code for later use.
// >> We now have a spare attribut structure in the pfile because the new
// >>   system only used three instead of four.
// >> --gurlaek 6/30/1999
//
// Revision 1.21  1999/06/10 16:56:28  mud
// This is a mass check in after a code freeze due to an upgrade to RedHat 6.0.
// This fixes all of the warnings associated with the new compiler and 
// libraries.  Many many curly braces had to be added to "if" statements to 
// clarify their behavior to the compiler.  The name approval code was also 
// debugged, and tested to be stable.  The xnames list was converted from an
// array to a linked list to allow for on the fly adding of names to the 
// xnames list. This code compiles fine under both gcc RH5.2 and egcs RH6.0.
// --Gurlaek 6/10/1999 
//
// Revision 1.20  1999/05/26 02:11:22  mud
// added SET_SKILL(ch, SKILL_SUMMON_MOUNT, 1000) and
// spell_level(SKILL_SUMMON_MOUNT, CLASS_PALADIN, 15, 2)
// for both paladin and anti's
//
// Revision 1.19  1999/04/29 19:00:02  mud
// removed locate object from spell lists because it's
// crashing the mud.
//
// Revision 1.18  1999/04/21 04:11:02  jimmy
// fixed a crashbug related to display_class[] and parse_class().  someone
// removed some classes from the menu but didn't match everything up.
// I replaced the removed classes with blank entries so that do_help
// for that class now works on the login menu. SCREAM
// --gurlaek
//
// Revision 1.17  1999/04/16 00:50:23  mud
// added preserve to necro's at 2nd circle.
//
// Revision 1.16  1999/03/24 23:30:59  mud
// added/moved some spells for conjurers.
// Commented out all quest spells per Fingon's
// instructions.
//
// Revision 1.15  1999/03/21 16:36:55  mud
// Altered who gets what spell and at what level, also
// bumped up anti/pally hosemanship and set several spells
// to skill 0 to make them quest spells.
//
// Revision 1.14  1999/03/20 18:54:39  tph
// removed mystic, hunter and illusionist from parse_class().
//
// Revision 1.13  1999/03/15 04:44:42  mud
// Ok, In line 17 I added something to make Fingon crazy
// Ok, seriously I did rearrange and remove/add skills from
// the various classes.  The purpose of this was to verify
// the sound arrangement of the skills and how they were
// dispursed among the classes.  This was accomplished by
// altering SET_SKILL and spell_level fields where applicable.
//
// Revision 1.12  1999/03/14 00:53:03  mud
// In class.c added a new line before the fiery mud class explanation
// in config.c added the variable for name explanations and added the
// text for the variable
// in interpreter.c added the con_state stuff, whatever that was and
// added the CON_NAME_CHECK affirmation section to the creation menu
// loop or nanny.
// In structs.h added the CON_NAME_CHECK define..
// I also drove Jimmy absolutely insane with the deail in information
// I put into our change control system.
//
// Revision 1.11  1999/03/11 23:37:12  mud
// made Paladin and tla bright white instead of grey
//
// Revision 1.10  1999/03/10 00:03:37  dce
// Monk semantics for dodge/parry/ripost/attack
//
// Revision 1.9  1999/03/09 22:26:35  mud
// added scribe for rangers and removed it from paladins
// antis and other classes that dfidn't need it.
//
// Revision 1.8  1999/03/08 23:24:48  dce
// Added Springleap for monks
//
// Revision 1.7  1999/03/08 20:29:34  dce
// Adds safefall skill for monks.
//
// Revision 1.6  1999/03/03 20:11:02  jimmy
// Many enhancements to scribe and spellbooks.  Lots of checks added.  
// Scribe is now a skill.
// Spellbooks now have to be held to scribe as well as a quill in the other hand.
// 
// -fingon
//
// Revision 1.5  1999/02/26 22:30:30  dce
// Monk additions/fixes
//
// Revision 1.4  1999/02/03 18:14:16  jimmy  
// Fixed yet more bugs with spellcasters and leveling.
// Hope this does it.
//
// Revision 1.3  1999/02/02 20:16:54  jimmy
// all spellcasters now attain spells when they level.
// no renting and returning necessary.
//
// Revision 1.2  1999/01/30 04:16:40  mud
// Entire file indented with emcacs
// Changed *subclass_descrip to be Fieryified
// changed *class_abbrevs[] to be three letter abbreviations
// Removed Shaman as a class choice for humans
// Added some question about *class_menu in a comment
//
// Revision 1.1  1999/01/29 01:23:30  mud
// Initial revision
//
@


1.70
log
@Adjusted THAC0s for each class (to be a bit more sane *hope*)
@
text
@d1 1
a1 1
// $Id: class.c,v 1.69 2002/06/04 02:24:30 dce Exp $
d4330 1
d4332 1
d4586 3
@


1.69
log
@Adjusted thac0's for initial testing.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.68 2002/05/23 00:20:26 rls Exp $
d632 5
a636 5
  {25,   0}, /* warrior */
  {25,   1}, /* paladin */
  {25,   1}, /* anti-paladin */
  {25,   1}, /* ranger */
  {25,   6}, /* druid */
d638 2
a639 2
  {25,   1}, /* assassin */
  {25,   1}, /* mercenary */
d642 2
a643 2
  {25,   1}, /* monk */
  {25,   1}, /* berserker */
d647 2
a648 2
  {25,   1}, /* rogue */
  {25,   1}, /* bard */
d652 1
a652 1
  {25,   1}  /* hunter */
d4584 3
@


1.68
log
@Added thac0 min-max table for each of the classes (thac0 Revamp)
@
text
@d1 1
a1 1
// $Id: class.c,v 1.67 2001/12/16 20:07:53 dce Exp $
d630 10
a639 10
  {25,   2}, /* cleric */
  {25,  -4}, /* thief */
  {25, -10}, /* warrior */
  {25,  -9}, /* paladin */
  {25,  -9}, /* anti-paladin */
  {25,  -9}, /* ranger */
  {25,   3}, /* druid */
  {25,   3}, /* shaman */
  {25,  -3}, /* assassin */
  {25,  -9}, /* mercenary */
d642 4
a645 4
  {25,  -9}, /* monk */
  {25,  -9}, /* berserker */
  {25,   3}, /* priest */
  {25,   3}, /* diabolist */
d647 2
a648 2
  {25,  -3}, /* rogue */
  {25,  -3}, /* bard */
d652 1
a652 1
  {25,  -9}  /* hunter */
d4584 3
@


1.67
log
@Fixed a problem where players could get the max dam and hitroll
possible by changing their alignment and getting "zapped" by
alignment sensitive equipment. The "zapped" they would not lose
the +hitroll or damroll effects because of silly Hubis code.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.66 2001/12/07 15:42:30 dce Exp $
a623 3
 *                                                                  *
 * David Endre 1/16/99 Added dummy numbers to allow for 105 classes *
 * will be adjusted once class balancing takes place                *
d626 27
a652 250
/* [class], [level] (all) */
const int thaco[NUM_CLASSES][LVL_IMPL + 1] = {
  
  /* SORC */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15,
  15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9, 
  /*      20                  25                  30		        35  */
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
/*        40             45             50             55             60*/
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*           65             70                   77*/

/* CLERIC */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 18, 18, 18, 16, 16, 16, 14, 14, 14, 12, 12, 12, 10, 10,
  10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3,
  /*    20             25             30			  35 	         40 */
  3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
/*        45             50             55             60             65*/
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
  /*       70             75    77*/


/* THIEF */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14, 13, 13, 12, 12,
  11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 3, 3, 3, 3, 3, 
  /*      20              25             30				35             40 */
  3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*           45             50             55             60*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,  
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*66          70             75    77*/
/* WARRIOR */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3,
  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  /* 20             25             30			 35             40	    */
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55             60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*   70             75    77*/
/* PALADIN */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 11, 11, 10, 10, 9, 9, 9, 9,
  9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
  /* 20             25             30			 35             40	    */
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*  45             50             55    57       60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*   70             75    77*/
/* ANTI-PALADIN */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 11, 11, 10, 10, 9, 9, 9, 9,
  9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
  /* 20             25             30			 35             40	    */
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55    57       60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*   70             75    77*/
/* RANGER */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 11, 11, 10, 10, 9, 9, 9, 9,
  9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
  /* 20             25             30			 35             40	    */
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55    57       60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*   70             75     77*/
/* DRUID */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 18, 18, 18, 16, 16, 16, 14, 14, 14, 12, 12, 12, 10, 10,
  10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  /*    20             25             30			  35 	         40 */
  3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*        45             50          55       57       60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,  
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*         70             75     77*/
/* SHAMAN */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 18, 18, 18, 16, 16, 16, 14, 14, 14, 12, 12, 12, 10, 10,
  10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  /*    20             25             30			  35 	         40 */
  3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*        45             50          55       57       60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7 , 
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*         70             75    77*/
/* ASSASSIN */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14, 13, 13, 12, 12,
  11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 3, 3, 3, 3, 3, 
  /*      20              25             30				35             40 */
  3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*           45             50             55    57       60           */
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,  
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*66          70             75    77*/
/* MERCENARY */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3,
  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  /* 20             25             30			 35             40	    */
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55    57       60             65     */
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*   70             75    77*/
/* NECRO */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15,
  15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9, 
  /*      20                  25                  30		        35  */
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
/*        40             45             50             55    57       60*/
5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7,  
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*         65             70             75    77*/
/* CONJ */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15,
  15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9, 
  /*      20                  25                  30		        35  */
  9, 9, 9, 9, 9, 9, 9, 9, 8, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
/*        40             45             50             55    57       60*/
5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7 , 
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*         65             70             75     77*/
/* MONK */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3,
  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  /* 20             25             30			 35             40	    */
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55             60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*   70             75    77*/
/* BERSERKER */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3,
  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  /* 20             25             30			 35             40	    */
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55             60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*   70             75    77*/
/* PRIEST */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 18, 18, 18, 16, 16, 16, 14, 14, 14, 12, 12, 12, 10, 10,
  10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3,
  /*    20             25             30			  35 	         40 */
  3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
/*        45             50             55             60             65*/
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7,  
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
  /*       70             75    77*/

/* DIABOLIST */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 18, 18, 18, 16, 16, 16, 14, 14, 14, 12, 12, 12, 10, 10,
  10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3,
  /*    20             25             30			  35 	         40 */
  3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
/*        45             50             55             60             65*/
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7 , 
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
  /*       70             75    77*/

/* MYSTIC */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 18, 18, 18, 16, 16, 16, 14, 14, 14, 12, 12, 12, 10, 10,
  10, 8, 8, 8, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3,
  /*    20             25             30			  35 	         40 */
  3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
/*        45             50             55             60             65*/
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
  /*       70             75    77*/

/* ROGUE */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14, 13, 13, 12, 12,
  11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 3, 3, 3, 3, 3, 
  /*      20              25             30				35             40 */
  3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*           45             50             55             60*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,  
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*66          70             75    77*/
/* BARD */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14, 13, 13, 12, 12,
  11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 3, 3, 3, 3, 3, 
  /*      20              25             30				35             40 */
  3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*           45             50             55             60*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7 , 
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*66          70             75    77*/
/* PYROMANCER */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15,
  15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9, 
  /*      20                  25                  30		        35  */
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
/*        40             45             50             55             60*/
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,  
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*           65             70                   77*/
/* CRYOMANCER */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15,
  15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9, 
  /*      20                  25                  30		        35  */
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
/*        40             45             50             55             60*/
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 , 
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*           65             70                   77*/
/* ILLUSIONIST */
  /* 0                   5                  10                  15	    */
  {100, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15,
  15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9, 
  /*      20                  25                  30		        35  */
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
/*        40             45             50             55             60*/
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
/*           65             70                   77*/
/* HUNTER */
  /* 0                   5                  10              15	    */
  {100, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3,
  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  /* 20             25             30			 35             40	    */
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  45             50             55             60             65*/
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7  ,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7}
/*   70             75    77*/

a654 1

d4584 6
@


1.66
log
@Fixed a bug with object spell effects where if a player
was wearing an item and died, they would permanently
gain that ability.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.65 2001/03/31 19:58:34 dce Exp $
d1306 73
d2648 1
a2648 2
      GET_DAMROLL(ch) = 2;
      GET_HITROLL(ch) = 3;
d2659 1
a2659 2
      GET_DAMROLL(ch) = 2;
      GET_HITROLL(ch) = 3;
d2670 1
a2670 2
      GET_DAMROLL(ch) = 4;
      GET_HITROLL(ch) = 5;
d2680 1
a2680 2
      GET_DAMROLL(ch) = 4;
      GET_HITROLL(ch) = 5;
d2692 1
a2692 2
      GET_DAMROLL(ch) = 3;
      GET_HITROLL(ch) = 6;
d2703 1
a2703 2
      GET_DAMROLL(ch) = 5;
      GET_HITROLL(ch) = 4;
d2714 1
a2714 2
      GET_DAMROLL(ch) = 5;
      GET_HITROLL(ch) = 4;
d2725 1
a2725 2
      GET_HITROLL(ch) = 3;
      GET_DAMROLL(ch) = 3;
d2736 1
a2736 2
      GET_HITROLL(ch) = 4;
      GET_DAMROLL(ch) = 2;
d2747 1
a2747 2
      GET_DAMROLL(ch) = 5;
      GET_HITROLL(ch) = 4;
d2758 1
a2758 2
      GET_HITROLL(ch) = 3;
      GET_DAMROLL(ch) = 3;
d2769 1
a2769 2
      GET_HITROLL(ch) = 3;
      GET_DAMROLL(ch) = 3;
d4811 5
@


1.65
log
@Player innates and quest spells should stick.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.64 2001/02/02 00:34:21 mtp Exp $
d1286 80
a1839 1
    SET_BIT(AFF_FLAGS(ch), AFF_DETECT_ALIGN);
a1925 1
    SET_BIT(AFF_FLAGS(ch), AFF_DETECT_ALIGN);
a2258 1
    SET_BIT(AFF_FLAGS(ch), AFF_DETECT_ALIGN);
a2314 1
    SET_BIT(AFF_FLAGS(ch), AFF_DETECT_ALIGN);
d2563 4
a2566 1
  
a2569 1
    SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
a2580 1
    SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
a2592 1
    SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
a2604 1
    SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
a2615 2
    SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
    SET_BIT(AFF_FLAGS(ch), AFF_SENSE_LIFE);
a2628 1
    SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
a2640 1
    SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
a2652 1
    SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
a2664 1
    TOGGLE_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
a2791 1

d4750 3
@


1.64
log
@fixed bad room def for 10014
@
text
@d1 1
a1 1
// $Id: class.c,v 1.63 2001/01/16 00:33:56 mtp Exp mtp $
a4548 5
    } else if (spell_info[skill].min_level[(int)GET_CLASS(ch)] == LVL_IMMORT
		    && GET_LEVEL(ch) < LVL_IMMORT)
    {
	    /* praps this class shouldnt have this skill*/
	    SET_SKILL(ch,skill,0);
d4554 10
d4682 3
@


1.63
log
@make sure spell/skill list is clean after subclass
@
text
@d1 1
a1 1
// $Id: class.c,v 1.62 2001/01/08 00:39:18 rsd Exp mtp $
d559 4
a562 4
  {CLASS_ANTI_PALADIN,  10014,   SCMD_EAST},
  {CLASS_PALADIN,	10014,   SCMD_EAST},
  {CLASS_MONK,		10014,   SCMD_EAST},
  {CLASS_RANGER,	10014,   SCMD_EAST},
d4677 3
@


1.62
log
@added the proper direction for the mercenary guild in mielikki
@
text
@d1 1
a1 1
// $Id: class.c,v 1.61 2001/01/04 22:49:24 mtp Exp $
d4549 5
d4677 3
@


1.61
log
@added guard 6175 as a guild guard in 6148
@
text
@d1 1
a1 1
// $Id: class.c,v 1.60 2000/12/15 02:18:46 rsd Exp mtp $
d513 1
a513 1
  {CLASS_MERCENARY,     3037,   SCMD_NORTH},
d4672 3
@


1.60
log
@fixed the spelling of Sorcerer in a freaking class
array, there is no telling what relies on this misspelling.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.59 2000/11/29 00:19:24 mtp Exp $
d528 6
d4672 4
@


1.59
log
@checking guild guards for ickle/anduin/mielikki
@
text
@d1 1
a1 1
// $Id: class.c,v 1.58 2000/11/21 04:31:04 rsd Exp $
d166 1
a166 1
  "&5&bSorceror&0    ",
d4666 3
@


1.58
log
@Well, Rangers didn't have quick chant and only today
someone pointed it out, sheez
@
text
@d1 1
a1 1
// $Id: class.c,v 1.57 2000/11/20 19:17:22 rsd Exp $
d500 4
a503 3
  {CLASS_PYROMANCER,    3045,   SCMD_SOUTH},
  {CLASS_CRYOMANCER,    3045,   SCMD_WEST},
  {CLASS_PALADIN,       4504,   SCMD_EAST},
d505 1
d507 3
a509 1
  {CLASS_THIEF,         3037,   SCMD_EAST},
d511 2
a512 2
  {CLASS_ROGUE,         3037,   SCMD_SOUTH},
  {CLASS_BARD,          3037,   SCMD_UP},
d514 1
d516 1
a516 1
  {CLASS_NECROMANCER,   16950,  SCMD_UP},  /* Haunted House */
d518 2
d522 1
a522 1
  {CLASS_WARRIOR,       6106,   SCMD_WEST},
d524 11
a534 1
  {CLASS_ASSASSIN,      6073,   SCMD_WEST},
d536 1
d538 2
a542 1
  {CLASS_MAGIC_USER,    6219,   SCMD_UP},
d546 6
a551 1
  {CLASS_RANGER,        10047,   SCMD_EAST},
d553 5
d559 5
d565 2
d569 1
d577 1
d4666 4
@


1.57
log
@Added back rlog messages from prior to the addition of
the $log$.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.56 2000/11/14 20:24:24 rsd Exp $
d2287 2
d4165 1
d4628 4
@


1.56
log
@added it so half elfs could be priests.. boggle
@
text
@d1 1
a1 1
// $Id: class.c,v 1.55 2000/11/13 23:46:45 rsd Exp $
d4625 3
d4733 174
a4906 9









@


1.55
log
@Added tame for paladins and anti's properly.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.54 2000/11/12 23:53:35 rsd Exp $
d207 1
a207 1
  /* H-E   */ { Y, Y, Y, Y, N, N, Y, Y, N, N, N, N, Y,  Y,  N,  N,  N,  N,  Y,  Y,  Y,  Y,  Y,  N},
d4625 3
@


1.54
log
@Added more debug into existing debug messages to make
them useful.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.53 2000/11/12 08:04:53 rsd Exp $
d2144 1
a2144 1
    /*    SET_SKILL(ch, SKILL_TAME,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
d2202 1
a2202 1
    /* SET_SKILL(ch, SKILL_TAME,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
d4009 1
a4009 1
  /*  spell_level(SKILL_TAME, CLASS_PALADIN, 1, 2); */
d4625 4
@


1.53
log
@added more debug to set_skills() default case in the
switch. Unknown Class
@
text
@d1 1
a1 1
// $Id: class.c,v 1.52 2000/11/12 07:28:57 rsd Exp $
d2630 2
a2631 1
    log("SYSERR:class.c:set_skills(): Unkown race");
d4625 4
@


1.52
log
@removed the number 50 from the spell_level() circle field.
Rangers Paladins and AntiPaladins were assigned wrong
@
text
@d1 1
a1 1
// $Id: class.c,v 1.51 2000/11/07 01:32:05 mtp Exp $
d2437 2
a2438 1
    log("SYSERR:class.c:set_skills(): Unknown Class");
d4624 4
@


1.51
log
@moved CLASS_MERCENARY from warrior subclass to rogue
@
text
@d1 1
a1 1
// $Id: class.c,v 1.50 2000/09/15 17:03:00 jimmy Exp mtp $
d4015 1
a4015 1
  spell_level(SKILL_KNOW_SPELL, CLASS_PALADIN, 1, 50);
d4073 1
a4073 1
  spell_level(SKILL_KNOW_SPELL, CLASS_ANTI_PALADIN, 1, 50);
d4135 1
a4135 1
  spell_level(SKILL_KNOW_SPELL, CLASS_RANGER, 1, 50);
d4623 3
@


1.50
log
@added function racial_innates() that prevents the wiping out of innate
skills by update_skills() when a new player is created or a player levels.
Added BODYSLAM to set_skills() to the races that were supposed to
have it.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.49 2000/09/04 19:58:35 rsd Exp $
d84 1
a84 1
  CLASS_BERSERKER, CLASS_MONK, CLASS_MERCENARY};
d90 2
a91 2
{ CLASS_ASSASSIN, CLASS_THIEF, CLASS_BARD,
  CLASS_HUNTER };
d4623 6
@


1.49
log
@Gave innate detect alignment to Priests and Diabs.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.48 2000/05/14 05:21:49 rsd Exp $
d33 1
d2511 1
d2524 1
d2562 1
d4474 1
a4474 1
  
d4492 1
a4492 1
	   Set spells to 1000, all others to 100
d4500 6
a4505 5
    } /* end if( spell_info...) */         
    else
      if (spell_info[skill].quest == FALSE) { /*keep quest spells earned --gurlaek 7/5/1999 */
	SET_SKILL(ch, skill, 0);
      }
d4509 26
d4623 3
d4704 9
@


1.48
log
@let half-elfs be thiefs
@
text
@d1 1
a1 1
// $Id: class.c,v 1.47 2000/04/23 08:38:32 rsd Exp $
d1715 1
d1802 1
d4592 3
@


1.47
log
@Retabbed and braced sections of the code, also commented out
add_move from the player advancement functions.  I never wanted
players to gain mv when the leveled in the first place. Paladins
have 3000 - 4000 mv at high level, found out someone had typoed
number(1,32) into the add_move variable as opposed to
number(1,3) so paladins were crankin on MV.  Smells like PWIPE
to me. Also fixed the citadel guardian problem, I hope.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.46 2000/04/23 03:23:48 rsd Exp $
d206 1
a206 1
  /* H-E   */ { Y, Y, N, Y, N, N, Y, Y, N, N, N, N, Y,  Y,  N,  N,  N,  N,  Y,  Y,  Y,  Y,  Y,  N},
d4590 9
@


1.46
log
@ok I really removed weapon proficiencies from classes that didn't
need them, no body saw nuthiun'
@
text
@d1 1
a1 1
// $Id: class.c,v 1.45 2000/04/22 22:34:01 rsd Exp $
d497 1
a497 1
  /* Mielikki */
d542 1
a542 1
  {-999,               17204,   SCMD_WEST},
d881 5
a885 8
  while(i<=450)
    {
      j = number(0, 5);
      if ((int)table[j] <= 95)
	{
	  table[j] = (ubyte)((int)table[j] + 5);
	  i = i + 5;
	}
d887 1
d1091 4
a1094 4
	GET_NATURAL_DEX(ch) = table[1];
	GET_NATURAL_CON(ch) = table[2];
	GET_NATURAL_WIS(ch) = table[3];
	GET_NATURAL_INT(ch) = table[4];
d2678 7
d2706 1
a2706 1
      add_move = number(0, 2);
d2713 1
a2713 1
      add_move = -number(0, 2);
d2723 1
a2723 1
      add_move = number(0, 2);
d2730 1
a2730 1
      add_move = -number(0, 2);
d2739 1
a2739 1
      add_move = number(1, 3);
d2745 1
a2745 1
      add_move = -number(1, 3);
d2754 1
a2754 1
      add_move = number(1, 3);
d2760 1
a2760 1
      add_move = -number(1, 3);
d2770 1
a2770 1
      add_move = number(1, 32); 
d2777 1
a2777 1
      add_move = -number(1, 2); 
d2787 1
a2787 1
      add_move = number(1, 2); 
d2794 1
a2794 1
      add_move = -number(1, 2); 
d2804 1
a2804 1
      add_move = number(1, 3); 
d2811 1
a2811 1
      add_move = -number(1, 3); 
d2822 1
a2822 1
      add_move = number(0, 2);
d2829 1
a2829 1
      add_move = -number(0, 2);
d2840 1
a2840 1
      add_move = number(0, 2);
d2847 1
a2847 1
      add_move = -number(0, 2);
d2856 1
a2856 1
      add_move = number(1, 3);
d2862 1
a2862 1
      add_move = -number(1, 3);
d2871 1
a2871 1
      add_move = number(1, 3);
d2877 1
a2877 1
      add_move = -number(1, 3);
d2886 1
a2886 1
      add_move = number(0, 2);
d2893 1
a2893 1
      add_move = -number(0, 2);
d2904 1
a2904 1
      add_move = number(0, 2);
d2911 1
a2911 1
      add_move = -number(0, 2);
d2919 1
a2919 1
      add_move = number(1, 3);
d2925 1
a2925 1
      add_move = -number(1, 3);
d2933 1
a2933 1
      add_move = number(1, 3);
d2939 1
a2939 1
      add_move = -number(1, 3);
d2948 1
a2948 1
      add_move = number(1, 3);
d2955 1
a2955 1
      add_move = -number(1, 3);
d2964 1
a2964 1
      add_move = number(0, 2);
d2971 1
a2971 1
      add_move = -number(0, 2);
d2980 1
a2980 1
      add_move = number(0, 2);
d2987 1
a2987 1
      add_move = -number(0, 2);
d2997 1
a2997 1
      add_move = number(0, 2);
d3004 1
a3004 1
      add_move = -number(0, 2);
d3012 1
a3012 1
      add_move = number(1, 3);
d3018 1
a3018 1
      add_move = -number(1, 3);
d3026 1
a3026 1
      add_move = number(1, 3);
d3032 1
a3032 1
      add_move = -number(1, 3);
d3041 1
a3041 1
      add_move = number(0, 2);
d3048 1
a3048 1
      add_move = -number(0, 2);
d3057 1
a3057 1
      add_move = number(0, 2);
d3064 1
a3064 1
      add_move = -number(0, 2);
d3073 1
a3073 1
      add_move = number(0, 2);
d3080 1
a3080 1
      add_move = -number(0, 2);
d3098 1
a3098 1
  ch->points.max_move +=  add_move;
d4469 12
a4480 5
  for (skill = 0; skill < MAX_SKILLS + 1; skill++)
    {
      /* what a GOAT FUCK! someone defined languages right in the middle of spells */
      /* added this line so languages don't get erased every time. FIXIT!!! --gurlaek 7/5/1999 */
      if(skill >= MIN_LANGUAGE && skill <= MAX_LANGUAGE)
d4482 18
a4499 28
      if(GET_CLASS(ch) == CLASS_UNDEFINED)
	continue;
      if (spell_info[skill].min_level[(int)GET_CLASS(ch)] <= GET_LEVEL(ch) 
	  && spell_info[skill].quest == FALSE) /* don't give handouts :) --gurlaek 7/5/1999 */
	{
	  if(skill == SPELL_LOCATE_OBJECT)
	    {
	      SET_SKILL(ch, skill, 0);
	      continue;
	    }
	  if (GET_SKILL(ch, skill) <= 0)
	    {
	      /* this isn't guaranteed in the future to be correct, very generic..pelase 
		 feel free to update as needed.. fingh 11/28/98
		 Set spells to 1000, all others to 100
	      */
	      if (skill <= MAX_SPELLS)
		SET_SKILL(ch, skill, 1000);
		  else
		    /* mobs now get skills here too based on level --gurlaek 7/5/1999 */
		    SET_SKILL(ch, skill, !IS_NPC(ch) ? 150 : roll_mob_skill(ch));
		  } /* end if (get_skill) */
	} /* end if( spell_info...) */         
      else
	if (spell_info[skill].quest == FALSE) { /*keep quest spells earned --gurlaek 7/5/1999 */
	  SET_SKILL(ch, skill, 0);
	}
    } /* end for loop */
d4590 4
@


1.45
log
@Fixed deity spelling in player output. Added a guarding
direction for the entrance of Timun's citadel. Removed
weapons proficiencies from classes to set them all to
the proper proficiencies. Set Paladins and Anti-Paladins
to have detect alignemnt innately. Would have prefered
detect evil and good accordingly but they don't seem to
exist.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.44 2000/04/15 23:11:33 rsd Exp $
d3320 1
a3320 1
  spell_level(SKILL_BLUDGEONING, CLASS_MAGIC_USER, 1, 1);
d3322 1
a3322 4
  spell_level(SKILL_SLASHING, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_MAGIC_USER, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_MAGIC_USER, 1, 1);
d3392 1
a3392 1
  spell_level(SKILL_BLUDGEONING, CLASS_PYROMANCER, 1, 1);
d3394 1
a3394 4
  spell_level(SKILL_SLASHING, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_PYROMANCER, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_PYROMANCER, 1, 1);
d3467 1
a3467 1
  spell_level(SKILL_BLUDGEONING, CLASS_CRYOMANCER, 1, 1);
d3469 1
a3469 4
  spell_level(SKILL_SLASHING, CLASS_CRYOMANCER, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_CRYOMANCER, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_CRYOMANCER, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_CRYOMANCER, 1, 1);
d3512 1
a3512 1
  spell_level(SKILL_BLUDGEONING, CLASS_ILLUSIONIST, 1, 1);
d3514 1
a3514 4
  spell_level(SKILL_SLASHING, CLASS_ILLUSIONIST, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_ILLUSIONIST, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_ILLUSIONIST, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_ILLUSIONIST, 1, 1);
d3586 1
a3587 2
  spell_level(SKILL_PIERCING, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_CLERIC, 1, 1);
d3589 1
a3589 2
  spell_level(SKILL_2H_PIERCING, CLASS_CLERIC, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_CLERIC, 1, 1);
a3673 2
  spell_level(SKILL_PIERCING, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_PRIEST, 1, 1);
d3675 1
a3675 2
  spell_level(SKILL_2H_PIERCING, CLASS_PRIEST, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_PRIEST, 1, 1);
d3755 1
a3756 2
  spell_level(SKILL_PIERCING, CLASS_DIABOLIST, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_DIABOLIST, 1, 1);
d3758 1
a3758 2
  spell_level(SKILL_2H_PIERCING, CLASS_DIABOLIST, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_DIABOLIST, 1, 1);
d3805 1
a3806 1
  spell_level(SKILL_PIERCING, CLASS_MYSTIC, 1, 1);
d3809 1
a3809 2
  spell_level(SKILL_2H_PIERCING, CLASS_MYSTIC, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_MYSTIC, 1, 1);
d3828 1
a3828 1
  spell_level(SKILL_BLUDGEONING, CLASS_THIEF, 1, 1);
a3830 1
  spell_level(SKILL_2H_BLUDGEONING, CLASS_THIEF, 1, 1);
d3832 1
a3832 1
  spell_level(SKILL_2H_SLASHING, CLASS_THIEF, 1, 1);
d3850 1
a3850 1
  spell_level(SKILL_BLUDGEONING, CLASS_ROGUE, 1, 1);
a3852 1
  spell_level(SKILL_2H_BLUDGEONING, CLASS_ROGUE, 1, 1);
d3854 1
a3854 1
  spell_level(SKILL_2H_SLASHING, CLASS_ROGUE, 1, 1);
d3873 1
a3873 1
  spell_level(SKILL_BLUDGEONING, CLASS_BARD, 1, 1);
d3875 1
a3875 4
  spell_level(SKILL_SLASHING, CLASS_BARD, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_BARD, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_BARD, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_BARD, 1, 1);
d3927 1
d3929 1
a3929 5
  spell_level(SKILL_PIERCING, CLASS_MONK, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_MONK, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_MONK, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_MONK, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_MONK, 1, 1);
d4036 1
a4040 1
  spell_level(SKILL_2H_PIERCING, CLASS_PALADIN, 1, 1);
d4042 1
d4097 1
a4101 1
  spell_level(SKILL_2H_PIERCING, CLASS_ANTI_PALADIN, 1, 1);
d4103 1
d4224 1
a4225 2
  spell_level(SKILL_PIERCING, CLASS_DRUID, 1, 1);
  spell_level(SKILL_SLASHING, CLASS_DRUID, 1, 1);
d4227 1
a4227 2
  spell_level(SKILL_2H_PIERCING, CLASS_DRUID, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_DRUID, 1, 1);
d4285 1
a4285 2
  spell_level(SKILL_2H_PIERCING, CLASS_SHAMAN, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_SHAMAN, 1, 1);
d4308 1
a4308 1
  spell_level(SKILL_BLUDGEONING, CLASS_ASSASSIN, 1, 1);
d4311 1
a4311 3
  spell_level(SKILL_2H_BLUDGEONING, CLASS_ASSASSIN, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_ASSASSIN, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_ASSASSIN, 1, 1);
d4392 1
a4392 1
  spell_level(SKILL_BLUDGEONING, CLASS_NECROMANCER, 1, 1);
d4394 1
a4394 4
  spell_level(SKILL_SLASHING, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_NECROMANCER, 1, 1);
d4451 1
a4451 1
  spell_level(SKILL_BLUDGEONING, CLASS_CONJURER, 1, 1);
d4453 1
a4453 4
  spell_level(SKILL_SLASHING, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_2H_BLUDGEONING, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_2H_PIERCING, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_2H_SLASHING, CLASS_CONJURER, 1, 1);
d4588 9
@


1.44
log
@moved some spells between classes and levels.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.43 2000/04/05 06:31:31 rsd Exp $
d46 1
a46 1
"within the realm.  Some classes will also be required to choose a diety in\r\n"
d481 5
a485 5
  /* MAG	CLE	THE	WAR PAL ANTP RAN DRU SHA ASS MER NECR CONJ MONK, BERS, PRIE, DIAB, MYST, ROG, BARD, PYRO, CRYO, ILLU, HUNTER*/
  {95,		95,	95,	95, 85, 85, 85, 95, 95, 95, 80, 95, 95, 95, 95, 95, 95, 95, 95, 95, 85, 85, 85, 95},		
  {100,		100,	12,	12, 10, 10, 10, 100, 100, 10, 10, 100, 100, 10, 10, 100, 100, 100, 10, 10, 100, 100, 100, 10},	
  {25,		25,	1,	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},		
  {SPELL,	SPELL,	SKILL,	SKILL, SKILL, SKILL, SKILL, SPELL, SPELL, SKILL, SKILL, SPELL, SPELL, SKILL, SKILL, SPELL, SPELL, SPELL, SKILL, SKILL, SPELL, SPELL, SPELL, SKILL}	
d541 4
d1305 1
d1317 1
a1317 1
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1319 1
a1319 4
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1362 1
d1374 1
a1374 1
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1376 1
a1376 4
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1426 1
d1435 1
d1447 1
a1447 1
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1449 1
a1449 4
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1498 1
d1507 1
d1519 1
a1519 1
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1521 1
a1521 4
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1572 1
d1581 1
d1593 1
a1593 1
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1595 1
a1595 4
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1623 1
d1636 1
a1636 1
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1638 1
a1638 4
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1690 1
d1698 1
d1710 1
a1711 2
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1713 1
a1713 2
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1776 1
d1784 1
d1796 1
a1797 2
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1799 1
a1799 2
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1857 1
d1865 1
d1877 1
a1878 2
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1880 1
a1880 2
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1920 1
a1921 1
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1924 1
a1924 2
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1941 1
a1941 1
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
a1943 1
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1945 1
a1945 1
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1961 1
a1961 1
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
a1963 1
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1965 1
a1965 1
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1982 1
a1982 1
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1984 1
a1984 4
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2033 1
d2035 1
a2035 5
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2101 1
a2101 1
    SET_SKILL(ch, SKILL_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2104 1
a2104 3
    SET_SKILL(ch, SKILL_2H_BLUDGEONING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2136 1
a2156 1
    SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
d2171 1
d2183 1
a2187 1
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2189 1
d2193 1
d2215 1
d2227 1
d2246 1
a2250 1
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2252 1
d2274 1
d2286 1
d2298 1
d2305 1
d2360 1
d2372 1
a2373 2
    SET_SKILL(ch, SKILL_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2375 1
a2375 2
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2415 1
d2427 1
d2432 1
a2432 2
    SET_SKILL(ch, SKILL_2H_PIERCING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
    SET_SKILL(ch, SKILL_2H_SLASHING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
a4038 1
  spell_level(SPELL_DETECT_ALIGN, CLASS_PALADIN, CIRCLE_1, 1);
a4097 1
  /*spell_level(SPELL_DETECT_ALIGN, CLASS_ANTI_PALADIN, CIRCLE_1, 1);*/
d4625 3
@


1.43
log
@changed the comment deader, moved flamestrike to lower
circle and removed color spay from pyros
@
text
@d1 1
a1 1
// $Id: class.c,v 1.42 2000/02/14 05:12:44 cso Exp $
a20 2


d1423 1
a1423 1
    /*	  SET_SKILL(ch, SPELL_CHARM, 1000); */
d1495 1
a1495 1
    /*      SET_SKILL(ch, SPELL_SUPERNOVA, 0); */
d1570 1
a1570 1
    SET_SKILL(ch, SPELL_FLOOD, 1000);
d3304 1
a3304 1
  /*  spell_level(SPELL_CHARM, CLASS_MAGIC_USER, 31, 2);*/
d3376 4
a3379 3
  spell_level(SPELL_METEORSWARM, CLASS_PYROMANCER, CIRCLE_10, 10);
  spell_level(SPELL_SUPERNOVA, CLASS_PYROMANCER, CIRCLE_11, 11);
  spell_level(SPELL_WIZARD_EYE, CLASS_PYROMANCER, CIRCLE_11, 11);
d3456 2
a3457 2
  spell_level(SPELL_ICE_SHARDS, CLASS_CRYOMANCER, CIRCLE_11, 11);
  spell_level(SPELL_WIZARD_EYE, CLASS_CRYOMANCER, CIRCLE_11, 11);
d4633 4
@


1.42
log
@added guildguards for anduin and khuzhadam, added berserker to
class comment immediately after the other stuff.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.41 2000/01/31 00:35:20 rsd Exp $
d3 1
a3 1
 *  File: class.c                                       Part of CircleMUD  *
d8 3
a10 1
 *  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
a11 2
 *                                                                         *
 *  Adopted for FieryMUD                                                   *
a1478 1
    SET_SKILL(ch, SPELL_COLOR_SPRAY, 1000);
a3357 1
  spell_level(SPELL_COLOR_SPRAY, CLASS_PYROMANCER, CIRCLE_5, 5);
d3563 1
a3574 1
  spell_level(SPELL_FLAMESTRIKE, CLASS_CLERIC, CIRCLE_6, 6);
d4634 4
@


1.41
log
@removed the spell poison from the game for players. Removed
it from anti paladins.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.40 1999/11/28 22:53:27 cso Exp $
d524 2
d533 10
d564 1
d4636 4
@


1.40
log
@removed unused choice_table arg from roll_natural_abils
@
text
@d1 1
a1 1
// $Id: class.c,v 1.39 1999/11/23 17:56:25 rsd Exp cso $
d2236 1
a2236 1
    SET_SKILL(ch, SPELL_POISON, 1000);
d4103 1
a4103 1
  spell_level(SPELL_POISON, CLASS_ANTI_PALADIN, CIRCLE_5, 5);
d4623 3
@


1.39
log
@fixed guild guards exit points so same guard can block multiple exits.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.38 1999/11/23 16:09:19 rsd Exp $
d829 1
a829 1
void roll_natural_abils(struct char_data *ch, int choice_table[])
a830 1
  
d4623 3
@


1.38
log
@added the other mielikki guild masters
@
text
@d1 1
a1 1
// $Id: class.c,v 1.37 1999/11/23 15:48:23 jimmy Exp rsd $
d501 2
a502 2
  {CLASS_PYROMANCER,    3045,   SCMD_EAST},
  {CLASS_CRYOMANCER,    3045,   SCMD_EAST},
d506 2
a507 2
  {CLASS_THIEF,         3037,   SCMD_SOUTH},
  {CLASS_ASSASSIN,      3037,   SCMD_SOUTH},
d509 2
a510 2
  {CLASS_BARD,          3037,   SCMD_SOUTH},
  {CLASS_MERCENARY,     3037,   SCMD_SOUTH},
d4624 3
@


1.37
log
@Fixed the slashing weapon skill.  I had it erroneously as stabbing. Doh.
Reinstated dual wield.
Allowed mobs/players to pick up items while fighting.
Fixed a bug in the damage message that wrongfully indicated a miss
due to a rounding error in the math.
This was all done in order to facilitate the chance to sling your
weapon in combat.  Dex and proficiency checks are now made on any missed
attact and a failure of both causes the weapon to be slung.
@
text
@d1 1
a1 1
// $Id: class.c,v 1.35 1999/11/19 05:12:55 cso Exp $
d507 4
d4624 10
@


1.36
log
@Added weapon proficiency skills for stabbing, piercing, bludgeoning and two handed
of each of these, as well as missile weapons.  These were given to all classes
at first level execpt missile weapons which was commented out for now.
@
text
@d1244 7
d1300 1
a1300 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1303 1
a1303 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1359 1
a1359 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1362 1
a1362 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1433 1
a1433 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1436 1
a1436 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1507 1
a1507 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1510 1
a1510 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1582 1
a1582 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1585 1
a1585 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1627 1
a1627 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1630 1
a1630 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1702 1
a1702 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1705 1
a1705 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1788 1
a1788 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1791 1
a1791 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1869 1
a1869 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1872 1
a1872 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1914 1
a1914 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1917 1
a1917 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1928 1
a1928 1
    /* TEMPORARILY REMOVED -    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
d1936 1
a1936 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1939 1
a1939 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1949 1
a1949 1
    /* TEMPORARILY REMOVED -SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
d1957 1
a1957 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1960 1
a1960 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1971 1
a1971 1
    /* TEMPORARILY REMOVED -SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
d1979 1
a1979 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1982 1
a1982 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1991 1
a1991 1
    /* TEMPORARILY REMOVED -  SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
d2005 1
a2005 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2008 1
a2008 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2016 2
a2017 2
	 SET_SKILL(ch, SKILL_TRACK,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
	 SET_SKILL(ch, SKILL_DUAL_WIELD, IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
d2033 1
a2033 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2036 1
a2036 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2044 1
a2044 1
    /* TEMPORARILY REMOVED - SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
d2058 1
a2058 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2061 1
a2061 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2066 1
a2066 1
    /* TEMPORARILY REMOVED - SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
d2081 1
a2081 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2084 1
a2084 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2097 1
a2097 1
    /* TEMPORARILY REMOVED - SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
d2104 1
a2104 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2107 1
a2107 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2118 1
a2118 1
    /* TEMPORARILY REMOVED - SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50); */
d2132 1
a2132 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2135 1
a2135 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2149 1
a2149 1
    /* TEMPORARILY REMOVED - SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 200); */
d2187 1
a2187 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2190 1
a2190 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2197 1
a2197 1
    /* TEMPORARILY REMOVED - SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 200); */
d2246 1
a2246 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2249 1
a2249 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2261 1
a2261 1
    /* TEMPORARILY REMOVED - SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 200); */
d2295 1
a2295 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2298 1
a2298 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2366 1
a2366 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2369 1
a2369 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2422 1
a2422 1
    SET_SKILL(ch, SKILL_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d2425 1
a2425 1
    SET_SKILL(ch, SKILL_2H_STABBING, IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d3315 1
a3315 1
  spell_level(SKILL_STABBING, CLASS_MAGIC_USER, 1, 1);
d3318 1
a3318 1
  spell_level(SKILL_2H_STABBING, CLASS_MAGIC_USER, 1, 1);
d3390 1
a3390 1
  spell_level(SKILL_STABBING, CLASS_PYROMANCER, 1, 1);
d3393 1
a3393 1
  spell_level(SKILL_2H_STABBING, CLASS_PYROMANCER, 1, 1);
d3468 1
a3468 1
  spell_level(SKILL_STABBING, CLASS_CRYOMANCER, 1, 1);
d3471 1
a3471 1
  spell_level(SKILL_2H_STABBING, CLASS_CRYOMANCER, 1, 1);
d3516 1
a3516 1
  spell_level(SKILL_STABBING, CLASS_ILLUSIONIST, 1, 1);
d3519 1
a3519 1
  spell_level(SKILL_2H_STABBING, CLASS_ILLUSIONIST, 1, 1);
d3593 1
a3593 1
  spell_level(SKILL_STABBING, CLASS_CLERIC, 1, 1);
d3596 1
a3596 1
  spell_level(SKILL_2H_STABBING, CLASS_CLERIC, 1, 1);
d3682 1
a3682 1
  spell_level(SKILL_STABBING, CLASS_PRIEST, 1, 1);
d3685 1
a3685 1
  spell_level(SKILL_2H_STABBING, CLASS_PRIEST, 1, 1);
d3767 1
a3767 1
  spell_level(SKILL_STABBING, CLASS_DIABOLIST, 1, 1);
d3770 1
a3770 1
  spell_level(SKILL_2H_STABBING, CLASS_DIABOLIST, 1, 1);
d3819 1
a3819 1
  spell_level(SKILL_STABBING, CLASS_MYSTIC, 1, 1);
d3822 1
a3822 1
  spell_level(SKILL_2H_STABBING, CLASS_MYSTIC, 1, 1);
d3835 1
a3835 1
  /* TEMPORARILY REMOVED - spell_level(SKILL_DUAL_WIELD, CLASS_THIEF, 15, 2); */
d3843 1
a3843 1
  spell_level(SKILL_STABBING, CLASS_THIEF, 1, 1);
d3846 1
a3846 1
  spell_level(SKILL_2H_STABBING, CLASS_THIEF, 1, 1);
d3858 1
a3858 1
  /* TEMPORARILY REMOVED - spell_level(SKILL_DUAL_WIELD, CLASS_ROGUE, 15, 2); */
d3866 1
a3866 1
  spell_level(SKILL_STABBING, CLASS_ROGUE, 1, 1);
d3869 1
a3869 1
  spell_level(SKILL_2H_STABBING, CLASS_ROGUE, 1, 1);
d3882 1
a3882 1
  /* TEMPORARILY REMOVED - spell_level(SKILL_DUAL_WIELD, CLASS_BARD, 90, 2); */
d3890 1
a3890 1
  spell_level(SKILL_STABBING, CLASS_BARD, 1, 1);
d3893 1
a3893 1
  spell_level(SKILL_2H_STABBING, CLASS_BARD, 1, 1);
d3908 1
a3908 1
  /* TEMPORARILY REMOVED - spell_level(SKILL_DUAL_WIELD, CLASS_WARRIOR, 25, 2); */
d3918 1
a3918 1
  spell_level(SKILL_STABBING, CLASS_WARRIOR, 1, 1);
d3921 1
a3921 1
  spell_level(SKILL_2H_STABBING, CLASS_WARRIOR, 1, 1);
d3936 2
a3937 2
      spell_level(SKILL_BASH, CLASS_MONK, 1, 2); 
      spell_level(SKILL_DUAL_WIELD, CLASS_MONK, 1, 2); */
d3947 1
a3947 1
  spell_level(SKILL_STABBING, CLASS_MONK, 1, 1);
d3950 1
a3950 1
  spell_level(SKILL_2H_STABBING, CLASS_MONK, 1, 1);
d3964 1
a3964 1
  /* TEMPORARILY REMOVED - spell_level(SKILL_DUAL_WIELD, CLASS_BERSERKER, 1, 2); */
d3974 1
a3974 1
  spell_level(SKILL_STABBING, CLASS_BERSERKER, 1, 1);
d3977 1
a3977 1
  spell_level(SKILL_2H_STABBING, CLASS_BERSERKER, 1, 1);
d3990 1
a3990 1
  /* TEMPORARILY REMOVED - spell_level(SKILL_DUAL_WIELD, CLASS_HUNTER, 1, 2); */
d4001 1
a4001 1
  spell_level(SKILL_STABBING, CLASS_HUNTER, 1, 1);
d4004 1
a4004 1
  spell_level(SKILL_2H_STABBING, CLASS_HUNTER, 1, 1);
d4016 1
a4016 1
  /* TEMPORARILY REMOVED - spell_level(SKILL_DUAL_WIELD, CLASS_PALADIN, 20, 2); */
d4060 1
a4060 1
  spell_level(SKILL_STABBING, CLASS_PALADIN, 1, 1);
d4063 1
a4063 1
  spell_level(SKILL_2H_STABBING, CLASS_PALADIN, 1, 1);
d4073 1
a4073 1
  /* TEMPORARILY REMOVED - spell_level(SKILL_DUAL_WIELD, CLASS_ANTI_PALADIN, 20, 2); */
d4121 1
a4121 1
  spell_level(SKILL_STABBING, CLASS_ANTI_PALADIN, 1, 1);
d4124 1
a4124 1
  spell_level(SKILL_2H_STABBING, CLASS_ANTI_PALADIN, 1, 1);
d4135 1
a4135 1
  /* TEMPORARILY REMOVED - spell_level(SKILL_DUAL_WIELD, CLASS_RANGER, 1, 2); */
d4173 1
a4173 1
  spell_level(SKILL_STABBING, CLASS_RANGER, 1, 1);
d4176 1
a4176 1
  spell_level(SKILL_2H_STABBING, CLASS_RANGER, 1, 1);
d4247 1
a4247 1
  spell_level(SKILL_STABBING, CLASS_DRUID, 1, 1);
d4250 1
a4250 1
  spell_level(SKILL_2H_STABBING, CLASS_DRUID, 1, 1);
d4306 1
a4306 1
  spell_level(SKILL_STABBING, CLASS_SHAMAN, 1, 1);
d4309 1
a4309 1
  spell_level(SKILL_2H_STABBING, CLASS_SHAMAN, 1, 1);
d4326 1
a4326 1
  /* TEMPORARILY REMOVED - spell_level(SKILL_DUAL_WIELD, CLASS_ASSASSIN, 15, 2); */
d4334 1
a4334 1
  spell_level(SKILL_STABBING, CLASS_ASSASSIN, 1, 1);
d4337 1
a4337 1
  spell_level(SKILL_2H_STABBING, CLASS_ASSASSIN, 1, 1);
d4354 1
a4354 1
  /* TEMPORARILY REMOVED - spell_level(SKILL_DUAL_WIELD, CLASS_MERCENARY, 60, 2); */
d4364 1
a4364 1
  spell_level(SKILL_STABBING, CLASS_MERCENARY, 1, 1);
d4367 1
a4367 1
  spell_level(SKILL_2H_STABBING, CLASS_MERCENARY, 1, 1);
d4420 1
a4420 1
  spell_level(SKILL_STABBING, CLASS_NECROMANCER, 1, 1);
d4423 1
a4423 1
  spell_level(SKILL_2H_STABBING, CLASS_NECROMANCER, 1, 1);
d4482 1
a4482 1
  spell_level(SKILL_STABBING, CLASS_CONJURER, 1, 1);
d4485 1
a4485 1
  spell_level(SKILL_2H_STABBING, CLASS_CONJURER, 1, 1);
@


1.35
log
@Added buncha anduin guildguards :)
@
text
@d1 1
a1 1
// $Id: class.c,v 1.34 1999/11/19 04:32:51 rsd Exp $
d1291 7
d1350 7
d1424 7
d1498 7
d1573 7
d1618 7
d1693 7
d1779 7
d1860 7
d1905 7
d1927 7
d1948 7
d1970 7
d1996 7
d2024 7
d2049 7
d2072 7
d2095 7
d2123 7
d2178 7
d2237 7
d2286 7
d2357 7
d2413 7
a3294 1

d3306 7
a3312 1

d3381 7
d3459 7
d3507 8
a3514 1
  
d3584 7
d3673 7
d3758 7
d3810 7
d3834 7
d3857 7
d3881 7
d3909 7
d3938 7
d3965 7
d3992 8
a3999 1
 
d4051 7
d4112 7
d4164 7
d4238 7
d4297 7
d4325 7
d4355 7
d4411 7
d4473 7
d4613 3
@


1.34
log
@Well now,
Added class guild guard room assignemtns for Mielikki and
Ickle, I suspect Anduin will soon follow.
Added spell_level(SKILL_SPHERE..) for all casting classes.
Added SET_SKILL(ch, SKILL_SPHERE..) for players and MOBS!
WOO!
@
text
@d1 1
a1 1
// $Id: class.c,v 1.33 1999/11/17 20:03:20 jimmy Exp $
d512 8
a519 1

d4279 8
@


1.33
log
@reformatted return_max_skill and changed the equation to
10*LEVEL + 50 as the max skill
--gurlaek
@
text
@d1 1
a1 1
// $Id: class.c,v 1.32 1999/09/05 07:00:39 jimmy Exp $
d499 47
a545 1
  
d551 6
a556 5

/* THAC0 for classes and levels.  (To Hit Armor Class 0) */

/* David Endre 1/16/99 Added dummy numbers to allow for 105 classes
   will be adjusted once class balancing takes place */
d1273 11
d1325 11
d1392 11
d1459 11
d1527 11
d1633 11
d1712 11
d1786 11
d2027 11
d2061 11
d2110 11
d2185 11
d2234 11
d3121 13
d3190 12
d3261 12
d3372 12
d3454 12
d3532 12
d3762 12
d3816 11
d3861 12
d3928 12
d3980 12
d4073 12
d4128 11
d4272 5
@


1.32
log
@Added RCS Log and Id strings to each source file
@
text
@d1 1
a1 1
// $Id$
d1074 1
a1074 2
int return_max_skill(struct char_data *ch, int skill)
{
d1077 7
a1083 16
  switch(GET_RACE(ch))
    {
    case RACE_OGRE:
      switch(skill)
	{
	case SKILL_PARRY:
	case SKILL_RIPOST:
	  max_skill = 750;break;
	}
    case RACE_TROLL:
      switch(skill)
        {
        case SKILL_DODGE:
        case SKILL_PARRY:
	  max_skill = 700;break;
        }
d1085 5
a1089 7
  switch(GET_CLASS(ch))
    {
    case CLASS_RANGER:
      switch(skill)
	{
	case SKILL_HUNT:max_skill = 750;break;
	}
d1091 7
a1097 5
    case CLASS_PRIEST:
      switch(skill)
	{
	case SKILL_DOUBLE_ATTACK:max_skill = 500;break;
	}
d1099 6
a1104 5
    case CLASS_HUNTER:
      switch(skill)
	{
	  
	}
d1106 11
a1116 5
    case CLASS_WARRIOR:
      switch(skill)
	{
	case SKILL_TRACK:max_skill = 600;break;
	}
d1118 6
a1123 5
    case CLASS_MERCENARY:
      switch(skill)
	{
	case SKILL_TRACK:max_skill = 850;break;
	}
d1125 6
a1130 5
    case CLASS_ASSASSIN:
      switch(skill)
	{
	case SKILL_TRACK:max_skill = 750;break;
	}
d1132 6
a1137 5
    case CLASS_THIEF:
      switch(skill)
	{
	case SKILL_TRACK:max_skill = 600;break;
	}
d1139 6
a1144 5
    case CLASS_ROGUE:
      switch(skill)
	{
	case SKILL_TRACK:max_skill = 650;break;
	}
d1146 5
a1150 2
    }        
  return (MIN(max_skill, (GET_LEVEL(ch) * (int)(max_skill/50))));
d3926 4
a3929 1
// $Log$
@


1.31
log
@commented out dual wield from each class until
such time that the use of it is more blanced
@
text
@d1 1
d3922 1
@


1.30
log
@made double attack level 90 for thieves
@
text
@d1704 1
a1704 1
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1718 1
a1718 1
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1733 1
a1733 1
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1746 1
a1746 1
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1785 1
a1785 1
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1800 1
a1800 1
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1824 1
a1824 1
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1838 1
a1838 1
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 50);
d1862 1
a1862 1
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
d1892 1
a1892 1
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
d1938 1
a1938 1
    SET_SKILL(ch, SKILL_DUAL_WIELD,  IS_NPC(ch) ? roll_mob_skill(ch) : 200);
d3331 1
a3331 1
  spell_level(SKILL_DUAL_WIELD, CLASS_THIEF, 15, 2);
d3347 1
a3347 1
  spell_level(SKILL_DUAL_WIELD, CLASS_ROGUE, 15, 2);
d3364 1
a3364 1
  spell_level(SKILL_DUAL_WIELD, CLASS_BARD, 90, 2);
d3383 1
a3383 1
  spell_level(SKILL_DUAL_WIELD, CLASS_WARRIOR, 25, 2);
d3425 1
a3425 1
  spell_level(SKILL_DUAL_WIELD, CLASS_BERSERKER, 1, 2);
d3444 1
a3444 1
  spell_level(SKILL_DUAL_WIELD, CLASS_HUNTER, 1, 2);
d3463 1
a3463 1
  spell_level(SKILL_DUAL_WIELD, CLASS_PALADIN, 20, 2);
d3501 1
a3501 1
  spell_level(SKILL_DUAL_WIELD, CLASS_ANTI_PALADIN, 20, 2);
d3545 1
a3545 1
  spell_level(SKILL_DUAL_WIELD, CLASS_RANGER, 1, 2);
d3679 1
a3679 1
  spell_level(SKILL_DUAL_WIELD, CLASS_ASSASSIN, 15, 2);
d3700 1
a3700 1
  spell_level(SKILL_DUAL_WIELD, CLASS_MERCENARY, 60, 2);
@


1.29
log
@made double attack level 65 for assassins
@
text
@d3330 1
a3330 1
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_THIEF, 10, 2);
@


1.28
log
@made double attack level 70 for rogues
@
text
@d3678 1
a3678 1
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_ASSASSIN, 10, 2);
@


1.27
log
@Level 99's can now reach **.
@
text
@d3346 1
a3346 1
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_ROGUE, 10, 2);
@


1.26
log
@Added rescue for rangers at level 35
@
text
@d136 27
@


1.25
log
@Gave the newly reimpleminted spell IDENTIFY to magic users and conjurers
at 3rd circle
--gurlaek
@
text
@d1903 1
d3521 1
@


1.24
log
@This is the spanky New Spell recognition code.
This code allows mobs/players that have the KNOW_SPELL skill
to make a skill check to guess the spell.  A good roll will show both
the spell and the target.  A bad roll will show the spell garbled and
then an INT check for the target.  If a really bad roll is made, the spell
will be replaced by an incorrect one.  the heart of this system is
start_chant(), end_chant, and bad_guess().
--gurlaek 7/20/1999
@
text
@d1224 1
d1282 1
d2850 1
d3736 1
@


1.23
log
@This is a Mass check-in of the new skill/spell/language assignment system.
This New system combines the assignment of skill/spell/language for
both mobs and PCs.  LOts of code was touched and many errors were fixed.
MCLASS_VOID was moved from 13 to -1 to match CLASS_UNDEFINED for PC's.
MObs now get random skill/spell/language levels baseed on their race/class/level
that exactly align with PC's.  PC's no longer have to rent to use skills gained
by leveling or when first creating a char.  Languages no longer reset to defaults
when a PC levels.  Discovered that languages have been defined right in the middle
of the spell area.  This needs to be fixed.  A conversion util neeDs to be run on
the mob files to compensate for the 13 to -1 class change.
--gurlaek 7/6/1999
@
text
@d1191 1
d1231 1
d1286 1
d1342 1
d1399 1
d1432 1
d1495 1
d1562 1
d1625 1
d1662 1
d1978 1
d2016 1
d2889 1
d2948 1
d3005 1
d3043 1
d3106 1
d3174 1
d3241 1
d3285 1
d3441 1
d3480 1
d3523 1
d3549 1
d3629 1
d3685 1
d3724 1
@


1.22
log
@>> This is a major conversion from the 18 point attribute system to the
>> 100 point attribute system.  A few of the major changes are:
>> All attributes are now on a scale from 0-100
>> Everyone views attribs the same but, the attribs for one race
>>   may be differeent for that of another even if they are the
>>   same number.
>> Mobs attribs now get rolled and scaled using the same algorithim as PC's
>> Mobs now have individual random attributes based on race/class.
>> The STR_ADD attrib has been completely removed.
>> All bonus tables for attribs in constants.c have been replaced by
>>   algorithims that closely duplicate the tables except on a 100 scale.
>> Some minor changes:
>> Race selection at char creation can now be toggled by using
>>   <world races off>
>> Lots of cleanup done to affected areas of code.
>> Setting attributes for mobs in the .mob file no longer functions
>>   but is still in the code for later use.
>> We now have a spare attribut structure in the pfile because the new
>>   system only used three instead of four.
>> --gurlaek 6/30/1999
@
text
@d31 3
a185 1
/* Can we dump or comment this now? RSD */
d1122 16
d1140 1
a1140 2
 /*
    This function was spliced from do_start. This can be called
d1142 2
a1143 4
    before calling this. This is the magicfunction to cut out guildmasters
    set a players skill and spell_level will give it  at proper level
    where the player hits that level. All spells must be ste to 1000
    and skills set from 50 to 200. This is also used to set innate   skills
d1145 1
a1148 1
  
d1150 2
a1151 2
  SET_SKILL(ch, SKILL_DOUSE,50);
  SET_SKILL(ch, SKILL_FIRST_AID, 50);
d1154 5
a1159 1

a1162 1

a1167 1

a1170 1

a1172 1

a1177 1

a1179 1

a1182 1

a1183 1

a1184 1

d1186 7
a1192 8

    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_SCRIBE, 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1193 1
    
a1197 1

a1201 1

d1205 1
a1205 2

/* SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000); */
a1206 1

a1212 1

a1216 1

a1220 1

a1221 1

a1222 1

a1223 1

d1225 7
a1231 8

    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_SCRIBE, 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1233 1

a1238 1

a1241 1

d1243 1
a1243 1
/* SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000); */
a1244 1

a1253 1

a1259 1

a1264 1

d1267 1
a1267 2

/*      SET_SKILL(ch, SPELL_MAJOR_GLOBE, 0); */
a1268 1

d1270 1
a1270 1
/*      SET_SKILL(ch, SPELL_RELOCATE, 0); */
d1272 1
a1272 3

/*      SET_SKILL(ch, SPELL_METEORSWARM, 0); */

d1275 1
a1275 2
/*      SET_SKILL(ch, SPELL_WIZARD_EYE, 0); */
    
d1279 7
a1285 8

    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_SCRIBE, 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1286 1
    
a1290 1

a1295 1

d1298 1
a1298 2
/* SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000); */

a1306 1

a1313 1

a1317 1

a1319 1

a1322 1

d1326 1
a1326 2
/*      SET_SKILL(ch, SPELL_RELOCATE, 0); */

d1328 1
a1328 1
/*      SET_SKILL(ch, SPELL_METEORSWARM, 0); */
d1330 2
a1331 4

/*      SET_SKILL(ch, SPELL_SUPERNOVA, 0); */
/*      SET_SKILL(ch, SPELL_WIZARD_EYE, 0); */

d1334 7
a1340 8

    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_SCRIBE, 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1345 1

d1350 1
a1350 2

/* SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000); */
a1354 1

a1360 1

a1367 1

a1372 1

a1374 1

d1377 1
a1377 1
/*      SET_SKILL(ch, SPELL_MAJOR_GLOBE, 0); */
a1378 1

d1380 1
a1380 1
/*      SET_SKILL(ch, SPELL_RELOCATE, 0); */
a1382 1

d1385 1
a1385 2

/*      SET_SKILL(ch, SPELL_WIZARD_EYE, 0); */
d1387 1
a1387 2
/*      SET_SKILL(ch, SPELL_ICE_SHARDS, 0); */

d1390 7
a1396 8

    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_SCRIBE, 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
d1407 1
a1407 1
/* SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000); */
d1415 1
a1415 1
    //	  SET_SKILL(ch, SPELL_CHARM, 1000);
d1420 1
a1420 1
    SET_SKILL(ch, SKILL_DODGE, 50);
d1423 5
a1427 5
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_SCRIBE, 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
d1433 1
a1433 1
    SET_SKILL(ch, SKILL_BANDAGE, 50); 
a1434 1
    
a1441 1
    
a1448 1
    
a1455 1

a1462 1

a1469 1

a1475 1

d1479 1
a1479 2

/*      SET_SKILL(ch, SPELL_GROUP_HEAL, 0); */
d1481 9
a1489 13

/*      SET_SKILL(ch, SPELL_PLANE_SHIFT, 0); */

/*      SET_SKILL(ch, SPELL_GROUP_ARMOR, 0); */

/*      SET_SKILL(ch, SPELL_RESURRECT, 0); */

    SET_SKILL(ch, SKILL_DODGE, 50);    
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1497 1

a1505 1

a1512 1

a1520 1

a1527 1

a1531 1

a1534 1

d1537 2
a1538 2
/*      SET_SKILL(ch, SPELL_GROUP_ARMOR, 0); */
/*      SET_SKILL(ch, SPELL_GROUP_HEAL, 0); */
a1539 1

d1542 2
a1543 2
/*      SET_SKILL(ch, SPELL_BANISH, 0); */
/*      SET_SKILL(ch, SPELL_PLANE_SHIFT, 0); */
a1545 1

d1547 1
a1547 1
/*      SET_SKILL(ch, SPELL_WORD_OF_COMMAND, 0); */
d1549 8
a1556 11

/*      SET_SKILL(ch, SPELL_RESURRECT, 0); */
/*      SET_SKILL(ch, SPELL_HEAVENS_GATE, 0); */


    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1562 1

a1570 1

a1576 1

a1586 1

a1590 1

a1594 1

d1600 1
a1600 2

/*      SET_SKILL(ch, SPELL_HELLFIRE_BRIMSTONE, 0); */
d1602 1
a1602 1
/*      SET_SKILL(ch, SPELL_GROUP_HEAL, 0); */
a1603 1

d1606 2
a1607 2
/*      SET_SKILL(ch, SPELL_BANISH, 0); */
/*      SET_SKILL(ch, SPELL_PLANE_SHIFT, 0); */
a1608 1

d1610 9
a1618 11
/*      SET_SKILL(ch, SPELL_WORD_OF_COMMAND, 0); */

/*      SET_SKILL(ch, SPELL_HELLS_GATE, 0); */
/*      SET_SKILL(ch, SPELL_RESURRECT, 0); */

    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
d1648 1
a1648 1
    SET_SKILL(ch, SKILL_DODGE, 50);
d1650 4
a1653 4
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
d1655 1
a1655 1
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1656 1
    
d1658 13
a1670 13
    SET_SKILL(ch, SKILL_SNEAK, 100);
    SET_SKILL(ch, SKILL_HIDE, 50);
    SET_SKILL(ch, SKILL_STEAL, 150);
    SET_SKILL(ch, SKILL_BACKSTAB, 100);
    SET_SKILL(ch, SKILL_PICK_LOCK, 100);
    SET_SKILL(ch, SKILL_TRACK, 100);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_PARRY, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1671 1
    
d1673 12
a1684 12
    SET_SKILL(ch, SKILL_SNEAK, 100);
    SET_SKILL(ch, SKILL_HIDE, 50);
    SET_SKILL(ch, SKILL_BACKSTAB, 100);
    SET_SKILL(ch, SKILL_PICK_LOCK, 100);
    SET_SKILL(ch, SKILL_TRACK, 100);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_PARRY, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1685 1

d1687 13
a1699 13
    SET_SKILL(ch, SKILL_SNEAK, 100);
    SET_SKILL(ch, SKILL_HIDE, 50);
    SET_SKILL(ch, SKILL_STEAL, 150);
    SET_SKILL(ch, SKILL_BACKSTAB, 100);
    SET_SKILL(ch, SKILL_PICK_LOCK, 100);
    SET_SKILL(ch, SKILL_TRACK, 100);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_PARRY, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1700 1

d1702 17
a1718 17
    SET_SKILL(ch, SKILL_DISARM, 100);
    SET_SKILL(ch, SKILL_HITALL, 50);
    SET_SKILL(ch, SKILL_GUARD, 50);
    SET_SKILL(ch, SKILL_SWITCH, 50);
    /*    SET_SKILL(ch, SKILL_TRACK, 50); */
    SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
    SET_SKILL(ch, SKILL_BASH, 50);
    SET_SKILL(ch, SKILL_KICK, 50);
    SET_SKILL(ch, SKILL_RESCUE, 50);
    /*   SET_SKILL(ch, SKILL_TAME, 50); */
    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_PARRY, 50);
    SET_SKILL(ch, SKILL_RIPOST, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1719 1
    
d1722 16
a1737 16
    SET_SKILL(ch, SKILL_CHANT, 50);
    SET_SKILL(ch, SKILL_SWITCH, 50);
    /*   SET_SKILL(ch, SKILL_GUARD, 50);
	 SET_SKILL(ch, SKILL_TRACK, 50);
	 SET_SKILL(ch, SKILL_DUAL_WIELD, 50); */
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
    /*   SET_SKILL(ch, SKILL_BASH, 50); */
    SET_SKILL(ch, SKILL_KICK, 100);
    /*   SET_SKILL(ch, SKILL_RESCUE, 50); 
	 SET_SKILL(ch, SKILL_TAME, 50); */
    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_PARRY, 50);
    SET_SKILL(ch, SKILL_RIPOST, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
d1739 1
a1739 1
    SET_SKILL(ch, SKILL_SPRINGLEAP, 100);
a1740 1
    
d1742 16
a1757 16
    SET_SKILL(ch, SKILL_GUARD, 50);
    SET_SKILL(ch, SKILL_SWITCH, 50);
    SET_SKILL(ch, SKILL_HITALL, 50);
    SET_SKILL(ch, SKILL_TRACK, 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
    SET_SKILL(ch, SKILL_BASH, 50);
    SET_SKILL(ch, SKILL_KICK, 50);
    SET_SKILL(ch, SKILL_RESCUE, 50);
    SET_SKILL(ch, SKILL_TAME, 50);
    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_PARRY, 50);
    SET_SKILL(ch, SKILL_RIPOST, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1758 1
    
d1760 14
a1773 14
    SET_SKILL(ch, SKILL_TRACK, 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
    SET_SKILL(ch, SKILL_BASH, 50);
    SET_SKILL(ch, SKILL_KICK, 50);
    SET_SKILL(ch, SKILL_RESCUE, 50);
    SET_SKILL(ch, SKILL_TAME, 50);
    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_PARRY, 50);
    SET_SKILL(ch, SKILL_RIPOST, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_HUNT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1774 1
    
d1776 14
a1789 14
    SET_SKILL(ch, SKILL_SNEAK, 150);
    SET_SKILL(ch, SKILL_INSTANT_KILL, 50);
    SET_SKILL(ch, SKILL_HIDE, 50);
    SET_SKILL(ch, SKILL_BACKSTAB, 150);
    SET_SKILL(ch, SKILL_CIRCLE, 100);
    SET_SKILL(ch, SKILL_TRACK, 150);
    SET_SKILL(ch, SKILL_THROATCUT, 50);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
    SET_SKILL(ch, SKILL_PARRY, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
d1792 19
a1810 19
    SET_SKILL(ch, SKILL_DISARM, 100);
    SET_SKILL(ch, SKILL_GUARD, 50);
    SET_SKILL(ch, SKILL_SWITCH, 50);
    SET_SKILL(ch, SKILL_HIDE, 50);
    SET_SKILL(ch, SKILL_BIND, 50);
    SET_SKILL(ch, SKILL_BACKSTAB, 100);
    SET_SKILL(ch, SKILL_TRACK, 150);
    SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
    SET_SKILL(ch, SKILL_BASH, 50);
    SET_SKILL(ch, SKILL_KICK, 50);
    /*  SET_SKILL(ch, SKILL_RESCUE, 50);
	SET_SKILL(ch, SKILL_TAME, 50); */
    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_PARRY, 50);
    SET_SKILL(ch, SKILL_RIPOST, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1811 1

d1813 18
a1830 18
    SET_SKILL(ch, SKILL_GUARD, 150);
    SET_SKILL(ch, SKILL_SWITCH, 100);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 200);
    SET_SKILL(ch, SKILL_BASH, 200);
    SET_SKILL(ch, SKILL_KICK, 200);
    SET_SKILL(ch, SKILL_RESCUE, 200);
    /*    SET_SKILL(ch, SKILL_TAME, 50); */
    SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
    SET_SKILL(ch, SKILL_DISARM, 100);
    SET_SKILL(ch, SKILL_HITALL, 100);
    SET_SKILL(ch, SKILL_DUAL_WIELD, 200);
    SET_SKILL(ch, SKILL_DODGE, 250);
    SET_SKILL(ch, SKILL_PARRY, 250);
    SET_SKILL(ch, SKILL_RIPOST, 250);
    SET_SKILL(ch, SKILL_RIDING, 350);
    SET_SKILL(ch, SKILL_MOUNT, 350);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 200);
a1831 1

a1834 1

a1835 1

a1837 1

a1838 1

a1840 1

a1842 1

a1843 1

a1844 1

a1845 1

a1846 1

d1851 20
a1870 21
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 200);
    SET_SKILL(ch, SKILL_VAMP_TOUCH, 200);
    SET_SKILL(ch, SKILL_DUAL_WIELD, 200);
    SET_SKILL(ch, SKILL_BASH, 200);
    SET_SKILL(ch, SKILL_KICK, 200);
    SET_SKILL(ch, SKILL_RESCUE,200);
    /* SET_SKILL(ch, SKILL_TAME, 50); */
    SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
    SET_SKILL(ch, SKILL_DISARM, 100);
    SET_SKILL(ch, SKILL_HITALL, 100);
    SET_SKILL(ch, SKILL_GUARD, 150);
    SET_SKILL(ch, SKILL_SWITCH, 100);
    SET_SKILL(ch, SKILL_DODGE,200);
    SET_SKILL(ch, SKILL_PARRY, 200);
    SET_SKILL(ch, SKILL_RIDING, 350);
    SET_SKILL(ch, SKILL_MOUNT, 350);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_RIPOST, 250);
    SET_SKILL(ch, SKILL_BANDAGE, 150);
    SET_SKILL(ch, SKILL_SUMMON_MOUNT, 1000);

d1891 17
a1907 18
    SET_SKILL(ch, SKILL_SWITCH, 50);
    /*    SET_SKILL(ch, SKILL_GUARD, 50); */
    SET_SKILL(ch, SKILL_KICK, 200);
    /*    SET_SKILL(ch, SKILL_RESCUE, 200); */
    SET_SKILL(ch, SKILL_TRACK, 150);
    SET_SKILL(ch, SKILL_BASH, 200);
    SET_SKILL(ch, SKILL_TAME, 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD, 200);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 200);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
    SET_SKILL(ch, SKILL_DODGE, 150);
    SET_SKILL(ch, SKILL_PARRY, 150);
    SET_SKILL(ch, SKILL_RIPOST, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_SCRIBE, 50);

a1909 1

a1910 1

a1912 2


a1913 1

a1914 2


a1916 1

a1917 1

a1920 1

a1925 1

a1930 1

a1934 1

a1940 1

a1944 1

a1949 1

a1952 1

a1956 1

a1959 1

d1961 10
a1970 12
/*      SET_SKILL(ch, SPELL_MOONWELL, 1000); */

/*      SET_SKILL(ch, SPELL_CREEPING_DOOM, 1000); */

    SET_SKILL(ch, SKILL_TAME, 50);
    SET_SKILL(ch, SKILL_DODGE, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
    SET_SKILL(ch, SKILL_SHAPECHANGE, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1971 1

d1977 1
a1977 1
    SET_SKILL(ch, SKILL_TAME, 50);
d2000 1
a2000 1
    SET_SKILL(ch, SKILL_DODGE, 50);
d2002 4
a2005 4
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
d2007 4
a2010 1
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a2011 1
    
d2022 1
a2022 1
    if (GET_LEVEL(ch) == 1){
d2035 1
a2035 1
    if (GET_LEVEL(ch) == 1){
d2048 1
a2048 1
    if (GET_LEVEL(ch) == 1){
d2060 1
a2060 1
    if (GET_LEVEL(ch) == 1){
d2075 1
a2075 1
    if (GET_LEVEL(ch) == 1){
d2087 1
a2087 1
    if (GET_LEVEL(ch) == 1){
d2099 1
a2099 1
    if (GET_LEVEL(ch) == 1){
d2112 1
a2112 1
    if (GET_LEVEL(ch) == 1){
d2125 1
a2125 1
    if (GET_LEVEL(ch) == 1){
d2136 1
a2136 1
    if (GET_LEVEL(ch) == 1){
a2146 1
    SET_SKILL(ch, LANG_HALFLING, 200);
d2148 1
a2148 1
    if (GET_LEVEL(ch) == 1){
d2160 1
a2160 1
    if (GET_LEVEL(ch) == 1){
d2166 35
d2202 1
a2202 2
  
  if (GET_LEVEL(ch) == 1)
a2203 1
  
a2229 1
  
d2260 2
a2261 1
  
a2651 3
    
    
    
a2652 3

  
  
d2690 1
a2690 1
  
a2737 1

a2769 2
/*void init_spell_levels(void)
  {*/
a2806 1
    
a2827 1

a2832 1

a2835 1

d2837 1
a2837 1
 /* spell_level(SPELL_LOCATE_OBJECT, CLASS_MAGIC_USER, CIRCLE_3, 3); */
a2838 1

a2847 1

a2853 1

a2858 1

a2860 1
  
a2863 1

a2866 1

a2867 1

a2870 1

a2871 1

a2885 1

a2890 1

a2893 1

a2901 1

a2908 1

a2912 1

a2914 1

a2918 1

a2922 1

a2925 1

a2927 2


a2938 1

a2941 1

a2945 1

a2950 1

a2956 1

a2963 1

a2968 1

a2971 1

a2976 1

a2980 1

a2982 1

a2985 1

d3016 1
a3016 1
//  spell_level(SPELL_CHARM, CLASS_ILLUSIONIST, 31, 2);
a3035 1

a3041 1

a3048 1

a3055 1

a3062 1

a3069 1

a3075 1

a3078 1

a3080 1

a3081 1

a3082 1

a3083 1

a3093 1

a3099 1

a3107 1

a3114 1

a3122 1

a3129 1

a3133 1

a3136 1

a3141 1

a3147 1

a3150 1

a3152 1

a3162 1

a3166 1

a3174 1

a3180 1

a3191 1

a3195 1

a3199 1

a3204 1

a3208 1

a3213 1

a3215 1

a3217 1

a3384 1

a3425 2


a3428 1

a3429 1

a3431 1

a3433 1

a3435 1

a3437 1

a3438 1

a3439 1

a3440 1

a3465 1

a3467 1

a3468 1

a3471 1

a3472 1

a3475 1

a3477 1

a3478 1

a3479 1

a3480 1

a3481 1

a3483 1

a3484 1

a3503 2


a3505 1

a3506 1

a3508 2


a3509 1

a3510 1

a3512 1

a3513 1

a3526 1

a3531 1

a3536 1

a3540 1

a3546 1

a3550 1

a3555 1

a3558 1

a3562 1

a3565 1

a3567 1

a3569 1

a3608 2


a3610 1

a3651 1

a3661 1

a3664 1

a3669 1

a3672 1

a3674 1

a3679 1

a3681 1

a3684 1

a3685 1

a3686 1

a3698 1

a3701 1

a3705 1

a3708 1

d3710 1
a3710 2
/*  spell_level(SPELL_LOCATE_OBJECT, CLASS_CONJURER, CIRCLE_4, 4);*/

a3716 1

a3720 1

a3724 1

a3725 1

a3726 1

a3727 1

d3740 8
a3747 1
      if (spell_info[skill].min_level[(int)GET_CLASS(ch)] <= GET_LEVEL(ch) )
d3761 1
a3761 1
		SET_SKILL(ch, skill, 1000)
d3763 2
a3764 1
		    SET_SKILL(ch, skill, 150)
a3766 1
      // the following tweaks innates...fix it. Fingh 12/9/98
d3768 3
a3770 2
	SET_SKILL(ch, skill, 0);
      
d3772 14
a3785 85
  switch (GET_RACE(ch)) {
    
  case RACE_DROW_ELF:
    SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
    SET_SKILL(ch, LANG_DROW, 1000);
    SET_SKILL(ch, LANG_DUERGAR, 200);
    SET_SKILL(ch, LANG_OGRE, 100);
    SET_SKILL(ch, LANG_ORCISH, 200);
    SPEAKING(ch) = LANG_DROW;
    break;
  case RACE_ELF:
    SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
    SET_SKILL(ch, LANG_ELVEN, 1000);
    SET_SKILL(ch, LANG_COMMON, 200);
    SET_SKILL(ch, LANG_HALFLING, 200);
    SET_SKILL(ch, LANG_GNOMISH, 200);
    break;
  case RACE_DWARF:
    SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
    SET_SKILL(ch, LANG_DWARVEN, 1000);
    SET_SKILL(ch, LANG_COMMON, 100);
    SET_SKILL(ch, LANG_GNOMISH, 200);
    SET_SKILL(ch, LANG_HALFLING, 200);
    break;
  case RACE_DUERGAR:
    SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
    SET_SKILL(ch, LANG_DUERGAR, 1000);
    SET_SKILL(ch, LANG_DROW, 100);
    SET_SKILL(ch, LANG_OGRE, 200);
    break;
  case RACE_HALFLING:
    SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
    SET_BIT(AFF_FLAGS(ch), AFF_SENSE_LIFE);
    SET_SKILL(ch, LANG_HALFLING, 1000);
    SET_SKILL(ch, LANG_COMMON, 400);
    SET_SKILL(ch, LANG_ELVEN, 200);
    SET_SKILL(ch, LANG_DWARVEN, 400);
    SET_SKILL(ch, LANG_GNOMISH, 200);
    break;
  case RACE_TROLL:
    SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
    SET_SKILL(ch, SKILL_DOORBASH, 1000);
    SET_SKILL(ch, LANG_TROLLISH, 1000);
    SET_SKILL(ch, LANG_DROW, 50);
    break;
  case RACE_OGRE:
    SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
    SET_SKILL(ch, SKILL_DOORBASH, 1000);
    SET_SKILL(ch, LANG_OGRE, 1000);
    SET_SKILL(ch, LANG_TROLLISH, 50);
    break;
  case RACE_HALF_ELF:
    SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
    SET_SKILL(ch, LANG_COMMON, 1000);
    SET_SKILL(ch, LANG_ELVEN, 1000);
    SET_SKILL(ch, LANG_DWARVEN, 200);
    SET_SKILL(ch, LANG_HALFLING, 200);
    break;
  case RACE_GNOME:
    SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
    SET_SKILL(ch, LANG_COMMON, 200);
    SET_SKILL(ch, LANG_ELVEN, 200);
    SET_SKILL(ch, LANG_GNOMISH, 1000);
    SET_SKILL(ch, LANG_HALFLING, 200);
    break;
  case RACE_BARBARIAN:
    SET_SKILL(ch, SKILL_DOORBASH, 1000);
    SET_SKILL(ch, LANG_COMMON, 200);
    SET_SKILL(ch, LANG_BARBARIAN, 1000);
    break;
  case RACE_HUMAN:
    SET_SKILL(ch, LANG_COMMON, 1000);
    SET_SKILL(ch, LANG_ELVEN, 200);
    SET_SKILL(ch, LANG_HALFLING, 200);
    SET_SKILL(ch, LANG_DWARVEN, 200);
    SET_SKILL(ch, LANG_GNOMISH, 200);
    SET_SKILL(ch, LANG_HALFLING, 200);
    break;
  case RACE_ORC:
    SET_SKILL(ch, LANG_DROW, 200);
    SET_SKILL(ch, LANG_DUERGAR, 200);
    SET_SKILL(ch, LANG_OGRE, 100);
    SET_SKILL(ch, LANG_ORCISH, 1000);
    SET_SKILL(ch, LANG_TROLLISH, 200);
    break;
d3787 8
d3796 4
d3801 8
a3808 1
} /* end update_skills */
d3810 7
d3818 10
d3829 23
d3853 7
@


1.21
log
@This is a mass check in after a code freeze due to an upgrade to RedHat 6.0.  This fixes all of the warnings associated
with the new compiler and libraries.  Many many curly braces had to be added to "if" statements to clarify
their behavior to the compiler.  The name approval code was also debugged, and tested to be stable.  The xnames
list was converted from an array to a linked list to allow for on the fly adding of names to the xnames list.
This code compiles fine under both gcc RH5.2 and egcs RH6.0.
--Gurlaek 6/10/1999
@
text
@d295 3
a297 3
    para -= (int)(0.125 * GET_CON_VAFF(ch));
    rod  -= (int)(0.1 * GET_CON_VAFF(ch));
    spe  -= (int)(0.1 * GET_CON_VAFF(ch));
d300 2
a301 2
    rod  -= (int)(0.1 * GET_CON_VAFF(ch));
    spe  -= (int)(0.1 * GET_CON_VAFF(ch));
d304 3
a306 3
    para -= (int)(0.1 * GET_CON_VAFF(ch));
    rod  -= (int)(0.1 * GET_CON_VAFF(ch));
    spe  -= (int)(0.1 * GET_CON_VAFF(ch));
d311 4
a314 4
  para -= (int)(0.5 * (GET_CON_VAFF(ch) - 90));
  spe  -= (int)(0.5 * (GET_WIS_VAFF(ch) - 90));
  rod  -= (int)(0.5 * (GET_DEX_VAFF(ch) - 90));
  bre  -= (int)(0.5 * (GET_DEX_VAFF(ch) - 90));
d735 4
a738 3
 * Roll the 6 stats for a character... each stat is made of the sum of
 * the best 3 out of 4 rolls of a 6-sided die.  Each class then decides
 * which priority will be given for the best to worst stats.
d741 1
a741 2

void roll_view_abils(struct char_data *ch, int choice_table[])
d751 1
a751 1
  
d753 1
a753 1
    
d756 4
a759 4
    
    temp = rolls[0] + rolls[1] + rolls[2] + rolls[3] + rolls[4] + 
      rolls[5] -
      MIN(rolls[0], MIN(rolls[1], MIN(rolls[2], MIN(rolls[3], MIN(rolls[4], rolls[5])))));
d761 1
d766 1
a766 1
	temp ^= table[k];      
d769 5
a773 3
  
  
  /*Give all a boost*/
d777 2
a778 14
  /*ok lets say average = 450 (75 per) if LESS then this then bonus stats*/
  /*
 ***METHOD 1 even spread of upping stats***
 while (i <= 450)
 {
 for (j=0;j<6;j++)
 if ((int)table[j] < 100)
 {
 table[j] = (ubyte)((int)table[j] + 1);
 i++;
 }
 }
  */	
  /*METHOD 2 random spread of bonus 5 stat points***/
d782 1
a782 1
      if ((int)table[j] < 100)
d788 135
a922 219
  
  ch->view_abils.str_add = 0;
  
  SET_BIT(PLR_FLAGS(ch), PLR_LOADROOM);
  SET_BIT(PRF_FLAGS(ch), PRF_AUTOEXIT);
  
  if (!GET_ROLL(ch, 0))
    {/*if baiscally NOT going through interpreter*/
      switch (GET_CLASS(ch)) {
      case CLASS_MAGIC_USER:
	ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_CLERIC:
	ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_THIEF:
	ch->view_abils.dex = table[0];
	ch->view_abils.str = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.intel = table[3];
	ch->view_abils.wis = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_WARRIOR:
	ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.wis = table[3];
	ch->view_abils.intel = table[4];
	ch->view_abils.cha = table[5];
	if (ch->view_abils.str == 100)
	  ch->view_abils.str_add = number(0, 100);
	break;
      case CLASS_PALADIN:
	ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.wis = table[3];
	ch->view_abils.intel = table[4];
	ch->view_abils.cha = table[5];
	if (ch->view_abils.str == 100)
	  ch->view_abils.str_add = number(0, 100);
	break;
      case CLASS_ANTI_PALADIN:
	ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.wis = table[3];
	ch->view_abils.intel = table[4];
	ch->view_abils.cha = table[5];
	if (ch->view_abils.str == 100)
	  ch->view_abils.str_add = number(0, 100);
	break;
      case CLASS_RANGER:
	ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.intel = table[3];
	ch->view_abils.wis = table[4];
	ch->view_abils.cha = table[5];
	if (ch->real_abils.str == 18)
	  ch->real_abils.str_add = number(0, 100);
	ch->view_abils.str_add = ch->real_abils.str_add;
	break;
      case CLASS_DRUID:
	ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_SHAMAN:
	ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_ASSASSIN:
	ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_MERCENARY:
	ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.intel = table[3];
	ch->view_abils.wis = table[4];
	ch->view_abils.cha = table[5];
	if (ch->view_abils.str == 100)
	  ch->view_abils.str_add = number(0, 100);
	break;
      case CLASS_NECROMANCER:
	ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_CONJURER:
	ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;     
      case CLASS_BERSERKER:
	ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.wis = table[3];
	ch->view_abils.intel = table[4];
	ch->view_abils.cha = table[5];
	if (ch->view_abils.str == 100)
	  ch->view_abils.str_add = number(0, 100);
	break;
      case CLASS_MONK:
	ch->view_abils.con = table[0];
	ch->view_abils.str = table[1];
	ch->view_abils.dex = table[2];
	ch->view_abils.wis = table[3];
	ch->view_abils.intel = table[4];
	ch->view_abils.cha = table[5];
	if (ch->view_abils.str == 100)
	  ch->view_abils.str_add = number(0, 100);
	break;
      case CLASS_PRIEST:
	ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_DIABOLIST:
	ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_MYSTIC:
	ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_ROGUE:
	ch->view_abils.dex = table[0];
	ch->view_abils.str = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.intel = table[3];
	ch->view_abils.wis = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_BARD:
	ch->view_abils.dex = table[0];
	ch->view_abils.str = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.intel = table[3];
	ch->view_abils.wis = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_PYROMANCER:
	ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_CRYOMANCER:
	ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_ILLUSIONIST:
	ch->view_abils.wis = table[0];
	ch->view_abils.intel = table[1];
	ch->view_abils.str = table[2];
	ch->view_abils.dex = table[3];
	ch->view_abils.con = table[4];
	ch->view_abils.cha = table[5];
	break;
      case CLASS_HUNTER:
	ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
	ch->view_abils.con = table[2];
	ch->view_abils.wis = table[3];
	ch->view_abils.intel = table[4];
	ch->view_abils.cha = table[5];
	if (ch->view_abils.str == 100)
	  ch->view_abils.str_add = number(0, 100);
	break;
	
d924 90
a1013 25
      
      
      
    }else
      {/*through interpreter*/
	ch->view_abils.con = table[((int)GET_ROLL(ch, 0) - 1)];
	ch->view_abils.str = table[((int)GET_ROLL(ch, 1) - 1)];
	ch->view_abils.dex = table[((int)GET_ROLL(ch, 2) - 1)];
	ch->view_abils.wis = table[((int)GET_ROLL(ch, 3) - 1)];
	ch->view_abils.intel = table[((int)GET_ROLL(ch, 4) - 1)];
	ch->view_abils.cha = table[((int)GET_ROLL(ch, 5) - 1)];
	for (i=0;i<WARRIOR_SUBCLASSES;i++)
	  {
	    if (GET_CLASS(ch) == warrior_subclasses[i]) 
	      {	
		if (ch->view_abils.str == 100)
		  ch->view_abils.str_add = number(0, 100);
		break;
	      }
	  }
	
      }
  
  ch->vaff_abils = ch->view_abils;
  
@


1.20
log
@added SET_SKILL(ch, SKILL_SUMMON_MOUNT, 1000) and
spell_level(SKILL_SUMMON_MOUNT, CLASS_PALADIN, 15, 2)
for both paladin and anti's
@
text
@d2774 1
a2774 1
  if (GET_LEVEL(ch) > 30)
d2779 1
a2779 1
  
@


1.19
log
@removed locate object from spell lists because it's
crashing the mud.
@
text
@d1944 1
d1994 2
d3623 2
d3674 1
@


1.18
log
@fixed a crashbug related to display_class[] and parse_class().  someone
removed some classes from the menu but didn't match everything up.
I replaced the removed classes with blank entries so that do_help
for that class now works on the login menu. SCREAM
--gurlaek
@
text
@d1187 1
a1187 1
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
d1228 1
a1228 1
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
d1277 1
a1277 1
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
d1345 1
a1345 1
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
d1409 1
a1409 1
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
d1476 1
a1476 1
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
d2961 1
a2961 1
  spell_level(SPELL_LOCATE_OBJECT, CLASS_MAGIC_USER, CIRCLE_3, 3);
d3029 1
a3029 1
  spell_level(SPELL_LOCATE_OBJECT, CLASS_PYROMANCER, CIRCLE_3, 3);
d3098 1
a3098 1
  spell_level(SPELL_LOCATE_OBJECT, CLASS_CRYOMANCER, CIRCLE_3, 3);
d3923 1
a3923 1
  spell_level(SPELL_LOCATE_OBJECT, CLASS_NECROMANCER, CIRCLE_5, 5);
d3966 1
a3966 1
  spell_level(SPELL_LOCATE_OBJECT, CLASS_CONJURER, CIRCLE_4, 4);
@


1.17
log
@added preserve to necro's at 2nd circle.
@
text
@d47 4
d69 1
d73 3
a75 1
  "v) &4C&bry&0&4o&7ma&9&bnc&0&7er&0"
d213 1
d218 2
@


1.16
log
@added/moved some spells for conjurers.
Commented out all quest spells per Fingon's
instructions.
@
text
@d1167 1
d3903 1
@


1.15
log
@Altered who gets what spell and at what level, also
bumped up anti/pally hosemanship and set several spells
to skill 0 to make them quest spells.
@
text
@d1190 1
a1190 1
    SET_SKILL(ch, SPELL_SUMMON_DRACOLICH, 0);
d1206 1
d1215 1
a1218 1
    SET_SKILL(ch, SPELL_SUMMON_ELEMENTAL, 1000);
d1241 1
a1241 1
    SET_SKILL(ch, SPELL_SUMMON_DEMON, 1000);
d1243 1
a1243 1
    SET_SKILL(ch, SPELL_SUMMON_GREATER_DEMON, 1000);
d1295 1
a1295 1
    SET_SKILL(ch, SPELL_MAJOR_GLOBE, 0);
d1299 1
a1299 1
    SET_SKILL(ch, SPELL_RELOCATE, 0);
d1302 1
a1302 1
    SET_SKILL(ch, SPELL_METEORSWARM, 0);
d1306 1
a1306 1
    SET_SKILL(ch, SPELL_WIZARD_EYE, 0);
d1368 1
a1368 1
    SET_SKILL(ch, SPELL_RELOCATE, 0);
d1371 1
a1371 1
    SET_SKILL(ch, SPELL_METEORSWARM, 0);
d1374 2
a1375 2
    SET_SKILL(ch, SPELL_SUPERNOVA, 0);
    SET_SKILL(ch, SPELL_WIZARD_EYE, 0);
d1430 1
a1430 1
    SET_SKILL(ch, SPELL_MAJOR_GLOBE, 0);
d1434 1
a1434 1
    SET_SKILL(ch, SPELL_RELOCATE, 0);
d1441 1
a1441 1
    SET_SKILL(ch, SPELL_WIZARD_EYE, 0);
d1443 1
a1443 1
    SET_SKILL(ch, SPELL_ICE_SHARDS, 0);
d1545 1
a1545 1
    SET_SKILL(ch, SPELL_GROUP_HEAL, 0);
d1548 1
a1548 1
    SET_SKILL(ch, SPELL_PLANE_SHIFT, 0);
d1550 1
a1550 1
    SET_SKILL(ch, SPELL_GROUP_ARMOR, 0);
d1552 1
a1552 1
    SET_SKILL(ch, SPELL_RESURRECT, 0);
d1614 2
a1615 2
    SET_SKILL(ch, SPELL_GROUP_ARMOR, 0);
    SET_SKILL(ch, SPELL_GROUP_HEAL, 0);
d1620 2
a1621 2
    SET_SKILL(ch, SPELL_BANISH, 0);
    SET_SKILL(ch, SPELL_PLANE_SHIFT, 0);
d1626 1
a1626 1
    SET_SKILL(ch, SPELL_WORD_OF_COMMAND, 0);
d1629 2
a1630 2
    SET_SKILL(ch, SPELL_RESURRECT, 0);
    SET_SKILL(ch, SPELL_HEAVENS_GATE, 0);
d1689 1
a1689 1
    SET_SKILL(ch, SPELL_HELLFIRE_BRIMSTONE, 0);
d1691 1
a1691 1
    SET_SKILL(ch, SPELL_GROUP_HEAL, 0);
d1696 2
a1697 2
    SET_SKILL(ch, SPELL_BANISH, 0);
    SET_SKILL(ch, SPELL_PLANE_SHIFT, 0);
d1701 1
a1701 1
    SET_SKILL(ch, SPELL_WORD_OF_COMMAND, 0);
d1703 2
a1704 2
    SET_SKILL(ch, SPELL_HELLS_GATE, 0);
    SET_SKILL(ch, SPELL_RESURRECT, 0);
d2039 1
a2039 1
    SET_SKILL(ch, SPELL_BLUR, 0);
d2092 1
a2092 1
    SET_SKILL(ch, SPELL_MOONWELL, 1000);
d2094 1
a2094 1
    SET_SKILL(ch, SPELL_CREEPING_DOOM, 1000);
d3942 1
d3951 1
a3954 1
  spell_level(SPELL_SUMMON_ELEMENTAL, CLASS_CONJURER, CIRCLE_4, 4);
@


1.14
log
@removed mystic, hunter and illusionist from parse_class().
@
text
@d1158 1
a1160 1
    SET_SKILL(ch, SPELL_FARSEE, 1000);
d1162 1
a1164 2
    SET_SKILL(ch, SPELL_INFRAVISION, 1000);
    SET_SKILL(ch, SPELL_INVISIBLE, 1000);
d1166 2
a1167 1
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
d1170 7
d1178 3
a1180 1
    SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
d1182 6
a1187 3
    SET_SKILL(ch, SPELL_ENERGY_DRAIN, 1000);
    SET_SKILL(ch, SPELL_ANIMATE_DEAD, 1000);
    SET_SKILL(ch, SPELL_SUMMON_DRACOLICH, 1000);
d1189 5
a1193 2
    SET_SKILL(ch, SPELL_HASTE, 1000);
    SET_SKILL(ch, SPELL_FARSEE, 1000);
a1199 2
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
a1203 1
    SET_SKILL(ch, SPELL_WALL_OF_STONE, 1000);
a1204 1
    SET_SKILL(ch, SPELL_FARSEE, 1000);
d1206 1
a1207 2
    SET_SKILL(ch, SPELL_INFRAVISION, 1000);
    SET_SKILL(ch, SPELL_INVISIBLE, 1000);
a1208 1
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
d1210 2
d1213 6
d1220 6
a1225 1
    SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
a1226 1
    SET_SKILL(ch, SPELL_COLOR_SPRAY, 1000);
a1227 1
    SET_SKILL(ch, SPELL_ENCHANT_WEAPON, 1000);
a1228 1
    SET_SKILL(ch, SPELL_WALL_OF_FOG, 1000);
d1230 10
a1239 1
    SET_SKILL(ch, SPELL_SUMMON_ELEMENTAL, 1000);
d1241 1
a1242 2
    SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
    SET_SKILL(ch, SPELL_HASTE, 1000);
a1249 2
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
d1253 1
a1253 18
    SET_SKILL(ch, SPELL_REDUCE, 1000);
    SET_SKILL(ch, SPELL_ENLARGE, 1000);
    SET_SKILL(ch, SPELL_MASS_INVIS, 1000);
    SET_SKILL(ch, SPELL_CHAIN_LIGHTNING, 1000);
    SET_SKILL(ch, SPELL_RELOCATE, 1000);
    SET_SKILL(ch, SPELL_DISINTEGRATE, 1000);
    SET_SKILL(ch, SPELL_HARNESS, 1000);
    SET_SKILL(ch, SPELL_MINOR_GLOBE, 1000);
    SET_SKILL(ch, SPELL_MAJOR_GLOBE, 1000);
    SET_SKILL(ch, SPELL_FIRESHIELD, 1000);
    SET_SKILL(ch, SPELL_COLDSHIELD, 1000);
    SET_SKILL(ch, SPELL_TELEPORT, 1000);
    SET_SKILL(ch, SPELL_MINOR_PARALYSIS, 1000);
    SET_SKILL(ch, SPELL_LEVITATE, 1000);
    SET_SKILL(ch, SPELL_WIZARD_EYE, 1000);
    SET_SKILL(ch, SPELL_RAY_OF_ENFEEB, 1000);
    SET_SKILL(ch, SPELL_CONCEALMENT, 1000);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
d1256 2
a1257 1
    SET_SKILL(ch, SPELL_FARSEE, 1000);
d1259 2
d1263 10
d1274 5
a1279 4
    SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
    SET_SKILL(ch, SPELL_STRENGTH, 1000);
    SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
a1280 1
    SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
d1282 3
a1284 2
    SET_SKILL(ch, SPELL_FIREBALL, 1000);
    //	  SET_SKILL(ch, SPELL_CHARM, 1000);
a1286 1
    SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
d1288 22
a1311 2
    SET_SKILL(ch, SPELL_METEORSWARM, 1000);
    SET_SKILL(ch, SPELL_BIGBYS_CLENCHED_FIST, 1000);
a1316 4
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
    SET_SKILL(ch, SPELL_ICE_STORM, 1000);
    SET_SKILL(ch, SPELL_INCENDIARY_NEBULA, 1000);
d1321 4
d1327 4
d1332 3
a1336 14
    SET_SKILL(ch, SPELL_HEATWAVE, 1000);
    SET_SKILL(ch, SPELL_FIRESTORM, 1000);
    SET_SKILL(ch, SPELL_MELT, 1000);
    SET_SKILL(ch, SPELL_CIRCLE_OF_FIRE, 1000);
    SET_SKILL(ch, SPELL_IMMOLATE, 1000);
    SET_SKILL(ch, SPELL_SUPERNOVA, 1000);
    SET_SKILL(ch, SPELL_GREATER_FIREWALK, 1000);
    SET_SKILL(ch, SPELL_NEGATE_HEAT, 1000);
    SET_SKILL(ch, SPELL_FIREWALK, 1000);
    SET_SKILL(ch, SPELL_MASS_INVIS, 1000);
    SET_SKILL(ch, SPELL_RELOCATE, 1000);
    SET_SKILL(ch, SPELL_HARNESS, 1000);
    SET_SKILL(ch, SPELL_MINOR_GLOBE, 1000);
    SET_SKILL(ch, SPELL_MAJOR_GLOBE, 1000);
a1338 1
    SET_SKILL(ch, SPELL_MINOR_PARALYSIS, 1000);
d1340 1
a1340 1
    SET_SKILL(ch, SPELL_WIZARD_EYE, 1000);
d1342 3
a1344 3
    SET_SKILL(ch, SPELL_CONCEALMENT, 1000);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
a1345 3
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
    SET_SKILL(ch, SPELL_INFRAVISION, 1000);
a1346 3
    SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
    SET_SKILL(ch, SPELL_STRENGTH, 1000);
d1349 5
a1353 2
    SET_SKILL(ch, SPELL_FIREBALL, 1000);
    //	  SET_SKILL(ch, SPELL_CHARM, 1000);
d1355 7
d1363 15
a1377 2
    SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
    SET_SKILL(ch, SPELL_HASTE, 1000);
a1379 2
    SET_SKILL(ch, SPELL_METEORSWARM, 1000);

a1384 2
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_INCENDIARY_NEBULA, 1000);
a1386 1
    
d1389 10
d1400 8
d1409 4
d1414 10
d1425 5
d1431 3
a1434 1
    SET_SKILL(ch, SPELL_FLOOD, 1000);
d1436 1
d1439 7
a1445 31
    SET_SKILL(ch, SPELL_DOUSE, 1000);
    SET_SKILL(ch, SPELL_RAIN, 1000);
    SET_SKILL(ch, SPELL_MASS_INVIS, 1000);
    SET_SKILL(ch, SPELL_CHAIN_LIGHTNING, 1000);
    SET_SKILL(ch, SPELL_RELOCATE, 1000);
    SET_SKILL(ch, SPELL_HARNESS, 1000);
    SET_SKILL(ch, SPELL_MINOR_GLOBE, 1000);
    SET_SKILL(ch, SPELL_MAJOR_GLOBE, 1000);
    SET_SKILL(ch, SPELL_COLDSHIELD, 1000);
    SET_SKILL(ch, SPELL_TELEPORT, 1000);
    SET_SKILL(ch, SPELL_MINOR_PARALYSIS, 1000);
    SET_SKILL(ch, SPELL_LEVITATE, 1000);
    SET_SKILL(ch, SPELL_WIZARD_EYE, 1000);
    SET_SKILL(ch, SPELL_RAY_OF_ENFEEB, 1000);
    SET_SKILL(ch, SPELL_CONCEALMENT, 1000);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
    SET_SKILL(ch, SPELL_FARSEE, 1000);
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
    SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
    SET_SKILL(ch, SPELL_INVISIBLE, 1000);
    SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
    SET_SKILL(ch, SPELL_STRENGTH, 1000);
    SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
    SET_SKILL(ch, SPELL_SLEEP, 1000);
    SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
    //	  SET_SKILL(ch, SPELL_CHARM, 1000);
    SET_SKILL(ch, SPELL_FLY, 1000);
    SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
    SET_SKILL(ch, SPELL_HASTE, 1000);
a1452 4
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
    SET_SKILL(ch, SPELL_ICE_STORM, 1000);
    SET_SKILL(ch, SPELL_ICE_SHARDS, 1000);
a1454 1
    
a1493 10
    SET_SKILL(ch, SPELL_PLANE_SHIFT, 1000);
    SET_SKILL(ch, SPELL_UNHOLY_WORD, 1000);
    SET_SKILL(ch, SPELL_HOLY_WORD, 1000);
    SET_SKILL(ch, SPELL_WATERWALK, 1000);
    SET_SKILL(ch, SPELL_CONTINUAL_LIGHT, 1000);
    SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
    SET_SKILL(ch, SPELL_SILENCE, 1000);
    SET_SKILL(ch, SPELL_FLAMESTRIKE, 1000);
    SET_SKILL(ch, SPELL_DESTROY_UNDEAD, 1000);
    SET_SKILL(ch, SPELL_BLESS, 1000);
d1498 3
d1502 2
a1503 1
    SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
d1506 3
a1509 5
    SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_PRESERVE, 1000);
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    SET_SKILL(ch, SPELL_CAUSE_SERIOUS, 1000);
a1511 2
    SET_SKILL(ch, SPELL_BLESS, 1000);
    SET_SKILL(ch, SPELL_BLINDNESS, 1000);
a1512 1
    SET_SKILL(ch, SPELL_GROUP_ARMOR, 1000);
a1513 1
    SET_SKILL(ch, SPELL_SUMMON, 1000);
d1516 3
a1518 1
    SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
d1520 1
d1522 4
a1527 1
    SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
d1529 12
a1540 1
    SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
d1543 11
a1553 6
    SET_SKILL(ch, SPELL_VITALITY, 1000);
   
    SET_SKILL(ch, SKILL_DODGE, 50);
    
    SET_SKILL(ch, SPELL_DARKNESS, 1000);
    
a1557 6
    
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_RESURRECT, 0);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    
a1559 1
    
a1560 25
    SET_SKILL(ch, SPELL_SANE_MIND, 1000);
    SET_SKILL(ch, SPELL_DIVINE_ESSENCE,1000);
    SET_SKILL(ch, SPELL_HEAVENS_GATE, 1000);
    SET_SKILL(ch, SPELL_SPEAK_IN_TONGUES, 1000);
    SET_SKILL(ch, SPELL_ENLIGHTENMENT, 1000);
    SET_SKILL(ch, SPELL_EXORCISM, 1000);
    SET_SKILL(ch, SPELL_GREATER_INVOCATION, 1000);
    SET_SKILL(ch, SPELL_WINGS_OF_HEAVEN, 1000);
    SET_SKILL(ch, SPELL_BANISH, 1000);
    SET_SKILL(ch, SPELL_WORD_OF_COMMAND, 1000);
    SET_SKILL(ch, SPELL_LESSER_INVOCATION, 1000);
    SET_SKILL(ch, SPELL_LESSER_EXORCISM, 1000);
    SET_SKILL(ch, SPELL_DIVINE_RAY, 1000);
    SET_SKILL(ch, SPELL_DIVINE_BOLT, 1000);
    SET_SKILL(ch, SPELL_PRAYER, 1000);
    SET_SKILL(ch, SPELL_ELEMENTAL_WARDING, 1000);
    SET_SKILL(ch, SPELL_CIRCLE_OF_LIGHT, 1000);
    SET_SKILL(ch, SPELL_PLANE_SHIFT, 1000);
    SET_SKILL(ch, SPELL_HOLY_WORD, 1000);
    SET_SKILL(ch, SPELL_WATERWALK, 1000);
    SET_SKILL(ch, SPELL_CONTINUAL_LIGHT, 1000);
    SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
    SET_SKILL(ch, SPELL_SILENCE, 1000);
    SET_SKILL(ch, SPELL_DESTROY_UNDEAD, 1000);
    SET_SKILL(ch, SPELL_BLESS, 1000);
d1565 5
a1573 3
    SET_SKILL(ch, SPELL_VIGORIZE_SERIOUS, 1000);
    SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
a1574 1
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
d1576 2
d1580 6
a1585 1
    SET_SKILL(ch, SPELL_BLESS, 1000);
d1587 4
a1590 3
    SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
    SET_SKILL(ch, SPELL_GROUP_ARMOR, 1000);
    SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
a1591 1
    SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
d1593 4
a1597 1
    SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
d1599 10
a1608 3
    SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
    SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
    SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
d1610 14
d1625 7
a1631 2
    SET_SKILL(ch, SPELL_VITALITY, 1000);
    
a1636 6
    
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_RESURRECT, 1000);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
    
a1638 1
    
a1639 2
    SET_SKILL(ch, SPELL_HELLS_GATE, 1000);
    SET_SKILL(ch, SPELL_DARK_PRESENCE, 1000);
a1640 22
    SET_SKILL(ch, SPELL_DARK_FEAST, 1000);
    SET_SKILL(ch, SPELL_HELL_BOLT, 1000);
    SET_SKILL(ch, SPELL_DISEASE, 1000);
    SET_SKILL(ch, SPELL_INSANITY, 1000);
    SET_SKILL(ch, SPELL_SANE_MIND, 1000);
    SET_SKILL(ch, SPELL_DEMONIC_ASPECT, 1000);
    SET_SKILL(ch, SPELL_HELLFIRE_BRIMSTONE, 1000);
    SET_SKILL(ch, SPELL_STYGIAN_ERUPTION, 1000);
    SET_SKILL(ch, SPELL_DEMONIC_MUTATION, 1000);
    SET_SKILL(ch, SPELL_SPEAK_IN_TONGUES, 1000);
    SET_SKILL(ch, SPELL_GREATER_INVOCATION, 1000);
    SET_SKILL(ch, SPELL_WINGS_OF_HELL, 1000);
    SET_SKILL(ch, SPELL_BANISH, 1000);
    SET_SKILL(ch, SPELL_WORD_OF_COMMAND, 1000);
    SET_SKILL(ch, SPELL_LESSER_INVOCATION, 1000);
    SET_SKILL(ch, SPELL_ELEMENTAL_WARDING, 1000);
    SET_SKILL(ch, SPELL_PLANE_SHIFT, 1000);
    SET_SKILL(ch, SPELL_UNHOLY_WORD, 1000);
    SET_SKILL(ch, SPELL_WATERWALK, 1000);
    SET_SKILL(ch, SPELL_DARKNESS, 1000);
    SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
    SET_SKILL(ch, SPELL_SILENCE, 1000);
d1642 3
a1648 3
    SET_SKILL(ch, SPELL_VIGORIZE_SERIOUS, 1000);
    SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
    SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
d1650 2
a1651 1
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
d1653 2
d1657 4
a1661 1
    SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
d1663 6
a1668 1
    SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
d1670 2
a1672 1
    SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
d1674 12
a1685 3
    SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
    SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
    SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
d1687 12
d1700 4
a1703 1
    SET_SKILL(ch, SPELL_VITALITY, 1000);
a1709 6

    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_RESURRECT, 1000);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);

a1711 1
    
d1928 2
a1929 2
    SET_SKILL(ch, SKILL_RIDING, 250);
    SET_SKILL(ch, SKILL_MOUNT, 250);
d1933 3
a1936 3
    SET_SKILL(ch, SPELL_HOLY_WORD, 1000);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);    
    SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
d1938 1
d1941 3
d1945 2
a1946 1
    SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
a1947 2
    SET_SKILL(ch, SPELL_BLESS, 1000);
    SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
d1949 5
a1953 1
    SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
d1955 4
a1958 2
    SET_SKILL(ch, SPELL_BLUR, 1000);
    SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
d1961 1
d1974 8
a1981 7

    SET_SKILL(ch, SPELL_UNHOLY_WORD, 1000);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    SET_SKILL(ch, SPELL_CURSE, 1000);
    SET_SKILL(ch, SPELL_POISON, 1000);
    SET_SKILL(ch, SPELL_VAMPIRIC_BREATH, 1000);
    
a1985 2
    SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
    SET_SKILL(ch, SPELL_BLINDNESS, 1000);
d1987 3
d1991 3
a1993 1
    SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
d1996 3
a1998 8
    
    SET_SKILL(ch, SKILL_DODGE,200);
    SET_SKILL(ch, SKILL_PARRY, 200);
    SET_SKILL(ch, SKILL_RIDING, 150);
    SET_SKILL(ch, SKILL_MOUNT, 150);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_RIPOST, 250);
    SET_SKILL(ch, SKILL_BANDAGE, 150);
a2018 2
    SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_ARMOR, 1000);
a2019 1
    SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
d2021 3
d2025 3
a2028 5
    SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
    SET_SKILL(ch, SPELL_STONE_SKIN, 1000);   
    SET_SKILL(ch, SPELL_HASTE, 1000);
    SET_SKILL(ch, SPELL_BLUR, 1000);
    SET_SKILL(ch, SPELL_BARKSKIN, 1000);
d2030 1
d2033 1
d2036 1
d2038 1
d2041 5
a2045 13
    SET_SKILL(ch, SPELL_WANDERING_WOODS, 1000);
    SET_SKILL(ch, SPELL_SUNRAY, 1000);
    SET_SKILL(ch, SPELL_URBAN_RENEWAL, 1000);
    SET_SKILL(ch, SPELL_ARMOR_OF_GAIA, 1000);
    SET_SKILL(ch, SPELL_CONTINUAL_LIGHT, 1000);
    SET_SKILL(ch, SPELL_PLANE_SHIFT, 1000);
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    SET_SKILL(ch, SPELL_NOURISHMENT, 1000);
    SET_SKILL(ch, SPELL_GAIAS_CLOAK, 1000);
    SET_SKILL(ch, SPELL_NATURES_EMBRACE, 1000);
    SET_SKILL(ch, SPELL_ENTANGLE, 1000);
    SET_SKILL(ch, SPELL_INVIGORATE, 1000);
    SET_SKILL(ch, SPELL_CREATE_SPRING, 1000);
d2047 1
a2047 1
    SET_SKILL(ch, SPELL_VIGORIZE_LIGHT, 1000);
d2049 5
a2055 2
    SET_SKILL(ch, SPELL_BARKSKIN, 1000);
    SET_SKILL(ch, SPELL_NIGHT_VISION, 1000);
d2057 2
a2058 5
    SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
    SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
    SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
    SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
    SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
a2059 2
    SET_SKILL(ch, SPELL_BLESS, 1000);
    SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
a2061 1
    SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
d2064 2
a2065 4
    SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
    SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
    SET_SKILL(ch, SPELL_CALL_LIGHTNING, 1000);
    SET_SKILL(ch, SPELL_HEAL, 1000);
d2069 3
a2074 1
    SET_SKILL(ch, SPELL_CREEPING_DOOM, 1000);
d2076 15
a2090 1
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
d2093 2
d2936 3
a2938 21
  /* MAGES */  
  spell_level(SKILL_DOUSE, CLASS_MAGIC_USER, 1, 2);
  spell_level(SPELL_REDUCE, CLASS_MAGIC_USER, CIRCLE_11, 11);
  spell_level(SPELL_ENLARGE, CLASS_MAGIC_USER, CIRCLE_11, 11);
  spell_level(SKILL_FIRST_AID, CLASS_MAGIC_USER, 1, 2);
  spell_level(SPELL_CHAIN_LIGHTNING, CLASS_MAGIC_USER, CIRCLE_8, 8);
  spell_level(SPELL_RELOCATE, CLASS_MAGIC_USER, CIRCLE_9, 9);
  spell_level(SPELL_MASS_INVIS, CLASS_MAGIC_USER, CIRCLE_9, 9);
  spell_level(SPELL_DISINTEGRATE, CLASS_MAGIC_USER, CIRCLE_9, 9);
  spell_level(SPELL_HARNESS, CLASS_MAGIC_USER, CIRCLE_8, 8);
  spell_level(SPELL_MINOR_GLOBE, CLASS_MAGIC_USER, CIRCLE_6, 6);
  spell_level(SPELL_MAJOR_GLOBE, CLASS_MAGIC_USER, CIRCLE_8, 8);
  spell_level(SPELL_FIRESHIELD, CLASS_MAGIC_USER, CIRCLE_5, 5);
  spell_level(SPELL_COLDSHIELD, CLASS_MAGIC_USER, CIRCLE_6, 6);
  spell_level(SPELL_TELEPORT, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_MINOR_PARALYSIS, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_WIZARD_EYE, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_RAY_OF_ENFEEB, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_LEVITATE, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_CONCEALMENT, CLASS_MAGIC_USER, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_MAGIC_USER, CIRCLE_3, 3);
a2939 1
  spell_level(SPELL_FARSEE, CLASS_MAGIC_USER, CIRCLE_5, 5);
a2940 1
  spell_level(SPELL_DETECT_INVIS, CLASS_MAGIC_USER, CIRCLE_8, 8);
d2942 2
d2945 4
a2948 3
  spell_level(SPELL_INFRAVISION, CLASS_MAGIC_USER, CIRCLE_4, 4);
  spell_level(SPELL_INVISIBLE, CLASS_MAGIC_USER, CIRCLE_7, 7);
  spell_level(SPELL_BURNING_HANDS, CLASS_MAGIC_USER, CIRCLE_1, 1);
a2949 1
  spell_level(SPELL_STRENGTH, CLASS_MAGIC_USER, CIRCLE_2, 2);
d2951 6
a2956 1
  spell_level(SPELL_SLEEP, CLASS_MAGIC_USER, CIRCLE_4, 4);
d2958 5
d2964 5
a2969 4
//  spell_level(SPELL_CHARM, CLASS_MAGIC_USER, 31, 2);
  spell_level(SPELL_STONE_SKIN, CLASS_MAGIC_USER, CIRCLE_9, 9);
  spell_level(SPELL_FLY, CLASS_MAGIC_USER, CIRCLE_8, 8);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_MAGIC_USER, CIRCLE_5, 5);
d2971 23
a2994 2
  spell_level(SPELL_METEORSWARM, CLASS_MAGIC_USER, CIRCLE_10, 10);
  spell_level(SPELL_BIGBYS_CLENCHED_FIST, CLASS_MAGIC_USER, CIRCLE_7, 7);
a2999 3
  spell_level(SPELL_COMPREHEND_LANG, CLASS_MAGIC_USER, CIRCLE_7, 7);
  spell_level(SPELL_CONE_OF_COLD, CLASS_MAGIC_USER, CIRCLE_5, 5);
  spell_level(SPELL_ICE_STORM, CLASS_MAGIC_USER, CIRCLE_6, 6);
d3001 2
d3005 4
a3008 3
  spell_level(SKILL_FIRST_AID, CLASS_PYROMANCER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_PYROMANCER, 1, 2);
  spell_level(SPELL_RELOCATE, CLASS_PYROMANCER, CIRCLE_9, 9);
d3010 9
a3018 2
  spell_level(SPELL_MAGIC_TORCH, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_SMOKE, CLASS_PYROMANCER, CIRCLE_3, 3);
d3021 7
d3029 7
d3037 4
d3042 8
d3052 2
a3053 1
  spell_level(SPELL_SUPERNOVA, CLASS_PYROMANCER, CIRCLE_11, 11);
d3056 8
a3063 30
  spell_level(SPELL_FIREWALK, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_MASS_INVIS, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_HARNESS, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_MINOR_GLOBE, CLASS_PYROMANCER, CIRCLE_6, 6);
  spell_level(SPELL_MAJOR_GLOBE, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_FIRESHIELD, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_TELEPORT, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_MINOR_PARALYSIS, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_WIZARD_EYE, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_RAY_OF_ENFEEB, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_LEVITATE, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_CONCEALMENT, CLASS_PYROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_PYROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_MINOR_CREATION, CLASS_PYROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_FARSEE, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_DETECT_INVIS, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_DETECT_MAGIC, CLASS_PYROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_INFRAVISION, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_INVISIBLE, CLASS_PYROMANCER, CIRCLE_7, 7);
  spell_level(SPELL_BURNING_HANDS, CLASS_PYROMANCER, CIRCLE_1, 1);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_PYROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_STRENGTH, CLASS_PYROMANCER, CIRCLE_2, 2);
  spell_level(SPELL_SLEEP, CLASS_PYROMANCER, CIRCLE_4, 4);
  spell_level(SPELL_COLOR_SPRAY, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_FIREBALL, CLASS_PYROMANCER, CIRCLE_4, 4);
//  spell_level(SPELL_CHARM, CLASS_PYROMANCER, 31, 2);
  spell_level(SPELL_STONE_SKIN, CLASS_PYROMANCER, CIRCLE_9, 9);
  spell_level(SPELL_FLY, CLASS_PYROMANCER, CIRCLE_8, 8);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_PYROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_HASTE, CLASS_PYROMANCER, CIRCLE_6, 6);
a3064 1
  spell_level(SPELL_METEORSWARM, CLASS_PYROMANCER, CIRCLE_10, 10);
a3069 1
  spell_level(SPELL_COMPREHEND_LANG, CLASS_PYROMANCER, CIRCLE_7, 7);
d3073 1
a3073 2
  spell_level(SKILL_FIRST_AID, CLASS_CRYOMANCER, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_CRYOMANCER, 1, 2);
d3075 8
d3084 6
d3091 6
d3098 13
d3112 2
d3115 7
a3122 1
  spell_level(SPELL_FLOOD, CLASS_CRYOMANCER, CIRCLE_11, 11);
d3124 1
d3127 5
a3131 32
  spell_level(SPELL_DOUSE, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_RAIN, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_WALL_OF_FOG, CLASS_CRYOMANCER, CIRCLE_7, 7);
  spell_level(SPELL_CHAIN_LIGHTNING, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_RELOCATE, CLASS_CRYOMANCER, CIRCLE_9, 9);
  spell_level(SPELL_MASS_INVIS, CLASS_CRYOMANCER, CIRCLE_9, 9);
  spell_level(SPELL_HARNESS, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_MINOR_GLOBE, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_MAJOR_GLOBE, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_COLDSHIELD, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_TELEPORT, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_MINOR_PARALYSIS, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_WIZARD_EYE, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_RAY_OF_ENFEEB, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_LEVITATE, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_CONCEALMENT, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_MINOR_CREATION, CLASS_CRYOMANCER, CIRCLE_1, 1);
  spell_level(SPELL_FARSEE, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_DETECT_INVIS, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_DETECT_MAGIC, CLASS_CRYOMANCER, CIRCLE_1, 1);
  spell_level(SPELL_CHILL_TOUCH, CLASS_CRYOMANCER, CIRCLE_2, 2);
  spell_level(SPELL_INVISIBLE, CLASS_CRYOMANCER, CIRCLE_7, 7);
  spell_level(SPELL_LOCATE_OBJECT, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_STRENGTH, CLASS_CRYOMANCER, CIRCLE_2, 2);
  spell_level(SPELL_SHOCKING_GRASP, CLASS_CRYOMANCER, CIRCLE_3, 3);
  spell_level(SPELL_SLEEP, CLASS_CRYOMANCER, CIRCLE_4, 4);
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_CRYOMANCER, CIRCLE_4, 4);
//  spell_level(SPELL_CHARM, CLASS_MAGIC_USER, 31, 2);
  spell_level(SPELL_FLY, CLASS_CRYOMANCER, CIRCLE_8, 8);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_HASTE, CLASS_CRYOMANCER, CIRCLE_6, 6);
a3137 4
  spell_level(SPELL_COMPREHEND_LANG, CLASS_CRYOMANCER, CIRCLE_7, 7);
  spell_level(SPELL_CONE_OF_COLD, CLASS_CRYOMANCER, CIRCLE_5, 5);
  spell_level(SPELL_ICE_STORM, CLASS_CRYOMANCER, CIRCLE_6, 6);
  spell_level(SPELL_ICE_SHARDS, CLASS_CRYOMANCER, CIRCLE_11, 11);
d3139 2
d3182 1
a3182 2
  spell_level(SKILL_FIRST_AID, CLASS_CLERIC, 1, 2);
  spell_level(SKILL_DOUSE, CLASS_CLERIC, 1, 2);
a3183 10
  spell_level(SPELL_DISPEL_MAGIC, CLASS_CLERIC, CIRCLE_8, 8);
  spell_level(SPELL_PLANE_SHIFT, CLASS_CLERIC, CIRCLE_9, 9);
  spell_level(SPELL_UNHOLY_WORD, CLASS_CLERIC, CIRCLE_9, 9);
  spell_level(SPELL_HOLY_WORD, CLASS_CLERIC, CIRCLE_9, 9);
  spell_level(SPELL_WATERWALK, CLASS_CLERIC, CIRCLE_7, 7);  
  spell_level(SPELL_CONTINUAL_LIGHT, CLASS_CLERIC, CIRCLE_6, 6);
  spell_level(SPELL_SOULSHIELD, CLASS_CLERIC, CIRCLE_5, 5);
  spell_level(SPELL_SILENCE, CLASS_CLERIC, CIRCLE_6, 6);
  spell_level(SPELL_FLAMESTRIKE, CLASS_CLERIC, CIRCLE_6, 6);
  spell_level(SPELL_DESTROY_UNDEAD, CLASS_CLERIC, CIRCLE_5, 5);
d3188 2
a3191 2
  spell_level(SPELL_VIGORIZE_SERIOUS, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_VIGORIZE_CRITIC, CLASS_CLERIC, CIRCLE_4, 4);
a3193 2
  spell_level(SPELL_CAUSE_CRITIC, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_CREATE_WATER, CLASS_CLERIC, CIRCLE_1, 1);
d3196 2
d3199 2
a3200 2
  spell_level(SPELL_BLESS, CLASS_CLERIC, CIRCLE_2, 2);
  spell_level(SPELL_BLINDNESS, CLASS_CLERIC, CIRCLE_4, 4);
a3201 1
  spell_level(SPELL_GROUP_ARMOR, CLASS_CLERIC, CIRCLE_10, 10);
d3203 5
a3208 3
  spell_level(SPELL_REMOVE_POISON, CLASS_CLERIC, CIRCLE_3, 3);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_CLERIC, CIRCLE_6, 6);
  spell_level(SPELL_EARTHQUAKE, CLASS_CLERIC, CIRCLE_5, 5);
d3211 3
d3216 3
a3218 1
  spell_level(SPELL_GROUP_HEAL, CLASS_CLERIC, CIRCLE_8, 8);
d3220 10
a3229 1
  spell_level(SPELL_SENSE_LIFE, CLASS_CLERIC, CIRCLE_4, 4);
d3231 13
a3243 2
  spell_level(SPELL_FULL_HARM, CLASS_CLERIC, CIRCLE_10, 10);
  spell_level(SPELL_VITALITY, CLASS_CLERIC, CIRCLE_5, 5);
a3244 1
  spell_level(SPELL_DARKNESS, CLASS_CLERIC, CIRCLE_6, 6);
a3248 2
  spell_level(SPELL_COMPREHEND_LANG, CLASS_CLERIC, CIRCLE_4, 4);
  spell_level(SPELL_RESURRECT, CLASS_CLERIC, CIRCLE_10, 10);
d3252 1
a3252 18
  spell_level(SKILL_FIRST_AID, CLASS_PRIEST, 1, 2);
  spell_level(SPELL_DIVINE_ESSENCE, CLASS_PRIEST, CIRCLE_10, 10);
  spell_level(SPELL_HEAVENS_GATE, CLASS_PRIEST, CIRCLE_11, 11);
  spell_level(SPELL_SPEAK_IN_TONGUES, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_ENLIGHTENMENT, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_EXORCISM, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_GREATER_INVOCATION, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_WINGS_OF_HEAVEN, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_BANISH, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_WORD_OF_COMMAND, CLASS_PRIEST, CIRCLE_10, 10);
  spell_level(SPELL_LESSER_EXORCISM, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_LESSER_INVOCATION, CLASS_PRIEST, CIRCLE_7, 7);
  spell_level(SPELL_DIVINE_RAY, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_DIVINE_BOLT, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_PRAYER, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_ELEMENTAL_WARDING, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_CIRCLE_OF_LIGHT, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SKILL_DOUSE, CLASS_PRIEST, 1, 2);
a3253 8
  spell_level(SPELL_DISPEL_MAGIC, CLASS_PRIEST, CIRCLE_8, 8);
  spell_level(SPELL_PLANE_SHIFT, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_HOLY_WORD, CLASS_PRIEST, CIRCLE_9, 9);
  spell_level(SPELL_WATERWALK, CLASS_PRIEST, CIRCLE_7, 7);  
  spell_level(SPELL_CONTINUAL_LIGHT, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_SOULSHIELD, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_SILENCE, CLASS_PRIEST, CIRCLE_6, 6);
  spell_level(SPELL_DESTROY_UNDEAD, CLASS_PRIEST, CIRCLE_5, 5);
d3258 4
d3264 1
a3264 2
  spell_level(SPELL_VIGORIZE_SERIOUS, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_VIGORIZE_CRITIC, CLASS_PRIEST, CIRCLE_4, 4);
d3267 4
a3271 3
  spell_level(SPELL_CREATE_WATER, CLASS_PRIEST, CIRCLE_1, 1);
  spell_level(SPELL_DETECT_POISON, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_DETECT_ALIGN, CLASS_PRIEST, CIRCLE_2, 2);
a3272 2
  spell_level(SPELL_BLESS, CLASS_PRIEST, CIRCLE_2, 2);
  spell_level(SPELL_BLINDNESS, CLASS_PRIEST, CIRCLE_4, 4);
a3273 1
  spell_level(SPELL_GROUP_ARMOR, CLASS_PRIEST, CIRCLE_8, 8);
d3275 5
d3281 8
a3288 2
  spell_level(SPELL_REMOVE_POISON, CLASS_PRIEST, CIRCLE_3, 3);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_PRIEST, CIRCLE_6, 6);
d3290 17
a3306 3
  spell_level(SPELL_DISPEL_EVIL, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_HEAL, CLASS_PRIEST, CIRCLE_5, 5);
  spell_level(SPELL_SANE_MIND, CLASS_PRIEST, CIRCLE_5, 5);
d3308 9
a3316 3
  spell_level(SPELL_REMOVE_CURSE, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_SENSE_LIFE, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_FULL_HEAL, CLASS_PRIEST, CIRCLE_7, 7);
d3318 5
a3322 1
  spell_level(SPELL_VITALITY, CLASS_PRIEST, CIRCLE_5, 5);
a3327 2
  spell_level(SPELL_COMPREHEND_LANG, CLASS_PRIEST, CIRCLE_4, 4);
  spell_level(SPELL_RESURRECT, CLASS_PRIEST, CIRCLE_10, 10);
d3329 2
d3333 1
a3333 3
  spell_level(SKILL_FIRST_AID, CLASS_DIABOLIST, 1, 2);
  spell_level(SPELL_HELLS_GATE, CLASS_DIABOLIST, CIRCLE_11, 11);
  spell_level(SPELL_DARK_PRESENCE, CLASS_DIABOLIST, CIRCLE_2, 2);
a3334 17
  spell_level(SPELL_DARK_FEAST, CLASS_DIABOLIST, CIRCLE_2, 2);
  spell_level(SPELL_HELL_BOLT, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_DISEASE, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_INSANITY, CLASS_DIABOLIST, CIRCLE_7, 7);
  spell_level(SPELL_SANE_MIND, CLASS_DIABOLIST, CIRCLE_6, 6);
  spell_level(SPELL_DEMONIC_ASPECT, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_HELLFIRE_BRIMSTONE, CLASS_DIABOLIST, CIRCLE_8, 8);
  spell_level(SPELL_STYGIAN_ERUPTION, CLASS_DIABOLIST, CIRCLE_6, 6);
  spell_level(SPELL_DEMONIC_MUTATION, CLASS_DIABOLIST, CIRCLE_7, 7);
  spell_level(SPELL_SPEAK_IN_TONGUES, CLASS_DIABOLIST, CIRCLE_8, 8);
  spell_level(SPELL_GREATER_INVOCATION, CLASS_DIABOLIST, CIRCLE_9, 9);
  spell_level(SPELL_WINGS_OF_HELL, CLASS_DIABOLIST, CIRCLE_9, 9);
  spell_level(SPELL_BANISH, CLASS_DIABOLIST, CIRCLE_9, 9);
  spell_level(SPELL_WORD_OF_COMMAND, CLASS_DIABOLIST, CIRCLE_10, 10);
  spell_level(SPELL_LESSER_INVOCATION, CLASS_DIABOLIST, CIRCLE_7, 7);
  spell_level(SPELL_ELEMENTAL_WARDING, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SKILL_DOUSE, CLASS_DIABOLIST, 1, 2);
a3335 7
  spell_level(SPELL_DISPEL_MAGIC, CLASS_DIABOLIST, CIRCLE_8, 8);
  spell_level(SPELL_PLANE_SHIFT, CLASS_DIABOLIST, CIRCLE_9, 9);
  spell_level(SPELL_UNHOLY_WORD, CLASS_DIABOLIST, CIRCLE_9, 9);
  spell_level(SPELL_WATERWALK, CLASS_DIABOLIST, CIRCLE_7, 7);  
  spell_level(SPELL_DARKNESS, CLASS_DIABOLIST, CIRCLE_6, 6);
  spell_level(SPELL_SOULSHIELD, CLASS_DIABOLIST, CIRCLE_5, 5);
  spell_level(SPELL_SILENCE, CLASS_DIABOLIST, CIRCLE_6, 6);
d3338 1
d3341 2
a3342 2
  spell_level(SPELL_VIGORIZE_SERIOUS, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_VIGORIZE_CRITIC, CLASS_DIABOLIST, CIRCLE_4, 4);
a3344 1
  spell_level(SPELL_CAUSE_CRITIC, CLASS_DIABOLIST, CIRCLE_3, 3);
d3347 4
d3352 7
a3359 1
  spell_level(SPELL_CURE_CRITIC, CLASS_DIABOLIST, CIRCLE_3, 3);
a3360 3
  spell_level(SPELL_REMOVE_POISON, CLASS_DIABOLIST, CIRCLE_3, 3);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_DIABOLIST, CIRCLE_6, 6);
  spell_level(SPELL_EARTHQUAKE, CLASS_DIABOLIST, CIRCLE_5, 5);
a3361 2
  spell_level(SPELL_HEAL, CLASS_DIABOLIST, CIRCLE_5, 5);
  spell_level(SPELL_GROUP_HEAL, CLASS_DIABOLIST, CIRCLE_8, 8);
d3364 17
d3382 13
d3396 5
a3400 1
  spell_level(SPELL_VITALITY, CLASS_DIABOLIST, CIRCLE_5, 5);
a3405 2
  spell_level(SPELL_COMPREHEND_LANG, CLASS_DIABOLIST, CIRCLE_4, 4);
  spell_level(SPELL_RESURRECT, CLASS_DIABOLIST, CIRCLE_10, 10);
d3407 1
d3612 1
d3614 1
d3617 1
d3620 1
d3623 1
d3626 1
d3628 1
d3630 1
d3632 1
a3633 1
  
a3655 1
 
d3659 2
a3660 2
  spell_level(SPELL_DETECT_ALIGN, CLASS_ANTI_PALADIN, CIRCLE_1, 1);
  spell_level(SPELL_VAMPIRIC_BREATH, CLASS_ANTI_PALADIN, CIRCLE_10, 10);
d3682 2
d3688 1
d3707 2
a3709 2
  spell_level(SPELL_CURE_LIGHT, CLASS_RANGER, CIRCLE_2, 2);
  spell_level(SPELL_ARMOR, CLASS_RANGER, CIRCLE_2, 2);
a3710 1
  spell_level(SPELL_CURE_CRITIC, CLASS_RANGER, CIRCLE_6, 6);
d3712 3
d3716 3
d3720 3
d3724 4
a3727 3
  spell_level(SKILL_SPRINGLEAP, CLASS_RANGER, 10, 2);
  spell_level(SPELL_STONE_SKIN, CLASS_RANGER, CIRCLE_10, 10);
  spell_level(SPELL_HASTE, CLASS_RANGER, 41, 2);
a3728 3
  spell_level(SPELL_BARKSKIN, CLASS_RANGER, CIRCLE_8, 8);
  spell_level(SPELL_COMPREHEND_LANG, CLASS_RANGER, CIRCLE_7, 7);
 
a3729 1
  
d3736 1
a3736 1
  spell_level(SKILL_DODGE, CLASS_DRUID, 10, 2);
a3741 13
  spell_level(SPELL_WANDERING_WOODS, CLASS_DRUID, CIRCLE_10, 10);
  spell_level(SPELL_SUNRAY, CLASS_DRUID, CIRCLE_9, 9);
  spell_level(SPELL_ARMOR_OF_GAIA, CLASS_DRUID, CIRCLE_9, 9);
  spell_level(SPELL_URBAN_RENEWAL, CLASS_DRUID, CIRCLE_8, 8);
  spell_level(SPELL_CONTINUAL_LIGHT, CLASS_DRUID, CIRCLE_7, 7);
  spell_level(SPELL_DISPEL_MAGIC, CLASS_DRUID, CIRCLE_8, 8);
  spell_level(SPELL_PLANE_SHIFT, CLASS_DRUID, CIRCLE_9, 9);
  spell_level(SPELL_NOURISHMENT, CLASS_DRUID, CIRCLE_5, 5);
  spell_level(SPELL_GAIAS_CLOAK, CLASS_DRUID, CIRCLE_7, 7);
  spell_level(SPELL_NATURES_EMBRACE, CLASS_DRUID, CIRCLE_8, 8);
  spell_level(SPELL_ENTANGLE, CLASS_DRUID, CIRCLE_8, 8);
  spell_level(SPELL_INVIGORATE, CLASS_DRUID, CIRCLE_9, 9);
  spell_level(SPELL_CREATE_SPRING, CLASS_DRUID, CIRCLE_4, 4);
d3744 4
a3748 2
  spell_level(SPELL_VIGORIZE_CRITIC, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_CURE_SERIOUS, CLASS_DRUID, CIRCLE_3, 3);
a3749 2
  spell_level(SPELL_BARKSKIN, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_WRITHING_WEEDS, CLASS_DRUID, CIRCLE_3, 3);
a3750 2
  spell_level(SPELL_CREATE_FOOD, CLASS_DRUID, CIRCLE_1, 1);
  spell_level(SPELL_CREATE_WATER, CLASS_DRUID, CIRCLE_1, 1);
d3753 6
a3758 3
  spell_level(SPELL_CURE_BLIND, CLASS_DRUID, CIRCLE_4, 4);
  spell_level(SPELL_BLESS, CLASS_DRUID, CIRCLE_2, 2);
  spell_level(SPELL_PROT_FROM_EVIL, CLASS_DRUID, CIRCLE_3, 3);
d3761 2
a3762 2
  spell_level(SPELL_REMOVE_POISON, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_WORD_OF_RECALL, CLASS_DRUID, CIRCLE_6, 6);
d3764 2
a3765 4
  spell_level(SPELL_DISPEL_EVIL, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_DISPEL_GOOD, CLASS_DRUID, CIRCLE_3, 3);
  spell_level(SPELL_CALL_LIGHTNING, CLASS_DRUID, CIRCLE_7, 7);
  spell_level(SPELL_HEAL, CLASS_DRUID, CIRCLE_6, 6);
d3769 3
a3771 1
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_DRUID, CIRCLE_6, 6);
d3774 1
a3774 1
  spell_level(SPELL_CREEPING_DOOM, CLASS_DRUID, CIRCLE_10, 10);
d3776 15
a3790 1
  spell_level(SPELL_COMPREHEND_LANG, CLASS_DRUID, CIRCLE_4, 4);
d3793 3
a3894 1
  spell_level(SPELL_DETECT_INVIS, CLASS_NECROMANCER, CIRCLE_6, 6);
d3896 1
a3897 3
  spell_level(SPELL_INFRAVISION, CLASS_NECROMANCER, CIRCLE_5, 5);
  spell_level(SPELL_INVISIBLE, CLASS_NECROMANCER, CIRCLE_7, 7);
  /* spell_level(SPELL_ARMOR, CLASS_MAGIC_USER, 1);*/
d3899 3
a3901 1
  spell_level(SPELL_LOCATE_OBJECT, CLASS_NECROMANCER, CIRCLE_5, 5);
d3904 7
d3912 3
a3914 2
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_NECROMANCER, CIRCLE_4, 4);
  /* spell_level(SPELL_BLINDNESS, CLASS_MAGIC_USER, 16);*/
d3916 2
a3917 9
  /* spell_level(SPELL_COLOR_SPRAY, CLASS_MAGIC_USER, 19);*/
  spell_level(SPELL_ENERGY_DRAIN, CLASS_NECROMANCER, CIRCLE_5, 5);
  /* spell_level(SPELL_CURSE, CLASS_MAGIC_USER, 16);*/
  /* spell_level(SPELL_FIREBALL, CLASS_MAGIC_USER, 26);
     spell_level(SPELL_CHARM, CLASS_MAGIC_USER, 31);*/
  /* spell_level(SPELL_ENCHANT_WEAPON, CLASS_MAGIC_USER, 41);*/
  spell_level(SPELL_ANIMATE_DEAD, CLASS_NECROMANCER, CIRCLE_3, 3);
  spell_level(SPELL_SUMMON_DRACOLICH, CLASS_NECROMANCER, CIRCLE_10, 10);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_NECROMANCER, CIRCLE_8, 8);
d3921 6
a3926 1
  spell_level(SPELL_CONE_OF_COLD, CLASS_NECROMANCER, CIRCLE_5, 5);
a3938 1
  spell_level(SPELL_WALL_OF_STONE, CLASS_CONJURER, CIRCLE_5, 5);
a3939 1
  spell_level(SPELL_DETECT_INVIS, CLASS_CONJURER, CIRCLE_6, 6);
d3941 1
a3942 3
  spell_level(SPELL_INFRAVISION, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_INVISIBLE, CLASS_CONJURER, CIRCLE_7, 7);
  /* spell_level(SPELL_ARMOR, CLASS_MAGIC_USER, 1);*/
a3943 1
  spell_level(SPELL_LOCATE_OBJECT, CLASS_CONJURER, CIRCLE_5, 5);
d3945 2
d3948 8
d3957 5
a3961 2
  spell_level(SPELL_LIGHTNING_BOLT, CLASS_CONJURER, CIRCLE_4, 4);
  /* spell_level(SPELL_BLINDNESS, CLASS_MAGIC_USER, 16);*/
a3962 3
  spell_level(SPELL_COLOR_SPRAY, CLASS_CONJURER, CIRCLE_5, 5);
  /*spell_level(SPELL_ENERGY_DRAIN, CLASS_MAGIC_USER, 21);*/
  /*  spell_level(SPELL_CURSE, CLASS_MAGIC_USER, 16);*/
a3963 4
  /*spell_level(SPELL_CHARM, CLASS_MAGIC_USER, 31);*/
  spell_level(SPELL_ENCHANT_WEAPON, CLASS_CONJURER, CIRCLE_9, 9);
  spell_level(SPELL_STONE_SKIN, CLASS_CONJURER, CIRCLE_6, 6);
  spell_level(SPELL_WALL_OF_FOG, CLASS_CONJURER, CIRCLE_5, 5);
d3965 2
a3966 4
  spell_level(SPELL_SUMMON_ELEMENTAL, CLASS_CONJURER, CIRCLE_5, 5);
  spell_level(SPELL_SUMMON_DEMON, CLASS_CONJURER, CIRCLE_10, 10);
  spell_level(SPELL_SUMMON_GREATER_DEMON, CLASS_CONJURER, CIRCLE_11, 11);
  spell_level(SPELL_DIMENSION_DOOR, CLASS_CONJURER, CIRCLE_8, 8);
a3969 1
  spell_level(SPELL_CONE_OF_COLD, CLASS_CONJURER, CIRCLE_5, 5);
d3971 8
a3978 1
  
@


1.13
log
@Ok, In line 17 I added something to make Fingon crazy
Ok, seriously I did rearrange and remove/add skills from
the various classes.  The purpose of this was to verify
the sound arrangement of the skills and how they were
dispursed among the classes.  This was accomplished by
altering SET_SKILL and spell_level fields where applicable.
@
text
@a64 1
  "r) &7&bM&0&7ys&9&bti&7c&0",
d68 1
a68 3
  "v) &4C&bry&0&4o&7ma&9&bnc&0&7er&0",
  "w) &4I&5l&4l&5u&4s&5i&4o&5n&4i&5s&4t&0",
  "x) &9&bHun&0&2te&9&br&0"
a205 1
  case 'r': class = CLASS_MYSTIC    ; break;
a209 2
  case 'w': class = CLASS_ILLUSIONIST; break;
  case 'x': class = CLASS_HUNTER     ; break;
@


1.12
log
@In class.c added a new line before the fiery mud class explanation
in config.c added the variable for name explanations and added the
text for the variable
in interpreter.c added the con_state stuff, whatever that was and
added the CON_NAME_CHECK affirmation section to the creation menu
loop or nanny.
In structs.h added the CON_NAME_CHECK define..
I also drove Jimmy absolutely insane with the deail in information
I put into our change control system.
lala
@
text
@d1222 1
d1273 1
d1334 1
d1337 1
d1391 1
d1489 1
d1491 1
d1493 1
d1498 1
d1500 1
a1500 1
    SET_SKILL(ch, SPELL_RESURRECT, 1000);
d1503 1
d1566 1
d1572 1
d1577 1
d1634 1
d1640 1
d1645 1
d1739 1
a1739 1
    SET_SKILL(ch, SKILL_TRACK, 50);
d1745 1
a1745 1
    SET_SKILL(ch, SKILL_TAME, 50);
d1758 3
a1760 3
    SET_SKILL(ch, SKILL_GUARD, 50);
    SET_SKILL(ch, SKILL_TRACK, 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
d1762 4
a1765 4
    SET_SKILL(ch, SKILL_BASH, 50);
    SET_SKILL(ch, SKILL_KICK, 50);
    SET_SKILL(ch, SKILL_RESCUE, 50);
    SET_SKILL(ch, SKILL_TAME, 50);
d1773 1
a1773 1
    SET_SKILL(ch, SKILL_SPRINGLEAP, 50);
d1840 2
a1841 4
    SET_SKILL(ch, SKILL_RESCUE, 50);
    SET_SKILL(ch, SKILL_TAME, 50);
    SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
    SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
d1849 1
d1857 1
a1857 2
    SET_SKILL(ch, SKILL_TAME, 50);
    
d1861 10
d1872 1
a1872 2
    SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
    
a1886 8
    
    SET_SKILL(ch, SKILL_DODGE, 250);
    SET_SKILL(ch, SKILL_PARRY, 250);
    SET_SKILL(ch, SKILL_RIPOST, 250);
    SET_SKILL(ch, SKILL_RIDING, 250);
    SET_SKILL(ch, SKILL_MOUNT, 250);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_BANDAGE, 200);
d1895 1
a1895 2
    SET_SKILL(ch, SKILL_TAME, 50);
    
d1899 3
d1930 1
a1930 1
    SET_SKILL(ch, SKILL_GUARD, 50);
d1932 1
a1932 1
    SET_SKILL(ch, SKILL_RESCUE, 200);
d1938 9
d1959 3
a1961 7
    SET_SKILL(ch, SKILL_DODGE, 150);
    SET_SKILL(ch, SKILL_PARRY, 150);
    SET_SKILL(ch, SKILL_RIPOST, 50);
    SET_SKILL(ch, SKILL_RIDING, 50);
    SET_SKILL(ch, SKILL_MOUNT, 50);
    SET_SKILL(ch, SKILL_MEDITATE, 50);
    SET_SKILL(ch, SKILL_SCRIBE, 50);
d1963 2
a1964 1
    SET_SKILL(ch, SKILL_BANDAGE, 50);
a1990 1
    SET_SKILL(ch, SKILL_TAME, 50);
d2012 5
a2017 1
    SET_SKILL(ch, SPELL_DARKNESS, 1000);
a2021 2
    SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
    SET_SKILL(ch, SPELL_MOONWELL, 1000);
d2899 1
a2899 1
  spell_level(SKILL_DODGE, CLASS_MAGIC_USER, 1, 2);
d2959 1
a2959 1
  spell_level(SKILL_DODGE, CLASS_PYROMANCER, 1, 2);
d3015 1
a3015 1
  spell_level(SKILL_DODGE, CLASS_CRYOMANCER, 1, 2);
d3114 1
a3114 1
  spell_level(SKILL_DODGE, CLASS_CLERIC, 1, 2);
d3185 1
a3185 1
  spell_level(SKILL_DODGE, CLASS_PRIEST, 1, 2);
d3195 1
d3250 1
a3250 1
  spell_level(SKILL_DODGE, CLASS_DIABOLIST, 1, 2);
a3303 1
  
d3310 1
a3310 1
  spell_level(SKILL_TRACK, CLASS_THIEF, 1, 2);
d3314 1
a3314 1
  spell_level(SKILL_PARRY, CLASS_THIEF, 1, 2);
d3320 1
a3320 2
  spell_level(SKILL_FIRST_AID, CLASS_ROGUE, 1, 2);
  
d3322 1
a3322 1
  spell_level(SKILL_SNEAK, CLASS_ROGUE, 1, 2);
d3324 1
a3324 1
  spell_level(SKILL_BACKSTAB, CLASS_ROGUE, 1, 2);
d3326 1
a3326 1
  spell_level(SKILL_TRACK, CLASS_ROGUE, 1, 2);
d3330 1
a3330 1
  spell_level(SKILL_PARRY, CLASS_ROGUE, 1, 2);
a3336 1

d3338 2
a3339 2
  spell_level(SKILL_SNEAK, CLASS_BARD, 1, 2);
  spell_level(SKILL_PICK_LOCK, CLASS_BARD, 6, 2);
d3341 7
a3347 7
  spell_level(SKILL_STEAL, CLASS_BARD, 6, 2);
  spell_level(SKILL_HIDE, CLASS_BARD, 1, 2);
  spell_level(SKILL_TRACK, CLASS_BARD, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_BARD, 10, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_BARD, 15, 2);
  spell_level(SKILL_DODGE, CLASS_BARD, 1, 2);
  spell_level(SKILL_PARRY, CLASS_BARD, 1, 2);
d3354 1
a3354 1
  spell_level(SKILL_DISARM, CLASS_WARRIOR, 1, 2);
d3356 3
a3358 3
  spell_level(SKILL_GUARD, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_HITALL, CLASS_WARRIOR, 15, 2);
d3360 3
a3362 3
  spell_level(SKILL_RESCUE, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_TAME, CLASS_WARRIOR, 7, 2);
  spell_level(SKILL_TRACK, CLASS_WARRIOR, 36, 2);
d3364 2
a3365 2
  spell_level(SKILL_DUAL_WIELD, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_WARRIOR, 1, 2);
d3367 2
a3368 2
  spell_level(SKILL_PARRY, CLASS_WARRIOR, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_WARRIOR, 1, 2);
d3379 2
a3380 2
  spell_level(SKILL_GUARD, CLASS_MONK, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_MONK, 1, 2);
d3382 6
a3387 6
  spell_level(SKILL_RESCUE, CLASS_MONK, 1, 2);
  spell_level(SKILL_TAME, CLASS_MONK, 7, 2);
  spell_level(SKILL_TRACK, CLASS_MONK, 36, 2);
  spell_level(SKILL_BASH, CLASS_MONK, 1, 2);
  spell_level(SKILL_DUAL_WIELD, CLASS_MONK, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_MONK, 1, 2);
d3389 2
a3390 2
  spell_level(SKILL_PARRY, CLASS_MONK, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_MONK, 1, 2);
a3438 1

d3440 2
a3441 2
  spell_level(SKILL_GUARD, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_PALADIN, 1, 2);
d3443 1
a3443 1
  spell_level(SKILL_RESCUE, CLASS_PALADIN, 1, 2);
d3445 3
a3447 3
  spell_level(SKILL_DUAL_WIELD, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_TAME, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_PALADIN, 1, 2);
d3449 2
a3450 2
  spell_level(SKILL_PARRY, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_PALADIN, 1, 2);
d3455 2
a3456 3

  spell_level(SKILL_HITALL, CLASS_PALADIN, 1, 2);
  spell_level(SKILL_DISARM, CLASS_PALADIN, 1, 2);
a3461 1

a3462 1

a3464 1

a3466 1

a3468 1

a3470 1

a3471 1

a3472 1

a3473 1

d3481 1
a3481 1
  spell_level(SKILL_RESCUE, CLASS_ANTI_PALADIN, 1, 2);
d3483 2
a3484 2
  spell_level(SKILL_DUAL_WIELD, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_ANTI_PALADIN, 1, 2);
d3488 2
a3489 2
  spell_level(SKILL_RIPOST, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_PARRY, CLASS_ANTI_PALADIN, 1, 2);
d3494 5
a3498 2
  spell_level(SKILL_HITALL, CLASS_ANTI_PALADIN, 1, 2);
  spell_level(SKILL_DISARM, CLASS_ANTI_PALADIN, 1, 2);
d3532 1
a3532 1
  spell_level(SKILL_RESCUE, CLASS_RANGER, 1, 2);
d3535 1
a3535 1
  spell_level(SKILL_TAME, CLASS_RANGER, 7, 2);
d3537 11
a3547 1
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_RANGER, 1, 2);
a3560 7
  spell_level(SKILL_DODGE, CLASS_RANGER, 1, 2);
  spell_level(SKILL_PARRY, CLASS_RANGER, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_RANGER, 1, 2);
  spell_level(SKILL_RIDING, CLASS_RANGER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_RANGER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_RANGER, 1, 2);
  spell_level(SKILL_SCRIBE, CLASS_RANGER, 1, 1);
d3562 1
a3562 1
  spell_level(SKILL_BANDAGE, CLASS_RANGER, 1, 2);
d3569 8
a3600 1
  spell_level(SKILL_TAME, CLASS_DRUID, 1, 2);
a3620 1
  spell_level(SKILL_DODGE, CLASS_DRUID, 1, 2);
a3622 4
  spell_level(SKILL_RIDING, CLASS_DRUID, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_DRUID, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_DRUID, 1, 2);
  spell_level(SKILL_QUICK_CHANT, CLASS_DRUID, 1, 2);
a3624 3
  spell_level(SKILL_BANDAGE, CLASS_DRUID, 1, 2);
  

d3690 1
a3690 1
  spell_level(SKILL_DISARM, CLASS_MERCENARY, 1, 2);
d3692 2
a3693 2
  spell_level(SKILL_GUARD, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_SWITCH, CLASS_MERCENARY, 1, 2);
d3696 3
a3698 3
  spell_level(SKILL_HIDE, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_TAME, CLASS_MERCENARY, 7, 2);
  spell_level(SKILL_TRACK, CLASS_MERCENARY, 1, 2);
d3700 1
a3700 1
  spell_level(SKILL_RESCUE, CLASS_MERCENARY, 1, 2);
d3702 2
a3703 2
  spell_level(SKILL_DUAL_WIELD, CLASS_MERCENARY, 11, 2);
  spell_level(SKILL_DOUBLE_ATTACK, CLASS_MERCENARY, 6, 2);
d3705 2
a3706 2
  spell_level(SKILL_PARRY, CLASS_MERCENARY, 1, 2);
  spell_level(SKILL_RIPOST, CLASS_MERCENARY, 1, 2);
d3715 8
d3741 1
a3741 1
  /*  spell_level(SPELL_CURSE, CLASS_MAGIC_USER, 16);*/
d3743 2
a3744 2
     //  spell_level(SPELL_CHARM, CLASS_MAGIC_USER, 31);*/
  /*spell_level(SPELL_ENCHANT_WEAPON, CLASS_MAGIC_USER, 41);*/
a3748 1
  spell_level(SKILL_DODGE, CLASS_NECROMANCER, 1, 2);
a3749 5
  spell_level(SKILL_RIDING, CLASS_NECROMANCER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_NECROMANCER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_NECROMANCER, 1, 2);
  spell_level(SKILL_SCRIBE, CLASS_NECROMANCER, 1, 1);
  spell_level(SKILL_QUICK_CHANT, CLASS_NECROMANCER, 1, 2);
a3751 2
  spell_level(SKILL_BANDAGE, CLASS_NECROMANCER, 1, 2);

d3753 10
a3763 3

  /* conj */
  spell_level(SKILL_FIRST_AID, CLASS_CONJURER, 1, 2);
a3764 1
  spell_level(SKILL_DOUSE, CLASS_CONJURER, 1, 2);
d3778 1
a3778 1
 /* spell_level(SPELL_BLINDNESS, CLASS_MAGIC_USER, 16);*/
d3782 1
a3782 1
/*  spell_level(SPELL_CURSE, CLASS_MAGIC_USER, 16);*/
a3793 1
  spell_level(SKILL_DODGE, CLASS_CONJURER, 1, 2);
a3794 5
  spell_level(SKILL_RIDING, CLASS_CONJURER, 1, 2);
  spell_level(SKILL_MOUNT, CLASS_CONJURER, 1, 2);
  spell_level(SKILL_MEDITATE, CLASS_CONJURER, 1, 2);
  spell_level(SKILL_SCRIBE, CLASS_CONJURER, 1, 1);
  spell_level(SKILL_QUICK_CHANT, CLASS_CONJURER, 1, 2);
d3797 1
a3797 1
  spell_level(SKILL_BANDAGE, CLASS_CONJURER, 1, 2);
@


1.11
log
@made Paladin and tla bright white instead of grey
@
text
@d34 1
@


1.10
log
@Monk semantics for dodge/parry/ripost/attack
@
text
@d51 1
a51 1
  "e) &7Paladin&0",
d105 1
a105 1
  "&7Pal&0",
d135 1
a135 1
  "&7Paladin&0     ",
@


1.9
log
@added scribe for rangers and removed it from paladins
antis and other classes that dfidn't need it.
@
text
@d1738 1
d2703 8
d3353 2
@


1.8
log
@Added Springleap for monks
@
text
@a1487 1
    SET_SKILL(ch, SKILL_SCRIBE, 50);
a1558 1
    SET_SKILL(ch, SKILL_SCRIBE, 50);
a1623 1
    SET_SKILL(ch, SKILL_SCRIBE, 50);
a1664 1
    SET_SKILL(ch, SKILL_SCRIBE, 50);
a1868 1
    SET_SKILL(ch, SKILL_SCRIBE, 50);
a1905 1
    SET_SKILL(ch, SKILL_SCRIBE, 50);
a1992 1
    SET_SKILL(ch, SKILL_SCRIBE, 50);
d1999 1
a2032 1
    SET_SKILL(ch, SKILL_SCRIBE, 50);
d3531 1
d3534 1
a3534 1
  
@


1.7
log
@Adds safefall skill for monks.
@
text
@d1759 1
a1932 1
    SET_SKILL(ch, SKILL_SPRINGLEAP, 50);
@


1.6
log
@Many enhancements to scribe and spellbooks.  Lots of checks added.  Scribe is now a skill.
Spellbooks now have to be held to scribe as well as a quill in the other hand.

-fingon
@
text
@d1758 1
@


1.5
log
@Monk additions/fixes
@
text
@d1188 1
d1225 1
d1277 1
d1336 1
d1390 1
d1427 1
d1488 1
d1560 1
d1626 1
d1668 1
d1871 1
d1909 1
d1942 1
d1998 1
d2038 1
d2877 1
d2936 1
d2991 1
d3030 1
d3723 1
d3770 1
@


1.4
log
@Fixed yet more bugs with spellcasters and leveling.
Hope this does it.
@
text
@d927 3
a929 3
	ch->view_abils.str = table[0];
	ch->view_abils.dex = table[1];
	ch->view_abils.con = table[2];
d1732 1
d3330 1
a3330 1

@


1.3
log
@all spellcasters now attain spells when they level.
no renting and returning necessarey.
@
text
@d2242 2
a2243 1
  extern void assign_mem_list(struct char_data *);
d2255 1
d2272 1
d2319 1
d2336 1
d2353 1
d2371 1
d2389 1
d2435 1
d2453 1
d2497 1
d2513 1
d2546 1
d2590 1
d2606 1
d2622 1
@


1.2
log
@Entire file indented with emcacs
Changed *subclass_descrip to be Fieryified
changed *class_abbrevs[] to be three letter abbreviations
Removed Shaman as a class choice for humans
Added some question about *class_menu in a comment
@
text
@d2242 1
d2258 1
d2274 1
d2320 1
d2336 1
d2352 1
d2369 1
d2386 1
d2431 1
d2448 1
d2491 1
d2506 1
d2522 1
d2538 1
d2581 1
d2596 1
d2611 1
@


1.1
log
@Initial revision
@
text
@d1 11
a11 10
/*
************************************************************************
*   File: class.c                                       Part of CircleMUD *
*  Usage: Source file for class-specific code                             *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */
a23 1

d34 11
a44 15
"                     &1&b [ Hubis Class System ]&0\r\n"
"&6&bHubis offers a wide range of character classes and abilities all of\r\n"
"which originate from five basic classes. Each of the basic classes\r\n"
"have extraordinary growth potential throughout gameplay. As you begin\r\n"
"your journey, you are limited to only these five classes. As you play\r\n"
"on and experience new areas and experience levels you are faced with\r\n"
"a decision to either specialize in a subclass, or retain your original\r\n"
"class. If you choose to specialize, your abilities and powers will\r\n"
"expand accordingly, leading the way to very powerful characters. However,\r\n"
"you may wish to remain a basic class, and possibly gain the ability to\r\n"
"multiclass at the higher levels. Explore the possibilities and GOOD LUCK!\r\n"
"&bNOTE: Shamans are temporarily disabled.  New, improved shamans will be\r\n"
"added in about 2 weeks!&0\r\n";


d75 2
a76 2
	{ CLASS_PALADIN, CLASS_ANTI_PALADIN, CLASS_RANGER,
	  CLASS_BERSERKER, CLASS_MONK, CLASS_MERCENARY};
d79 1
a79 1
	{ CLASS_PRIEST, CLASS_DIABOLIST, CLASS_DRUID, CLASS_MYSTIC };
d82 2
a83 2
	{ CLASS_ASSASSIN, CLASS_THIEF, CLASS_BARD,
	  CLASS_HUNTER };
d86 2
a87 2
	{ CLASS_PYROMANCER, CLASS_CRYOMANCER, CLASS_ILLUSIONIST,
	  CLASS_NECROMANCER, CLASS_CONJURER };
d91 3
a93 3
	"&0&7&b[s]&0 Strength	&0&7&b[i]&0 Intelligence\r\n"
	"&0&7&b[w]&0 Wisdom	&0&7&b[c]&0 Constitution\r\n"
	"&0&7&b[d]&0 Dexterity	&0&7&b[m]&0 Charisma\r\n\r\n"
d101 24
a124 24
  "&5&bSorc   &0",
  "&6Cleric &0",
  "&1&bThief  &0",
  "&4&bWarrior&0",
  "&7Paladin&0",
  "&1&bAnti-&9Pa&0",
  "&2&bRanger &0",
  "&2Druid  &0",
  "&6&bShaman &0",
  "&1Ass    &0",
  "&3Merc   &0",
  "&5Necro  &0",
  "&3&bConj   &0",
  "&9&bMonk   &0",
  "&9&bBe&1rs   &0",
  "&6&bPr&7ie   &0",
  "&5Di&9&bab   &0",
  "&7&bM&0&7ys  &0",
  "&9&bRogue  &0",
  "&4B&9&bar    &0",
  "&1P&byr    &0",
  "&4C&bry    &0",
  "&4I&5l     &0",
  "&9&bHun    &0",
d163 1
a163 1
  /* Human */ { Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y,  Y,  N,  Y,  Y,  Y,  Y,  Y,  Y,  Y,  Y,  N},
d178 1
d189 1
a189 1

d217 1
a217 1

d221 1
a221 1

d230 1
a230 1

d232 53
a284 53
    case CLASS_BERSERKER:
    case CLASS_ANTI_PALADIN:
    case CLASS_HUNTER:
    case CLASS_RANGER:
    case CLASS_MONK:
    case CLASS_WARRIOR:
        para = 70-(int)(GET_LEVEL(ch)*11/14);
	rod  = 80-(int)(GET_LEVEL(ch)*11/14);
	petr = 75-(int)(GET_LEVEL(ch)*11/14);
	bre  = 85-(int)(GET_LEVEL(ch)*13/14);
	spe  = 85-(int)(GET_LEVEL(ch)*11/14);
        break;
    case CLASS_MAGIC_USER:	
    case CLASS_CRYOMANCER:
    case CLASS_PYROMANCER:
    case CLASS_ILLUSIONIST:
    case CLASS_NECROMANCER:
    case CLASS_CONJURER:
        para = 70-(int)(GET_LEVEL(ch)*3/7);
	rod  = 55-(int)(GET_LEVEL(ch)*4/7);
	petr = 65-(int)(GET_LEVEL(ch)*4/7);
	bre  = 75-(int)(GET_LEVEL(ch)*4/7);
	spe  = 60-(int)(GET_LEVEL(ch)*4/7);
	break;
    case CLASS_ROGUE:
    case CLASS_ASSASSIN:
    case CLASS_THIEF:
    case CLASS_MERCENARY:
    case CLASS_BARD:
        para = 65-(int)(GET_LEVEL(ch)*5/14);
	rod  = 70-(int)(GET_LEVEL(ch)*5/7);
	petr = 60-(int)(GET_LEVEL(ch)*5/14);
	bre  = 80-(int)(GET_LEVEL(ch)*5/14);
	spe  = 75-(int)(GET_LEVEL(ch)*5/7);
	break;
    case CLASS_CLERIC:
    case CLASS_PRIEST:
    case CLASS_MYSTIC:
    case CLASS_DIABOLIST:
    case CLASS_DRUID:
        para = 65-(int)(GET_LEVEL(ch)*4/7);
	rod  = 70-(int)(GET_LEVEL(ch)*4/7);
	petr = 65-(int)(GET_LEVEL(ch)*4/7);
	bre  = 80-(int)(GET_LEVEL(ch)*4/7);
	spe  = 75-(int)(GET_LEVEL(ch)*4/7);
	break;
    default:
        para = 65-(int)(GET_LEVEL(ch)*4/7);
	rod  = 70-(int)(GET_LEVEL(ch)*4/7);
	petr = 65-(int)(GET_LEVEL(ch)*4/7);
	bre  = 80-(int)(GET_LEVEL(ch)*4/7);
	spe  = 75-(int)(GET_LEVEL(ch)*4/7);
	break;     
d286 1
a286 1

d288 17
a304 17
    case RACE_DUERGAR:
    case RACE_DWARF:
	para -= (int)(0.125 * GET_CON_VAFF(ch));
	rod  -= (int)(0.1 * GET_CON_VAFF(ch));
        spe  -= (int)(0.1 * GET_CON_VAFF(ch));
	break;
    case RACE_GNOME:
	rod  -= (int)(0.1 * GET_CON_VAFF(ch));
        spe  -= (int)(0.1 * GET_CON_VAFF(ch));
	break;
    case RACE_HALFLING:
        para -= (int)(0.1 * GET_CON_VAFF(ch));
        rod  -= (int)(0.1 * GET_CON_VAFF(ch));
        spe  -= (int)(0.1 * GET_CON_VAFF(ch));
        break;
    default:
        break;
d311 12
a322 12
    case SAVING_SPELL:
	return MAX(5, spe);
    case SAVING_BREATH:
	return  MAX(5, bre);
    case SAVING_ROD:
	return  MAX(5, rod);
    case SAVING_PETRI:
	return  MAX(5, petr);
    case SAVING_PARA:
	return  MAX(5, para);
    default:
        log("SYSERR: Invalid save_type passed to get_base_saves");
d337 1
a337 1

d339 75
a413 75
    case 'a':
      return (1 << 0);
      break;
    case 'b':
      return (1 << 1);
      break;
    case 'c':
      return (1 << 2);
      break;
    case 'd':
      return (1 << 3);
	  break;
	case 'e':
	  return (1 << 4);
      break;
	case 'f':
	  return (1 << 5);
	  break;
	case 'g':
	  return (1 << 6);
	  break;
	case 'h':
	  return (1 << 7);
	  break;
	case 'i':
	  return (1 << 8);
	  break;
	case 'j':
	  return (1 << 9);
	  break;
	case 'k':
	  return (1 << 10);
	  break;
	case 'l':
	  return (1 << 11);
	  break;
	case 'm':
	  return (1 << 12);
	  break;
	case 'n':
	  return (1 << 13);
	  break;
	case 'o':
	  return (1 << 14);
	  break;
	case 'p':
	  return (1 << 15);
	  break;
	case 'q':
	  return (1 << 16);
	  break;
	case 'r':
	  return (1 << 17);
	  break;
	case 's':
	  return (1 << 18);
	  break;
	case 't':
	  return (1 << 19);
	  break;
	case 'u':
	  return (1 << 20);
	  break;
	case 'v':
	  return (1 << 21);
	  break;
	case 'w':
	  return (1 << 22);
	  break;
	case 'x':
	  return (1 << 23);
	  break;
    default:
      return 0;
      break;
d463 4
a466 4


/* this must go last -- add new guards above! */
{-1, -1, -1}};
d478 2
a479 2

/* SORC */
d738 1
a738 1
	
d740 1
a740 1
 /* int stats[6];*/
d743 1
a743 1

d746 1
a746 1

d748 1
a748 1

d751 1
a751 1

d753 2
a754 3
rolls[5] -
      MIN(rolls[0], MIN(rolls[1], MIN(rolls[2], MIN(rolls[3], 
MIN(rolls[4], rolls[5])))));
d761 1
a761 1
	  }
d763 2
a764 2


d766 21
a786 7
	i = 0;
	for (j=0;j<6;j++)
		i = i + (int)table[j];
	/*ok lets say average = 450 (75 per) if LESS then this then bonus stats*/
/*
***METHOD 1 even spread of upping stats***
  while (i <= 450)
d788 2
a789 6
		for (j=0;j<6;j++)
			if ((int)table[j] < 100)
			{
				table[j] = (ubyte)((int)table[j] + 1);
				i++;
			}
d791 4
a794 14
*/	
	/*METHOD 2 random spread of bonus 5 stat points***/
	while(i<=450)
	{
		j = number(0, 5);
		if ((int)table[j] < 100)
			{
				table[j] = (ubyte)((int)table[j] + 5);
				i = i + 5;
			}
	}
	
 ch->view_abils.str_add = 0;

d797 1
a797 1

d799 4
a802 4
  {/*if baiscally NOT going through interpreter*/
  switch (GET_CLASS(ch)) {
  case CLASS_MAGIC_USER:
    ch->view_abils.wis = table[0];
d808 3
a810 3
    break;
  case CLASS_CLERIC:
    ch->view_abils.wis = table[0];
d817 2
a818 2
  case CLASS_THIEF:
    ch->view_abils.dex = table[0];
d824 3
a826 3
    break;
  case CLASS_WARRIOR:
    ch->view_abils.str = table[0];
d829 3
a831 3
    ch->view_abils.wis = table[3];
    ch->view_abils.intel = table[4];
    ch->view_abils.cha = table[5];
d833 1
a833 1
      ch->view_abils.str_add = number(0, 100);
d835 2
a836 2
	case CLASS_PALADIN:
    ch->view_abils.str = table[0];
d843 1
a843 1
      ch->view_abils.str_add = number(0, 100);
d845 2
a846 2
	case CLASS_ANTI_PALADIN:
    ch->view_abils.str = table[0];
d853 1
a853 1
      ch->view_abils.str_add = number(0, 100);
d855 2
a856 2
	case CLASS_RANGER:
    ch->view_abils.str = table[0];
d858 1
a858 1
    ch->view_abils.con = table[2];
d863 2
a864 2
      ch->real_abils.str_add = number(0, 100);
      ch->view_abils.str_add = ch->real_abils.str_add;
d866 2
a867 2
	case CLASS_DRUID:
    ch->view_abils.wis = table[0];
d874 2
a875 2
	case CLASS_SHAMAN:
    ch->view_abils.wis = table[0];
d881 3
a883 3
    break;
    case CLASS_ASSASSIN:
    ch->view_abils.wis = table[0];
d889 3
a891 3
    break;
    case CLASS_MERCENARY:
    ch->view_abils.str = table[0];
d893 1
a893 1
       ch->view_abils.con = table[2];
d898 4
a901 4
      ch->view_abils.str_add = number(0, 100);
    break;
	case CLASS_NECROMANCER:
    ch->view_abils.wis = table[0];
d907 3
a909 3
    break;
	case CLASS_CONJURER:
    ch->view_abils.wis = table[0];
d915 3
a917 3
    break;     
  case CLASS_BERSERKER:
    ch->view_abils.str = table[0];
d920 3
a922 3
    ch->view_abils.wis = table[3];
    ch->view_abils.intel = table[4];
    ch->view_abils.cha = table[5];
d924 1
a924 1
      ch->view_abils.str_add = number(0, 100);
d926 2
a927 2
  case CLASS_MONK:
    ch->view_abils.str = table[0];
d930 3
a932 3
    ch->view_abils.wis = table[3];
    ch->view_abils.intel = table[4];
    ch->view_abils.cha = table[5];
d934 1
a934 1
      ch->view_abils.str_add = number(0, 100);
d936 2
a937 2
  case CLASS_PRIEST:
    ch->view_abils.wis = table[0];
d944 2
a945 2
  case CLASS_DIABOLIST:
    ch->view_abils.wis = table[0];
d952 2
a953 2
  case CLASS_MYSTIC:
    ch->view_abils.wis = table[0];
d960 2
a961 2
  case CLASS_ROGUE:
    ch->view_abils.dex = table[0];
d967 3
a969 3
    break;
  case CLASS_BARD:
    ch->view_abils.dex = table[0];
d975 3
a977 3
    break;
  case CLASS_PYROMANCER:
    ch->view_abils.wis = table[0];
d983 3
a985 3
    break;
  case CLASS_CRYOMANCER:
    ch->view_abils.wis = table[0];
d991 3
a993 3
    break;
  case CLASS_ILLUSIONIST:
    ch->view_abils.wis = table[0];
d999 3
a1001 3
    break;
  case CLASS_HUNTER:
    ch->view_abils.str = table[0];
d1004 3
a1006 3
    ch->view_abils.wis = table[3];
    ch->view_abils.intel = table[4];
    ch->view_abils.cha = table[5];
d1008 1
a1008 1
      ch->view_abils.str_add = number(0, 100);
d1010 7
a1016 7

}



}else
{/*through interpreter*/
d1018 1
a1018 1
    ch->view_abils.str = table[((int)GET_ROLL(ch, 1) - 1)];
d1020 3
a1022 3
    ch->view_abils.wis = table[((int)GET_ROLL(ch, 3) - 1)];
    ch->view_abils.intel = table[((int)GET_ROLL(ch, 4) - 1)];
    ch->view_abils.cha = table[((int)GET_ROLL(ch, 5) - 1)];
d1024 13
a1036 13
	{
		if (GET_CLASS(ch) == warrior_subclasses[i]) 
		{	
			if (ch->view_abils.str == 100)
				ch->view_abils.str_add = number(0, 100);
			break;
		}
	}

}

ch->vaff_abils = ch->view_abils;

d1040 19
a1058 19
 /*
    calling this function wipes out every skill a player has. It
    also clears off all their affects so as not to corrupt any numbers.
 */
 void clear_skills(struct char_data *ch)
  {
   int i;
         
   /* unaffect ch */
   if(ch->affected) {
     while (ch->affected)
       affect_remove(ch, ch->affected);
     check_regen_rates(ch);
   }
   /* clear skills */
   for (i=0;i < MAX_SKILLS+1;i++)
     SET_SKILL(ch, i, 0);
        
 }
d1066 1
a1066 1
 
d1069 6
a1074 6
   int max_skill = 1000;
   
   switch(GET_RACE(ch))
   {
     case RACE_OGRE:
       switch(skill)
d1076 3
a1078 3
	  case SKILL_PARRY:
          case SKILL_RIPOST:
	 max_skill = 750;break;
d1080 2
a1081 2
     case RACE_TROLL:
       	switch(skill)
d1085 1
a1085 1
         max_skill = 700;break;
d1087 53
a1139 53
}
   switch(GET_CLASS(ch))
   {
      case CLASS_RANGER:
         switch(skill)
         {
            case SKILL_HUNT:max_skill = 750;break;
         }
         break;
      case CLASS_PRIEST:
         switch(skill)
         {
            case SKILL_DOUBLE_ATTACK:max_skill = 500;break;
         }
         break;
      case CLASS_HUNTER:
         switch(skill)
         {

         }
         break;
      case CLASS_WARRIOR:
         switch(skill)
         {
            case SKILL_TRACK:max_skill = 600;break;
         }
         break;
      case CLASS_MERCENARY:
         switch(skill)
         {
            case SKILL_TRACK:max_skill = 850;break;
         }
         break;
      case CLASS_ASSASSIN:
         switch(skill)
         {
            case SKILL_TRACK:max_skill = 750;break;
         }
         break;
      case CLASS_THIEF:
         switch(skill)
         {
            case SKILL_TRACK:max_skill = 600;break;
         }
         break;
      case CLASS_ROGUE:
         switch(skill)
         {
            case SKILL_TRACK:max_skill = 650;break;
         }
         break;
   }        
   return (MIN(max_skill, (GET_LEVEL(ch) * (int)(max_skill/50))));
d1154 3
a1156 3
 void set_skills(struct char_data *ch)
 {

d1160 1
a1160 1

d1163 31
a1193 31
	  SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
	  SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
	  SET_SKILL(ch, SPELL_FARSEE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
	  SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
	  SET_SKILL(ch, SPELL_INFRAVISION, 1000);
	  SET_SKILL(ch, SPELL_INVISIBLE, 1000);
	  SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
	  SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
	  SET_SKILL(ch, SPELL_STRENGTH, 1000);
	  SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
	  SET_SKILL(ch, SPELL_SLEEP, 1000);
	  SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_ENERGY_DRAIN, 1000);
	  SET_SKILL(ch, SPELL_ANIMATE_DEAD, 1000);
	  SET_SKILL(ch, SPELL_SUMMON_DRACOLICH, 1000);
	  SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	   SET_SKILL(ch, SPELL_FARSEE, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
      SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
 break;

d1195 34
a1228 34
	  SET_SKILL(ch, SPELL_WALL_OF_STONE, 1000);
	  SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
	  SET_SKILL(ch, SPELL_FARSEE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
	  SET_SKILL(ch, SPELL_INFRAVISION, 1000);
	  SET_SKILL(ch, SPELL_INVISIBLE, 1000);
	  SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
	  SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
	  SET_SKILL(ch, SPELL_STRENGTH, 1000);
	  SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
	  SET_SKILL(ch, SPELL_SLEEP, 1000);
	  SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_COLOR_SPRAY, 1000);
	  SET_SKILL(ch, SPELL_FIREBALL, 1000);
	  SET_SKILL(ch, SPELL_ENCHANT_WEAPON, 1000);
	  SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
	  SET_SKILL(ch, SPELL_WALL_OF_FOG, 1000);
	  SET_SKILL(ch, SPELL_FLY, 1000);
	  SET_SKILL(ch, SPELL_SUMMON_ELEMENTAL, 1000);
	  SET_SKILL(ch, SPELL_SUMMON_DEMON, 1000);
	  SET_SKILL(ch, SPELL_SUMMON_GREATER_DEMON, 1000);
	  SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
      SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
	   break;
d1230 53
a1282 53
          SET_SKILL(ch, SPELL_REDUCE, 1000);
          SET_SKILL(ch, SPELL_ENLARGE, 1000);
	  SET_SKILL(ch, SPELL_MASS_INVIS, 1000);
 	  SET_SKILL(ch, SPELL_CHAIN_LIGHTNING, 1000);
 	  SET_SKILL(ch, SPELL_RELOCATE, 1000);
	  SET_SKILL(ch, SPELL_DISINTEGRATE, 1000);
 	  SET_SKILL(ch, SPELL_HARNESS, 1000);
	  SET_SKILL(ch, SPELL_MINOR_GLOBE, 1000);
	  SET_SKILL(ch, SPELL_MAJOR_GLOBE, 1000);
	  SET_SKILL(ch, SPELL_FIRESHIELD, 1000);
	  SET_SKILL(ch, SPELL_COLDSHIELD, 1000);
	  SET_SKILL(ch, SPELL_TELEPORT, 1000);
	  SET_SKILL(ch, SPELL_MINOR_PARALYSIS, 1000);
	  SET_SKILL(ch, SPELL_LEVITATE, 1000);
	  SET_SKILL(ch, SPELL_WIZARD_EYE, 1000);
	  SET_SKILL(ch, SPELL_RAY_OF_ENFEEB, 1000);
	  SET_SKILL(ch, SPELL_CONCEALMENT, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
	  SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
	  SET_SKILL(ch, SPELL_FARSEE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
	  SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
	  SET_SKILL(ch, SPELL_INFRAVISION, 1000);
	  SET_SKILL(ch, SPELL_INVISIBLE, 1000);
	  SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
	  SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
	  SET_SKILL(ch, SPELL_STRENGTH, 1000);
	  SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
	  SET_SKILL(ch, SPELL_SLEEP, 1000);
	  SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
	  SET_SKILL(ch, SPELL_COLOR_SPRAY, 1000);
	  SET_SKILL(ch, SPELL_FIREBALL, 1000);
//	  SET_SKILL(ch, SPELL_CHARM, 1000);
	  SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
	  SET_SKILL(ch, SPELL_FLY, 1000);
	  SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SPELL_METEORSWARM, 1000);
	  SET_SKILL(ch, SPELL_BIGBYS_CLENCHED_FIST, 1000);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
      SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
	  SET_SKILL(ch, SPELL_ICE_STORM, 1000);
	 SET_SKILL(ch, SPELL_INCENDIARY_NEBULA, 1000);
     SET_SKILL(ch, SKILL_BANDAGE, 50);
	  break;

d1284 55
a1338 55
	  SET_SKILL(ch, SPELL_FIRE_DARTS, 1000);
	  SET_SKILL(ch, SPELL_MAGIC_TORCH, 1000);
	  SET_SKILL(ch, SPELL_SMOKE, 1000);
	  SET_SKILL(ch, SPELL_MIRAGE, 1000);
	  SET_SKILL(ch, SPELL_FLAME_BLADE, 1000);
	  SET_SKILL(ch, SPELL_HEATWAVE, 1000);
	  SET_SKILL(ch, SPELL_FIRESTORM, 1000);
	  SET_SKILL(ch, SPELL_MELT, 1000);
	  SET_SKILL(ch, SPELL_CIRCLE_OF_FIRE, 1000);
	  SET_SKILL(ch, SPELL_IMMOLATE, 1000);
	  SET_SKILL(ch, SPELL_SUPERNOVA, 1000);
	  SET_SKILL(ch, SPELL_GREATER_FIREWALK, 1000);
	  SET_SKILL(ch, SPELL_NEGATE_HEAT, 1000);
	  SET_SKILL(ch, SPELL_FIREWALK, 1000);
	  SET_SKILL(ch, SPELL_MASS_INVIS, 1000);
 	  SET_SKILL(ch, SPELL_RELOCATE, 1000);
 	  SET_SKILL(ch, SPELL_HARNESS, 1000);
	  SET_SKILL(ch, SPELL_MINOR_GLOBE, 1000);
	  SET_SKILL(ch, SPELL_MAJOR_GLOBE, 1000);
	  SET_SKILL(ch, SPELL_FIRESHIELD, 1000);
	  SET_SKILL(ch, SPELL_TELEPORT, 1000);
	  SET_SKILL(ch, SPELL_MINOR_PARALYSIS, 1000);
	  SET_SKILL(ch, SPELL_LEVITATE, 1000);
	  SET_SKILL(ch, SPELL_WIZARD_EYE, 1000);
	  SET_SKILL(ch, SPELL_RAY_OF_ENFEEB, 1000);
	  SET_SKILL(ch, SPELL_CONCEALMENT, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
	  SET_SKILL(ch, SPELL_FARSEE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
	  SET_SKILL(ch, SPELL_INFRAVISION, 1000);
	  SET_SKILL(ch, SPELL_INVISIBLE, 1000);
	  SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
	  SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
	  SET_SKILL(ch, SPELL_STRENGTH, 1000);
	  SET_SKILL(ch, SPELL_SLEEP, 1000);
	  SET_SKILL(ch, SPELL_COLOR_SPRAY, 1000);
	  SET_SKILL(ch, SPELL_FIREBALL, 1000);
//	  SET_SKILL(ch, SPELL_CHARM, 1000);
	  SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
	  SET_SKILL(ch, SPELL_FLY, 1000);
	  SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SPELL_METEORSWARM, 1000);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_INCENDIARY_NEBULA, 1000);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
	  break;

d1340 54
a1393 54
	  SET_SKILL(ch, SPELL_ICE_DARTS, 1000);
	  SET_SKILL(ch, SPELL_ICE_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_ICE_DAGGER, 1000);
	  SET_SKILL(ch, SPELL_FREEZING_WIND, 1000);
	  SET_SKILL(ch, SPELL_FREEZE, 1000);
	  SET_SKILL(ch, SPELL_WALL_OF_ICE, 1000);
	  SET_SKILL(ch, SPELL_ICEBALL, 1000);
	  SET_SKILL(ch, SPELL_FLOOD, 1000);
	  SET_SKILL(ch, SPELL_GREATER_WATERWALK, 1000);
	  SET_SKILL(ch, SPELL_NEGATE_COLD, 1000);
	  SET_SKILL(ch, SPELL_WATERFORM, 1000);
	  SET_SKILL(ch, SPELL_DOUSE, 1000);
	  SET_SKILL(ch, SPELL_RAIN, 1000);
	  SET_SKILL(ch, SPELL_MASS_INVIS, 1000);
 	  SET_SKILL(ch, SPELL_CHAIN_LIGHTNING, 1000);
 	  SET_SKILL(ch, SPELL_RELOCATE, 1000);
 	  SET_SKILL(ch, SPELL_HARNESS, 1000);
	  SET_SKILL(ch, SPELL_MINOR_GLOBE, 1000);
	  SET_SKILL(ch, SPELL_MAJOR_GLOBE, 1000);
	  SET_SKILL(ch, SPELL_COLDSHIELD, 1000);
	  SET_SKILL(ch, SPELL_TELEPORT, 1000);
	  SET_SKILL(ch, SPELL_MINOR_PARALYSIS, 1000);
	  SET_SKILL(ch, SPELL_LEVITATE, 1000);
	  SET_SKILL(ch, SPELL_WIZARD_EYE, 1000);
	  SET_SKILL(ch, SPELL_RAY_OF_ENFEEB, 1000);
	  SET_SKILL(ch, SPELL_CONCEALMENT, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_MINOR_CREATION, 1000);
	  SET_SKILL(ch, SPELL_FARSEE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
	  SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
	  SET_SKILL(ch, SPELL_INVISIBLE, 1000);
	  SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
	  SET_SKILL(ch, SPELL_STRENGTH, 1000);
	  SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
	  SET_SKILL(ch, SPELL_SLEEP, 1000);
	  SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
//	  SET_SKILL(ch, SPELL_CHARM, 1000);
	  SET_SKILL(ch, SPELL_FLY, 1000);
	  SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
	  SET_SKILL(ch, SPELL_ICE_STORM, 1000);
	  SET_SKILL(ch, SPELL_ICE_SHARDS, 1000);
          SET_SKILL(ch, SKILL_BANDAGE, 50);
	  break;

d1395 36
a1430 36
	  SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
	  SET_SKILL(ch, SPELL_FARSEE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
	  SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
	  SET_SKILL(ch, SPELL_INFRAVISION, 1000);
	  SET_SKILL(ch, SPELL_INVISIBLE, 1000);
	  SET_SKILL(ch, SPELL_BURNING_HANDS, 1000);
	  SET_SKILL(ch, SPELL_LOCATE_OBJECT, 1000);
	  SET_SKILL(ch, SPELL_STRENGTH, 1000);
	  SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
	  SET_SKILL(ch, SPELL_SLEEP, 1000);
	  SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_COLOR_SPRAY, 1000);
	  SET_SKILL(ch, SPELL_FIREBALL, 1000);
//	  SET_SKILL(ch, SPELL_CHARM, 1000);
	  SET_SKILL(ch, SPELL_STONE_SKIN, 1000);
	  SET_SKILL(ch, SPELL_FLY, 1000);
	  SET_SKILL(ch, SPELL_DIMENSION_DOOR, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SPELL_METEORSWARM, 1000);
	  SET_SKILL(ch, SPELL_BIGBYS_CLENCHED_FIST, 1000);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
      SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_CONE_OF_COLD, 1000);
	  SET_SKILL(ch, SPELL_ICE_STORM, 1000);
	  SET_SKILL(ch, SPELL_ICE_SHARDS, 1000);
	 SET_SKILL(ch, SPELL_INCENDIARY_NEBULA, 1000);
	 SET_SKILL(ch, SKILL_BANDAGE, 50); 
     break;

d1432 58
a1489 58
	  SET_SKILL(ch, SPELL_PLANE_SHIFT, 1000);
	  SET_SKILL(ch, SPELL_UNHOLY_WORD, 1000);
	  SET_SKILL(ch, SPELL_HOLY_WORD, 1000);
	  SET_SKILL(ch, SPELL_WATERWALK, 1000);
	  SET_SKILL(ch, SPELL_CONTINUAL_LIGHT, 1000);
          SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
	  SET_SKILL(ch, SPELL_SILENCE, 1000);
	  SET_SKILL(ch, SPELL_FLAMESTRIKE, 1000);
	  SET_SKILL(ch, SPELL_DESTROY_UNDEAD, 1000);
          SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
	  SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_PRESERVE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
	  SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_BLINDNESS, 1000);
	  SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
	  SET_SKILL(ch, SPELL_GROUP_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_SUMMON, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
	  SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
	  SET_SKILL(ch, SPELL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_HARM, 1000);
	  SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
	  SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
	  SET_SKILL(ch, SPELL_FULL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_FULL_HARM, 1000);
	  SET_SKILL(ch, SPELL_VITALITY, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SPELL_DARKNESS, 1000);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_RESURRECT, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SKILL_BANDAGE, 50);
      break;

d1491 70
a1560 70
	  SET_SKILL(ch, SPELL_SANE_MIND, 1000);
          SET_SKILL(ch, SPELL_DIVINE_ESSENCE,1000);
	  SET_SKILL(ch, SPELL_HEAVENS_GATE, 1000);
	  SET_SKILL(ch, SPELL_SPEAK_IN_TONGUES, 1000);
	  SET_SKILL(ch, SPELL_ENLIGHTENMENT, 1000);
	  SET_SKILL(ch, SPELL_EXORCISM, 1000);
	  SET_SKILL(ch, SPELL_GREATER_INVOCATION, 1000);
	  SET_SKILL(ch, SPELL_WINGS_OF_HEAVEN, 1000);
	  SET_SKILL(ch, SPELL_BANISH, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_COMMAND, 1000);
	  SET_SKILL(ch, SPELL_LESSER_INVOCATION, 1000);
	  SET_SKILL(ch, SPELL_LESSER_EXORCISM, 1000);
	  SET_SKILL(ch, SPELL_DIVINE_RAY, 1000);
	  SET_SKILL(ch, SPELL_DIVINE_BOLT, 1000);
	  SET_SKILL(ch, SPELL_PRAYER, 1000);
	  SET_SKILL(ch, SPELL_ELEMENTAL_WARDING, 1000);
	  SET_SKILL(ch, SPELL_CIRCLE_OF_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_PLANE_SHIFT, 1000);
	  SET_SKILL(ch, SPELL_HOLY_WORD, 1000);
	  SET_SKILL(ch, SPELL_WATERWALK, 1000);
	  SET_SKILL(ch, SPELL_CONTINUAL_LIGHT, 1000);
          SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
	  SET_SKILL(ch, SPELL_SILENCE, 1000);
	  SET_SKILL(ch, SPELL_DESTROY_UNDEAD, 1000);
          SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
	  SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_PRESERVE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
	  SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_BLINDNESS, 1000);
	  SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
	  SET_SKILL(ch, SPELL_GROUP_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_SUMMON, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
	  SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
	  SET_SKILL(ch, SPELL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
	  SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
	  SET_SKILL(ch, SPELL_FULL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_FULL_HARM, 1000);
	  SET_SKILL(ch, SPELL_VITALITY, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_RESURRECT, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	 SET_SKILL(ch, SKILL_BANDAGE, 50);
      break;

d1562 64
a1625 64
	  SET_SKILL(ch, SPELL_HELLS_GATE, 1000);
	  SET_SKILL(ch, SPELL_DARK_PRESENCE, 1000);
	  SET_SKILL(ch, SPELL_DEMONSKIN, 1000);
	  SET_SKILL(ch, SPELL_DARK_FEAST, 1000);
	  SET_SKILL(ch, SPELL_HELL_BOLT, 1000);
	  SET_SKILL(ch, SPELL_DISEASE, 1000);
	  SET_SKILL(ch, SPELL_INSANITY, 1000);
	  SET_SKILL(ch, SPELL_SANE_MIND, 1000);
	  SET_SKILL(ch, SPELL_DEMONIC_ASPECT, 1000);
	  SET_SKILL(ch, SPELL_HELLFIRE_BRIMSTONE, 1000);
	  SET_SKILL(ch, SPELL_STYGIAN_ERUPTION, 1000);
	  SET_SKILL(ch, SPELL_DEMONIC_MUTATION, 1000);
	  SET_SKILL(ch, SPELL_SPEAK_IN_TONGUES, 1000);
	  SET_SKILL(ch, SPELL_GREATER_INVOCATION, 1000);
	  SET_SKILL(ch, SPELL_WINGS_OF_HELL, 1000);
	  SET_SKILL(ch, SPELL_BANISH, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_COMMAND, 1000);
	  SET_SKILL(ch, SPELL_LESSER_INVOCATION, 1000);
	  SET_SKILL(ch, SPELL_ELEMENTAL_WARDING, 1000);
	  SET_SKILL(ch, SPELL_PLANE_SHIFT, 1000);
	  SET_SKILL(ch, SPELL_UNHOLY_WORD, 1000);
	  SET_SKILL(ch, SPELL_WATERWALK, 1000);
	  SET_SKILL(ch, SPELL_DARKNESS, 1000);
          SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
	  SET_SKILL(ch, SPELL_SILENCE, 1000);
	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_PRESERVE, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
	  SET_SKILL(ch, SPELL_BLINDNESS, 1000);
	  SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_SUMMON, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
	  SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
	  SET_SKILL(ch, SPELL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
	  SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
	  SET_SKILL(ch, SPELL_FULL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_FULL_HARM, 1000);
	  SET_SKILL(ch, SPELL_VITALITY, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_RESURRECT, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SKILL_BANDAGE, 50);
      break;

d1627 37
a1663 37
      SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
	  SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_BLINDNESS, 1000);
	  SET_SKILL(ch, SPELL_INFRAVISION, 1000);
	  SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
	  SET_SKILL(ch, SPELL_GROUP_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_SUMMON, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
	  SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
	  SET_SKILL(ch, SPELL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_HARM, 1000);
	  SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
	  SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
	  SET_SKILL(ch, SPELL_FULL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_FULL_HARM, 1000);
	  SET_SKILL(ch, SPELL_VITALITY, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SPELL_DARKNESS, 1000);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
      SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SKILL_BANDAGE, 50);
      break;

d1665 12
a1676 12
        SET_SKILL(ch, SKILL_SNEAK, 100);
        SET_SKILL(ch, SKILL_HIDE, 50);
        SET_SKILL(ch, SKILL_STEAL, 150);
        SET_SKILL(ch, SKILL_BACKSTAB, 100);
        SET_SKILL(ch, SKILL_PICK_LOCK, 100);
        SET_SKILL(ch, SKILL_TRACK, 100);
	SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	SET_SKILL(ch, SKILL_DODGE, 50);
	SET_SKILL(ch, SKILL_PARRY, 50);
	SET_SKILL(ch, SKILL_RIDING, 50);
	SET_SKILL(ch, SKILL_MOUNT, 50);
d1679 1
a1679 1

d1681 11
a1691 11
        SET_SKILL(ch, SKILL_SNEAK, 100);
        SET_SKILL(ch, SKILL_HIDE, 50);
        SET_SKILL(ch, SKILL_BACKSTAB, 100);
        SET_SKILL(ch, SKILL_PICK_LOCK, 100);
        SET_SKILL(ch, SKILL_TRACK, 100);
	SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	SET_SKILL(ch, SKILL_DODGE, 50);
	SET_SKILL(ch, SKILL_PARRY, 50);
	SET_SKILL(ch, SKILL_RIDING, 50);
	SET_SKILL(ch, SKILL_MOUNT, 50);
d1696 12
a1707 12
        SET_SKILL(ch, SKILL_SNEAK, 100);
        SET_SKILL(ch, SKILL_HIDE, 50);
        SET_SKILL(ch, SKILL_STEAL, 150);
        SET_SKILL(ch, SKILL_BACKSTAB, 100);
        SET_SKILL(ch, SKILL_PICK_LOCK, 100);
        SET_SKILL(ch, SKILL_TRACK, 100);
	SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	SET_SKILL(ch, SKILL_DODGE, 50);
	SET_SKILL(ch, SKILL_PARRY, 50);
	SET_SKILL(ch, SKILL_RIDING, 50);
	SET_SKILL(ch, SKILL_MOUNT, 50);
d1712 17
a1728 17
          SET_SKILL(ch, SKILL_DISARM, 100);
          SET_SKILL(ch, SKILL_HITALL, 50);
	  SET_SKILL(ch, SKILL_GUARD, 50);
	  SET_SKILL(ch, SKILL_SWITCH, 50);
	  SET_SKILL(ch, SKILL_TRACK, 50);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	  SET_SKILL(ch, SKILL_BASH, 50);
	  SET_SKILL(ch, SKILL_KICK, 50);
	  SET_SKILL(ch, SKILL_RESCUE, 50);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_PARRY, 50);
	  SET_SKILL(ch, SKILL_RIPOST, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
d1730 1
a1730 1

d1732 15
a1746 15
	  SET_SKILL(ch, SKILL_SWITCH, 50);
          SET_SKILL(ch, SKILL_GUARD, 50);
	  SET_SKILL(ch, SKILL_TRACK, 50);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	  SET_SKILL(ch, SKILL_BASH, 50);
	  SET_SKILL(ch, SKILL_KICK, 50);
	  SET_SKILL(ch, SKILL_RESCUE, 50);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_PARRY, 50);
	  SET_SKILL(ch, SKILL_RIPOST, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
d1748 1
a1748 1

d1750 16
a1765 16
          SET_SKILL(ch, SKILL_GUARD, 50);
	  SET_SKILL(ch, SKILL_SWITCH, 50);
   	  SET_SKILL(ch, SKILL_HITALL, 50);
	  SET_SKILL(ch, SKILL_TRACK, 50);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	  SET_SKILL(ch, SKILL_BASH, 50);
	  SET_SKILL(ch, SKILL_KICK, 50);
	  SET_SKILL(ch, SKILL_RESCUE, 50);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_PARRY, 50);
	  SET_SKILL(ch, SKILL_RIPOST, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
d1767 1
a1767 1

d1769 30
a1798 30
	  SET_SKILL(ch, SKILL_TRACK, 50);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	  SET_SKILL(ch, SKILL_BASH, 50);
	  SET_SKILL(ch, SKILL_KICK, 50);
	  SET_SKILL(ch, SKILL_RESCUE, 50);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_PARRY, 50);
	  SET_SKILL(ch, SKILL_RIPOST, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
      SET_SKILL(ch, SKILL_HUNT, 50);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
    break;

	  case CLASS_ASSASSIN:
        SET_SKILL(ch, SKILL_SNEAK, 150);
        SET_SKILL(ch, SKILL_INSTANT_KILL, 50);
        SET_SKILL(ch, SKILL_HIDE, 50);
        SET_SKILL(ch, SKILL_BACKSTAB, 150);
	SET_SKILL(ch, SKILL_CIRCLE, 100);
        SET_SKILL(ch, SKILL_TRACK, 150);
	SET_SKILL(ch, SKILL_THROATCUT, 50);
	SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	SET_SKILL(ch, SKILL_DODGE, 50);
	SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	SET_SKILL(ch, SKILL_PARRY, 50);
	SET_SKILL(ch, SKILL_RIDING, 50);
	SET_SKILL(ch, SKILL_MOUNT, 50);
d1802 22
a1823 22
	  SET_SKILL(ch, SKILL_DISARM, 100);
          SET_SKILL(ch, SKILL_GUARD, 50);
	  SET_SKILL(ch, SKILL_SWITCH, 50);
	  SET_SKILL(ch, SKILL_HIDE, 50);
	  SET_SKILL(ch, SKILL_BIND, 50);
	  SET_SKILL(ch, SKILL_BACKSTAB, 100);
	  SET_SKILL(ch, SKILL_TRACK, 150);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	  SET_SKILL(ch, SKILL_BASH, 50);
	  SET_SKILL(ch, SKILL_KICK, 50);
	  SET_SKILL(ch, SKILL_RESCUE, 50);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 50);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 50);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SKILL_PARRY, 50);
	  SET_SKILL(ch, SKILL_RIPOST, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
      break;
d1825 75
a1899 75
          SET_SKILL(ch, SKILL_GUARD, 150);
	  SET_SKILL(ch, SKILL_SWITCH, 100);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 200);
	  SET_SKILL(ch, SKILL_BASH, 200);
	  SET_SKILL(ch, SKILL_KICK, 200);
	  SET_SKILL(ch, SKILL_RESCUE, 200);
	  SET_SKILL(ch, SKILL_TAME, 50);

          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
          SET_SKILL(ch, SKILL_DISARM, 100);
          SET_SKILL(ch, SKILL_HITALL, 100);
          SET_SKILL(ch, SPELL_HOLY_WORD, 1000);
          SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);

	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
	  SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
	  SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
      SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
	  SET_SKILL(ch, SPELL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_BLUR, 1000);
          SET_SKILL(ch, SPELL_SOULSHIELD, 1000);

	  SET_SKILL(ch, SKILL_DODGE, 250);
	  SET_SKILL(ch, SKILL_PARRY, 250);
	  SET_SKILL(ch, SKILL_RIPOST, 250);
	  SET_SKILL(ch, SKILL_RIDING, 250);
	  SET_SKILL(ch, SKILL_MOUNT, 250);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
      SET_SKILL(ch, SKILL_BANDAGE, 200);
	  break;
	  case CLASS_ANTI_PALADIN:
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 200);
          SET_SKILL(ch, SKILL_VAMP_TOUCH, 200);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 200);
	  SET_SKILL(ch, SKILL_BASH, 200);
	  SET_SKILL(ch, SKILL_KICK, 200);
	  SET_SKILL(ch, SKILL_RESCUE,200);
	  SET_SKILL(ch, SKILL_TAME, 50);

          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
          SET_SKILL(ch, SKILL_DISARM, 100);
          SET_SKILL(ch, SKILL_HITALL, 100);
          SET_SKILL(ch, SPELL_UNHOLY_WORD, 1000);
          SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
          SET_SKILL(ch, SPELL_CURSE, 1000);
          SET_SKILL(ch, SPELL_POISON, 1000);
 	  SET_SKILL(ch, SPELL_VAMPIRIC_BREATH, 1000);

	  SET_SKILL(ch, SPELL_CAUSE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_DEMONSKIN, 1000);
	  SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
	  SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_BLINDNESS, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_CAUSE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
          SET_SKILL(ch, SPELL_SOULSHIELD, 1000);
	  SET_SKILL(ch, SPELL_HARM, 1000);

	  SET_SKILL(ch, SKILL_DODGE,200);
	  SET_SKILL(ch, SKILL_PARRY, 200);
	  SET_SKILL(ch, SKILL_RIDING, 150);
	  SET_SKILL(ch, SKILL_MOUNT, 150);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
	  SET_SKILL(ch, SKILL_RIPOST, 250);
      SET_SKILL(ch, SKILL_BANDAGE, 150);
	  break;
d1901 31
a1931 31
	  SET_SKILL(ch, SKILL_SWITCH, 50);
          SET_SKILL(ch, SKILL_GUARD, 50);
	  SET_SKILL(ch, SKILL_KICK, 200);
	  SET_SKILL(ch, SKILL_RESCUE, 200);
	  SET_SKILL(ch, SKILL_TRACK, 150);
	  SET_SKILL(ch, SKILL_BASH, 200);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SKILL_DUAL_WIELD, 200);
	  SET_SKILL(ch, SKILL_DOUBLE_ATTACK, 200);
	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_MAGIC_MISSILE, 1000);
	  SET_SKILL(ch, SPELL_CHILL_TOUCH, 1000);
	  SET_SKILL(ch, SPELL_SHOCKING_GRASP, 1000);
	  SET_SKILL(ch, SPELL_SENSE_LIFE, 1000);
	  SET_SKILL(ch, SKILL_SPRINGLEAP, 50);
          SET_SKILL(ch, SPELL_STONE_SKIN, 1000);   
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	  SET_SKILL(ch, SPELL_BLUR, 1000);
	  SET_SKILL(ch, SPELL_BARKSKIN, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 150);
	  SET_SKILL(ch, SKILL_PARRY, 150);
	  SET_SKILL(ch, SKILL_RIPOST, 50);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
	  break;
d1933 57
a1989 57
	  SET_SKILL(ch, SPELL_WANDERING_WOODS, 1000);
	  SET_SKILL(ch, SPELL_SUNRAY, 1000);
	  SET_SKILL(ch, SPELL_URBAN_RENEWAL, 1000);
	  SET_SKILL(ch, SPELL_ARMOR_OF_GAIA, 1000);
	  SET_SKILL(ch, SPELL_CONTINUAL_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_PLANE_SHIFT, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_NOURISHMENT, 1000);
	  SET_SKILL(ch, SPELL_GAIAS_CLOAK, 1000);
	  SET_SKILL(ch, SPELL_NATURES_EMBRACE, 1000);
	  SET_SKILL(ch, SPELL_ENTANGLE, 1000);
	  SET_SKILL(ch, SPELL_INVIGORATE, 1000);
	  SET_SKILL(ch, SPELL_CREATE_SPRING, 1000);
	  SET_SKILL(ch, SPELL_DETECT_MAGIC, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_VIGORIZE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_CURE_SERIOUS, 1000);
	  SET_SKILL(ch, SPELL_BARKSKIN, 1000);
	  SET_SKILL(ch, SPELL_NIGHT_VISION, 1000);
	  SET_SKILL(ch, SPELL_WRITHING_WEEDS, 1000);
	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
	  SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
	  SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
	  SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_SUMMON, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
	  SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
	  SET_SKILL(ch, SPELL_CALL_LIGHTNING, 1000);
	  SET_SKILL(ch, SPELL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_CONTROL_WEATHER, 1000);
	  SET_SKILL(ch, SPELL_HARM, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
	  SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
	  SET_SKILL(ch, SPELL_WATERWALK, 1000);
	  SET_SKILL(ch, SPELL_VITALITY, 1000);
	  SET_SKILL(ch, SPELL_CREEPING_DOOM, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SPELL_DARKNESS, 1000);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
          SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
	  SET_SKILL(ch, SPELL_MOONWELL, 1000);
          SET_SKILL(ch, SKILL_SHAPECHANGE, 50);
          SET_SKILL(ch, SKILL_BANDAGE, 50);
	  break;
d1991 37
a2027 37
	  SET_SKILL(ch, SPELL_CURE_LIGHT, 1000);
	  SET_SKILL(ch, SPELL_ARMOR, 1000);
	  SET_SKILL(ch, SPELL_CREATE_FOOD, 1000);
	  SET_SKILL(ch, SPELL_CREATE_WATER, 1000);
	  SET_SKILL(ch, SKILL_TAME, 50);
	  SET_SKILL(ch, SPELL_DETECT_POISON, 1000);
	  SET_SKILL(ch, SPELL_DETECT_ALIGN, 1000);
	  SET_SKILL(ch, SPELL_CURE_BLIND, 1000);
	  SET_SKILL(ch, SPELL_BLINDNESS, 1000);
	  SET_SKILL(ch, SPELL_BLESS, 1000);
	  SET_SKILL(ch, SPELL_PROT_FROM_EVIL, 1000);
	  SET_SKILL(ch, SPELL_CURE_CRITIC, 1000);
	  SET_SKILL(ch, SPELL_SUMMON, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_POISON, 1000);
	  SET_SKILL(ch, SPELL_WORD_OF_RECALL, 1000);
	  SET_SKILL(ch, SPELL_EARTHQUAKE, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_EVIL, 1000);
	  SET_SKILL(ch, SPELL_DISPEL_GOOD, 1000);
	  SET_SKILL(ch, SPELL_HEAL, 1000);
	  SET_SKILL(ch, SPELL_HARM, 1000);
	  SET_SKILL(ch, SPELL_GROUP_HEAL, 1000);
	  SET_SKILL(ch, SPELL_REMOVE_CURSE, 1000);
	  SET_SKILL(ch, SPELL_LIGHTNING_BOLT, 1000);
	  SET_SKILL(ch, SPELL_FIREBALL, 1000);
	  SET_SKILL(ch, SPELL_DETECT_INVIS, 1000);
	  SET_SKILL(ch, SPELL_HASTE, 1000);
	  SET_SKILL(ch, SPELL_VITALITY, 1000);
	  SET_SKILL(ch, SKILL_DODGE, 50);
	  SET_SKILL(ch, SPELL_DARKNESS, 1000);
	  SET_SKILL(ch, SKILL_RIDING, 50);
	  SET_SKILL(ch, SKILL_MOUNT, 50);
	  SET_SKILL(ch, SKILL_MEDITATE, 50);
      SET_SKILL(ch, SKILL_QUICK_CHANT, 50);
	  SET_SKILL(ch, SPELL_COMPREHEND_LANG, 1000);
      SET_SKILL(ch, SKILL_BANDAGE, 50);
	  break;

d2029 1
a2029 1

d2031 1
a2031 1

d2033 149
a2181 63
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, LANG_DUERGAR, 300);
	  SET_SKILL(ch, LANG_DROW, 1000);
	  SET_SKILL(ch, LANG_OGRE, 300);
	  SPEAKING(ch) = LANG_DROW;
          if (GET_LEVEL(ch) == 1){
	  GET_DAMROLL(ch) = 2;
	  GET_HITROLL(ch) = 3;
          }
	  GET_ALIGNMENT(ch) = -1000;
    break;
case RACE_ELF:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_ELVEN, 1000);
	  SET_SKILL(ch, LANG_COMMON, 200);
	  SET_SKILL(ch, LANG_HALFLING, 200);
	  SET_SKILL(ch, LANG_GNOMISH, 200);
	  SPEAKING(ch) = LANG_ELVEN;
          if (GET_LEVEL(ch) == 1){
	  GET_DAMROLL(ch) = 2;
	  GET_HITROLL(ch) = 3;
          }
	  GET_ALIGNMENT(ch) = 1000;
    break;
case RACE_DWARF:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_DWARVEN, 1000);
	  SET_SKILL(ch, LANG_COMMON, 100);
	  SET_SKILL(ch, LANG_GNOMISH, 200);
	  SET_SKILL(ch, LANG_HALFLING, 200);
	  SPEAKING(ch) = LANG_DWARVEN;
          if (GET_LEVEL(ch) == 1){
	  GET_DAMROLL(ch) = 4;
	  GET_HITROLL(ch) = 5;
          }
	  GET_ALIGNMENT(ch) = 1000;
    break;
case RACE_DUERGAR:
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, LANG_DUERGAR, 1000);
	  SET_SKILL(ch, LANG_DROW, 100);
	  SET_SKILL(ch, LANG_OGRE, 200);
	  SPEAKING(ch) = LANG_DUERGAR;
          if (GET_LEVEL(ch) == 1){
	  GET_DAMROLL(ch) = 4;
	  GET_HITROLL(ch) = 5;
          }
	  GET_ALIGNMENT(ch) = -1000;
    break;
case RACE_HALFLING:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_BIT(AFF_FLAGS(ch), AFF_SENSE_LIFE);
	  SET_SKILL(ch, LANG_HALFLING, 1000);
	  SET_SKILL(ch, LANG_COMMON, 400);
	  SET_SKILL(ch, LANG_ELVEN, 200);
	  SET_SKILL(ch, LANG_DWARVEN, 400);
	  SET_SKILL(ch, LANG_GNOMISH, 200);
	  SPEAKING(ch) = LANG_HALFLING;
          if (GET_LEVEL(ch) == 1){
	  GET_DAMROLL(ch) = 3;
	  GET_HITROLL(ch) = 6;
	  }
	  GET_ALIGNMENT(ch) = 1000;
a2182 86
case RACE_TROLL:
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, SKILL_DOORBASH, 1000);
	  SET_SKILL(ch, LANG_TROLLISH, 1000);
	  SET_SKILL(ch, LANG_DROW, 50);
	  SPEAKING(ch) = LANG_TROLLISH;
          if (GET_LEVEL(ch) == 1){
	  GET_DAMROLL(ch) = 5;
	  GET_HITROLL(ch) = 4;
	  }
	  GET_ALIGNMENT(ch) = -1000;
    break;
case RACE_OGRE:
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, SKILL_DOORBASH, 1000);
	  SET_SKILL(ch, LANG_OGRE, 1000);
	  SET_SKILL(ch, LANG_TROLLISH, 50);
	  SPEAKING(ch) = LANG_OGRE;
          if (GET_LEVEL(ch) == 1){
	  GET_DAMROLL(ch) = 5;
	  GET_HITROLL(ch) = 4;
	  }
	  GET_ALIGNMENT(ch) = -1000;
    break;
case RACE_HALF_ELF:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_COMMON, 1000);
	  SET_SKILL(ch, LANG_ELVEN, 1000);
	  SET_SKILL(ch, LANG_DWARVEN, 200);
	  SET_SKILL(ch, LANG_HALFLING, 200);
	  SPEAKING(ch) = LANG_ELVEN;
          if (GET_LEVEL(ch) == 1){
	  GET_HITROLL(ch) = 3;
	  GET_DAMROLL(ch) = 3;
	  }
	  GET_ALIGNMENT(ch) = 1000;
    break;
case RACE_GNOME:
	  TOGGLE_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_COMMON, 200);
	  SET_SKILL(ch, LANG_ELVEN, 200);
	  SET_SKILL(ch, LANG_GNOMISH, 1000);
	  SET_SKILL(ch, LANG_HALFLING, 200);
	  SPEAKING(ch) = LANG_GNOMISH;
          if (GET_LEVEL(ch) == 1){
	  GET_HITROLL(ch) = 4;
	  GET_DAMROLL(ch) = 2;
	  }
	  GET_ALIGNMENT(ch) = 1000;
	  break;
case RACE_BARBARIAN:
	SET_SKILL(ch, SKILL_DOORBASH, 1000);
	SET_SKILL(ch, LANG_COMMON, 200);
	SET_SKILL(ch, LANG_BARBARIAN, 1000);
	SPEAKING(ch) = LANG_BARBARIAN;
        if (GET_LEVEL(ch) == 1){
	GET_DAMROLL(ch) = 5;
	GET_HITROLL(ch) = 4;
 	}
        break;
case RACE_HUMAN:
	SET_SKILL(ch, LANG_COMMON, 1000);
	SET_SKILL(ch, LANG_ELVEN, 200);
	SET_SKILL(ch, LANG_HALFLING, 200);
	SET_SKILL(ch, LANG_DWARVEN, 200);
	SET_SKILL(ch, LANG_GNOMISH, 200);
	SET_SKILL(ch, LANG_HALFLING, 200);
	SPEAKING(ch) = LANG_COMMON;
        if (GET_LEVEL(ch) == 1){
	GET_HITROLL(ch) = 3;
	GET_DAMROLL(ch) = 3;
	}
	break;
case RACE_ORC:
	SET_SKILL(ch, LANG_DROW, 200);
	SET_SKILL(ch, LANG_DUERGAR, 200);
	SET_SKILL(ch, LANG_OGRE, 100);
	SET_SKILL(ch, LANG_ORCISH, 1000);
	SET_SKILL(ch, LANG_TROLLISH, 200);
	SPEAKING(ch) = LANG_ORCISH;
          if (GET_LEVEL(ch) == 1){
	GET_HITROLL(ch) = 3;
	GET_DAMROLL(ch) = 3;
	}
	GET_ALIGNMENT(ch) = -1000;
		break;
d2187 1
a2187 1

d2202 4
a2205 4
    void advance_level(struct char_data * ch, int);
    void set_innate(struct char_data * ch, char *arg);


d2208 1
a2208 1

d2214 1
a2214 1

d2216 1
a2216 1

d2220 1
a2220 1

d2224 1
a2224 1

d2242 2
a2243 2
//  extern struct con_app_type con_app[];

d2246 1
a2246 1
       sub = 0;
d2248 1
a2248 1
      sub = 1;
d2250 1
a2250 1

d2252 14
a2265 14
	  if (state) {
            dice = number(3, 8);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
		add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= (GET_LASTLEVEL(ch) + sub);
          else
		add_hp -= 8;
		add_move = -number(0, 2);
		}
		break;

d2267 14
a2280 14
      if (state) {
          dice = number(5, 10);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   add_hp -= 10;
    add_move = -number(0, 2);
	  }
	  break;

d2282 14
a2295 14
      if (state) {
	  dice = number(7, 13);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   	  add_hp -= 13;
    add_move = -number(1, 3);
	  }
	break;

d2297 9
a2305 9
   	  if (state) {
	  dice = number(10, 15);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
d2307 2
a2308 2
    add_move = -number(1, 3);
	  }
d2310 1
a2310 1

d2312 12
a2323 12
      if (state) {
	 dice = number(9, 14);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 32); 
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   	  add_hp -=  14;
    add_move = -number(1, 2); 
	  }
d2325 1
a2325 1

d2328 11
a2338 11
	  dice = number(9, 14);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 2); 
	  } else {
        if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   	  add_hp -=  14;
    add_move = -number(1, 2); 
	  }
d2340 14
a2353 14

	case CLASS_RANGER:
     if (state) {
	 dice = number(9, 13);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3); 
	  } else {
         if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   	  add_hp -= 13;
    add_move = -number(1, 3); 
	  }
d2355 15
a2369 15


	case CLASS_DRUID:
		if (state) {
		dice = number(5, 11);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(0, 2);
		} else {
            if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
		 	add_hp -= 11;
    add_move = -number(0, 2);
		}
d2372 62
a2433 62

	case CLASS_SHAMAN:
		if (state) {
		dice = number(5, 10);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(0, 2);
		} else {
            if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
		 	add_hp -= 10;
    add_move = -number(0, 2);
		}
    break;

	case CLASS_ASSASSIN:
		if (state) {
	dice = number(7, 12);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
		} else {
            if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
			add_hp -= 12;
    add_move = -number(1, 3);
		}
    break;

	 case CLASS_MERCENARY:
		 if (state) {
dice = number(7, 14);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
		} else {
             if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
			add_hp -= 14;
    add_move = -number(1, 3);
		}

	 case CLASS_NECROMANCER:
     if (state) {
dice = number(3, 8);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
		add_move = number(0, 2);
	 } else {
         if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
		add_hp -= 8;
		add_move = -number(0, 2);
		}
		break;


	 case CLASS_CONJURER:
d2435 12
a2446 12
		dice = number(3, 8);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
		add_move = number(0, 2);
	} else {
        if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
		add_hp -= 8;
		add_move = -number(0, 2);
		}
		break;
d2448 9
a2456 9
   	  if (state) {
dice = number(10, 15);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
d2458 2
a2459 2
    add_move = -number(1, 3);
	  }
d2462 9
a2470 9
   	  if (state) {
dice = number(10, 15);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
d2472 2
a2473 2
    add_move = -number(1, 3);
	  }
d2476 9
a2484 9
   	  if (state) {
dice = number(10, 15);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
d2486 2
a2487 2
    add_move = -number(1, 3);
	  }
d2490 13
a2502 13
      if (state) {
	  dice = number(5, 10);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   add_hp -= 10;
    add_move = -number(0, 2);
	  }
	  break;
d2505 14
a2518 14
      if (state) {
	  dice = number(5, 10);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   add_hp -= 10;
    add_move = -number(0, 2);
	  }
	  break;

d2520 13
a2532 13
      if (state) {
	 dice = number(5, 10);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   add_hp -= 10;
    add_move = -number(0, 2);
	  }
	  break;
d2534 13
a2546 13
      if (state) {
dice = number(7, 13);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   	  add_hp -= 13;
    add_move = -number(1, 3);
	  }
	break;
d2548 13
a2560 13
      if (state) {
	dice = number(7, 13);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
    add_move = number(1, 3);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
	   	  add_hp -= 13;
    add_move = -number(1, 3);
	  }
	break;
d2562 13
a2574 13
	  if (state) {
		dice = number(3, 8);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
		add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
		add_hp -= 8;
		add_move = -number(0, 2);
		}
		break;
d2576 13
a2588 13
	  if (state) {
		dice = number(3, 8);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
		add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
		add_hp -= 8;
		add_move = -number(0, 2);
		}
		break;
d2590 16
a2605 16
	  if (state) {
		dice = number(3, 8);
            add_hp += dice;
            GET_LASTLEVEL(ch) = dice;
		add_move = number(0, 2);
	  } else {
          if (!(GET_LASTLEVEL(ch) == 0))
              add_hp -= GET_LASTLEVEL(ch) + sub;
          else
		add_hp -= 8;
		add_move = -number(0, 2);
		}
		break;



d2608 13
a2620 13


/*if over level 25 use constants for hps*/
    if (GET_LEVEL(ch) > 30)
        if (state)
			add_hp = std_hp_table[(int)GET_CLASS(ch)];
		else
			add_hp = 0 - std_hp_table[(int)GET_CLASS(ch)];
		
/*race reduce*/
/*color out if dont want it in*/
 /*   add_hp = add_hp + race_reduce[(int)GET_RACE(ch)];
*/
d2630 1
a2630 1

d2632 5
a2636 5
      if (state)
	  GET_PRACTICES(ch) += MAX(2, wis_app[GET_WIS(ch)].bonus);
  	  else
	  ;} else {
      if (state) 
d2638 1
a2638 1
	  else 
d2645 1
a2645 1

d2647 1
a2647 1

d2650 2
a2651 2
  sprintf(buf, "%s advanced to level %d", GET_NAME(ch), GET_LEVEL(ch));
  mudlog(buf, BRF, MAX(LVL_IMMORT, GET_INVIS_LEV(ch)), TRUE);
d2653 2
a2654 2
   sprintf(buf, "%s lost level %d", GET_NAME(ch), GET_LEVEL(ch)+1);
  mudlog(buf, BRF, MAX(LVL_IMMORT, GET_INVIS_LEV(ch)), TRUE);
d2657 1
a2657 1
  }
d2698 10
a2707 10
	  (IS_OBJ_STAT(obj, ITEM_ANTI_PALADIN) && IS_PALADIN(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_ANTI_PALADIN) && IS_ANTI_PALADIN(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_RANGER) && IS_RANGER(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_DRUID) && IS_DRUID(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_SHAMAN) && IS_SHAMAN(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_ASSASSIN) && IS_ASSASSIN(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_MERCENARY) && IS_MERCENARY(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_NECROMANCER) && IS_NECROMANCER(ch)) ||
	  (IS_OBJ_STAT(obj, ITEM_ANTI_CONJURER) && IS_CONJURER(ch))) 
	return 1;
d2709 1
a2709 1
	return 0;
d2721 1
a2721 1
{*/
d2723 44
a2766 44
   int i, j;
   int cls_mage = (1 << CLASS_MAGIC_USER);
   int cls_cleric = (1 << CLASS_CLERIC);
   int cls_thief = (1 << CLASS_THIEF);
   int cls_warrior = (1 << CLASS_WARRIOR);
   int cls_paladin = (1 << CLASS_PALADIN);
   int cls_antipaladin = (1 << CLASS_ANTI_PALADIN);
   int cls_ranger = (1 << CLASS_RANGER);
   int cls_druid = (1 << CLASS_DRUID);
   int cls_shaman = (1 << CLASS_SHAMAN);
   int cls_assassin = (1 << CLASS_ASSASSIN);
   int cls_mercenary = (1 << CLASS_MERCENARY);
   int cls_necro = (1 << CLASS_NECROMANCER);
   int cls_conj = (1 << CLASS_CONJURER);
   int cls_monk = (1 << CLASS_MONK);
   int cls_bers = (1 << CLASS_BERSERKER);
   int cls_priest = (1 << CLASS_PRIEST);
   int cls_diab = (1 << CLASS_DIABOLIST);
   int cls_mystic = (1 << CLASS_MYSTIC);
   int cls_rogue = (1 << CLASS_ROGUE);
   int cls_bard = (1 << CLASS_BARD);
   int cls_pyro = (1 << CLASS_PYROMANCER);
   int cls_cryo = (1 << CLASS_CRYOMANCER);
   int cls_illu = (1 << CLASS_ILLUSIONIST);
   int cls_hunter = (1 << CLASS_HUNTER);

   
   /* Assign a spell/skill to a a whole group of classes (0 is all)
    For instance, { SKILL_SECOND_ATTACK, cls_mage | cls_cleric, 14 },
    will give mages and clerics the SECOND_ATTACK skill at level 14.
    More convenient than individual spell_level()s.  Use 0 to give
    a skill to all the classes.
      -dkoepke */
   int base_skl[][3] = {
     { SKILL_MOUNT , 0, 1 },
     { SKILL_RIDING, 0, 1 },
     
     { -1, -1 } /* THIS MUST END THE LIST*/
   };
   
   /* give all the base_skl[]'s*/
   for (j = 0; base_skl[j][0] != -1; j++)
     for (i = 0; i < NUM_CLASSES; i++)
       if (!base_skl[j][1] || IS_SET(base_skl[j][1], (1 << i)))
d2768 12
a2779 12
 
   /* in my base patch, cls_mage, etc. are unused and that leads to
    annyoing warnings, so here I'll use them...*/
   j = (cls_mage-cls_mage)+(cls_cleric-cls_cleric)+(cls_thief-cls_thief)+
       (cls_warrior-cls_warrior)+(cls_paladin-cls_paladin)+
	   (cls_antipaladin-cls_antipaladin)+(cls_ranger-cls_ranger)+
	   (cls_druid-cls_druid)+(cls_shaman-cls_shaman)+
	   (cls_assassin-cls_assassin)+(cls_mercenary-cls_mercenary)+
	   (cls_necro-cls_necro)+(cls_conj-cls_conj) + cls_hunter + cls_illu +
  cls_cryo + cls_pyro + cls_bard + cls_rogue + cls_mystic + cls_diab + 
cls_priest + cls_bers + cls_monk;
   
d2888 2
a2889 2
spell_level(SKILL_BANDAGE, CLASS_PYROMANCER, 1, 2);

d2983 2
a2984 2
spell_level(SKILL_BANDAGE, CLASS_ILLUSIONIST, 1, 2);

d3041 1
a3041 1
spell_level(SKILL_BANDAGE, CLASS_CLERIC, 1, 2);
d3111 1
a3111 1
spell_level(SKILL_BANDAGE, CLASS_PRIEST, 1, 2);
d3175 1
a3175 1
spell_level(SKILL_BANDAGE, CLASS_DIABOLIST, 1, 2);
d3201 1
a3201 1
 /* spell_level(SPELL_CALL_LIGHTNING, CLASS_MYSTIC, 15);*/
d3203 1
a3203 1
 /* spell_level(SPELL_CONTROL_WEATHER, CLASS_MYSTIC, 17);*/
d3218 2
a3219 2
spell_level(SKILL_BANDAGE, CLASS_MYSTIC, 1, 2);

d3222 1
a3222 1

d3236 1
a3236 1
spell_level(SKILL_BANDAGE, CLASS_THIEF, 1, 2);
d3240 1
a3240 1

d3253 1
a3253 1
spell_level(SKILL_BANDAGE, CLASS_ROGUE, 1, 2);
d3271 1
a3271 1
spell_level(SKILL_BANDAGE, CLASS_BARD, 1, 2);
d3292 1
a3292 1
spell_level(SKILL_BANDAGE, CLASS_WARRIOR, 1, 2);
d3312 1
a3312 1
spell_level(SKILL_BANDAGE, CLASS_MONK, 1, 2);
d3332 2
a3333 2
spell_level(SKILL_BANDAGE, CLASS_BERSERKER, 1, 2);

d3353 2
a3354 2
spell_level(SKILL_BANDAGE, CLASS_HUNTER, 1, 2);

d3485 3
a3487 3
	spell_level(SKILL_BANDAGE, CLASS_RANGER, 1, 2);


d3546 1
a3546 1
spell_level(SKILL_BANDAGE, CLASS_DRUID, 1, 2);
d3587 1
a3587 1
spell_level(SKILL_BANDAGE, CLASS_SHAMAN, 1, 2);
d3610 1
a3610 1
spell_level(SKILL_BANDAGE, CLASS_ASSASSIN, 1, 2);
d3633 1
a3633 1
spell_level(SKILL_BANDAGE, CLASS_MERCENARY, 1, 2);
d3646 1
a3646 1
 /* spell_level(SPELL_ARMOR, CLASS_MAGIC_USER, 1);*/
d3653 1
a3653 1
 /* spell_level(SPELL_BLINDNESS, CLASS_MAGIC_USER, 16);*/
d3655 1
a3655 1
 /* spell_level(SPELL_COLOR_SPRAY, CLASS_MAGIC_USER, 19);*/
d3657 3
a3659 3
/*  spell_level(SPELL_CURSE, CLASS_MAGIC_USER, 16);*/
 /* spell_level(SPELL_FIREBALL, CLASS_MAGIC_USER, 26);
//  spell_level(SPELL_CHARM, CLASS_MAGIC_USER, 31);*/
d3673 1
a3673 1
spell_level(SKILL_BANDAGE, CLASS_NECROMANCER, 1, 2);
d3688 1
a3688 1
 /* spell_level(SPELL_ARMOR, CLASS_MAGIC_USER, 1);*/
d3719 1
a3719 1
spell_level(SKILL_BANDAGE, CLASS_CONJURER, 1, 2);
d3727 2
a3728 2
//  int skill_level = 0;

a3729 2
  {
    if (spell_info[skill].min_level[(int)GET_CLASS(ch)] <= GET_LEVEL(ch) )
d3731 26
a3756 24
      if(skill == SPELL_LOCATE_OBJECT)
      {
         SET_SKILL(ch, skill, 0);
         continue;
      }
      if (GET_SKILL(ch, skill) <= 0)
      {
        /* this isn't guaranteed in the future to be correct, very generic..pelase 
           feel free to update as needed.. fingh 11/28/98
           Set spells to 1000, all others to 100
        */
        if (skill <= MAX_SPELLS)
          SET_SKILL(ch, skill, 1000)
        else
          SET_SKILL(ch, skill, 150)
      } /* end if (get_skill) */
    } /* end if( spell_info...) */         
   // the following tweaks innates...fix it. Fingh 12/9/98
    else
      SET_SKILL(ch, skill, 0);

  } /* end for loop */
    switch (GET_RACE(ch)) {

d3758 82
a3839 82
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, LANG_DROW, 1000);
	  SET_SKILL(ch, LANG_DUERGAR, 200);
	  SET_SKILL(ch, LANG_OGRE, 100);
	  SET_SKILL(ch, LANG_ORCISH, 200);
	  SPEAKING(ch) = LANG_DROW;
    break;
case RACE_ELF:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_ELVEN, 1000);
	  SET_SKILL(ch, LANG_COMMON, 200);
	  SET_SKILL(ch, LANG_HALFLING, 200);
	  SET_SKILL(ch, LANG_GNOMISH, 200);
    break;
case RACE_DWARF:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_DWARVEN, 1000);
	  SET_SKILL(ch, LANG_COMMON, 100);
	  SET_SKILL(ch, LANG_GNOMISH, 200);
	  SET_SKILL(ch, LANG_HALFLING, 200);
    break;
case RACE_DUERGAR:
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, LANG_DUERGAR, 1000);
	  SET_SKILL(ch, LANG_DROW, 100);
	  SET_SKILL(ch, LANG_OGRE, 200);
    break;
case RACE_HALFLING:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_BIT(AFF_FLAGS(ch), AFF_SENSE_LIFE);
	  SET_SKILL(ch, LANG_HALFLING, 1000);
	  SET_SKILL(ch, LANG_COMMON, 400);
	  SET_SKILL(ch, LANG_ELVEN, 200);
	  SET_SKILL(ch, LANG_DWARVEN, 400);
	  SET_SKILL(ch, LANG_GNOMISH, 200);
    break;
case RACE_TROLL:
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, SKILL_DOORBASH, 1000);
	  SET_SKILL(ch, LANG_TROLLISH, 1000);
	  SET_SKILL(ch, LANG_DROW, 50);
    break;
case RACE_OGRE:
	  SET_BIT(AFF2_FLAGS(ch), AFF2_ULTRAVISION);
	  SET_SKILL(ch, SKILL_DOORBASH, 1000);
	  SET_SKILL(ch, LANG_OGRE, 1000);
	  SET_SKILL(ch, LANG_TROLLISH, 50);
          break;
case RACE_HALF_ELF:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_COMMON, 1000);
	  SET_SKILL(ch, LANG_ELVEN, 1000);
	  SET_SKILL(ch, LANG_DWARVEN, 200);
	  SET_SKILL(ch, LANG_HALFLING, 200);
          break;
case RACE_GNOME:
	  SET_BIT(AFF_FLAGS(ch), AFF_INFRAVISION);
	  SET_SKILL(ch, LANG_COMMON, 200);
	  SET_SKILL(ch, LANG_ELVEN, 200);
	  SET_SKILL(ch, LANG_GNOMISH, 1000);
	  SET_SKILL(ch, LANG_HALFLING, 200);
	  break;
case RACE_BARBARIAN:
	SET_SKILL(ch, SKILL_DOORBASH, 1000);
	SET_SKILL(ch, LANG_COMMON, 200);
	SET_SKILL(ch, LANG_BARBARIAN, 1000);
        break;
case RACE_HUMAN:
	SET_SKILL(ch, LANG_COMMON, 1000);
	SET_SKILL(ch, LANG_ELVEN, 200);
	SET_SKILL(ch, LANG_HALFLING, 200);
	SET_SKILL(ch, LANG_DWARVEN, 200);
	SET_SKILL(ch, LANG_GNOMISH, 200);
	SET_SKILL(ch, LANG_HALFLING, 200);
	break;
case RACE_ORC:
	SET_SKILL(ch, LANG_DROW, 200);
	SET_SKILL(ch, LANG_DUERGAR, 200);
	SET_SKILL(ch, LANG_OGRE, 100);
	SET_SKILL(ch, LANG_ORCISH, 1000);
	SET_SKILL(ch, LANG_TROLLISH, 200);
	break;
d3841 2
a3842 2
      

@
