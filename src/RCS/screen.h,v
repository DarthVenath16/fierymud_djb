head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2008.05.23.18.47.00;	author myc;	state Exp;
branches;
next	1.6;

1.6
date	2008.04.03.02.02.05;	author myc;	state Exp;
branches;
next	1.5;

1.5
date	2008.01.15.06.51.47;	author myc;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.13.02.32.10;	author jjl;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.24.21.17.12;	author rsd;	state Exp;
branches;
next	1.2;

1.2
date	99.09.05.07.00.39;	author jimmy;	state Exp;
branches;
next	1.1;

1.1
date	99.01.29.01.23.31;	author mud;	state Exp;
branches;
next	;


desc
@/* ************************************************************************
*   File: screen.h                                      Part of CircleMUD *
*  Usage: header file with ANSI color codes for online color              *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */

#define KNRM  "\x1B[0m"
#define KRED  "\x1B[31m"
#define KGRN  "\x1B[32m"
#define KYEL  "\x1B[33m"
#define KBLU  "\x1B[34m"
#define KMAG  "\x1B[35m"
#define KCYN  "\x1B[36m"
#define KWHT  "\x1B[37m"
#define KBLK  "\x1B[30m"
#define KNUL  ""
#define KCLR  "\x1B[2J"
#define KUND  "\x1B[4m"
#define KDAR  "\x1B[2m"
#define KBLD  "\x1B[1m"

#define KBRED  "\x1B[41m"
#define KBGRN  "\x1B[42m"
#define KBYEL  "\x1B[43m"
#define KBBLU  "\x1B[44m"
#define KBMAG  "\x1B[45m"
#define KBCYN  "\x1B[46m"
#define KBWHT  "\x1B[47m"
#define KBBLK  "\x1B[40m"

/* conditional color.  pass it a pointer to a char_data and a color level. */
#define C_OFF	0
#define C_SPR	1
#define C_NRM	2
#define C_CMP	3
#define _clrlevel(ch) ((PRF_FLAGGED((ch), PRF_COLOR_1) ? 1 : 0) + (PRF_FLAGGED((ch), PRF_COLOR_2) ? 2 : 0))
#define clr(ch,lvl) (ch->desc ? (ch->desc->original ? _clrlevel(ch->desc->original) >= (lvl):_clrlevel(ch) >= (lvl)):_clrlevel(ch) >= (lvl))
#define CCNRM(ch,lvl)  (clr((ch),(lvl))?KNRM:KNUL)
#define CCBLK(ch,lvl)  (clr((ch),(lvl))?KBLK:KNUL)
#define CCRED(ch,lvl)  (clr((ch),(lvl))?KRED:KNUL)
#define CCGRN(ch,lvl)  (clr((ch),(lvl))?KGRN:KNUL)
#define CCYEL(ch,lvl)  (clr((ch),(lvl))?KYEL:KNUL)
#define CCBLU(ch,lvl)  (clr((ch),(lvl))?KBLU:KNUL)
#define CCMAG(ch,lvl)  (clr((ch),(lvl))?KMAG:KNUL)
#define CCCYN(ch,lvl)  (clr((ch),(lvl))?KCYN:KNUL)
#define CCWHT(ch,lvl)  (clr((ch),(lvl))?KWHT:KNUL)
#define CCBLD(ch,lvl)  (clr((ch),(lvl))?KBLD:KNUL)
#define CCBLN(ch,lvl)  (clr((ch),(lvl))?KBLN:KNUL)
#define CCCLR(ch,lvl)  (clr((ch),(lvl))?KCLR:KNUL)
#define CCUND(ch,lvl)  (clr((ch),(lvl))?KUND:KNUL)
#define CCDAR(ch,lvl)  (clr((ch),(lvl))?KDAR:KNUL)


#define CCBBLK(ch,lvl)  (clr((ch),(lvl))?KBBLK:KNUL)
#define CCBRED(ch,lvl)  (clr((ch),(lvl))?KBRED:KNUL)
#define CCBGRN(ch,lvl)  (clr((ch),(lvl))?KBGRN:KNUL)
#define CCBYEL(ch,lvl)  (clr((ch),(lvl))?KBYEL:KNUL)
#define CCBBLU(ch,lvl)  (clr((ch),(lvl))?KBBLU:KNUL)
#define CCBMAG(ch,lvl)  (clr((ch),(lvl))?KBMAG:KNUL)
#define CCBCYN(ch,lvl)  (clr((ch),(lvl))?KBCYN:KNUL)
#define CCBWHT(ch,lvl)  (clr((ch),(lvl))?KBWHT:KNUL)

#define COLOR_LEV(ch) (ch->desc ? (ch->desc->original ? _clrlevel(ch->desc->original) : _clrlevel(ch)) :  _clrlevel(ch))

#define QNRM CCNRM(ch,C_SPR)
#define QBLK CCBLK(ch,C_SPR)
#define QRED CCRED(ch,C_SPR)
#define QGRN CCGRN(ch,C_SPR)
#define QYEL CCYEL(ch,C_SPR)
#define QBLU CCBLU(ch,C_SPR)
#define QMAG CCMAG(ch,C_SPR)
#define QCYN CCCYN(ch,C_SPR)
#define QWHT CCWHT(ch,C_SPR)
#define QBLD CCBLD(ch,C_SPR)
#define QBLN CCBLN(ch,C_SPR)
#define QCLR CCBLN(ch,C_SPR)
#define QUND CCUND(ch,C_SPR)
#define QDAR CCDAR(ch,C_SPR)
#define QBBLK CCBBLK(ch,C_SPR)
#define QBRED CCBRED(ch,C_SPR)
#define QBGRN CCBGRN(ch,C_SPR)
#define QBYEL CCBYEL(ch,C_SPR)
#define QBBLU CCBBLU(ch,C_SPR)
#define QBMAG CCBMAG(ch,C_SPR)
#define QBCYN CCBCYN(ch,C_SPR)
#define QBWHT CCBWHT(ch,C_SPR)
@


1.7
log
@Added ansi_strlen function that counts the length of a string sans
color codes.
@
text
@/***************************************************************************
 * $Id: screen.h,v 1.6 2008/04/03 02:02:05 myc Exp myc $
 ***************************************************************************/
/***************************************************************************
 *   File: screen.h                                       Part of FieryMUD *
 *  Usage: header file with ANSI color codes for online color              *
 *                                                                         *
 *  All rights reserved.  See license.doc for complete information.        *
 *                                                                         *
 *  FieryMUD Copyright (C) 1998, 1999, 2000 by the Fiery Consortium        *
 *  FieryMUD is based on CircleMUD Copyright (C) 1993, 94 by the Trustees  *
 *  of the Johns Hopkins University                                        *
 *  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
 ***************************************************************************/

#define CLR_PARSE	0
#define CLR_ESCAPE	1
#define CLR_STRIP	2

extern void init_colors(void);
extern int process_colors(char *out, size_t max_len, const char *in, int mode);
extern int count_color_chars(const char *string);
extern int ansi_strlen(const char *string);
extern char *strip_ansi(const char *string);
extern char *escape_ansi(const char *string);

/* General color codes */
#define ANUL   ""           /* No effect                            */
#define ANRM   "\x1B[0m"    /* Reset to normal                      */
#define ABLD   "\x1B[1m"    /* Brighten colors                      */
#define ADAR   "\x1B[2m"    /* Dim colors                           */
#define AEMP   "\x1B[3m"    /* Italicize (not widely supported)     */
#define AUND   "\x1B[4m"    /* Underline                            */
#define AFSH   "\x1B[5m"    /* Flashing text                        */
#define AFST   "\x1B[6m"    /* Flashing text (fast)                 */
#define ARVS   "\x1B[7m"    /* Reverse video                        */
#define AHID   "\x1B[8m"    /* Hide text                            */
#define ADUN   "\x1B[21m"   /* Double underline                     */
#define ANRI   "\x1B[22m"   /* Normal intensity (not dim/bright)    */
#define ANUN   "\x1B[24m"   /* Turn off underline                   */
#define ANFS   "\x1B[25m"   /* Turn off flashing                    */
#define APOS   "\x1B[27m"   /* Positive image                       */
#define AUNH   "\x1B[28m"   /* Unhide text                          */

#define ACLR   "\x1B[2J"    /* Clear screen                         */
#define AALM   "\x07"       /* Alarm (beep)                         */
#define CREL   '&'          /* Relative color change character      */
#define AREL   "&"          /* Relative color change character      */
#define CABS   '@@'          /* Absolute color change character      */
#define AABS   "@@"          /* Absolute color change character      */

/* Normal (relative) text colors */
#define FBLK   "\x1B[30m"   /* Foreground Black                     */
#define FRED   "\x1B[31m"   /* Foreground Red                       */
#define FGRN   "\x1B[32m"   /* Foreground Green                     */
#define FYEL   "\x1B[33m"   /* Foreground Yellow                    */
#define FBLU   "\x1B[34m"   /* Foreground Blue                      */
#define FMAG   "\x1B[35m"   /* Foreground Magenta                   */
#define FCYN   "\x1B[36m"   /* Foreground Cyan                      */
#define FWHT   "\x1B[37m"   /* Foreground White (Light Gray)        */

/* Highlit (relative) text colors */
#define HBLK   "\x1B[1;30m" /* Foreground Bright Black (Dark Gray)  */
#define HRED   "\x1B[1;31m" /* Foreground Bright Red                */
#define HGRN   "\x1B[1;32m" /* Foreground Bright Green              */
#define HYEL   "\x1B[1;33m" /* Foreground Bright Yellow             */
#define HBLU   "\x1B[1;34m" /* Foreground Bright Blue               */
#define HMAG   "\x1B[1;35m" /* Foreground Bright Magenta            */
#define HCYN   "\x1B[1;36m" /* Foreground Bright Cyan               */
#define HWHT   "\x1B[1;37m" /* Foreground Bright White              */

/* Normal (relative) background colors */
#define BBLK   "\x1B[40m"   /* Background Black                     */
#define BRED   "\x1B[41m"   /* Background Red                       */
#define BGRN   "\x1B[42m"   /* Background Green                     */
#define BYEL   "\x1B[43m"   /* Background Yellow                    */
#define BBLU   "\x1B[44m"   /* Background Blue                      */
#define BMAG   "\x1B[45m"   /* Background Magenta                   */
#define BCYN   "\x1B[46m"   /* Background Cyan                      */
#define BWHT   "\x1B[47m"   /* Background White                     */

/* Normal (absolute) text colors */
#define AFBLK  "\x1B[0;30m" /* Foreground Black                     */
#define AFRED  "\x1B[0;31m" /* Foreground Red                       */
#define AFGRN  "\x1B[0;32m" /* Foreground Green                     */
#define AFYEL  "\x1B[0;33m" /* Foreground Yellow                    */
#define AFBLU  "\x1B[0;34m" /* Foreground Blue                      */
#define AFMAG  "\x1B[0;35m" /* Foreground Magenta                   */
#define AFCYN  "\x1B[0;36m" /* Foreground Cyan                      */
#define AFWHT  "\x1B[0;37m" /* Foreground White (Light Gray)        */

/* Bright (absolute) text colors */
#define AHBLK  "\x1B[0;1;30m" /* Foreground Bright Black (Dark Gray)*/
#define AHRED  "\x1B[0;1;31m" /* Foreground Bright Red              */
#define AHGRN  "\x1B[0;1;32m" /* Foreground Bright Green            */
#define AHYEL  "\x1B[0;1;33m" /* Foreground Bright Yellow           */
#define AHBLU  "\x1B[0;1;34m" /* Foreground Bright Blue             */
#define AHMAG  "\x1B[0;1;35m" /* Foreground Bright Magenta          */
#define AHCYN  "\x1B[0;1;36m" /* Foreground Bright Cyan             */
#define AHWHT  "\x1B[0;1;37m" /* Foreground Bright White            */

/* Flashing (absolute) text colors */
#define ABBLK  "\x1B[0;5;30m" /* Foreground Blinking Black          */
#define ABRED  "\x1B[0;5;31m" /* Foreground Blinking Red            */
#define ABGRN  "\x1B[0;5;32m" /* Foreground Blinking Green          */
#define ABYEL  "\x1B[0;5;33m" /* Foreground Blinking Yellow         */
#define ABBLU  "\x1B[0;5;34m" /* Foreground Blinking Blue           */
#define ABMAG  "\x1B[0;5;35m" /* Foreground Blinking Magenta        */
#define ABCYN  "\x1B[0;5;36m" /* Foreground Blinking Cyan           */
#define ABWHT  "\x1B[0;5;37m" /* Foreground Blinking White          */

/* Bright flashing (absolute) text colors */
#define ABHBLK "\x1B[1;5;30m" /* Foreground Blinking Bright Black   */
#define ABHRED "\x1B[1;5;31m" /* Foreground Blinking Bright Red     */
#define ABHGRN "\x1B[1;5;32m" /* Foreground Blinking Bright Green   */
#define ABHYEL "\x1B[1;5;33m" /* Foreground Blinking Bright Yellow  */
#define ABHBLU "\x1B[1;5;34m" /* Foreground Blinking Bright Blue    */
#define ABHMAG "\x1B[1;5;35m" /* Foreground Blinking Bright Magenta */
#define ABHCYN "\x1B[1;5;36m" /* Foreground Blinking Bright Cyan    */
#define ABHWHT "\x1B[1;5;37m" /* Foreground Blinking Bright White   */

/* Conditional color.  pass it a pointer to a char_data and a color level. */
#define C_OFF	0
#define C_SPR	1
#define C_NRM	2
#define C_CMP	3
#define COLOR_LEV(ch)       ((PRF_FLAGGED((ch), PRF_COLOR_1) ? 1 : 0) + \
                             (PRF_FLAGGED((ch), PRF_COLOR_2) ? 2 : 0))

#define CLRLV(ch, clr, lev) (COLOR_LEV(ch) >= (lev) ? (clr) : ANUL)
#define CLR(ch, clr)        CLRLV((ch), (clr), C_NRM)

#define QNRM   CLR(ch, ANRM)

/* Normal (absolute) text colors */
#define QBLK   CLR(ch, AFBLK)
#define QRED   CLR(ch, AFRED)
#define QGRN   CLR(ch, AFGRN)
#define QYEL   CLR(ch, AFYEL)
#define QBLU   CLR(ch, AFBLU)
#define QMAG   CLR(ch, AFMAG)
#define QCYN   CLR(ch, AFCYN)
#define QWHT   CLR(ch, AFWHT)

/* Bright (absolute) text colors */
#define QHBLK  CLR(ch, AHBLK)
#define QHRED  CLR(ch, AHRED)
#define QHGRN  CLR(ch, AHGRN)
#define QHYEL  CLR(ch, AHYEL)
#define QHBLU  CLR(ch, AHBLU)
#define QHMAG  CLR(ch, AHMAG)
#define QHCYN  CLR(ch, AHCYN)
#define QHWHT  CLR(ch, AHWHT)

/***************************************************************************
 * $Log: screen.h,v $
 * Revision 1.6  2008/04/03 02:02:05  myc
 * Upgraded ansi color handling code.
 *
 * Revision 1.5  2008/01/15 06:51:47  myc
 * Reformatted the conditional color macros.
 *
 * Revision 1.4  2002/09/13 02:32:10  jjl
 * Updated header comments
 *
 * Revision 1.3  2000/11/24 21:17:12  rsd
 * Altered comment header and added back rlog messgaes from
 * prior to the addition of the $log$ string.
 *
 * Revision 1.2  1999/09/05 07:00:39  jimmy
 * Added RCS Log and Id strings to each source file
 *
 * Revision 1.1  1999/01/29 01:23:31  mud
 * Initial revision
 *
 ***************************************************************************/
@


1.6
log
@Upgraded ansi color handling code.
@
text
@d2 1
a2 1
 * $Id: screen.h,v 1.5 2008/01/15 06:51:47 myc Exp myc $
d23 1
d157 3
@


1.5
log
@Reformatted the conditional color macros.
@
text
@d2 1
a2 1
 * $Id: screen.h,v 1.4 2002/09/13 02:32:10 jjl Exp myc $
d16 104
a119 23
#define KNRM  "\x1B[0m"
#define KRED  "\x1B[31m"
#define KGRN  "\x1B[32m"
#define KYEL  "\x1B[33m"
#define KBLU  "\x1B[34m"
#define KMAG  "\x1B[35m"
#define KCYN  "\x1B[36m"
#define KWHT  "\x1B[37m"
#define KBLK  "\x1B[30m"
#define KNUL  ""
#define KCLR  "\x1B[2J"
#define KUND  "\x1B[4m"
#define KDAR  "\x1B[2m"
#define KBLD  "\x1B[1m"

#define KBRED  "\x1B[41m"
#define KBGRN  "\x1B[42m"
#define KBYEL  "\x1B[43m"
#define KBBLU  "\x1B[44m"
#define KBMAG  "\x1B[45m"
#define KBCYN  "\x1B[46m"
#define KBWHT  "\x1B[47m"
#define KBBLK  "\x1B[40m"
d126 27
a152 51
#define _clrlevel(ch) ((PRF_FLAGGED((ch), PRF_COLOR_1) ? 1 : 0) + (PRF_FLAGGED((ch), PRF_COLOR_2) ? 2 : 0))
#define clr(ch, lvl)  (_clrlevel(REAL_CHAR(ch)) >= (lvl))
#define COLOR_LEV(ch) (_clrlevel(REAL_CHAR(ch)))

#define CCNRM(ch,lvl)  (clr((ch),(lvl))?KNRM:KNUL)
#define CCBLK(ch,lvl)  (clr((ch),(lvl))?KBLK:KNUL)
#define CCRED(ch,lvl)  (clr((ch),(lvl))?KRED:KNUL)
#define CCGRN(ch,lvl)  (clr((ch),(lvl))?KGRN:KNUL)
#define CCYEL(ch,lvl)  (clr((ch),(lvl))?KYEL:KNUL)
#define CCBLU(ch,lvl)  (clr((ch),(lvl))?KBLU:KNUL)
#define CCMAG(ch,lvl)  (clr((ch),(lvl))?KMAG:KNUL)
#define CCCYN(ch,lvl)  (clr((ch),(lvl))?KCYN:KNUL)
#define CCWHT(ch,lvl)  (clr((ch),(lvl))?KWHT:KNUL)
#define CCBLD(ch,lvl)  (clr((ch),(lvl))?KBLD:KNUL)
#define CCBLN(ch,lvl)  (clr((ch),(lvl))?KBLN:KNUL)
#define CCCLR(ch,lvl)  (clr((ch),(lvl))?KCLR:KNUL)
#define CCUND(ch,lvl)  (clr((ch),(lvl))?KUND:KNUL)
#define CCDAR(ch,lvl)  (clr((ch),(lvl))?KDAR:KNUL)


#define CCBBLK(ch,lvl)  (clr((ch),(lvl))?KBBLK:KNUL)
#define CCBRED(ch,lvl)  (clr((ch),(lvl))?KBRED:KNUL)
#define CCBGRN(ch,lvl)  (clr((ch),(lvl))?KBGRN:KNUL)
#define CCBYEL(ch,lvl)  (clr((ch),(lvl))?KBYEL:KNUL)
#define CCBBLU(ch,lvl)  (clr((ch),(lvl))?KBBLU:KNUL)
#define CCBMAG(ch,lvl)  (clr((ch),(lvl))?KBMAG:KNUL)
#define CCBCYN(ch,lvl)  (clr((ch),(lvl))?KBCYN:KNUL)
#define CCBWHT(ch,lvl)  (clr((ch),(lvl))?KBWHT:KNUL)

#define QNRM CCNRM(ch,C_SPR)
#define QBLK CCBLK(ch,C_SPR)
#define QRED CCRED(ch,C_SPR)
#define QGRN CCGRN(ch,C_SPR)
#define QYEL CCYEL(ch,C_SPR)
#define QBLU CCBLU(ch,C_SPR)
#define QMAG CCMAG(ch,C_SPR)
#define QCYN CCCYN(ch,C_SPR)
#define QWHT CCWHT(ch,C_SPR)
#define QBLD CCBLD(ch,C_SPR)
#define QBLN CCBLN(ch,C_SPR)
#define QCLR CCBLN(ch,C_SPR)
#define QUND CCUND(ch,C_SPR)
#define QDAR CCDAR(ch,C_SPR)
#define QBBLK CCBBLK(ch,C_SPR)
#define QBRED CCBRED(ch,C_SPR)
#define QBGRN CCBGRN(ch,C_SPR)
#define QBYEL CCBYEL(ch,C_SPR)
#define QBBLU CCBBLU(ch,C_SPR)
#define QBMAG CCBMAG(ch,C_SPR)
#define QBCYN CCBCYN(ch,C_SPR)
#define QBWHT CCBWHT(ch,C_SPR)
d156 3
@


1.4
log
@Updated header comments
@
text
@d2 1
a2 1
 * $Id: screen.h,v 1.3 2000/11/24 21:17:12 rsd Exp $
d40 1
a40 1
/* conditional color.  pass it a pointer to a char_data and a color level. */
d46 3
a48 1
#define clr(ch,lvl) (ch->desc ? (ch->desc->original ? _clrlevel(ch->desc->original) >= (lvl):_clrlevel(ch) >= (lvl)):_clrlevel(ch) >= (lvl))
a73 2
#define COLOR_LEV(ch) (ch->desc ? (ch->desc->original ? _clrlevel(ch->desc->original) : _clrlevel(ch)) :  _clrlevel(ch))

d99 3
@


1.3
log
@Altered comment header and added back rlog messgaes from
prior to the addition of the $log$ string.
@
text
@d1 3
a3 1
// $Id: screen.h,v 1.2 1999/09/05 07:00:39 jimmy Exp $
d97 13
a109 7
// $Log: screen.h,v $
// Revision 1.2  1999/09/05 07:00:39  jimmy
// Added RCS Log and Id strings to each source file
//
// Revision 1.1  1999/01/29 01:23:31  mud
// Initial revision
//
@


1.2
log
@Added RCS Log and Id strings to each source file
@
text
@d1 12
a12 10
// $Id$
/* ************************************************************************
*   File: screen.h                                      Part of CircleMUD *
*  Usage: header file with ANSI color codes for online color              *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */
d95 7
a101 1
// $Log$
@


1.1
log
@Initial revision
@
text
@d1 1
d93 1
@
