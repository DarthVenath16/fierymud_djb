head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2008.08.26.04.39.21;	author jps;	state Exp;
branches;
next	1.8;

1.8
date	2008.02.04.01.46.12;	author myc;	state Exp;
branches;
next	1.7;

1.7
date	2008.01.29.21.02.31;	author myc;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.04.06.49.19;	author myc;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.13.02.32.10;	author jjl;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.19.02.51.33;	author rsd;	state Exp;
branches;
next	1.3;

1.3
date	99.09.05.07.00.39;	author jimmy;	state Exp;
branches;
next	1.2;

1.2
date	99.02.04.19.51.32;	author mud;	state Exp;
branches;
next	1.1;

1.1
date	99.01.29.01.23.32;	author mud;	state Exp;
branches;
next	;


desc
@/*++
********************************************************************
* Filename:  weather.h
*
* Usage:     Weather structures, defines and prototypes.  Most of
*            the weather system design is documented herein as well.
*
* Author:    Tim Holcomb (Fingh on Hubis)
*
* Last Modified: [10-15-98]
********************************************************************
--*/

#ifndef HUBIS_WEATHER_H
#define HUBIS_WEATHER_H


/* climate structs are initialized in an array, where the index
 * corresponds to the climate type as defined below in CLIMATE_xxx
 */
typedef struct _climate
{
    int base_temperature;
    int base_precipitation_rate;
    int base_wind_speed;

    /* each zone may have a natural disaster in effect at any time */
    void (*SetDisaster)(void);

} CLIMATE, *LPCLIMATE;

/* define the climate types */
#define CLIMATE_NONE          0    /* do not report weather */
#define CLIMATE_ARID          1    /* deserts and plains */
#define CLIMATE_OCEAN         2    /* ocean */
#define CLIMATE_TEMPERATE     3    /* mediterranean climate */
#define CLIMATE_SUB_TROPICAL  4    /* florida */
#define CLIMATE_TROPICAL      5    /* equatorial / jungle */
#define CLIMATE_NEAR_ARCTIC   6    /* mountain / high elevation */
#define CLIMATE_ARCTIC        7    /* mountain / extreme polar */
/* add more climate types here, and add initialization
 * for them in Climates[] */

/* seasons */
#define WINTER   0
#define SPRING   1
#define SUMMER   2
#define AUTUMN   3

/* temperatures */
#define TEMP_FREEZING    0
#define TEMP_COLD        30
#define TEMP_COOL        50
#define TEMP_MILD        65
#define TEMP_WARM        75
#define TEMP_HOT         90
#define TEMP_BLAZING     100
#define TEMP_FIRE_PLANE  200

/* precipitation rates */
#define PRECIP_NONE          0     /* not a cloud in the sky, sunny */
#define PRECIP_PARTLY_CLOUDY 1     /* a few clouds, a little sun    */
#define PRECIP_MOSTLY_CLOUDY 2     /* no sunny day...               */
#define PRECIP_GRAY_CLOUDS   3     /* wow, it's gonna rain/snow!    */
#define PRECIP_DRIZZLE       4     /* snow flurries or drizzly rain */
#define PRECIP_LIGHT         5     /* trace amounts of rain or snow */
#define PRECIP_ACTIVE        6     /* hey, it's raining or snowing! */
#define PRECIP_HEAVY         7     /* it's really coming down now!  */
#define PRECIP_DANGEROUS     8     /* most likely accompanied by
                                * WIND_GALE or higher, and probably
                                * will result in disaster soon
                                */
/* keep track of which messages to send to users. */
#define PRECIP_TYPE_RAIN 0
#define PRECIP_TYPE_SNOW 1

/* winds */
#define WIND_NONE        0
#define WIND_BREEZE      1
#define WIND_STRONG      2
#define WIND_GALE        3
#define WIND_HURRICANE   4    /* if accompanied by precipitation,
                                * things are gonna get ugly...
                                */

/* disaster types */
/* 0 reserved for no_disaster */
#define DISASTER_TORNADO     1
#define DISASTER_BLIZZARD    2
#define DISASTER_EARTHQUAKE  3
#define DISASTER_FLOOD       4
#define DISASTER_HAILSTORM   5
#define DISASTER_SANDSTORM   6
#define DISASTER_HEATWAVE    7
#define DISASTER_HURRICANE   8


/* call from each update function so all types of updates
 * don't spam players in the zone at once.
 */
//void weather_message(struct zone_data *zone, int type, int prev_valueof_type);


/* types sent to weather_message */
#define UPDATE_WIND          0
#define UPDATE_TEMPERATURE   1
#define UPDATE_PRECIPITATION  2
#define UPDATE_HEMISPHERE    3

/* offset parameters based on season and climate type */
#define SUMMER_TEMP   25
#define SUMMER_PREC   (-2)
#define WINTER_TEMP   (-30)
#define WINTER_PREC   1
#define SPRING_TEMP   12
#define SPRING_PREC   2
#define AUTUMN_TEMP   (-15)
#define AUTUMN_PREC   (-1)

/* utility macros */
#define GET_PRECIP_TYPE(zone)  precip[get_precip_type((zone)->temperature)]

/* for day/night and seasonal updates.  This will in turn
 * cause all of the above parameters to be altered, depending
 * obviously on the new season.
 */
void  update_hemisphere(void);

/* start nature in motion */
void init_weather(void);

/* use 'rain' or 'snow' string? */
int get_precip_type(int temp);

/* remnants of a trashy design */
void update_weather_and_time(long pulse);
void another_hour();

void update_weather(long pulse);

#endif /* HUBIS_WEATHER_H */
@


1.9
log
@Changed IN_ZONE to IN_ZONE_RNUM or IN_ZONE_VNUM and fixed zone_printf.
@
text
@/***************************************************************************
 * $Id: weather.h,v 1.8 2008/02/04 01:46:12 myc Exp jps $
 ***************************************************************************/
/***************************************************************************
 *   File: weather.h                                      Part of FieryMUD *
 *  Usage: Weather structures, defines and prototypes.  Most of            *
 *         the weather system design is documented herein as well.         *
 *     By: Tim Holcomb (Fingh on Hubis)                                    *
 *                                                                         *
 *  All rights reserved.  See license.doc for complete information.        *
 *                                                                         *
 *  FieryMUD Copyright (C) 1998, 1999, 2000 by the Fiery Consortium        *
 ***************************************************************************/

#ifndef FIERY_WEATHER_H
#define FIERY_WEATHER_H

/* climate structs are initialized in an array, where the index
 * corresponds to the climate type as defined below in CLIMATE_xxx
 */
struct climate_data
{
  char *name;
  int base_temperature;
  int base_precipitation_rate;
  int base_wind_speed;
  int allowed_disasters;
};

/* Zone climate types */
#define CLIMATE_NONE          0    /* do not report weather */
#define CLIMATE_SEMIARID      1    /* plains */
#define CLIMATE_ARID          2    /* deserts */
#define CLIMATE_OCEANIC       3    /* ocean */  
#define CLIMATE_TEMPERATE     4    /* mediterranean climate */
#define CLIMATE_SUBTROPICAL   5    /* florida */
#define CLIMATE_TROPICAL      6    /* equatorial / jungle */
#define CLIMATE_SUBARCTIC     7    /* high elevation */
#define CLIMATE_ARCTIC        8    /* extreme polar */
#define CLIMATE_ALPINE        9    /* mountain */
#define NUM_CLIMATES         10
/* add more climate types here, and add initialization
 * for them in climates[] */

/* Seasons */
#define WINTER   0
#define SPRING   1
#define SUMMER   2
#define AUTUMN   3

/* Temperature Presets */
#define TEMP_FRIGID      (-10)
#define TEMP_FREEZING    10
#define TEMP_COLD        30
#define TEMP_COOL        50
#define TEMP_MILD        65
#define TEMP_WARM        75
#define TEMP_HOT         90
#define TEMP_STEAMING    100
#define TEMP_BLAZING     110
#define TEMP_FIRE_PLANE  200

/* precipitation rates */
#define PRECIP_NONE          0     /* not a cloud in the sky, sunny */
#define PRECIP_PARTLY_CLOUDY 1     /* a few clouds, a little sun    */
#define PRECIP_MOSTLY_CLOUDY 2     /* no sunny day...               */
#define PRECIP_GRAY_CLOUDS   3     /* wow, it's gonna rain/snow!    */
#define PRECIP_DRIZZLE       4     /* snow flurries or drizzly rain */
#define PRECIP_LIGHT         5     /* trace amounts of rain or snow */ 
#define PRECIP_ACTIVE        6     /* hey, it's raining or snowing! */
#define PRECIP_HEAVY         7     /* it's really coming down now!  */
#define PRECIP_DANGEROUS     8     /* most likely accompanied by 
				    * WIND_GALE or higher, and probably 
				    * will result in disaster soon
				    */
/* keep track of which messages to send to users. */
#define PRECIP_TYPE_RAIN 0
#define PRECIP_TYPE_SNOW 1

/* Wind speeds */
#define WIND_NONE	0
#define WIND_BREEZE	1
#define WIND_STRONG	2
#define WIND_GALE	3
#define WIND_HURRICANE	4     /* if accompanied by precipitation,
			       * things are gonna get ugly...
			       */

/* Disaster types */
#define DISASTER_NONE        0
#define DISASTER_TORNADO     (1 << 0)
#define DISASTER_BLIZZARD    (1 << 1)
#define DISASTER_EARTHQUAKE  (1 << 2)
#define DISASTER_FLOOD       (1 << 3)
#define DISASTER_HAILSTORM   (1 << 4)
#define DISASTER_SANDSTORM   (1 << 5)
#define DISASTER_HEATWAVE    (1 << 6)
#define DISASTER_HURRICANE   (1 << 7)
#define DISASTER_TSUNAMI     (1 << 8)
#define DISASTER_WATERSPOUT  (1 << 9)


/* offset parameters based on season and climate type */
#define SUMMER_TEMP   25
#define SUMMER_PREC   (-2)
#define WINTER_TEMP   (-30)
#define WINTER_PREC   1
#define SPRING_TEMP   12
#define SPRING_PREC   2
#define AUTUMN_TEMP   (-15)
#define AUTUMN_PREC   (-1)

/* utility macros */
#define PRECIP_TYPE(temp)	(temp > TEMP_COLD ? PRECIP_TYPE_RAIN : PRECIP_TYPE_SNOW)
#define GET_PRECIP_TYPE(zone)	precip[PRECIP_TYPE((zone)->temperature)]
#define CLIMATE(zone)		((zone)->climate)
#define BASE_TEMP(zone)		climates[CLIMATE(zone)].base_temperature
#define BASE_PRECIP(zone)	climates[CLIMATE(zone)].base_precipitation_rate;
#define BASE_WIND(zone)		climates[CLIMATE(zone)].base_wind_speed
#define HEMISPHERE(zone)	hemispheres[(zone)->hemisphere]
#define DISASTER(zone)		zone->disaster_type
#define IN_HEMISPHERE(ch)	zone_table[IN_ZONE_RNUM(ch)].hemisphere

/* start nature in motion */
void init_weather(void);

void update_weather(long pulse);
void increment_game_time();
void update_daylight();
void update_season();

char *wind_message(int current_wind, int original_wind);
char *temperature_message(int temperature);
char *precipitation_message(struct zone_data *zone, int original);


extern const char *seasons[];
extern const char *wind_speeds[];
extern struct climate_data climates[];
extern const char *precip[];
extern struct hemisphere_data hemispheres[];
#endif


/***************************************************************************
 * $Log: weather.h,v $
 * Revision 1.8  2008/02/04 01:46:12  myc
 * Export precip and hemispheres.
 *
 * Revision 1.7  2008/01/29 21:02:31  myc
 * Removing a lot of extern declarations from code files and moving
 * them to header files, mostly db.h and constants.h.
 *
 * Revision 1.6  2007/09/04 06:49:19  myc
 * Cleaned up weather code a lot (a rewrite, really).
 *
 * Revision 1.5  2002/09/13 02:32:10  jjl
 * Updated header comments
 *
 * Revision 1.4  2000/11/19 02:51:33  rsd
 * Altered comment header, changed the define names, and added
 * back log messages prior to the $log$ strings
 *
 * Revision 1.3  1999/09/05 07:00:39  jimmy
 * Added RCS Log and Id strings to each source file
 *
 * Revision 1.2  1999/02/04 19:51:32  mud
 * indeted file
 * altered comment header
 * dos2unix
 *
 * Revision 1.1  1999/01/29 01:23:32  mud
 * Initial Revision
 *
 ***************************************************************************/
@


1.8
log
@Export precip and hemispheres.
@
text
@d2 1
a2 1
 * $Id: weather.h,v 1.7 2008/01/29 21:02:31 myc Exp myc $
d122 1
a122 1
#define IN_HEMISPHERE(ch)	zone_table[IN_ZONE(ch)].hemisphere
d147 3
@


1.7
log
@Removing a lot of extern declarations from code files and moving
them to header files, mostly db.h and constants.h.
@
text
@d2 1
a2 1
 * $Id: weather.h,v 1.6 2007/09/04 06:49:19 myc Exp myc $
d140 2
a141 1

d147 4
@


1.6
log
@Cleaned up weather code a lot (a rewrite, really).
@
text
@d2 1
a2 1
 * $Id: weather.h,v 1.5 2002/09/13 02:32:10 jjl Exp myc $
a17 2
extern char *wind_speeds[];

d136 5
d146 3
@


1.5
log
@Updated header comments
@
text
@d2 1
a2 1
 * $Id: weather.h,v 1.4 2000/11/19 02:51:33 rsd Exp $
d18 1
d23 1
a23 1
typedef struct _climate
d25 1
d29 2
a30 5
  
  /* each zone may have a natural disaster in effect at any time */
  void (*SetDisaster)(void);
  
} CLIMATE, *LPCLIMATE;
d32 1
a32 1
/* define the climate types */
d34 10
a43 7
#define CLIMATE_ARID          1    /* deserts and plains */
#define CLIMATE_OCEAN         2    /* ocean */  
#define CLIMATE_TEMPERATE     3    /* mediterranean climate */
#define CLIMATE_SUB_TROPICAL  4    /* florida */
#define CLIMATE_TROPICAL      5    /* equatorial / jungle */
#define CLIMATE_NEAR_ARCTIC   6    /* mountain / high elevation */
#define CLIMATE_ARCTIC        7    /* mountain / extreme polar */
d45 1
a45 1
 * for them in Climates[] */
d47 1
a47 1
/* seasons */
d53 3
a55 2
/* temperatures */
#define TEMP_FREEZING    0
d61 2
a62 1
#define TEMP_BLAZING     100
d82 6
a87 6
/* winds */
#define WIND_NONE        0
#define WIND_BREEZE      1
#define WIND_STRONG      2
#define WIND_GALE        3
#define WIND_HURRICANE   4    /* if accompanied by precipitation,
d91 12
a102 10
/* disaster types */
/* 0 reserved for no_disaster */
#define DISASTER_TORNADO     1
#define DISASTER_BLIZZARD    2
#define DISASTER_EARTHQUAKE  3
#define DISASTER_FLOOD       4
#define DISASTER_HAILSTORM   5
#define DISASTER_SANDSTORM   6
#define DISASTER_HEATWAVE    7
#define DISASTER_HURRICANE   8
a104 14
/* call from each update function so all types of updates 
 * don't spam players in the zone at once. 
 */
/***************************************************************************
 *void weather_message(struct zone_data *zone, int type, int prev_valueof_type);
 ***************************************************************************/


/* types sent to weather_message */
#define UPDATE_WIND          0
#define UPDATE_TEMPERATURE   1
#define UPDATE_PRECIPITATION  2
#define UPDATE_HEMISPHERE    3

d116 9
a124 7
#define GET_PRECIP_TYPE(zone)  precip[get_precip_type((zone)->temperature)]
  
/* for day/night and seasonal updates.  This will in turn
 * cause all of the above parameters to be altered, depending
 * obviously on the new season.
 */
void  update_hemisphere(void);
a128 7
/* use 'rain' or 'snow' string? */
int get_precip_type(int temp);

/* remnants of a trashy design */
void update_weather_and_time(long pulse);
void another_hour();

d130 7
d138 1
a138 1
#endif /* HUBIS_WEATHER_H */
d143 3
@


1.4
log
@Altered comment header, changed the define names, and added
back log messages prior to the $log$ strings
@
text
@d1 3
a3 1
// $Id: weather.h,v 1.3 1999/09/05 07:00:39 jimmy Exp $
d102 3
a104 1
//void weather_message(struct zone_data *zone, int type, int prev_valueof_type);
d147 18
a164 12
// $Log: weather.h,v $
// Revision 1.3  1999/09/05 07:00:39  jimmy
// Added RCS Log and Id strings to each source file
//
// Revision 1.2  1999/02/04 19:51:32  mud
// indeted file
// altered comment header
// dos2unix
//
// Revision 1.1  1999/01/29 01:23:32  mud
// Initial Revision
//
@


1.3
log
@Added RCS Log and Id strings to each source file
@
text
@d1 11
a11 11
// $Id$
/**********************************************************************
 * Filename:  weather.h                                               *
 *                                                                    *
 * Usage:     Weather structures, defines and prototypes.  Most of    *
 *            the weather system design is documented herein as well. *
 *                                                                    *
 * Author:    Tim Holcomb (Fingh on Hubis)                            *
 *                                                                    *
 * Last Modified: [10-15-98]                                          *
 **********************************************************************/
d13 2
a14 2
#ifndef HUBIS_WEATHER_H
#define HUBIS_WEATHER_H
d143 12
a154 1
// $Log$
@


1.2
log
@indeted file
altered comment header
dos2unix
@
text
@d1 1
d143 1
@


1.1
log
@Initial revision
@
text
@d1 10
a10 12
/*++
********************************************************************
* Filename:  weather.h
* 
* Usage:     Weather structures, defines and prototypes.  Most of
*            the weather system design is documented herein as well.
*
* Author:    Tim Holcomb (Fingh on Hubis)
*
* Last Modified: [10-15-98]
********************************************************************
--*/
d21 7
a27 7
    int base_temperature;
    int base_precipitation_rate;
    int base_wind_speed;

    /* each zone may have a natural disaster in effect at any time */
    void (*SetDisaster)(void);

d68 3
a70 3
                                * WIND_GALE or higher, and probably 
                                * will result in disaster soon
                                */
d81 2
a82 2
                                * things are gonna get ugly...
                                */
d140 1
@
