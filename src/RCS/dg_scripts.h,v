head	1.34;
access;
symbols;
locks; strict;
comment	@ * @;


1.34
date	2009.03.07.09.34.47;	author jps;	state Exp;
branches;
next	1.33;

1.33
date	2008.09.02.03.00.59;	author jps;	state Exp;
branches;
next	1.32;

1.32
date	2008.08.26.03.58.13;	author jps;	state Exp;
branches;
next	1.31;

1.31
date	2008.08.15.04.56.34;	author jps;	state Exp;
branches;
next	1.30;

1.30
date	2008.06.05.02.07.43;	author myc;	state Exp;
branches;
next	1.29;

1.29
date	2008.04.05.20.41.20;	author jps;	state Exp;
branches;
next	1.28;

1.28
date	2008.04.05.19.42.51;	author jps;	state Exp;
branches;
next	1.27;

1.27
date	2008.03.22.19.51.56;	author myc;	state Exp;
branches;
next	1.26;

1.26
date	2008.03.21.15.58.34;	author myc;	state Exp;
branches;
next	1.25;

1.25
date	2008.03.17.16.22.42;	author myc;	state Exp;
branches;
next	1.24;

1.24
date	2008.02.24.17.31.13;	author myc;	state Exp;
branches;
next	1.23;

1.23
date	2008.02.16.20.26.04;	author myc;	state Exp;
branches;
next	1.22;

1.22
date	2008.02.06.03.45.08;	author myc;	state Exp;
branches;
next	1.21;

1.21
date	2008.02.04.00.22.05;	author myc;	state Exp;
branches;
next	1.20;

1.20
date	2008.02.02.04.27.55;	author myc;	state Exp;
branches;
next	1.19;

1.19
date	2008.01.29.21.02.31;	author myc;	state Exp;
branches;
next	1.18;

1.18
date	2008.01.15.06.49.52;	author myc;	state Exp;
branches;
next	1.17;

1.17
date	2007.10.04.16.20.24;	author myc;	state Exp;
branches;
next	1.16;

1.16
date	2007.08.31.05.36.19;	author jps;	state Exp;
branches;
next	1.15;

1.15
date	2007.08.30.19.42.46;	author jps;	state Exp;
branches;
next	1.14;

1.14
date	2007.08.24.17.01.36;	author myc;	state Exp;
branches;
next	1.13;

1.13
date	2007.04.17.23.59.16;	author myc;	state Exp;
branches;
next	1.12;

1.12
date	2006.12.08.05.06.58;	author myc;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.30.05.06.24;	author jps;	state Exp;
branches;
next	1.10;

1.10
date	2002.09.13.02.32.10;	author jjl;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.25.06.59.02;	author mtp;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.28.01.16.25;	author mtp;	state Exp;
branches;
next	1.7;

1.7
date	2000.11.21.04.22.16;	author rsd;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.11.12.03.42;	author mtp;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.11.01.38.18;	author mtp;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.13.07.34.13;	author mtp;	state Exp;
branches;
next	1.3;

1.3
date	99.11.28.23.11.31;	author cso;	state Exp;
branches;
next	1.2;

1.2
date	99.09.05.07.00.39;	author jimmy;	state Exp;
branches;
next	1.1;

1.1
date	99.01.29.01.23.30;	author mud;	state Exp;
branches;
next	;


desc
@/**************************************************************************
*  File: scripts.h                                                        *
*  Usage: header file for script structures and contstants, and           *
*         function prototypes for scripts.c                               *
*                                                                         *
*                                                                         *
*  $Author: egreen $
*  $Date: 1996/09/24 03:48:42 $
*  $Revision: 3.6 $
**************************************************************************/

#define    MOB_TRIGGER   0
#define    OBJ_TRIGGER   1
#define    WLD_TRIGGER   2

#define DG_NO_TRIG         256     /* don't check act trigger   */


/* mob trigger types */
#define MTRIG_GLOBAL           (1 << 0)      /* check even if zone empty   */
#define MTRIG_RANDOM           (1 << 1)      /* checked randomly           */
#define MTRIG_COMMAND          (1 << 2)	     /* character types a command  */
#define MTRIG_SPEECH           (1 << 3)	     /* a char says a word/phrase  */
#define MTRIG_ACT              (1 << 4)      /* word or phrase sent to act */
#define MTRIG_DEATH            (1 << 5)      /* character dies             */
#define MTRIG_GREET            (1 << 6)      /* something enters room seen */
#define MTRIG_GREET_ALL        (1 << 7)      /* anything enters room       */
#define MTRIG_ENTRY            (1 << 8)      /* the mob enters a room      */
#define MTRIG_RECEIVE          (1 << 9)      /* character is given obj     */
#define MTRIG_FIGHT            (1 << 10)     /* each pulse while fighting  */
#define MTRIG_HITPRCNT         (1 << 11)     /* fighting and below some hp */
#define MTRIG_BRIBE	       (1 << 12)     /* coins are given to mob     */

/* obj trigger types */
#define OTRIG_GLOBAL           (1 << 0)	     /* unused                     */
#define OTRIG_RANDOM           (1 << 1)	     /* checked randomly           */
#define OTRIG_COMMAND          (1 << 2)      /* character types a command  */

#define OTRIG_GET              (1 << 6)     /* item is picked up          */
#define OTRIG_DROP             (1 << 7)     /* character trys to drop obj */
#define OTRIG_GIVE             (1 << 8)     /* character trys to give obj */
#define OTRIG_WEAR             (1 << 9)     /* character trys to wear obj */

/* wld trigger types */
#define WTRIG_GLOBAL           (1 << 0)      /* check even if zone empty   */
#define WTRIG_RANDOM           (1 << 1)	     /* checked randomly           */
#define WTRIG_COMMAND          (1 << 2)	     /* character types a command  */
#define WTRIG_SPEECH           (1 << 3)      /* a char says word/phrase    */

#define WTRIG_ENTER            (1 << 6)	     /* character enters room      */
#define WTRIG_DROP             (1 << 7)      /* something dropped in room  */


/* obj command trigger types */
#define OCMD_EQUIP             (1 << 0)	     /* obj must be in char's equip */
#define OCMD_INVEN             (1 << 1)	     /* obj must be in char's inven */
#define OCMD_ROOM              (1 << 2)	     /* obj must be in char's room  */

#define TRIG_NEW                0	     /* trigger starts from top  */
#define TRIG_RESTART            1	     /* trigger restarting       */


/*
 * These are slightly off of PULSE_MOBILE so
 * everything isnt happening at the same time
 */
#define PULSE_DG_SCRIPT         (13 RL_SEC)


#define MAX_SCRIPT_DEPTH      10          /* maximum depth triggers can
					     recurse into each other */


/* one line of the trigger */
struct cmdlist_element {
  char *cmd;				/* one line of a trigger */
  struct cmdlist_element *original;
  struct cmdlist_element *next;
};

struct trig_var_data {
  char *name;				/* name of variable  */
  char *value;				/* value of variable */

  struct trig_var_data *next;
};

/* structure for triggers */
struct trig_data {
    int nr;		                /* trigger's rnum                  */
    byte attach_type;			/* mob/obj/wld intentions          */
    byte data_type;		        /* type of game_data for trig      */
    char *name;			        /* name of trigger                 */
    long trigger_type;			/* type of trigger (for bitvector) */
    struct cmdlist_element *cmdlist;	/* top of command list             */
    struct cmdlist_element *curr_state;	/* ptr to current line of trigger  */
    int narg;				/* numerical argument              */
    char *arglist;			/* argument list                   */
    int depth;				/* depth into nest ifs/whiles/etc  */
    int loops;				/* loop iteration counter          */
    struct event_info *wait_event;	/* event to pause the trigger      */
    ubyte purged;			/* trigger is set to be purged     */
    struct trig_var_data *var_list;	/* list of local vars for trigger  */

    struct trig_data *next;
    struct trig_data *next_in_world;    /* next in the global trigger list */
};


/* a complete script (composed of several triggers) */
struct script_data {
  long types;				/* bitvector of trigger types */
  struct trig_data *trig_list;	/* list of triggers           */
  struct trig_var_data *global_vars;	/* list of global variables   */
  ubyte purged;				/* script is set to be purged */

  struct script_data *next;		/* used for purged_scripts    */
};



/* function prototypes from triggers.c */
void act_mtrigger(struct char_data *ch, char *str, struct char_data *actor,
         struct char_data *victim, struct obj_data *object,
         struct obj_data *target, char *arg);
void speech_mtrigger(struct char_data *actor, char *str);
void speech_wtrigger(struct char_data *actor, char *str);
int greet_mtrigger(struct char_data *actor, int dir);
int entry_mtrigger(struct char_data *ch);
int enter_wtrigger(struct room_data *room, struct char_data *actor, int dir);
int drop_otrigger(struct obj_data *obj, struct char_data *actor);
int get_otrigger(struct obj_data *obj, struct char_data *actor);
int drop_wtrigger(struct obj_data *obj, struct char_data *actor);
int give_otrigger(struct obj_data *obj, struct char_data *actor,
         struct char_data *victim);
int receive_mtrigger(struct char_data *ch, struct char_data *actor,
         struct obj_data *obj);
void bribe_mtrigger(struct char_data *ch, struct char_data *actor,
         int amount);
int wear_otrigger(struct obj_data *obj, struct char_data *actor, int where);
int command_mtrigger(struct char_data *actor, char *cmd, char *argument);
int command_otrigger(struct char_data *actor, char *cmd, char *argument);
int command_wtrigger(struct char_data *actor, char *cmd, char *argument);
int death_mtrigger(struct char_data *ch, struct char_data *actor);
void fight_mtrigger(struct char_data *ch);
void hitprcnt_mtrigger(struct char_data *ch);

void random_mtrigger(struct char_data *ch);
void random_otrigger(struct obj_data *obj);
void random_wtrigger(struct room_data *ch);


/* function prototypes from scripts.c */
void script_trigger_check(void);
void add_trigger(struct script_data *sc, struct trig_data *t, int loc);

void do_stat_trigger(struct char_data *ch, struct trig_data *trig);
void do_sstat_room(struct char_data * ch);
void do_sstat_object(struct char_data * ch, struct obj_data * j);
void do_sstat_character(struct char_data * ch, struct char_data * k);

void script_log(char *msg);
void dg_read_trigger(FILE *fp, void *i, int type);
void dg_obj_trigger(char *line, struct obj_data *obj);
void assign_triggers(void *i, int type);
void parse_trigger(FILE *trig_f, int nr);
int real_trigger(int vnum);
void extract_script(struct script_data *sc);

/* Macros for scripts */

#define UID_CHAR   '\005'

#define GET_TRIG_NAME(t)          ((t)->name)
#define GET_TRIG_RNUM(t)          ((t)->nr)
#define GET_TRIG_VNUM(t)	  (trig_index[(t)->nr]->virtual)
#define GET_TRIG_TYPE(t)          ((t)->trigger_type)
#define GET_TRIG_DATA_TYPE(t)	  ((t)->data_type)
#define GET_TRIG_NARG(t)          ((t)->narg)
#define GET_TRIG_ARG(t)           ((t)->arglist)
#define GET_TRIG_VARS(t)	  ((t)->var_list)
#define GET_TRIG_WAIT(t)	  ((t)->wait_event)
#define GET_TRIG_DEPTH(t)         ((t)->depth)
#define GET_TRIG_LOOPS(t)         ((t)->loops)

#define ROOM_ID_BASE    50000

#define SCRIPT(o)		  ((o)->script)

#define SCRIPT_TYPES(s)		  ((s)->types)
#define TRIGGERS(s)		  ((s)->trig_list)

#define GET_SHORT(ch)    ((ch)->player.short_descr)


#define SCRIPT_CHECK(go, type)   (SCRIPT(go) && \
				  IS_SET(SCRIPT_TYPES(SCRIPT(go)), type))
#define TRIGGER_CHECK(t, type)   (IS_SET(GET_TRIG_TYPE(t), type) && \
				  !GET_TRIG_DEPTH(t))

#define ADD_UID_VAR(buf, trig, go, name) { \
			         sprintf(buf, "%c%ld", UID_CHAR, GET_ID(go)); \
                                 add_var(&GET_TRIG_VARS(trig), name, buf); }




/* typedefs that the dg functions rely on */
typedef struct index_data index_data;
typedef struct room_data room_data;
typedef struct obj_data obj_data;
typedef struct trig_data trig_data;
typedef struct char_data char_data;
@


1.34
log
@Changed name of room Entry trigger to Preentry. Added a Postentry room trigger type.
@
text
@/***************************************************************************
 * $Id: dg_scripts.h,v 1.33 2008/09/02 03:00:59 jps Exp jps $
 ***************************************************************************/
/***************************************************************************
 *   File: scripts.h                                     Part of FieryMUD  *
 *  Usage: header file for script structures and contstants, and           *
 *         function prototypes for scripts.c                               *
 *  $Author: jps $                                                         *
 *  $Date: 2008/09/02 03:00:59 $                                           *
 *  $Revision: 1.33 $                                                       *
 *                                                                         *
 *  All rights reserved.  See license.doc for complete information.        *
 *                                                                         *
 *  FieryMUD Copyright (C) 1998, 1999, 2000 by the Fiery Consortium        *
 *                                                                         *
 * This code was received origonally from HubisMUD in 1998 and no lable or *
 * claim of ownership or copyright was made anywhere in the file.          *
 ***************************************************************************/

#ifndef __FIERY_DG_SCRIPTS_H
#define __FIERY_DG_SCRIPTS_H

#define    MOB_TRIGGER   0
#define    OBJ_TRIGGER   1
#define    WLD_TRIGGER   2

#define DG_NO_TRIG         (1 << 6)     /* don't check act trigger   */

/* mob trigger types */
#define MTRIG_GLOBAL           (1 << 0)      /* check even if zone empty   */
#define MTRIG_RANDOM           (1 << 1)      /* checked randomly           */
#define MTRIG_COMMAND          (1 << 2)             /* character types a command  */
#define MTRIG_SPEECH           (1 << 3)             /* a char says a word/phrase  */
#define MTRIG_ACT              (1 << 4)      /* word or phrase sent to act */
#define MTRIG_DEATH            (1 << 5)      /* character dies             */
#define MTRIG_GREET            (1 << 6)      /* something enters room seen */
#define MTRIG_GREET_ALL        (1 << 7)      /* anything enters room       */
#define MTRIG_ENTRY            (1 << 8)      /* the mob enters a room      */
#define MTRIG_RECEIVE          (1 << 9)      /* character is given obj     */
#define MTRIG_FIGHT            (1 << 10)     /* each pulse while fighting  */
#define MTRIG_HITPRCNT         (1 << 11)     /* fighting and below some hp */
#define MTRIG_BRIBE            (1 << 12)     /* coins are given to mob     */
#define MTRIG_SPEECHTO         (1 << 13)     /* ask/whisper/tell           */
#define MTRIG_LOAD             (1 << 14)     /* the mob is loaded          */
#define MTRIG_CAST             (1 << 15)     /* mob is target of cast      */
#define MTRIG_LEAVE            (1 << 16)     /* someone leaves room seen   */
#define MTRIG_DOOR             (1 << 17)     /* door manipulated in room   */
#define MTRIG_TIME             (1 << 19)     /* trigger based on game hour */

/* obj trigger types */
#define OTRIG_GLOBAL           (1 << 0)             /* unused                     */
#define OTRIG_RANDOM           (1 << 1)             /* checked randomly           */
#define OTRIG_COMMAND          (1 << 2)      /* character types a command  */
#define OTRIG_TIMER            (1 << 5)      /* item's timer expires       */
#define OTRIG_GET              (1 << 6)      /* item is picked up          */
#define OTRIG_DROP             (1 << 7)      /* character tries to drop obj */
#define OTRIG_GIVE             (1 << 8)      /* character tries to give obj */
#define OTRIG_WEAR             (1 << 9)      /* character tries to wear obj */
#define OTRIG_REMOVE           (1 << 11)     /* character tries to remove obj */
#define OTRIG_LOAD             (1 << 14)     /* the object is loaded       */
#define OTRIG_CAST             (1 << 15)     /* object targetted by spell  */
#define OTRIG_LEAVE            (1 << 16)     /* some leaves room seen      */
#define OTRIG_CONSUME          (1 << 18)     /* char tries to eat/drink obj */
#define OTRIG_TIME             (1 << 19)     /* trigger based on game hour */

/* wld trigger types */
#define WTRIG_GLOBAL           (1 << 0)      /* check even if zone empty   */
#define WTRIG_RANDOM           (1 << 1)             /* checked randomly           */
#define WTRIG_COMMAND          (1 << 2)             /* character types a command  */
#define WTRIG_SPEECH           (1 << 3)      /* a char says word/phrase    */
#define WTRIG_RESET            (1 << 5)      /* zone has been reset        */
#define WTRIG_PREENTRY         (1 << 6)      /* someone is about to enter */
#define WTRIG_DROP             (1 << 7)      /* something dropped in room  */
#define WTRIG_POSTENTRY        (1 << 8)      /* someone has just entered */
#define WTRIG_CAST             (1 << 15)     /* spell cast in room */
#define WTRIG_LEAVE            (1 << 16)     /* character leaves the room */
#define WTRIG_DOOR             (1 << 17)     /* door manipulated in room  */
#define WTRIG_TIME             (1 << 19)     /* trigger based on game hour */


/* obj command trigger types */
#define OCMD_EQUIP             (1 << 0)             /* obj must be in char's equip */
#define OCMD_INVEN             (1 << 1)             /* obj must be in char's inven */
#define OCMD_ROOM              (1 << 2)             /* obj must be in char's room  */

#define TRIG_NEW                0             /* trigger starts from top     */
#define TRIG_RESTART            1             /* trigger restarting          */


/*
 * These are slightly off of PULSE_MOBILE so
 * everything isnt happening at the same time
 */
#define PULSE_DG_SCRIPT         (13 RL_SEC)


#define MAX_SCRIPT_DEPTH      10          /* maximum depth triggers can
                                             recurse into each other */


/* one line of the trigger */
struct cmdlist_element {
  char *cmd;                                /* one line of a trigger */
  struct cmdlist_element *original;
  struct cmdlist_element *next;
};

struct trig_var_data {
  char *name;                                /* name of variable  */
  char *value;                                /* value of variable */

  struct trig_var_data *next;
};

/* structure for triggers */
struct trig_data {
    int nr;                                /* trigger's rnum                  */
    byte attach_type;                        /* mob/obj/wld intentions          */
    byte data_type;                        /* type of game_data for trig      */
    char *name;                                /* name of trigger                 */
    long trigger_type;                        /* type of trigger (for bitvector) */
    struct cmdlist_element *cmdlist;        /* top of command list             */
    struct cmdlist_element *curr_state;        /* ptr to current line of trigger  */
    int narg;                                /* numerical argument              */
    char *arglist;                        /* argument list                   */
    int depth;                                /* depth into nest ifs/whiles/etc  */
    int loops;                                /* loop iteration counter          */
    struct event *wait_event;        /* event to pause the trigger      */
    ubyte purged;                        /* trigger is set to be purged     */
    ubyte running;                        /* trigger is running              */
    int damdone; /* Amount of damage done by a *damage command */
    struct trig_var_data *var_list;        /* list of local vars for trigger  */

    struct trig_data *next;
    struct trig_data *next_in_world;    /* next in the global trigger list */
};


/* a complete script (composed of several triggers) */
struct script_data {
  long types;                                /* bitvector of trigger types */
  struct trig_data *trig_list;                /* list of triggers           */
  struct trig_var_data *global_vars;        /* list of global variables   */
  ubyte purged;                                /* script is set to be purged */

  struct script_data *next;                /* used for purged_scripts    */
};


/* function prototypes for dg_scripts.c */
int find_real_zone_by_room(room_num vznum);
int real_zone(int zvnum);

/* function prototypes from triggers.c */
void act_mtrigger(struct char_data *ch, char *str, struct char_data *actor,
         struct char_data *victim, struct obj_data *object,
         struct obj_data *target, char *arg);
void speech_mtrigger(struct char_data *actor, char *str);
void speech_to_mtrigger(struct char_data *actor, struct char_data *ch, char *str);
void speech_wtrigger(struct char_data *actor, char *str);
int greet_mtrigger(struct char_data *actor, int dir);
int entry_mtrigger(struct char_data *ch, int destination);
int preentry_wtrigger(struct room_data *room, struct char_data *actor, int dir);
int postentry_wtrigger(struct char_data *actor, int dir);
int timer_otrigger(struct obj_data *obj);
int drop_otrigger(struct obj_data *obj, struct char_data *actor);
int get_otrigger(struct obj_data *obj, struct char_data *actor);
int drop_wtrigger(struct obj_data *obj, struct char_data *actor);
int give_otrigger(struct obj_data *obj, struct char_data *actor,
         struct char_data *victim);
int remove_otrigger(struct obj_data *obj, struct char_data *actor);
int receive_mtrigger(struct char_data *ch, struct char_data *actor,
         struct obj_data *obj);
void bribe_mtrigger(struct char_data *ch, struct char_data *actor,
         int *cPtr);
int wear_otrigger(struct obj_data *obj, struct char_data *actor, int where);
int command_mtrigger(struct char_data *actor, char *cmd, char *argument);
int command_otrigger(struct char_data *actor, char *cmd, char *argument);
int command_wtrigger(struct char_data *actor, char *cmd, char *argument);
int death_mtrigger(struct char_data *ch, struct char_data *actor);
void fight_mtrigger(struct char_data *ch);
void hitprcnt_mtrigger(struct char_data *ch);
void load_mtrigger(struct char_data *ch);
void load_otrigger(struct obj_data *obj);
int cast_mtrigger(struct char_data *actor, struct char_data *ch, int spellnum);
int cast_otrigger(struct char_data *actor, struct obj_data *obj, int spellnum);
int cast_wtrigger(struct char_data *actor, struct char_data *vict, struct obj_data *obj, int spellnum);

int leave_mtrigger(struct char_data *actor, int dir);
int leave_otrigger(struct room_data *room, struct char_data *actor, int dir);
int leave_wtrigger(struct room_data *room, struct char_data *actor, int dir);
int consume_otrigger(struct obj_data *obj, struct char_data *actor, int cmd);
int door_mtrigger(struct char_data *actor, int subcmd, int dir);
int door_wtrigger(struct char_data *actor, int subcmd, int dir);

void time_mtrigger(struct char_data *ch);
void time_otrigger(struct obj_data *obj);
void time_wtrigger(struct room_data *room);

void reset_wtrigger(struct room_data *room);

void random_mtrigger(struct char_data *ch);
void random_otrigger(struct obj_data *obj);
void random_wtrigger(struct room_data *ch);

/* function prototypes from scripts.c */
void script_trigger_check(void);
void add_trigger(struct script_data *sc, struct trig_data *t, int loc);

void do_stat_trigger(struct char_data *ch, struct trig_data *trig);
void do_sstat_room(struct char_data * ch, char *buf, struct room_data *rm);
void do_sstat_object(struct char_data * ch, char *buf, struct obj_data * j);
void do_sstat_character(struct char_data *ch, char *buf, struct char_data * k);

void script_log(struct trig_data *t, char *msg);
void dg_read_trigger(FILE *fp, void *i, int type);
void dg_obj_trigger(char *line, struct obj_data *obj);
void assign_triggers(void *i, int type);
struct trig_data *read_trigger(int nr);
void parse_trigger(FILE *trig_f, int nr);
int real_trigger(int vnum);
void extract_script(struct script_data *sc);
void fullpurge_char(struct char_data *ch);
void check_time_triggers(void);
void free_trigger(struct trig_data *trig);
void free_varlist(struct trig_var_data *vd);
void free_proto_script(struct trig_proto_list **list);
bool format_script(struct descriptor_data *d, int indent_quantum);

/* Macros for scripts */

#define UID_CHAR   '\005'

#define GET_TRIG_NAME(t)          ((t)->name)
#define GET_TRIG_RNUM(t)          ((t)->nr)
#define GET_TRIG_VNUM(t)          (trig_index[(t)->nr]->virtual)
#define GET_TRIG_TYPE(t)          ((t)->trigger_type)
#define GET_TRIG_DATA_TYPE(t)          ((t)->data_type)
#define GET_TRIG_NARG(t)          ((t)->narg)
#define GET_TRIG_ARG(t)           ((t)->arglist)
#define GET_TRIG_VARS(t)          ((t)->var_list)
#define GET_TRIG_WAIT(t)          ((t)->wait_event)
#define GET_TRIG_DEPTH(t)         ((t)->depth)
#define GET_TRIG_LOOPS(t)         ((t)->loops)

#define ROOM_ID_BASE    50000

#define SCRIPT(o)                  ((o)->script)

#define SCRIPT_TYPES(s)                  ((s)->types)
#define TRIGGERS(s)                  ((s)->trig_list)


#define SCRIPT_CHECK(go, type)   (SCRIPT(go) && \
                                  IS_SET(SCRIPT_TYPES(SCRIPT(go)), type))
#define TRIGGER_CHECK(t, type)   (IS_SET(GET_TRIG_TYPE(t), type) && \
                                  !GET_TRIG_DEPTH(t))

#define ADD_UID_VAR(buf, trig, go, name) { \
                                 sprintf(buf, "%c%ld", UID_CHAR, GET_ID(go)); \
                                 add_var(&GET_TRIG_VARS(trig), name, buf); }


/* typedefs that the dg functions rely on */
typedef struct index_data index_data;
typedef struct room_data room_data;
typedef struct obj_data obj_data;
typedef struct trig_data trig_data;
typedef struct char_data char_data;


#ifndef __DG_SCRIPTS_C__
extern struct trig_data *trigger_list;
#endif

#ifndef __DG_TRIGGERS_C__
extern const char *trig_types[];
extern const char *otrig_types[];
extern const char *wtrig_types[];

#endif

extern int script_driver(void *go_address, trig_data *trig, int type, int mode);

#endif

/***************************************************************************
 * $Log: dg_scripts.h,v $
 * Revision 1.33  2008/09/02 03:00:59  jps
 * Changed mob speech and ask triggers to respond to all speech.
 *
 * Revision 1.32  2008/08/26 03:58:13  jps
 * Replaced real_zone calls with find_real_zone_by_room, since that's what it did.
 * Except the one for wzoneecho, since it needed to find a real zone by zone number.
 *
 * Revision 1.31  2008/08/15 04:56:34  jps
 * Adding prototype for script_driver().
 *
 * Revision 1.30  2008/06/05 02:07:43  myc
 * Adding read_trigger as a public function.
 *
 * Revision 1.29  2008/04/05 20:41:20  jps
 * Adding standard header ifdef.
 *
 * Revision 1.28  2008/04/05 19:42:51  jps
 * Add variable to trigger struct to store damage done by a *damage
 * command.
 *
 * Revision 1.27  2008/03/22 19:51:56  myc
 * Rewrote the script formatter to use a stack.  It is now leet haxorz.
 *
 * Revision 1.26  2008/03/21 15:58:34  myc
 * Added a utility format scripts.
 *
 * Revision 1.25  2008/03/17 16:22:42  myc
 * Signature for free_proto_script changed.
 *
 * Revision 1.24  2008/02/24 17:31:13  myc
 * Added a TO_OLC flag to act() to allow messages to be sent to people
 * while in OLC if they have OLCComm toggled on.
 *
 * Revision 1.23  2008/02/16 20:26:04  myc
 * Adding free_trigger, free_var_list, and free_proto_script.
 *
 * Revision 1.22  2008/02/06 03:45:08  myc
 * Stat room and stat obj now use the pager.
 *
 * Revision 1.21  2008/02/04 00:22:05  myc
 * Making stat char use the pager.
 *
 * Revision 1.20  2008/02/02 04:27:55  myc
 * Adding several new trigger types: cast, leave, door, time, load,
 * and consume.
 *
 * Revision 1.19  2008/01/29 21:02:31  myc
 * Removing a lot of extern declarations from code files and moving
 * them to header files, mostly db.h and constants.h.
 *
 * Revision 1.18  2008/01/15 06:49:52  myc
 * When a mob had a trigger marked both ask and speech and the mob
 * was asked a question, that same trigger would be executed twice,
 * once as an ask trigger, and once as a speech trigger.  Fixed this
 * by going through the trigger list only once looking for ask or
 * speech triggers.  However, this isn't optimal--it should give
 * priority to ask triggers.
 *
 * Revision 1.17  2007/10/04 16:20:24  myc
 * Added object timer trigger.
 *
 * Revision 1.16  2007/08/31 05:36:19  jps
 * Add variable "destination" to mob Entry trigger.
 *
 * Revision 1.15  2007/08/30 19:42:46  jps
 * Cause *purge dg script commands to destroy all of a mobile's inventory
 * and equipment when purging mobs.
 *
 * Revision 1.14  2007/08/24 17:01:36  myc
 * Adding ostat and mstat commands as shorthand for vstat, rstat for stat
 * room, and mnum and onum for vnum.  Also adding rnum and znum with new
 * functionality.
 *
 * Revision 1.13  2007/04/17 23:59:16  myc
 * New trigger type: Load.  It goes off any time a mobile is loaded, whether
 * it be god command, zone command, or trigger command.
 *
 * Revision 1.12  2006/12/08 05:06:58  myc
 * Bribe triggers now give proper amounts and variables.
 *
 * Revision 1.11  2006/11/30 05:06:24  jps
 * Add remove trigger for objects
 *
 * Revision 1.10  2002/09/13 02:32:10  jjl
 * Updated header comments
 *
 * Revision 1.9  2001/07/25 06:59:02  mtp
 * modified logging to hopefully be a bit more helpful by specifying the
 * trigger id wherever possible. This does not apply to logging of mob trigs yet
 * as mobs use the same commands as players :-(
 *
 * Revision 1.8  2000/11/28 01:16:25  mtp
 * replaced dg_event code with events.c code
 *
 * Revision 1.7  2000/11/21 04:22:16  rsd
 * Altered the comment header to look like what we have mostly
 * and touched up the white space to make things look neater.
 * Also added the missing initial revision rlog message.
 *
 * Revision 1.6  2000/11/11 12:03:42  mtp
 * made function ask_mtrigger() void cos it doesnt return anything
 *
 * Revision 1.5  2000/11/11 01:38:18  mtp
 * added ASK trigger for mobs
 *
 * Revision 1.4  2000/02/13 07:34:13  mtp
 * fixed opurge/mpurge problems by not freeing the running
 * trigger until it completes (added running flag to dg_scripts.h)
 *
 * Revision 1.3  1999/11/28 23:11:31  cso
 * removed define for GET_SHORT: moved it to utils.h
 *
 * Revision 1.2  1999/09/05 07:00:39  jimmy
 * Added RCS Log and Id strings to each source file
 *
 * Revision 1.1  1999/01/29 01:23:30  mud
 * Initial revision
 *
 ***************************************************************************/
@


1.33
log
@Changed mob speech and ask triggers to respond to all speech.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.32 2008/08/26 03:58:13 jps Exp jps $
d9 2
a10 2
 *  $Date: 2008/08/26 03:58:13 $                                           *
 *  $Revision: 1.32 $                                                       *
d72 1
a72 1
#define WTRIG_ENTER            (1 << 6)             /* character enters room      */
d74 1
d163 2
a164 1
int enter_wtrigger(struct room_data *room, struct char_data *actor, int dir);
d289 3
@


1.32
log
@Replaced real_zone calls with find_real_zone_by_room, since that's what it did.
Except the one for wzoneecho, since it needed to find a real zone by zone number.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.31 2008/08/15 04:56:34 jps Exp jps $
d9 2
a10 2
 *  $Date: 2008/08/15 04:56:34 $                                           *
 *  $Revision: 1.31 $                                                       *
d32 2
a33 2
#define MTRIG_COMMAND          (1 << 2)	     /* character types a command  */
#define MTRIG_SPEECH           (1 << 3)	     /* a char says a word/phrase  */
d42 2
a43 2
#define MTRIG_BRIBE	       (1 << 12)     /* coins are given to mob     */
#define MTRIG_ASK              (1 << 13)     /* ask/whisper                */
d51 2
a52 2
#define OTRIG_GLOBAL           (1 << 0)	     /* unused                     */
#define OTRIG_RANDOM           (1 << 1)	     /* checked randomly           */
d68 2
a69 2
#define WTRIG_RANDOM           (1 << 1)	     /* checked randomly           */
#define WTRIG_COMMAND          (1 << 2)	     /* character types a command  */
d72 1
a72 1
#define WTRIG_ENTER            (1 << 6)	     /* character enters room      */
d81 3
a83 3
#define OCMD_EQUIP             (1 << 0)	     /* obj must be in char's equip */
#define OCMD_INVEN             (1 << 1)	     /* obj must be in char's inven */
#define OCMD_ROOM              (1 << 2)	     /* obj must be in char's room  */
d85 2
a86 2
#define TRIG_NEW                0	     /* trigger starts from top     */
#define TRIG_RESTART            1	     /* trigger restarting          */
d91 1
a91 1
 * everything isnt happening at the same time 
d97 1
a97 1
					     recurse into each other */
d102 1
a102 1
  char *cmd;				/* one line of a trigger */
d108 3
a110 3
  char *name;				/* name of variable  */
  char *value;				/* value of variable */
  
d116 14
a129 14
    int nr;		                /* trigger's rnum                  */
    byte attach_type;			/* mob/obj/wld intentions          */
    byte data_type;		        /* type of game_data for trig      */
    char *name;			        /* name of trigger                 */
    long trigger_type;			/* type of trigger (for bitvector) */
    struct cmdlist_element *cmdlist;	/* top of command list             */
    struct cmdlist_element *curr_state;	/* ptr to current line of trigger  */
    int narg;				/* numerical argument              */
    char *arglist;			/* argument list                   */
    int depth;				/* depth into nest ifs/whiles/etc  */
    int loops;				/* loop iteration counter          */
    struct event *wait_event;	/* event to pause the trigger      */
    ubyte purged;			/* trigger is set to be purged     */
    ubyte running;			/* trigger is running              */
d131 3
a133 3
    struct trig_var_data *var_list;	/* list of local vars for trigger  */
    
    struct trig_data *next;  
d140 4
a143 4
  long types;				/* bitvector of trigger types */
  struct trig_data *trig_list;	        /* list of triggers           */
  struct trig_var_data *global_vars;	/* list of global variables   */
  ubyte purged;				/* script is set to be purged */
d145 1
a145 1
  struct script_data *next;		/* used for purged_scripts    */
d156 1
a156 1
         struct obj_data *target, char *arg);  
d158 1
a158 2
void ask_mtrigger(struct char_data *actor, struct char_data *ch, char *str);
void ask_speech_mtrigger(struct char_data *actor, struct char_data *ch, char *str);
d234 1
a234 1
#define GET_TRIG_VNUM(t)	  (trig_index[(t)->nr]->virtual)
d236 1
a236 1
#define GET_TRIG_DATA_TYPE(t)	  ((t)->data_type)
d239 2
a240 2
#define GET_TRIG_VARS(t)	  ((t)->var_list)
#define GET_TRIG_WAIT(t)	  ((t)->wait_event)
d246 1
a246 1
#define SCRIPT(o)		  ((o)->script)
d248 2
a249 2
#define SCRIPT_TYPES(s)		  ((s)->types)				  
#define TRIGGERS(s)		  ((s)->trig_list)
d253 1
a253 1
				  IS_SET(SCRIPT_TYPES(SCRIPT(go)), type))
d255 1
a255 1
				  !GET_TRIG_DEPTH(t))
d258 1
a258 1
			         sprintf(buf, "%c%ld", UID_CHAR, GET_ID(go)); \
d287 4
@


1.31
log
@Adding prototype for script_driver().
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.30 2008/06/05 02:07:43 myc Exp jps $
d8 3
a10 3
 *  $Author: myc $                                                         *
 *  $Date: 2008/06/05 02:07:43 $                                           *
 *  $Revision: 1.30 $                                                       *
d149 4
d288 3
@


1.30
log
@Adding read_trigger as a public function.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.29 2008/04/05 20:41:20 jps Exp myc $
d8 3
a10 3
 *  $Author: jps $                                                         *
 *  $Date: 2008/04/05 20:41:20 $                                           *
 *  $Revision: 1.29 $                                                       *
d278 2
d284 3
@


1.29
log
@Adding standard header ifdef.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.28 2008/04/05 19:42:51 jps Exp jps $
d9 2
a10 2
 *  $Date: 2008/04/05 19:42:51 $                                           *
 *  $Revision: 1.28 $                                                       *
d214 1
d282 3
@


1.28
log
@Add variable to trigger struct to store damage done by a *damage
command.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.27 2008/03/22 19:51:56 myc Exp jps $
d8 3
a10 3
 *  $Author: myc $                                                         *
 *  $Date: 2008/03/22 19:51:56 $                                           *
 *  $Revision: 1.27 $                                                       *
d20 3
d277 2
d281 4
@


1.27
log
@Rewrote the script formatter to use a stack.  It is now leet haxorz.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.26 2008/03/21 15:58:34 myc Exp myc $
d9 2
a10 2
 *  $Date: 2008/03/21 15:58:34 $                                           *
 *  $Revision: 1.26 $                                                       *
d127 1
d276 3
@


1.26
log
@Added a utility format scripts.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.25 2008/03/17 16:22:42 myc Exp myc $
d9 2
a10 2
 *  $Date: 2008/03/17 16:22:42 $                                           *
 *  $Revision: 1.25 $                                                       *
d218 1
a218 1
int format_script(struct descriptor_data *d, int indent_quantum);
d275 3
@


1.25
log
@Signature for free_proto_script changed.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.24 2008/02/24 17:31:13 myc Exp myc $
d9 2
a10 2
 *  $Date: 2008/02/24 17:31:13 $                                           *
 *  $Revision: 1.24 $                                                       *
d218 1
d275 3
@


1.24
log
@Added a TO_OLC flag to act() to allow messages to be sent to people
while in OLC if they have OLCComm toggled on.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.23 2008/02/16 20:26:04 myc Exp myc $
d9 2
a10 2
 *  $Date: 2008/02/16 20:26:04 $                                           *
 *  $Revision: 1.23 $                                                       *
d217 1
a217 1
void free_proto_script(void *thing, int type);
d274 4
@


1.23
log
@Adding free_trigger, free_var_list, and free_proto_script.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.22 2008/02/06 03:45:08 myc Exp myc $
d9 2
a10 2
 *  $Date: 2008/02/06 03:45:08 $                                           *
 *  $Revision: 1.22 $                                                       *
d24 1
a24 1
#define DG_NO_TRIG         256     /* don't check act trigger   */
d274 3
@


1.22
log
@Stat room and stat obj now use the pager.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.21 2008/02/04 00:22:05 myc Exp myc $
d9 2
a10 2
 *  $Date: 2008/02/04 00:22:05 $                                           *
 *  $Revision: 1.21 $                                                       *
d215 3
d274 3
@


1.21
log
@Making stat char use the pager.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.20 2008/02/02 04:27:55 myc Exp myc $
d9 2
a10 2
 *  $Date: 2008/02/02 04:27:55 $                                           *
 *  $Revision: 1.20 $                                                       *
d202 2
a203 2
void do_sstat_room(struct char_data * ch, struct room_data *rm);
void do_sstat_object(struct char_data * ch, struct obj_data * j);
d271 3
@


1.20
log
@Adding several new trigger types: cast, leave, door, time, load,
and consume.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.19 2008/01/29 21:02:31 myc Exp myc $
d9 2
a10 2
 *  $Date: 2008/01/29 21:02:31 $                                           *
 *  $Revision: 1.19 $                                                       *
d204 1
a204 1
void do_sstat_character(struct char_data * ch, struct char_data * k);
d271 4
@


1.19
log
@Removing a lot of extern declarations from code files and moving
them to header files, mostly db.h and constants.h.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.18 2008/01/15 06:49:52 myc Exp myc $
d9 2
a10 2
 *  $Date: 2008/01/15 06:49:52 $                                           *
 *  $Revision: 1.18 $                                                       *
d42 4
d52 10
a61 5
#define OTRIG_GET              (1 << 6)     /* item is picked up          */
#define OTRIG_DROP             (1 << 7)     /* character tries to drop obj */
#define OTRIG_GIVE             (1 << 8)     /* character tries to give obj */
#define OTRIG_WEAR             (1 << 9)     /* character tries to wear obj */
#define OTRIG_REMOVE           (1 << 11)    /* character tries to remove obj */
d68 1
a68 1

d71 4
d175 17
d214 1
d271 4
@


1.18
log
@When a mob had a trigger marked both ask and speech and the mob
was asked a question, that same trigger would be executed twice,
once as an ask trigger, and once as a speech trigger.  Fixed this
by going through the trigger list only once looking for ask or
speech triggers.  However, this isn't optimal--it should give
priority to ask triggers.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.17 2007/10/04 16:20:24 myc Exp myc $
d9 2
a10 2
 *  $Date: 2007/10/04 16:20:24 $                                           *
 *  $Revision: 1.17 $                                                       *
d226 12
d240 8
@


1.17
log
@Added object timer trigger.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.16 2007/08/31 05:36:19 jps Exp myc $
d8 3
a10 3
 *  $Author: jps $                                                         *
 *  $Date: 2007/08/31 05:36:19 $                                           *
 *  $Revision: 1.16 $                                                       *
d138 1
d228 3
@


1.16
log
@Add variable "destination" to mob Entry trigger.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.15 2007/08/30 19:42:46 jps Exp jps $
d9 2
a10 2
 *  $Date: 2007/08/30 19:42:46 $                                           *
 *  $Revision: 1.15 $                                                       *
d47 1
a47 1

d142 1
d227 3
@


1.15
log
@Cause *purge dg script commands to destroy all of a mobile's inventory
and equipment when purging mobs.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.14 2007/08/24 17:01:36 myc Exp jps $
d8 3
a10 3
 *  $Author: myc $                                                         *
 *  $Date: 2007/08/24 17:01:36 $                                           *
 *  $Revision: 1.14 $                                                       *
d140 1
a140 1
int entry_mtrigger(struct char_data *ch);
d226 4
@


1.14
log
@Adding ostat and mstat commands as shorthand for vstat, rstat for stat
room, and mnum and onum for vnum.  Also adding rnum and znum with new
functionality.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.13 2007/04/17 23:59:16 myc Exp myc $
d9 2
a10 2
 *  $Date: 2007/04/17 23:59:16 $                                           *
 *  $Revision: 1.13 $                                                       *
d181 1
d226 5
@


1.13
log
@New trigger type: Load.  It goes off any time a mobile is loaded, whether
it be god command, zone command, or trigger command.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.12 2006/12/08 05:06:58 myc Exp myc $
d9 2
a10 2
 *  $Date: 2006/12/08 05:06:58 $                                           *
 *  $Revision: 1.12 $                                                       *
d170 1
a170 1
void do_sstat_room(struct char_data * ch);
d225 4
@


1.12
log
@Bribe triggers now give proper amounts and variables.
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.11 2006/11/30 05:06:24 jps Exp myc $
d8 3
a10 3
 *  $Author: jps $                                                         *
 *  $Date: 2006/11/30 05:06:24 $                                           *
 *  $Revision: 1.11 $                                                       *
d41 1
d159 1
d225 3
@


1.11
log
@Add remove trigger for objects
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.10 2002/09/13 02:32:10 jjl Exp jps $
d8 3
a10 3
 *  $Author: jjl $                                                         *
 *  $Date: 2002/09/13 02:32:10 $                                           *
 *  $Revision: 1.10 $                                                       *
d150 1
a150 1
         int amount);
d223 3
@


1.10
log
@Updated header comments
@
text
@d2 1
a2 1
 * $Id: dg_scripts.h,v 1.9 2001/07/25 06:59:02 mtp Exp $
d8 3
a10 3
 *  $Author: mtp $                                                         *
 *  $Date: 2001/07/25 06:59:02 $                                           *
 *  $Revision: 1.9 $                                                       *
d48 4
a51 3
#define OTRIG_DROP             (1 << 7)     /* character trys to drop obj */
#define OTRIG_GIVE             (1 << 8)     /* character trys to give obj */
#define OTRIG_WEAR             (1 << 9)     /* character trys to wear obj */
d146 1
d223 3
@


1.9
log
@modified logging to hopefully be a bit more helpful by specifying the
trigger id wherever possible. This does not apply to logging of mob trigs yet
as mobs use the same commands as players :-(
@
text
@d1 3
a3 1
// $Id: dg_scripts.h,v 1.8 2000/11/28 01:16:25 mtp Exp $
d9 2
a10 2
 *  $Date: 2000/11/28 01:16:25 $                                           *
 *  $Revision: 1.8 $                                                       *
d219 35
a253 28
// $Log: dg_scripts.h,v $
// Revision 1.8  2000/11/28 01:16:25  mtp
// replaced dg_event code with events.c code
//
// Revision 1.7  2000/11/21 04:22:16  rsd
// Altered the comment header to look like what we have mostly
// and touched up the white space to make things look neater.
// Also added the missing initial revision rlog message.
//
// Revision 1.6  2000/11/11 12:03:42  mtp
// made function ask_mtrigger() void cos it doesnt return anything
//
// Revision 1.5  2000/11/11 01:38:18  mtp
// added ASK trigger for mobs
//
// Revision 1.4  2000/02/13 07:34:13  mtp
// fixed opurge/mpurge problems by not freeing the running
// trigger until it completes (added running flag to dg_scripts.h)
//
// Revision 1.3  1999/11/28 23:11:31  cso
// removed define for GET_SHORT: moved it to utils.h
//
// Revision 1.2  1999/09/05 07:00:39  jimmy
// Added RCS Log and Id strings to each source file
//
// Revision 1.1  1999/01/29 01:23:30  mud
// Initial revision
//
@


1.8
log
@replaced dg_event code with events.c code
@
text
@d1 1
a1 1
// $Id: dg_scripts.h,v 1.7 2000/11/21 04:22:16 rsd Exp $
d6 3
a8 3
 *  $Author: rsd $                                                         *
 *  $Date: 2000/11/21 04:22:16 $                                           *
 *  $Revision: 1.7 $                                                       *
d168 1
a168 1
void script_log(char *msg);
d218 3
@


1.7
log
@Altered the comment header to look like what we have mostly
and touched up the white space to make things look neater.
Also added the missing initial revision rlog message.
@
text
@d1 1
a1 1
// $Id: dg_scripts.h,v 1.6 2000/11/11 12:03:42 mtp Exp $
d6 3
a8 3
 *  $Author: mtp $                                                         *
 *  $Date: 2000/11/11 12:03:42 $                                           *
 *  $Revision: 1.6 $                                                       *
d107 1
a107 1
    struct event_info *wait_event;	/* event to pause the trigger      */
d218 5
@


1.6
log
@made function ask_mtrigger() void cos it doesnt return anything
@
text
@d1 16
a16 11
// $Id: dg_scripts.h,v 1.5 2000/11/11 01:38:18 mtp Exp mtp $
/**************************************************************************
*  File: scripts.h                                                        *
*  Usage: header file for script structures and contstants, and           *
*         function prototypes for scripts.c                               *
*                                                                         *
*                                                                         *
*  $Author: mtp $
*  $Date: 2000/11/11 01:38:18 $
*  $Revision: 1.5 $
**************************************************************************/
a23 1

d38 1
a38 1
#define MTRIG_ASK              (1 << 13)     /*ask/whisper*/
d65 2
a66 2
#define TRIG_NEW                0	     /* trigger starts from top  */
#define TRIG_RESTART            1	     /* trigger restarting       */
d109 1
a109 1
    ubyte running;			/* trigger is running     */
d120 1
a120 1
  struct trig_data *trig_list;	/* list of triggers           */
a127 1

a158 1

a209 2


d216 1
d218 3
d233 3
@


1.5
log
@added ASK trigger for mobs
@
text
@d1 1
a1 1
// $Id: dg_scripts.h,v 1.4 2000/02/13 07:34:13 mtp Exp $
d9 2
a10 2
*  $Date: 2000/02/13 07:34:13 $
*  $Revision: 1.4 $
d130 1
a130 1
int ask_mtrigger(struct char_data *actor, struct char_data *ch, char *str);
d217 3
@


1.4
log
@fixed opurge/mpurge problems by not freeing the running
trigger until it completes (added running flag to dg_scripts.h)
@
text
@d1 1
a1 1
// $Id: dg_scripts.h,v 1.3 1999/11/28 23:11:31 cso Exp mtp $
d8 3
a10 3
*  $Author: cso $
*  $Date: 1999/11/28 23:11:31 $
*  $Revision: 1.3 $
d34 1
d130 1
d217 4
@


1.3
log
@removed define for GET_SHORT: moved it to utils.h
@
text
@d1 1
a1 1
// $Id: dg_scripts.h,v 1.2 1999/09/05 07:00:39 jimmy Exp cso $
d8 3
a10 3
*  $Author: jimmy $
*  $Date: 1999/09/05 07:00:39 $
*  $Revision: 1.2 $
d104 1
d215 3
@


1.2
log
@Added RCS Log and Id strings to each source file
@
text
@d1 1
a1 1
// $Id$
d8 3
a10 3
*  $Author: mud $
*  $Date: 1999/01/29 01:23:30 $
*  $Revision: 1.1 $
a193 2
#define GET_SHORT(ch)    ((ch)->player.short_descr)

d213 4
a216 1
// $Log$
@


1.1
log
@Initial revision
@
text
@d1 1
d8 3
a10 3
*  $Author: egreen $
*  $Date: 1996/09/24 03:48:42 $
*  $Revision: 3.6 $
d215 1
@
