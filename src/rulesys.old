/***************************************************************************
 *   File: rulesys.c                                      Part of FieryMUD *
 *  Usage: character rules infrastructure                                  *
 *                                                                         *
 *  All rights reserved.  See license.doc for complete information.        *
 *                                                                         *
 *  FieryMUD Copyright (C) 1998, 1999, 2000 by the Fiery Consortium        *
 *  FieryMUD is based on CircleMUD Copyright (C) 1993, 94 by the Trustees  *
 *  of the Johns Hopkins University                                        *
 *  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
 ***************************************************************************/
#ifdef __OLD_CODE_DO_NOT_USE__
#include "conf.hpp"
#include "rules.hpp"
#include "structs.hpp"
#include "sysdep.hpp"
#include "utils.hpp"

static size_t vtable_count = 0;
static RuleVTable **vtables = nullptr;

void register_rule_vtable(RuleVTable *vtable) {
    size_t pos, i;
    bool swap;

    if ((pos = vtable_count++)) /* post-increment! */
        RECREATE(vtables, RuleVTable *, vtable_count);
    else
        CREATE(vtables, RuleVTable *, vtable_count);

    vtables[pos] = vtable;

    /* sort */
    ++pos;
    do {
        swap = false;
        --pos;
        for (i = 0; i < pos; ++i)
            if (strcasecmp(vtables[i]->name, vtables[i + 1]->name) > 0) {
                vtable = vtables[i];
                vtables[i] = vtables[i + 1];
                vtables[i + 1] = vtable;
                swap = true;
            }
    } while (swap);
}

RuleVTable *find_rule_vtable(const char *type) {
    size_t last = vtable_count - 1;
    size_t first = 0, mid;
    int comp;

    if (vtable_count == 0)
        return nullptr;

    while (first <= last) {
        mid = (first + last) / 2;
        comp = strcasecmp(type, vtables[mid]->name);
        if (comp > 0)
            first = mid + 1; /* search top half */
        else if (comp < 0) {
            if (mid == 0)
                return nullptr; /* avoid last == -1 */
            last = mid - 1;     /* search bottom half */
        } else
            return vtables[mid];
    }

    return nullptr;
}

Rule *rulealloc(size_t elsize, RuleVTable *vtable) {
    Rule *rule = (Rule *)calloc(1, elsize);
    rule->_vtable = vtable;
    return *rule;
}

Rule *parse_rule(const char *str) {
    RuleVTable *vtable;
    char type[MAX_INPUT_LENGTH];
    char *ptr = type;

    str = skip_over(str, S_WHITESPACE);
    while (*str && !isspace(*str))
        *(ptr++) = *(str++);
    *ptr = '\0';
    str = skip_over(str, S_WHITESPACE);

    if (!(vtable = find_rule_vtable(type)))
        return nullptr;

    return vtable->parse(str);
}

void sprint_rule(char *buf, size_t size, Rule *rule) {
    if (rule) {
        size_t len = snprintf(buf, size, "%s ", rule->_vtable->name);
        if (len < size)
            (rule->_vtable->print)(buf + len, size - len, rule);
    } else
        snprintf(buf, size, "NULL");
}

#endif